import{_ as u,a as d,b as k,c as r,d as v,e as m}from"./include6-a35d4cca.js";import{_ as b}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as h,c as y,b as n,d as s,e as c,w as a,f as o}from"./app-a5b564ea.js";const f={},g=o(`<p><code>easy-query</code> 1.2.1+ 支持关联查询,支持多级关联查询,并且只支持first和tolist两个返回方法,支持vo对象返回支持<code>include</code>追加追踪、禁止、逻辑删除、where过滤、order、limit等一系列处理，但是返回结果必须是数据库对象实例(include方法内部),如果需要额外字段返回可以使用<code>columnInclude</code>/<code>columnIncludeMany</code>自定义返回</p><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p><code>OneToOne</code>和<code>ManyToOne</code>有着天然的区别,比如每条记录都有一个创建人id,如果你添加创建人关系对象到记录对象里面,那么应该设置<code>ManyToOne</code>表示多条记录都会有这个创建人,而不是<code>OneToOne</code>，如果您设置<code>OneToOne</code>那么如果2条记录有相同的创建人则只会有一个创建人被关联上,具体可以反向推导比如一个人有多少条记录很明显是<code>OneToMany</code>那么反过来就是<code>ManyToOne</code></p></blockquote></div><table><thead><tr><th>类型</th><th>描述</th><th>场景</th></tr></thead><tbody><tr><td>OneToOne</td><td>一对一</td><td>学生和学生家庭信息</td></tr><tr><td>OneToMany</td><td>一对多</td><td>班级和学生</td></tr><tr><td>ManyToOne</td><td>多对一</td><td>学生和班级</td></tr><tr><td>ManyToMany</td><td>多对多</td><td>班级和老师</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SchoolClass</span><span class="token punctuation">&gt;</span></span> classes <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">SchoolClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                        <span class="token comment">//查询班级并且连带查询每个班级最先入学的前5位学生</span>
                        <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">schoolStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">-&gt;</span>x<span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>u<span class="token operator">-&gt;</span>u<span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),w={class:"hint-container tip"},_=n("p",{class:"hint-container-title"},"感谢!!!",-1),S={href:"https://gitee.com/gollyhu",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"糊搞",-1),O=o('<h3 id="一对一说明" tabindex="-1"><a class="header-anchor" href="#一对一说明" aria-hidden="true">#</a> 一对一说明</h3><img src="'+u+'"><h3 id="多对一说明" tabindex="-1"><a class="header-anchor" href="#多对一说明" aria-hidden="true">#</a> 多对一说明</h3><img src="'+d+'"><h3 id="一对多说明" tabindex="-1"><a class="header-anchor" href="#一对多说明" aria-hidden="true">#</a> 一对多说明</h3><img src="'+k+'"><h3 id="多对多说明" tabindex="-1"><a class="header-anchor" href="#多对多说明" aria-hidden="true">#</a> 多对多说明</h3><img src="'+r+'"><h3 id="多次include" tabindex="-1"><a class="header-anchor" href="#多次include" aria-hidden="true">#</a> 多次include</h3><img src="'+v+'"><h3 id="多关联查询" tabindex="-1"><a class="header-anchor" href="#多关联查询" aria-hidden="true">#</a> 多关联查询</h3><img src="'+m+`"><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p><code>include</code> 内部属于独立查询,如果您需要差异更新并且没有配置默认启动追踪查询那么需要独立进行<code>asTracking()</code>等,include的后one或者many的第二个参数表示以多少关联属性为一组进行获取</p></blockquote></div><p>对象模式<code>include/includes</code>参数说明 其中如果您的导航属性是<code>ToOne</code>那么请使用<code>include</code>如果是<code>ToMany</code>那么是<code>includes</code></p><p>包含的两个参数第一个参数表示你要返回的导航属性,第二个参数表示对返回导航属性如何进行增强</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SchoolClass</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">SchoolClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token comment">//表示查询学校班级的同时附带查询出班级的老师</span>
                <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">schoolTeachers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">//查询学校班级的同时附带查询出班级的学生(这个学生是每个班级年龄最大的三个)并且返回的学生也需要返回学生地址</span>
                <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">schoolStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                    x<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>y<span class="token operator">-&gt;</span>y<span class="token punctuation">.</span><span class="token function">schoolStudentAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>y<span class="token operator">-&gt;</span>y<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    s<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;一班&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),j=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},">")]),s(" list "),n("span",{class:"token operator"},"="),s(" easyEntityQuery"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queryable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token comment"},"//一对一查询启用追踪并且对子查询逻辑删除禁用"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"include"),n("span",{class:"token punctuation"},"("),s("o "),n("span",{class:"token operator"},"->"),s(" o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"schoolClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s("q"),n("span",{class:"token operator"},"->"),s("q"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"asNoTracking"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"disableLogicDelete"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`


`),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},">")]),s(" list2 "),n("span",{class:"token operator"},"="),s(" easyEntityQuery"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queryable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token comment"},"//一对一查询启用追踪并且对子查询逻辑删除禁用"),s(`
        `),n("span",{class:"token comment"},"//如果查询学生有20个以上假如21个那么会先用20个id进行in查询,再用1个id进行查询最后进行合并"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"include"),n("span",{class:"token punctuation"},"("),s("o "),n("span",{class:"token operator"},"->"),s(" o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"schoolClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[s("  "),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},">")]),s(" list1 "),n("span",{class:"token operator"},"="),s(" easyQuery"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queryable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
                        `),n("span",{class:"token comment"},"//一对一查询启用追踪并且对子查询逻辑删除禁用"),s(`
                        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"include"),n("span",{class:"token punctuation"},"("),s("o "),n("span",{class:"token operator"},"->"),s(" o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"one"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"getSchoolStudentAddress"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"asTracking"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"disableLogicDelete"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
                        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`


  `),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},">")]),s(" list1 "),n("span",{class:"token operator"},"="),s(" easyQuery"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queryable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
                        `),n("span",{class:"token comment"},"//一对一查询启用追踪并且对子查询逻辑删除禁用"),s(`
                        `),n("span",{class:"token comment"},"//如果查询学生有20个以上假如21个那么会先用20个id进行in查询,再用1个id进行查询最后进行合并"),s(`
                        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"include"),n("span",{class:"token punctuation"},"("),s("o "),n("span",{class:"token operator"},"->"),s(" o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"one"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token operator"},"::"),n("span",{class:"token function"},"getSchoolStudentAddress"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
                        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[s("  "),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},">")]),s(" list1 "),n("span",{class:"token operator"},"="),s(" easyQueryClient"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queryable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
                        `),n("span",{class:"token comment"},"//一对一查询启用追踪并且对子查询逻辑删除禁用"),s(`
                        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"include"),n("span",{class:"token punctuation"},"("),s("o "),n("span",{class:"token operator"},"->"),s(" o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"with"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"schoolStudentAddress"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"asTracking"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"disableLogicDelete"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
                        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`


  `),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},">")]),s(" list1 "),n("span",{class:"token operator"},"="),s(" easyQueryClient"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queryable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SchoolStudent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
                        `),n("span",{class:"token comment"},"//一对一查询启用追踪并且对子查询逻辑删除禁用"),s(`
                        `),n("span",{class:"token comment"},"//如果查询学生有20个以上假如21个那么会先用20个id进行in查询,再用1个id进行查询最后进行合并"),s(`
                        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"include"),n("span",{class:"token punctuation"},"("),s("o "),n("span",{class:"token operator"},"->"),s(" o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"with"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"schoolStudentAddress"'),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
                        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=o('<h2 id="忽略关联查询的value" tabindex="-1"><a class="header-anchor" href="#忽略关联查询的value" aria-hidden="true">#</a> 忽略关联查询的value</h2><p><code>eq</code>默认关联查询是使用<code>selfProperty</code>的值对目标属性的表进行二次关联查询,默认情况下<code>selfProperty</code>的值为<code>null</code>则不会对目标属性进行再次查询,那么有时候我们数据库可能存在其他值，在表现形式上等同于null，比如字符串<code>-</code>,<code>/</code>,或者空字符串,那么对于二次查询其实没有任何意义,那么我们应该如何去替换让框架支持呢。</p>',2),x={href:"https://github.com/dromara/easy-query/issues/302",target:"_blank",rel:"noopener noreferrer"},L=o(`<p>首先我们需要替换<code>RelationValueFactory</code>这个接口</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>RelationValue</td><td>创建一个可比较的关联值</td></tr></tbody></table><p>我们再来看其默认实现<code>DefaultRelationValueFactory</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRelationValueFactory</span> <span class="token keyword">implements</span> <span class="token class-name">RelationValueFactory</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RelationValue</span> <span class="token function">createRelationValue</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleRelationValue</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MultiRelationValue</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="relationvalue" tabindex="-1"><a class="header-anchor" href="#relationvalue" aria-hidden="true">#</a> RelationValue</h3><p>其中<code>RelationValue</code>的返回是我们需要注意的</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>isNull</td><td>用来判断这次的关系值是否可以用来作为下一次的查询条件返回true表示需要被过滤</td></tr><tr><td>getValues</td><td>返回其内部的值</td></tr></tbody></table><table><thead><tr><th>实现</th><th>作用</th></tr></thead><tbody><tr><td>SingleRelationValue</td><td>当且仅当selfProperty为长度为1或者空(主键情况)的数组时才会使用当前对象，比如:selfProperty=[&quot;id&quot;]那么value为id的值</td></tr><tr><td>MultiRelationValue</td><td>当且仅当selfProperty为长度大于1的数组时才会使用当前对象，比如:selfProperty=[&quot;id&quot;,&quot;username&quot;]那么values[0]为id的值,values[1]为username的值</td></tr></tbody></table><h3 id="替换" tabindex="-1"><a class="header-anchor" href="#替换" aria-hidden="true">#</a> 替换</h3><p>我们需要对<code>RelationValue</code>的两个方法进行替换成我们自己的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//用于单值比较</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySingleRelationValue</span> <span class="token keyword">implements</span> <span class="token class-name">RelationValue</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MySingleRelationValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//横岗也需要被过滤</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">MySingleRelationValue</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MySingleRelationValue</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;SingleRelationValue{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;value=&quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>



<span class="token comment">//用于多值比较</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMultiRelationValue</span> <span class="token keyword">implements</span> <span class="token class-name">RelationValue</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyMultiRelationValue</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> values<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> values<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 当且仅当values中的有任意元素是null时返回true
     * 如果你认为例子中的id或者username有其他不符合就可以直接忽略可以使用重写该类来替换掉默认行为
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">EasyCollectionUtil</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> o <span class="token operator">-&gt;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">MyMultiRelationValue</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyMultiRelationValue</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> that<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;MultiRelationValue{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;values=&quot;</span> <span class="token operator">+</span> values <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefaultRelationValueFactory</span> <span class="token keyword">implements</span> <span class="token class-name">RelationValueFactory</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RelationValue</span> <span class="token function">createRelationValue</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MySingleRelationValue</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyMultiRelationValue</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最后替换服务即可" tabindex="-1"><a class="header-anchor" href="#最后替换服务即可" aria-hidden="true">#</a> 最后替换服务即可</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">replaceService</span><span class="token punctuation">(</span><span class="token class-name">RelationValueFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MyDefaultRelationValueFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="navigate" tabindex="-1"><a class="header-anchor" href="#navigate" aria-hidden="true">#</a> Navigate</h2><table><thead><tr><th>属性</th><th>是否必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td><code>true</code></td><td>-</td><td>表示当前对象和目标对象的关系<code>RelationTypeEnum</code>枚举</td></tr><tr><td>selfProperty</td><td><code>false</code></td><td>-</td><td>当前对象的哪个属性关联目标对象,空表示使用当前对象的主键</td></tr><tr><td>targetProperty</td><td><code>false</code></td><td>-</td><td>当前对象的<code>selfProperty</code>属性关联目标的哪个属性,空表示使用目标对象的主键</td></tr><tr><td>mappingClass</td><td><code>false</code></td><td>Object.class</td><td>中间表对象,必须是表对象实体字节</td></tr><tr><td>selfMappingProperty</td><td><code>false</code>多对多必填</td><td>-</td><td>当前对象的<code>selfProperty</code>属性对应中间表的哪个属性,多对多不能为空</td></tr><tr><td>targetMappingProperty</td><td><code>false</code>多对多必填</td><td>-</td><td>目标对象的<code>targetProperty</code>属性对应中间表的哪个属性,多对多不能为空</td></tr><tr><td>orderByProps</td><td><code>false</code></td><td>-</td><td>默认的子对象排序行为(建议ToMany设置)</td></tr><tr><td>offset</td><td><code>false</code></td><td>0</td><td>子对象拉取偏移量(建议ToMany设置)</td></tr><tr><td>limit</td><td><code>false</code></td><td>0</td><td>子对象拉取量(建议ToMany设置)</td></tr><tr><td>extraFilter</td><td><code>false</code></td><td>Def.class</td><td>子对象条件额外条件比如班级和学生额外可以再多两个属性男学生和女学生，则可以通过该属性进行分类</td></tr></tbody></table><h2 id="更多案例" tabindex="-1"><a class="header-anchor" href="#更多案例" aria-hidden="true">#</a> 更多案例</h2><p><a href="/easy-query-doc/examples/include-example">点击查看更多案例</a></p>`,17);function T(C,P){const p=l("ExternalLinkIcon"),i=l("CodeTabs");return h(),y("div",null,[g,n("div",w,[_,n("blockquote",null,[n("p",null,[s("以下关系图有网友 "),n("a",S,[q,c(p)]),s(" 大佬提供十分感谢")])])]),O,c(i,{id:"117",data:[{id:"对象模式"},{id:"lambda模式"},{id:"属性模式"}]},{title0:a(({value:t,isActive:e})=>[s("对象模式")]),title1:a(({value:t,isActive:e})=>[s("lambda模式")]),title2:a(({value:t,isActive:e})=>[s("属性模式")]),tab0:a(({value:t,isActive:e})=>[j]),tab1:a(({value:t,isActive:e})=>[V]),tab2:a(({value:t,isActive:e})=>[M]),_:1}),R,n("p",null,[s("这次的内容主要在"),n("a",x,[s("这个连接中"),c(p)])]),L])}const F=b(f,[["render",T],["__file","relation.html.vue"]]);export{F as default};

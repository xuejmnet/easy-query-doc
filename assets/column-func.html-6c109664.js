import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,f as p,e as n}from"./app-e5037745.js";const e={},o=n('<h1 id="自定义数据库函数" tabindex="-1"><a class="header-anchor" href="#自定义数据库函数" aria-hidden="true">#</a> 自定义数据库函数</h1><p>目前框架未提供相应的数据库函数,仅提供了count,sum,min,max等</p><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p>目前不是很建议看这一章节,因为当前的函数设计只适合单个属性的处理,并且过于繁琐,所以建议使用<code>sqlNativeSegment</code>或者<code>SqlFunction</code>来实现数据库方言自定义</p></blockquote></div><p><a href="/easy-query-doc/guide/query/native-sql"><code>sqlNativeSegment</code></a></p><p><a href="/easy-query-doc/guide/adv/column-func-new"><code>自定义数据库函数(新)</code></a></p>',5),c=n(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> IFNULL<span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>url<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">\`</span>url<span class="token punctuation">\`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>t_blog<span class="token punctuation">\`</span></span> t <span class="token keyword">WHERE</span> t<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>deleted<span class="token punctuation">\`</span></span> <span class="token operator">=</span> ?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加入我们要实现这么一个数据库语句,那么我们应该如何实现,接下来我们将使用<code>easy-query</code>的<code>column-func</code>能力实现单列的数据库函数</p><h2 id="ifnull编写" tabindex="-1"><a class="header-anchor" href="#ifnull编写" aria-hidden="true">#</a> IFNULL编写</h2><h3 id="columnpropertyfunction" tabindex="-1"><a class="header-anchor" href="#columnpropertyfunction" aria-hidden="true">#</a> ColumnPropertyFunction</h3><p>easy-qeury 的column func接口</p><table><thead><tr><th>方法</th><th>参数/返回结果</th><th>说明</th></tr></thead><tbody><tr><td>getColumnFunction</td><td>参数无,返回结果为<code>ColumnFunction</code>接口</td><td>用来获取具体的列方法</td></tr><tr><td>getPropertyName</td><td>参数无,返回结果为属性名也就是列所对应的属性</td><td>用来获取针对那个属性进行方法处理</td></tr></tbody></table><h3 id="columnfunction" tabindex="-1"><a class="header-anchor" href="#columnfunction" aria-hidden="true">#</a> ColumnFunction</h3><table><thead><tr><th>方法</th><th>参数/返回结果</th><th>说明</th></tr></thead><tbody><tr><td>getFuncColumn</td><td>参数:列名(添加方言了的),返回结果为数据库片段</td><td>用来包装数据库片段</td></tr><tr><td>getAggregationType</td><td>参数无,返回结果为当前方法的聚合类型</td><td>针对分表分库时有效</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IFNULLColumnFunction</span> <span class="token keyword">implements</span> <span class="token class-name">ColumnFunction</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">IFNULLColumnFunction</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;IFNULLColumnFunction value is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFuncColumn</span><span class="token punctuation">(</span><span class="token class-name">String</span> column<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span>  <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> valueString <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">EasyStringUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>valueString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;IFNULL(%s,&#39;&#39;)&quot;</span><span class="token punctuation">,</span> column<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;IFNULL(%s,&#39;%s&#39;)&quot;</span><span class="token punctuation">,</span> column<span class="token punctuation">,</span> valueString<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;IFNULL(%s,%s)&quot;</span><span class="token punctuation">,</span> column<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AggregationType</span> <span class="token function">getAggregationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">AggregationType</span><span class="token punctuation">.</span><span class="token constant">UNKNOWN</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//创建一个mysql的属性方法包装</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MyColumnPropertyFunction</span> <span class="token keyword">implements</span> <span class="token class-name">ColumnPropertyFunction</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> propertyName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ColumnFunction</span> columnFunction<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyColumnPropertyFunction</span><span class="token punctuation">(</span><span class="token class-name">String</span> propertyName<span class="token punctuation">,</span> <span class="token class-name">ColumnFunction</span> columnFunction<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>propertyName <span class="token operator">=</span> propertyName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>columnFunction <span class="token operator">=</span> columnFunction<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ColumnFunction</span> <span class="token function">getColumnFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> columnFunction<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> propertyName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SQLFunc</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ColumnPropertyFunction</span> <span class="token function">ifNULL</span><span class="token punctuation">(</span><span class="token class-name">Property</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> column<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> propertyName <span class="token operator">=</span> <span class="token class-name">EasyLambdaUtil</span><span class="token punctuation">.</span><span class="token function">getPropertyName</span><span class="token punctuation">(</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyColumnPropertyFunction</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IFNULLColumnFunction</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token class-name">Queryable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BlogEntityTest</span><span class="token punctuation">&gt;</span></span> queryable <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">BlogEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">BlogEntityTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">columnFuncAs</span><span class="token punctuation">(</span><span class="token class-name">SQLFunc</span><span class="token punctuation">.</span><span class="token function">ifNULL</span><span class="token punctuation">(</span><span class="token class-name">BlogEntity</span><span class="token operator">::</span><span class="token function">getUrl</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BlogEntityTest</span><span class="token operator">::</span><span class="token function">getUrl</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> queryable<span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// SELECT IFNULL(t.\`url\`,&#39;&#39;) AS \`url\` FROM \`t_blog\` t WHERE t.\`deleted\` = ?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然您还可以随意扩展</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//ifnull额外参数等</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ColumnPropertyFunction</span> <span class="token function">ifNULLOrDefault</span><span class="token punctuation">(</span><span class="token class-name">Property</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> column<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> propertyName <span class="token operator">=</span> <span class="token class-name">EasyLambdaUtil</span><span class="token punctuation">.</span><span class="token function">getPropertyName</span><span class="token punctuation">(</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyColumnPropertyFunction</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IFNULLColumnFunction</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p><code>ColumnPropertyFunction</code>、<code>ColumnFunction</code>的组合仅支持单个数据库列字段的处理,如果需要支持多个数据库字段,请看<a href="/easy-query-doc/guide/adv/sql-segment">《自定义数据库片段》</a></p></blockquote></div>`,12);function l(u,i){return a(),t("div",null,[o,p(" [`SqlFunction`]() "),c])}const d=s(e,[["render",l],["__file","column-func.html.vue"]]);export{d as default};

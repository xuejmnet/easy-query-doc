import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as a,o as s}from"./app-m4uaPpdH.js";const d={};function n(i,e){return s(),r("div",null,e[0]||(e[0]=[a('<p><code>eq</code> provides rich subquery functionality, including implicit subqueries and manual subqueries, and subqueries also support unlimited nesting to implement any SQL functionality</p><ul><li>Implicit subqueries (must read) üî• Can quickly write subqueries based on object relationships, compared to manual subquery writing, development efficiency has a qualitative leap</li><li>Manual subqueries Can quickly mock based on SQL expressions to achieve the same functionality</li></ul><p>Implicit subqueries use <code>LEFT JOIN</code> by default to ensure data accuracy. If you think the sub-item must exist, you can use <code>@Navigate(required=true)</code> so that the framework will use <code>INNER JOIN</code> instead of <code>LEFT JOIN</code> when the sub-item must exist</p><div class="hint-container caution"><p class="hint-container-title">Note!!!</p><blockquote><p>There are two ways to create manual subqueries: one is to create a queryable with <code>eq instance</code>, the other is through <code>expression().subQueryable()</code> inside the expression. When using them, we should try to use the context to create subquery expressions. The difference is that expressions created by <code>eq instance</code> must have the subquery as the left table rather than the outer table as the left table, while <code>expression().subQueryable()</code> created subqueries do not need to consider this problem</p></blockquote></div><h2 id="implicit-subquery-assertion-api" tabindex="-1"><a class="header-anchor" href="#implicit-subquery-assertion-api"><span>Implicit subquery assertion api</span></a></h2><table><thead><tr><th>Subquery</th><th>api type</th></tr></thead><tbody><tr><td>select subquery</td><td>Type fragment</td></tr><tr><td>where subquery</td><td>Execution fragment</td></tr><tr><td>join subquery</td><td>Expression fragment</td></tr><tr><td>from subquery</td><td>Expression fragment</td></tr></tbody></table><h2 id="implicit-subquery-assertion-api-1" tabindex="-1"><a class="header-anchor" href="#implicit-subquery-assertion-api-1"><span>Implicit subquery assertion api</span></a></h2><table><thead><tr><th>api</th><th>Description</th></tr></thead><tbody><tr><td>any(expression)</td><td>Indicates at least one that meets the condition, simply understood as <code>exists</code></td></tr><tr><td>none(expression)</td><td>Indicates none that meet the condition, simply understood as <code>no exists</code></td></tr><tr><td>all(expression)</td><td>It means that all elements in the preceding collection must satisfy the conditions inside all. If the preceding collection is empty, the result defaults to true.</td></tr><tr><td>where(expression)</td><td>Add conditions to the subquery</td></tr><tr><td>orderBy(expression)</td><td>Sort the subquery, commonly used with elements</td></tr><tr><td>firstElement()</td><td>Get the first element of the subquery</td></tr><tr><td>element(index)</td><td>Get the nth element of the subquery, the first index value is 0</td></tr><tr><td>elements(start,end)</td><td>Get a part of the subquery, the first index value is 0</td></tr><tr><td>flatElement()</td><td>Expand the subquery, adding conditions after it is equivalent to a shorthand for <code>any</code></td></tr><tr><td>configure(expression)</td><td>Used to configure subquery related parameters such as whether to enable logical delete etc.</td></tr><tr><td>distinct()</td><td>Deduplicate results, such as <code>bankCards().distinct().count(x-&gt;x.type())</code></td></tr><tr><td>anyValue()</td><td>Return true/false whether it exists</td></tr><tr><td>noneValue()</td><td>Return true/false whether it exists</td></tr><tr><td>count()</td><td>Count the number of results</td></tr><tr><td>sum(expression)</td><td>Sum the results, parameter is the column expression to count <code>bankCards().sum(card-&gt;card.amount())</code> sum the balance of each bank card</td></tr><tr><td>avg(expression)</td><td>Average the results</td></tr><tr><td>max(expression)</td><td>Get the maximum value of the results</td></tr><tr><td>min(expression)</td><td>Get the minimum value of the results</td></tr><tr><td>joining(expression)</td><td>Combine results into one column</td></tr></tbody></table><h2 id="implicit-subquery-related-api" tabindex="-1"><a class="header-anchor" href="#implicit-subquery-related-api"><span>Implicit subquery related api</span></a></h2><table><thead><tr><th>api</th><th>Description</th></tr></thead><tbody><tr><td><code>user-&gt;user.bankCards().any()</code></td><td>User has at least one bank card</td></tr><tr><td><code>user-&gt;user.bankCards().none()</code></td><td>User has no bank cards at all</td></tr><tr><td><code>user-&gt;user.bankCards().all(bc-&gt;bc.type().eq(&quot;savings card&quot;))</code></td><td>All of the user‚Äôs bank cards are savings card. If the user has no bank cards, the user will still be included in the query.</td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;savings card&quot;)).any()</code></td><td>User has at least one savings card among their bank cards</td></tr><tr><td><code>user-&gt;user.bankCards().any(card-&gt;card.type().eq(&quot;savings card&quot;))</code></td><td>User has at least one savings card among their bank cards, <code>where+any</code> can be abbreviated as <code>any</code></td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;savings card&quot;)).none()</code></td><td>User has no savings cards among their bank cards</td></tr><tr><td><code>user-&gt;user.bankCards().none(card-&gt;card.type().eq(&quot;savings card&quot;))</code></td><td>User has no savings cards among their bank cards, <code>where+none</code> can be abbreviated as <code>none</code></td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;savings card&quot;)).count()</code></td><td>Number of savings cards the user has, supports assertions</td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;savings card&quot;)).count().eq(1L)</code></td><td>User has exactly 1 savings card</td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;savings card&quot;)).elements(0,1).none(card-&gt;card.bank().name().eq(&quot;Âª∫ËÆæÈì∂Ë°å&quot;))</code></td><td>User&#39;s first two bank cards are not from China Construction Bank</td></tr></tbody></table>',10)]))}const c=t(d,[["render",n]]),l=JSON.parse('{"path":"/en/sub-query/","title":"Subquery Chapters","lang":"en-US","frontmatter":{"title":"Subquery Chapters","description":"eq provides rich subquery functionality, including implicit subqueries and manual subqueries, and subqueries also support unlimited nesting to implement any SQL functionality Im...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Subquery Chapters\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-27T14:00:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/en/sub-query/"}],["meta",{"property":"og:site_name","content":"Documentation"}],["meta",{"property":"og:title","content":"Subquery Chapters"}],["meta",{"property":"og:description","content":"eq provides rich subquery functionality, including implicit subqueries and manual subqueries, and subqueries also support unlimited nesting to implement any SQL functionality Im..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-27T14:00:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-27T14:00:17.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://github.com/dromara/easy-query/easy-query-doc/sub-query/"}]]},"git":{"createdTime":1761500387000,"updatedTime":1761573617000,"contributors":[{"name":"Âè™ÊòØÊàë","username":"","email":"alice@example.com","commits":1},{"name":"xuejiaming","username":"xuejiaming","email":"326308290@qq.com","commits":1,"url":"https://github.com/xuejiaming"}]},"readingTime":{"minutes":2.17,"words":650},"filePathRelative":"en/sub-query/README.md","autoDesc":true}');export{c as comp,l as data};

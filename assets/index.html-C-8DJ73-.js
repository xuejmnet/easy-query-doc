import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,o as a}from"./app-TzcVaP9m.js";const s={};function o(l,n){return a(),t("div",null,[i(` 

这是项目主页的案例。你可以在这里放置你的主体内容。

想要使用此布局，你需要在页面 front matter 中设置 \`home: true\`。

配置项的相关说明详见 [项目主页配置](https://theme-hope.vuejs.press/zh/guide/layout/home/)。 `)])}const g=e(s,[["render",o]]),d=JSON.parse(`{"path":"/","title":"项目主页","lang":"zh-CN","frontmatter":{"home":true,"icon":"house","title":"项目主页","heroFullScreen":true,"heroImage":"/images/logo.svg","bgImage":"/images/bg/6-light.svg","bgImageDark":"/images/bg/6-dark.svg","bgImageStyle":{"background-attachment":"fixed"},"heroText":"easy-query","tagline":"🚀 java下最强ORM没有之一(支持kotlin)</br><span class=\\"vuepress_typed\\"></span>","actions":[{"text":"开始使用 →","icon":"lightbulb","link":"./startup/what-is-easy-query","type":"primary"},{"text":"爱心支持💡","link":"./support"}],"highlights":[{"header":"隐式查询","image":"/assets/image/features.svg","bgImage":"/easy-query-doc/images/bg/1-light.svg","bgImageDark":"/easy-query-doc/images/bg/1-dark.svg","highlights":[{"title":"隐式join","icon":"network-wired","details":"OneToOne、ManyToOne 自动实现join查询筛选、排序和结果获取"},{"title":"隐式子查询","icon":"comment-dots","details":"OneToMany、ManyToMany 自动实现子查询查询筛选、排序和聚合函数结果获取"},{"title":"隐式分组","icon":"circle-info","details":"OneToMany、ManyToMany 自动实现子查询优化合并将多个子查询合并成一个分组查询支持筛选、排序和聚合函数结果获取"},{"title":"隐式分区分组","icon":"lock","details":"OneToMany、ManyToMany 自动实现第一个、第N个数据的筛选、排序和聚合函数结果获取"},{"title":"隐式CASE WHEN","icon":"code","details":"属性.聚合函数.筛选，o.age().sum().filter(()->o.name().like(\\"123\\"))"}]},{"header":"功能","description":"一套完整的针对jdbc的关系型数据库查询解决方案","bgImage":"/easy-query-doc/images/bg/2-light.svg","bgImageDark":"/easy-query-doc/images/bg/2-dark.svg","bgImageStyle":{"background-repeat":"repeat","background-size":"initial"},"features":[{"title":"code-first","icon":"clipboard-check","details":"基于对象实体的数据库表结构快速生成与维护的解决方案"},{"title":"优雅的对象关系","icon":"box-archive","details":"完美的将dsl和对象关系结合做到点点点即可实现数据库的数据库查询操作"},{"title":"任意sql片段","icon":"bell","details":"支持在dsl中穿插任意sql片段来保证各种个性化sql的实现"},{"title":"基于POJO","icon":"table-columns","details":"框架基于POJO实现与数据库之间的访问,可以保证与市面上大部分ORM兼容一套对象代码"},{"title":"零依赖","icon":"code","details":"框架本身基于java8和org.jetbrains.annotations(编译时)真正做到了零依赖,完全基于jdbc的高性能开发orm完全自主可控"},{"title":"一套dsl","icon":"align-center","details":"使用优雅的dsl将多个数据库方案进行高度抽象为'类'java方法,用户只需要一套代码便可在多个数据库之间运行"},{"title":"低学习成本","icon":"code","details":"实现'类'stream api将操作数据库转换成操作java集合的方法来实现数据库的操作"},{"title":"原生分库分表","icon":"superscript","details":"无需引入和部署任意中间件和引入任意jar包即可实现高性能分库分表和任意自定义分库分表"},{"title":"结构化对象拉取","icon":"quote-left","details":"实现按数据库对象的映射关系快速创建dto并且拉取结构化数据"},{"title":"无感apt","icon":"highlighter","details":"使用插件快速生成apt所需的类来实现idea下的无感apt,无需build||compile即可马上使用apt类"},{"title":"快速lambda入参","icon":"eraser","details":"基于插件快速实现lambda入参参数并且可以以最快速度实现dsl的编写"},{"title":"group感知","icon":"square-check","details":"java下唯一一款支持group感知的orm能够做到数据在编写dsl的时候由扁平转向结构化的变化"},{"title":"丰富的api","icon":"image","details":"提供了常用的返回集合、返回单个对象、返回分页并且提供动态条件、动态排序等一些列功能"},{"title":"计算属性","icon":"puzzle-piece","details":"提供了强大的内存计算属性和数据库计算属性,其中数据库计算属性还支持dsl内的筛选、排序和返回"},{"title":"无限的扩展性","icon":"puzzle-piece","details":"eq框架是一个基于多例的由ioc容器提供服务隔离的框架,内部所有服务都可以被用户自行替换,并且用户还可以自行注入任意服务来达到和eq的配合"},{"title":"DTO、VO直接返回","icon":"chart-simple","details":"直接由数据库结果集映射到DTO、VO支持显式或者隐式赋值达到数据拉取的目的完全不需要map-struct之类的框架辅助entity到dto、vo"},{"title":"企业级数据库列加密","icon":"route","details":"支持企业级数据库列加密和解密,让脱库后的数据安全性提升，并且支持高性能的数据库加密列的like检索"},{"title":"乐观锁","icon":"chart-pie","details":"原生支持乐观锁来实现数据库的数据并发安全性保证业务逻辑的准确性"},{"title":"数据追踪","icon":"diagram-project","details":"基于aop实现数据库的数据在查询的时候进行数据库变更的追踪来实现最小颗粒的update生成"},{"title":"逻辑删除","icon":"square-root-variable","details":"原生支持逻辑删除和个性化逻辑删除支持记录删除时间删除人和删除原因等一些列自定义功能"}]},{"header":"结构化DTO","image":"https://jowayyoung.github.io/static/bruce/install.svg","bgImage":"/easy-query-doc/images/bg/5-light.svg","bgImageDark":"/easy-query-doc/images/bg/5-dark.svg","highlights":[{"title":"创建DTO","icon":"window-maximize","details":"使用插件在指定包上右键\\"Create Struct DTO\\",选择起始实体,勾选需要返回的结构类型","link":"https://theme-hope.vuejs.press/zh/guide/layout/navbar.html"},{"title":"查询","icon":"fas fa-window-maximize fa-rotate-270","details":"使用<b>selectAutoInclude(DTO.class)</b>对其进行查询","link":"https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html"}]},{"header":"计算属性","description":"一种特殊的属性列与常规的表的列不同他是一种通过表的列或者更加复杂的函数得出的属性","image":"/assets/image/advanced.svg","bgImage":"/easy-query-doc/images/bg/4-light.svg","bgImageDark":"/easy-query-doc/images/bg/4-dark.svg","highlights":[{"title":"json计算属性","icon":"dumbbell","details":"将对象映射到数据库列使用json的方式"},{"title":"枚举计算属性","icon":"sitemap","details":"将枚举映射到数据库列,在java使用时通过枚举自带的提示可以清晰的了解值与其含义"},{"title":"列计算属性","icon":"rss","details":"通过数据库函数让列进行特殊处理,比如存储到数据库使用数据库的base64 encode,取出来后也是数据库的base64 decode"},{"title":"无列计算属性","icon":"mobile-screen","details":"数据库中并不存在当前列,比如age是通过当前时间和birthday计算出来的一种属性,并且可用于筛选、排序和返回"},{"title":"跨表计算属性","icon":"circle-info","details":"当前属性是通过跨多张表组合得到的值,比如班级表在不冗余班级人数的情况下可以通过子查询来实现人数"}]},{"header":"联系我们","image":"/assets/image/blog.svg","bgImage":"/easy-query-doc/images/bg/5-light.svg","bgImageDark":"/easy-query-doc/images/bg/5-dark.svg","highlights":[{"title":"博客功能","icon":"blog","details":"通过文章的日期、标签和分类展示文章"},{"title":"博客主页","icon":"house","details":"全新博客主页"},{"title":"博主信息","icon":"circle-info","details":"自定义名称、头像、座右铭和社交媒体链接"},{"title":"时间线","icon":"clock","details":"在时间线中浏览和通读博文"}]}],"copyright":false,"footer":"Apache 2.0 协议, 版权所有 © 2022-至今 xuejmnet","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"项目主页\\"}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"项目主页"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-05T01:54:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-05T01:54:38.000Z"}]]},"git":{"createdTime":1678979040000,"updatedTime":1746410078000,"contributors":[{"name":"xuejiaming","username":"xuejiaming","email":"326308290@qq.com","commits":35,"url":"https://github.com/xuejiaming"},{"name":"Hoysing","username":"Hoysing","email":"3479272726@qq.com","commits":2,"url":"https://github.com/Hoysing"}]},"readingTime":{"minutes":7.54,"words":2261},"filePathRelative":"README.md"}`);export{g as comp,d as data};

import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as p,c as l,b as i,w as n,f as o,e as a,d as e}from"./app-96a10c60.js";const u={},h=o('<h1 id="对象映射规则" tabindex="-1"><a class="header-anchor" href="#对象映射规则" aria-hidden="true">#</a> 对象映射规则</h1><p><code>eq 2.4.1+</code>版本提供<code>mapping-strategy</code>提供三个选择,默认(之前版本)是<code>COLUMN_ONLY</code>，新版本提供了额外两种选择<code>PROPERTY_FIRST</code>和<code>PROPERTY_ONLY</code>和<code>COLUMN_AND_PROPERTY</code></p><p>如果你无法理解那么请在<code>新项目</code>的时候选择<code>PROPERTY_FIRST</code>❗️</p><p>如果你无法理解那么请在<code>新项目</code>的时候选择<code>PROPERTY_FIRST</code>❗️</p><p>如果你无法理解那么请在<code>新项目</code>的时候选择<code>PROPERTY_FIRST</code>❗️</p><p><code>convert</code>函数表示映射的列名,值为<code>propertyName</code>+<code>nameConversion</code>如果属性添加<code>@Column(value=&quot;xx&quot;)</code>则结果为<code>xx</code></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>COLUMN_ONLY</td><td><code>convert(A.property)==convert(AVO.property)</code></td></tr><tr><td>PROPERTY_ONLY</td><td><code>A.property==AVO.property</code></td></tr><tr><td>PROPERTY_FIRST</td><td><code>A.property == AVO.property</code> 如果匹配不到并且AVO是函数则通过 <code>convert(A.property)==convert(AVO.property)</code>再次匹配比</td></tr><tr><td>COLUMN_AND_PROPERTY</td><td><code>findNull(convert(A.property),A.property)==findNull(convert(AVO.property),AVO.property)</code></td></tr></tbody></table><h2 id="实体和结果" tabindex="-1"><a class="header-anchor" href="#实体和结果" aria-hidden="true">#</a> 实体和结果</h2>',8),v=e("div",{class:"language-java line-numbers-mode","data-ext":"java"},[e("pre",{class:"language-java"},[e("code",null,[e("span",{class:"token keyword"},"public"),a(),e("span",{class:"token keyword"},"class"),a(),e("span",{class:"token class-name"},"A"),e("span",{class:"token punctuation"},"{"),a(`
    `),e("span",{class:"token annotation punctuation"},"@Column"),e("span",{class:"token punctuation"},"("),a("value"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},'"c"'),e("span",{class:"token punctuation"},")"),a(`
    `),e("span",{class:"token keyword"},"private"),a(),e("span",{class:"token class-name"},"String"),a(" a"),e("span",{class:"token punctuation"},";"),a(`
    `),e("span",{class:"token keyword"},"private"),a(),e("span",{class:"token class-name"},"String"),a(" b"),e("span",{class:"token punctuation"},";"),a(`
`),e("span",{class:"token punctuation"},"}"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),k=e("div",{class:"language-java line-numbers-mode","data-ext":"java"},[e("pre",{class:"language-java"},[e("code",null,[e("span",{class:"token keyword"},"public"),a(),e("span",{class:"token keyword"},"class"),a(),e("span",{class:"token class-name"},"AVO"),e("span",{class:"token punctuation"},"{"),a(`
    `),e("span",{class:"token keyword"},"private"),a(),e("span",{class:"token class-name"},"String"),a(" a"),e("span",{class:"token punctuation"},";"),a(`
    `),e("span",{class:"token keyword"},"private"),a(),e("span",{class:"token class-name"},"String"),a(" b"),e("span",{class:"token punctuation"},";"),a(`
    `),e("span",{class:"token annotation punctuation"},"@Column"),e("span",{class:"token punctuation"},"("),a("value"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},'"c"'),e("span",{class:"token punctuation"},")"),a(`
    `),e("span",{class:"token keyword"},"private"),a(),e("span",{class:"token class-name"},"String"),a(" d"),e("span",{class:"token punctuation"},";"),a(`
`),e("span",{class:"token punctuation"},"}"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),m=o('<h2 id="column-only-默认" tabindex="-1"><a class="header-anchor" href="#column-only-默认" aria-hidden="true">#</a> COLUMN_ONLY(默认)</h2><p>表示实体的对应的列名和映射对象的列名相同能映射</p><p>A.a-&gt;AVO.d</p><p>A.b-&gt;AVO.b</p><p>N/A-&gt;AVO.a</p><h2 id="property-first" tabindex="-1"><a class="header-anchor" href="#property-first" aria-hidden="true">#</a> PROPERTY_FIRST</h2><p>表示实体的对应的属性名和映射对象的属性名相同能映射,和<code>PROPERTY_ONLY</code>的区别就是如果是函数式片段没有property通过alias来匹配</p><p>A.a-&gt;AVO.a</p><p>A.b-&gt;AVO.b</p><p>N/A-&gt;AVO.d</p><h2 id="property-only" tabindex="-1"><a class="header-anchor" href="#property-only" aria-hidden="true">#</a> PROPERTY_ONLY</h2><p>表示实体的对应的属性名和映射对象的属性名相同能映射</p><p>A.a-&gt;AVO.a</p><p>A.b-&gt;AVO.b</p><p>N/A-&gt;AVO.d</p><h2 id="column-and-property" tabindex="-1"><a class="header-anchor" href="#column-and-property" aria-hidden="true">#</a> COLUMN_AND_PROPERTY</h2><p>表示先使用实体对应的列名匹配如果无法映射则使用属性名进行匹配</p><p>A.a-&gt;AVO.d</p><p>A.b-&gt;AVO.b</p><p>N/A-&gt;AVO.a</p>',20);function A(O,b){const c=d("Tabs");return p(),l("div",null,[h,i(c,{id:"67",data:[{id:"entity"},{id:"vo"}]},{title0:n(({value:t,isActive:s})=>[a("entity")]),title1:n(({value:t,isActive:s})=>[a("vo")]),tab0:n(({value:t,isActive:s})=>[v]),tab1:n(({value:t,isActive:s})=>[k]),_:1}),m])}const R=r(u,[["render",A],["__file","mapping-rule.html.vue"]]);export{R as default};

import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as e,d as s,a as n,e as t,o as r}from"./app-ZruTY3A3.js";const h={},k=["src"],o=["src"],d=["src"],c=["src"];function g(a,i){return r(),p("div",null,[i[0]||(i[0]=e('<h1 id="代理对象自动实现" tabindex="-1"><a class="header-anchor" href="#代理对象自动实现"><span>代理对象自动实现</span></a></h1><p><code>eq</code>使用了java的apt技术(kotlin下是ksp技术)利用编译时生成源代码的方式生成对象的代理对象,用户要操作的对象即为代理对象</p><h2 id="生成代理类" tabindex="-1"><a class="header-anchor" href="#生成代理类"><span>生成代理类</span></a></h2><p>现在实体类<code>SysUser</code>关联的代理类<code>SysUserProxy</code>是不存在的，Idea是无法识别代理类，也无法进行编译，但是我们依然可以通过构建项目来触发<code>eq</code>的APT工具来生成代理类。<code>eq</code>的APT会为所有使用了<code>@EntityProxy</code>的实体类创建对应的代理类，代理类用于提供此对表别名，列名，列类型等等都提供了友好提示和类型判断，这些代理类可以帮助辅助我们更好设置条件查询和设值。</p><p>构建完项目后，代理类将会生成在指定的目录中。如下：</p>',5)),s("img",{src:a.$withBase("/images/startup5.png")},null,8,k),i[1]||(i[1]=s("div",{class:"hint-container warning"},[s("p",{class:"hint-container-title"},"说明!!!"),s("blockquote",null,[s("p",null,[t("如果EasyQueryImplement没有效果请检查类是否添加了"),s("code",null,"@EntityProxy")])])],-1)),s("img",{src:a.$withBase("/images/startup3.png")},null,8,o),i[2]||(i[2]=s("div",{class:"hint-container warning"},[s("p",{class:"hint-container-title"},"说明!!!"),n(" > 2.0.15+版本框架不需要实现`proxyTableClass`方法，idea-plugin插件在0.0.57后也将不会生成该方法 "),s("blockquote",null,[s("p",null,[t("如果您的项目是多模块那么只需要在需要使用@EntityProxy注解的模块下使用"),s("code",null,"sql-processor"),t("即可")])])],-1)),n(' <img src="/startup1.png"> '),i[3]||(i[3]=s("p",null,"构建项目后，如果Idea依然是无法识别代理类的，那么可以将目录标记为生成目录。",-1)),s("img",{src:a.$withBase("/images/startup2.png")},null,8,d),i[4]||(i[4]=s("div",{class:"hint-container warning"},[s("p",{class:"hint-container-title"},"说明!!!"),s("blockquote",null,[s("p",null,"如果您还是不行那么建议您点击idea右侧的maven刷新按钮进行刷新即可")])],-1)),s("img",{src:a.$withBase("/images/startup4.png")},null,8,c),n(" 构建项目，生成完代理类后，需要在`User`中引入对应的代理类`UserProxy` "),i[5]||(i[5]=e(`<div class="hint-container caution"><p class="hint-container-title">说明!!!</p><p>如果没有生成代理类，即提示<code>Proxy</code>类不存在</p><ul><li><p>检查是否存在javacTree之类的错误可能是由于lombok版本过低升级即可</p></li><li><p>查看是否引入sql-processor包（如果没有如下<code>annotationProcessorPaths</code>那么建议各自需要生成proxy的模块独立引入(多模块下)）</p></li><li><p>如果您是<code>gralde</code>那么引入应该是<code>implement改为annotationprocesser</code>即<code>annotationProcessor &quot;com.easy-query:sql-processor:\${easyQueryVersion}&quot;</code></p></li><li><p>设置idea的注解处理器 Build,Execution,Deployment,Compiler,Annotation Processors 选择Enable annotation processing 并且选择Obtain processors from project classpath</p></li><li><p>如果您之前已经存在<code>annotationProcessorPaths</code>那么你可以在里面添加<code>eq</code>的<code>apt</code>处理，如果未使用过那么还是建议需要apt的模块单独引入<code>sql-processor</code><br> 以下配置那么在各个独立<code>module</code>处不需要在引入<code>sql-processor</code></p></li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.maven.plugins&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;maven-compiler-plugin&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;3.8.1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">annotationProcessorPaths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!-- 注意顺序 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            &lt;!-- lombok... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            &lt;!-- mapstruct... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.easy-query&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;sql-processor&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;\${easy-query.version}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">annotationProcessorPaths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),n(' <img src="/startup6.png"> ')])}const m=l(h,[["render",g]]),u=JSON.parse('{"path":"/plugin/easy-query-implement.html","title":"EasyQueryImplement","lang":"zh-CN","frontmatter":{"title":"EasyQueryImplement","order":10,"category":["plugin"],"description":"代理对象自动实现 eq使用了java的apt技术(kotlin下是ksp技术)利用编译时生成源代码的方式生成对象的代理对象,用户要操作的对象即为代理对象 生成代理类 现在实体类SysUser关联的代理类SysUserProxy是不存在的，Idea是无法识别代理类，也无法进行编译，但是我们依然可以通过构建项目来触发eq的APT工具来生成代理类。eq的AP...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EasyQueryImplement\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T08:47:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/plugin/easy-query-implement.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"EasyQueryImplement"}],["meta",{"property":"og:description","content":"代理对象自动实现 eq使用了java的apt技术(kotlin下是ksp技术)利用编译时生成源代码的方式生成对象的代理对象,用户要操作的对象即为代理对象 生成代理类 现在实体类SysUser关联的代理类SysUserProxy是不存在的，Idea是无法识别代理类，也无法进行编译，但是我们依然可以通过构建项目来触发eq的APT工具来生成代理类。eq的AP..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T08:47:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T08:47:03.000Z"}]]},"git":{"createdTime":1746410078000,"updatedTime":1751878023000,"contributors":[{"name":"xuejiaming","username":"xuejiaming","email":"326308290@qq.com","commits":2,"url":"https://github.com/xuejiaming"}]},"readingTime":{"minutes":2.26,"words":678},"filePathRelative":"plugin/easy-query-implement.md","autoDesc":true}');export{m as comp,u as data};

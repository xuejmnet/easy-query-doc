import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as o,o as n}from"./app-h0zUYETa.js";const i={};function l(r,s){return n(),e("div",null,[o(' ---\ntitle: 表达式复用\n---\n\n# 表达式复用\n针对复杂表达式很多时候我们需要复用表达式,而不是重复定义,我们可以使用`easy-query`提供的`cloneQueryable`方法来克隆一个一模一样的,\n因为`where`、`order`、`select`等会让当前表达式的内容是追加上去的而不是重新生成一个新的\n\n```java\n//首先我们定义一个表达式\nQueryable<BlogEntity> sql = easyQuery\n        .queryable(Topic.class)\n        .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId))\n        .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle))\n        .groupBy((t, t1) -> t1.column(BlogEntity::getId))\n        .select(BlogEntity.class, (t, t1) -> t1.column(BlogEntity::getId).columnSum(BlogEntity::getScore));\n\n//克隆一个新的\nQueryable<BlogEntity> blogEntityQueryable = sql.cloneQueryable();\n//对其添加select常量\nString countSql = sql.cloneQueryable().select("COUNT(1)").toSQL();\nAssert.assertEquals("SELECT COUNT(1) FROM (SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id`) t2", countSql);\n//对其limit\nString limitSql = sql.limit(2, 2).toSQL();\nAssert.assertEquals("SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id` LIMIT 2 OFFSET 2", limitSql);\n//在对原先的进行操作发现select和limit并没有赋值上去,所以cloneQueryable生效\nString sql1 = blogEntityQueryable.select(Long.class, o -> o.columnCount(BlogEntity::getId)).toSQL();\nAssert.assertEquals("SELECT COUNT(t2.`id`) AS `id` FROM (SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id`) t2", sql1);\n``` ')])}const m=t(i,[["render",l]]),u=JSON.parse('{"path":"/ability/reuse.html","title":"","lang":"zh-CN","frontmatter":{"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-29T01:13:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/ability/reuse.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-29T01:13:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-29T01:13:23.000Z"}]]},"git":{"createdTime":1684852893000,"updatedTime":1759108403000,"contributors":[{"name":"xuejiaming","username":"xuejiaming","email":"326308290@qq.com","commits":4,"url":"https://github.com/xuejiaming"},{"name":"Hoysing","username":"Hoysing","email":"3479272726@qq.com","commits":1,"url":"https://github.com/Hoysing"}]},"readingTime":{"minutes":1.13,"words":340},"filePathRelative":"ability/reuse.md"}');export{m as comp,u as data};

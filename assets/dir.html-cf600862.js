import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as s,c as a,b as t,d as e,a as o,e as n}from"./app-053ad4fc.js";const i={},c=n('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>Easy Query是新一代的轻量级ORM框架，它没有任何第三方依赖。<br> 我们只需要建好表，就可以使用Easy Query的Idea插件生成对应的实体类和查询类，直接可以进行单表进行增删改查操作，包括批量操作了。<br> Easy Query提供了许多有泛型约束的方法，加上Idea插件的把持，因此对表别名，列名，列类型都提供了友好的提示，使得使用这些方法就像在SQL客户端写SQL那样简单。<br> Easy Query不但可以在实体类中声明实体类之间的关系，也可以在查询方法中声明，简化多表关联操作，自动处理关联数据的查询。<br> Easy Query相比Spring Data JPA的<code>EntityManager</code>，它没有<code>EntityManager</code>的对象状态管理等繁琐的处理，它比<code>EntityManager</code>更细粒度，更灵活。</p><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h3>',3),u=t("li",null,"无实体查询,无实体更新,无实体新增,无实体删除等操作",-1),y={href:"http://www.easy-query.com/easy-query-doc/guide/query/dynamic-where",target:"_blank",rel:"noopener noreferrer"},h={href:"http://www.easy-query.com/easy-query-doc/guide/query/dynamic-sort",target:"_blank",rel:"noopener noreferrer"},_=t("li",null,"对象关系结构化VO自动组装返回,支持一对多一对一结果筛选,排序,limit",-1),q=t("code",null,"SpringEL",-1),p={href:"http://www.easy-query.com/easy-query-doc/guide/config/muti-datasource",target:"_blank",rel:"noopener noreferrer"},w={href:"http://www.easy-query.com/easy-query-doc/guide/adv/logic-delete",target:"_blank",rel:"noopener noreferrer"},g=t("code",null,"firstNotNull",-1),m=t("code",null,"singleNotNull",-1),f=t("code",null,"required",-1),b={href:"http://www.easy-query.com/easy-query-doc/practice/configuration/exception",target:"_blank",rel:"noopener noreferrer"},k={href:"http://www.easy-query.com/easy-query-doc/guide/prop/",target:"_blank",rel:"noopener noreferrer"},S={href:"http://www.easy-query.com/easy-query-doc/guide/adv/interceptor",target:"_blank",rel:"noopener noreferrer"},E={href:"http://www.easy-query.com/easy-query-doc/practice/entity/",target:"_blank",rel:"noopener noreferrer"},Q={href:"http://www.easy-query.com/easy-query-doc/guide/adv/jdbc-listener",target:"_blank",rel:"noopener noreferrer"},v={href:"http://www.easy-query.com/easy-query-doc/guide/adv/column-encryption",target:"_blank",rel:"noopener noreferrer"},x={href:"http://www.easy-query.com/easy-query-doc/guide/super/",target:"_blank",rel:"noopener noreferrer"},L={href:"http://www.easy-query.com/easy-query-doc/guide/query/select",target:"_blank",rel:"noopener noreferrer"},N={href:"http://www.easy-query.com/easy-query-doc/startup/nodsl",target:"_blank",rel:"noopener noreferrer"},V=t("code",null,"nosql",-1),j=t("code",null,"sql",-1),O={href:"http://www.easy-query.com/easy-query-doc/guide/query/relation-filter",target:"_blank",rel:"noopener noreferrer"},I={href:"http://www.easy-query.com/easy-query-doc/startup/nodsl",target:"_blank",rel:"noopener noreferrer"},C={href:"http://www.easy-query.com/easy-query-doc/startup/sql",target:"_blank",rel:"noopener noreferrer"},D={href:"http://www.easy-query.com/easy-query-doc/guide/basic/update",target:"_blank",rel:"noopener noreferrer"},M={href:"http://www.easy-query.com/easy-query-doc/guide/query/paging",target:"_blank",rel:"noopener noreferrer"},B={href:"http://www.easy-query.com/easy-query-doc/guide/adv/value-object",target:"_blank",rel:"noopener noreferrer"},H=n("<li>数据权限,业务权限拦截器,我能查看我下面的所有组,组长可以查询所有组员的数据,组员查看自己的数据</li><li>原生sql片段使用,方便开发人员使用数据库特有的函数或者方言</li><li>java函数数据库封装支持各个数据库</li><li>group感知,在众多orm中极少数orm才会支持的group感知</li><li>无任何依赖的框架,不会有任何冲突</li><li>sql多表查询支持join、in、exists等子查询</li><li>idea插件提供更加高效快速的开发效率和开发体验</li><li>大数据流式查询防止oom</li><li>自带便捷的<code>batch</code>批处理</li><li>动态报名支持对查询的表名进行动态设置可以再非分库分表模式下直接操作对应表</li><li>配合<code>easy-cache</code>实现缓存的便捷使用并且是一个企业级别的延迟双删</li>",11),P={href:"http://www.easy-query.com/easy-query-doc/guide/basic/insertOrUpdate",target:"_blank",rel:"noopener noreferrer"},R=t("li",null,[e("计算属性,额外计算列比如年龄是动态的而不是固定的,所以年龄应该是"),t("code",null,"(当前时间-出生日期)"),e(",复杂计算属性比如班级表存在学生数量这个属性这个属性应该是"),t("code",null,"select count(*) from student where class_id=?")],-1),U=n('<h2 id="数据库支持" tabindex="-1"><a class="header-anchor" href="#数据库支持" aria-hidden="true">#</a> 数据库支持</h2><table><thead><tr><th>数据库名称</th><th>包名</th><th>springboot配置</th><th>solon配置</th></tr></thead><tbody><tr><td>MySQL</td><td>sql-mysql</td><td>mysql</td><td>mysql</td></tr><tr><td>Oracle</td><td>sql-oracle</td><td>oracle</td><td>oracle</td></tr><tr><td>PostgresSQL</td><td>sql-pgsql</td><td>pgsql</td><td>pgsql</td></tr><tr><td>SqlServer</td><td>sql-mssql</td><td>mssql</td><td>mssql</td></tr><tr><td>SqlServer RowNumber</td><td>sql-mssql</td><td>mssql_row_number</td><td>mssql_row_number</td></tr><tr><td>H2</td><td>sql-h2</td><td>h2</td><td>h2</td></tr><tr><td>SQLite</td><td>sql-sqlite</td><td>sqlite</td><td>sqlite</td></tr><tr><td>ClickHouse</td><td>sql-clickhouse</td><td>clickhouse</td><td>clickhouse</td></tr><tr><td>达梦dameng</td><td>sql-dameng</td><td>dameng</td><td>dameng</td></tr><tr><td>人大金仓KingbaseES</td><td>sql-kingbase-es</td><td>kingbase_es</td><td>kingbase_es</td></tr></tbody></table>',2),A={href:"https://github.com/xuejmnet/easy-query/tree/main/sql-db-support",target:"_blank",rel:"noopener noreferrer"},F=t("code",null,"sql-db-support",-1);function J(K,T){const r=d("ExternalLinkIcon");return s(),a("div",null,[c,t("ul",null,[u,t("li",null,[e("使用Easy Query的"),t("a",y,[e("动态条件"),o(r)]),e("可以自动将有值的条件拼接到SQL中，省掉重复的判空和拼接SQL操作，")]),t("li",null,[e("动态排序,form表单排序,前端指定排序 "),t("a",h,[e("DynamicOrderBy"),o(r)])]),_,t("li",null,[e("多数据源,动态多数据源，支持"),q,e("，使用场景多租户(一个租户一个库) "),t("a",p,[e("DynamicDataSource"),o(r)])]),t("li",null,[e("软删除，软删除部分禁用启用非常方便，软删除记录删除时间,删除人 "),t("a",w,[e("LogicDelete"),o(r)])]),t("li",null,[e("自定义错误异常快速针对"),g,e("、"),m,e("、"),f,e(),t("a",b,[e("Exception"),o(r)])]),t("li",null,[e("枚举和数据库映射,数据脱敏,数据编码存储解码获取,枚举属性,json或者数组,计算属性等 "),t("a",k,[e("ValueConverter,ColumnValueSQLConverter"),o(r)])]),t("li",null,[e("数据填充,自动赋值创建人创建时间,修改人修改时间 "),t("a",S,[e("拦截器"),o(r)]),e("、 "),t("a",E,[e("对象实战"),o(r)])]),t("li",null,[e("慢sql监听拦截,自动上报预警 "),t("a",Q,[e("jdbc执行监听器"),o(r)])]),t("li",null,[e("数据库列的加密和加密后的模糊查询企业级解决方案 "),t("a",v,[e("数据库列加密"),o(r)])]),t("li",null,[e("分库分表，读写分离 "),t("a",x,[e("分库分表，读写分离"),o(r)]),e(" (敬请期待已经完成功能文档还在完善中)")]),t("li",null,[e("VO对象直接返回 "),t("a",L,[e("自定义vo列返回"),o(r)])]),t("li",null,[e("数据库对象模型关联查询：一对多、一对一、多对多、多对一 "),t("a",N,[e("对象关系查询"),o(r)])]),t("li",null,[e("对象关系关联查询"),V,e("不仅仅是"),j,e("联级筛选,支持额外条件过滤比如公用中间表,多对多关联+type区分 "),t("a",O,[e("联级筛选Include Filter"),o(r)])]),t("li",null,[t("a",I,[e("对象关系查询"),o(r)]),e("、"),t("a",C,[e("SQL查询"),o(r)]),e("强类型语法的sql查询语法")]),t("li",null,[e("智能的差异识别更新、并发更新 "),t("a",D,[e("更新、追踪"),o(r)])]),t("li",null,[e("自带分页方法和无依赖分页链式返回 "),t("a",M,[e("分页"),o(r)])]),t("li",null,[e("Embeddable、ValueObject对象 "),t("a",B,[e("值对象"),o(r)])]),H,t("li",null,[e("insert or update语法方言 "),t("a",P,[e("InsertOrUpdate"),o(r)])]),R]),U,t("p",null,[e("Easy Query目前已经抽象了表达式,所以原则上支持所有数据库,只需要自定义实现对应数据库的增删改查接口即可,也就是"),t("a",A,[F,e("open in new window"),o(r)]),e(" 。所以如果不支持对应的sql那么你可以自行扩展或者提交相应的issue")])])}const W=l(i,[["render",J],["__file","dir.html.vue"]]);export{W as default};

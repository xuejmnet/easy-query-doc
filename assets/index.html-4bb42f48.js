import{_ as c,W as t,X as a,Y as e,Z as o,$ as r,a2 as n,C as s}from"./framework-6199cc12.js";const i={},l=e("h1",{id:"超级功能",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#超级功能","aria-hidden":"true"},"#"),o(" 超级功能")],-1),h=e("code",null,"easy-query",-1),u={href:"https://github.com/dotnetcore/sharding-core",target:"_blank",rel:"noopener noreferrer"},_=n('<h4 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h4><ul><li><a href="/easy-query-doc/guide/adv/logic-delete">《EasyQuery:逻辑删除》</a> 数据的无价,软删除可以给程序带来后悔药,让用户无需关心底层通过修改<code>delete</code>语句为<code>update</code>来实现自动无感逻辑删除,支持<code>select</code>、<code>update</code>、<code>delete</code></li><li><a href="/easy-query-doc/guide/adv/interceptor">《EasyQuery:全局拦截器》</a> 支持<code>entity</code>对象的插入、更新前的实体拦截修改，<code>select</code>、<code>update</code>、<code>delete</code>的条件自定义,<code>update</code>的<code>set</code>自定义</li></ul>',2);function p(f,m){const d=s("ExternalLinkIcon");return t(),a("div",null,[l,e("p",null,[h,o("的超级功能主要是分表分库和读写分离,作者有着多年的分库分表经验,并且在其他语言上也有一套相对完善的分表分库orm扩展 (sharding-core)["),e("a",u,[o("https://github.com/dotnetcore/sharding-core"),r(d)]),o("]")]),_])}const x=c(i,[["render",p],["__file","index.html.vue"]]);export{x as default};

import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,e as r,o}from"./app-ZMNm7adL.js";const a={};function n(c,t){return o(),d("div",null,t[0]||(t[0]=[r('<p><code>eq</code>提供了丰富的子查询功能,包括隐式子查询和手动子查询,并且子查询还支持无限级嵌套来实现任意sql功能</p><ul><li>隐式子查询(必看)🔥 能够快速的基于对象关系来进行子查询的编写相比于手写子查询开发效率有一个质的飞跃</li><li>手动子查询 能够快速的基于sql的表达式进行mock来实现达到相同功能</li></ul><p>隐式子查询默认使用<code>LEFT JOIN</code>来保证数据的准确性,如果你认为子项一定存在可以再<code>@Navigate(required=true)</code>这样框架会认为子项一定存在的情况下使用<code>INNER JOIN</code>来代替<code>LEFT JOIN</code></p><div class="hint-container caution"><p class="hint-container-title">说明!!!</p><blockquote><p>手动子查询的创建方式有两种一种是<code>eq实例</code>创建一个queryable一种是通过表达式内部的<code>expression().subQeuryable()</code>，在使用时我们应该尽可能的使用上下文来创建子查询表达式,区别就是<code>eq实例</code>创建的表达式必须子查询作为左侧的表而不是外部表作为左侧表而<code>expression().subQeuryable()</code>创建的子查询则不需要考虑这个问题</p></blockquote></div><h2 id="隐式子查询断言api" tabindex="-1"><a class="header-anchor" href="#隐式子查询断言api"><span>隐式子查询断言api</span></a></h2><table><thead><tr><th>子查询</th><th>api类型</th></tr></thead><tbody><tr><td>select子查询</td><td>类型片段</td></tr><tr><td>where子查询</td><td>执行片段</td></tr><tr><td>join子查询</td><td>表达式片段</td></tr><tr><td>from子查询</td><td>表达式片段</td></tr></tbody></table><h2 id="隐式子查询断言api-1" tabindex="-1"><a class="header-anchor" href="#隐式子查询断言api-1"><span>隐式子查询断言api</span></a></h2><table><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>any(expression)</td><td>表示符合条件的至少有一个简单理解为<code>exists</code></td></tr><tr><td>none(expression)</td><td>表示符合条件的一个都没有 简单理解为<code>no exists</code></td></tr><tr><td>where(expression)</td><td>对子查询增加条件</td></tr><tr><td>orderBy(expression)</td><td>对子查询进行排序常用于和elements相关</td></tr><tr><td>firstElement()</td><td>获取子查询的第一个</td></tr><tr><td>element(index)</td><td>获取子查询的第n个,第一个索引值为0</td></tr><tr><td>elements(start,end)</td><td>获取子查询的一部分,第一个索引值为0</td></tr><tr><td>flatElement()</td><td>展开子查询,后面加条件等于<code>any</code>的简写方式</td></tr><tr><td>configure(expression)</td><td>用来配置子查询相关参数比如是否启用逻辑删除等</td></tr><tr><td>distinct()</td><td>对结果进行去重比如<code>bankCards().distinct().count(x-&gt;x.type())</code></td></tr><tr><td>anyValue()</td><td>返回是否存在的true/false</td></tr><tr><td>noneValue()</td><td>返回是否存在的true/false</td></tr><tr><td>coount()</td><td>对结果进行数量统计</td></tr><tr><td>sum(expression)</td><td>对结果进行求和,参数是统计的列表达式<code>bankCards().sum(card-&gt;card.amount())</code>对各个银行卡的余额求和</td></tr><tr><td>avg(expression)</td><td>对结果进行取平均值</td></tr><tr><td>max(expression)</td><td>对结果进行取最大值</td></tr><tr><td>min(expression)</td><td>对结果进行取最小值</td></tr><tr><td>joining(expression)</td><td>对结果进行组合成一列</td></tr></tbody></table><h2 id="隐式子查询相关api" tabindex="-1"><a class="header-anchor" href="#隐式子查询相关api"><span>隐式子查询相关api</span></a></h2><table><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td><code>user-&gt;user.bankCards().any()</code></td><td>用户至少有一张银行卡卡</td></tr><tr><td><code>user-&gt;user.bankCards().none()</code></td><td>用户银行卡卡一张都没有</td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;储蓄卡&quot;)).any()</code></td><td>用户拥有的银行卡里面至少有一张储蓄卡</td></tr><tr><td><code>user-&gt;user.bankCards().any(card-&gt;card.type().eq(&quot;储蓄卡&quot;))</code></td><td>用户拥有的银行卡里面至少有一张储蓄卡,<code>where+any</code>可以简写为<code>any</code></td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;储蓄卡&quot;)).none()</code></td><td>用户拥有的银行卡里面储蓄卡一张都没有</td></tr><tr><td><code>user-&gt;user.bankCards().none(card-&gt;card.type().eq(&quot;储蓄卡&quot;))</code></td><td>用户拥有的银行卡里面储蓄卡一张都没有,<code>where+none</code>可以简写为<code>none</code></td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;储蓄卡&quot;)).count()</code></td><td>用户拥有的储蓄卡数量支持断言</td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;储蓄卡&quot;)).count().eq(1L)</code></td><td>用户拥有的储蓄卡数量等于1</td></tr><tr><td><code>user-&gt;user.bankCards().where(card-&gt;card.type().eq(&quot;储蓄卡&quot;)).elements(0,1).none(card-&gt;card.bank().name().eq(&quot;建设银行&quot;))</code></td><td>用户前两张银行卡不是建设银行的</td></tr></tbody></table>',10)]))}const u=e(a,[["render",n]]),p=JSON.parse('{"path":"/sub-query/","title":"子查询篇章","lang":"zh-CN","frontmatter":{"title":"子查询篇章","description":"eq提供了丰富的子查询功能,包括隐式子查询和手动子查询,并且子查询还支持无限级嵌套来实现任意sql功能 隐式子查询(必看)🔥 能够快速的基于对象关系来进行子查询的编写相比于手写子查询开发效率有一个质的飞跃 手动子查询 能够快速的基于sql的表达式进行mock来实现达到相同功能 隐式子查询默认使用LEFT JOIN来保证数据的准确性,如果你认为子项一定...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"子查询篇章\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-19T02:27:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/sub-query/"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"子查询篇章"}],["meta",{"property":"og:description","content":"eq提供了丰富的子查询功能,包括隐式子查询和手动子查询,并且子查询还支持无限级嵌套来实现任意sql功能 隐式子查询(必看)🔥 能够快速的基于对象关系来进行子查询的编写相比于手写子查询开发效率有一个质的飞跃 手动子查询 能够快速的基于sql的表达式进行mock来实现达到相同功能 隐式子查询默认使用LEFT JOIN来保证数据的准确性,如果你认为子项一定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-19T02:27:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T02:27:07.000Z"}]]},"git":{"createdTime":1745029627000,"updatedTime":1745029627000,"contributors":[{"name":"xuejiaming","username":"xuejiaming","email":"326308290@qq.com","commits":1,"url":"https://github.com/xuejiaming"}]},"readingTime":{"minutes":3,"words":901},"filePathRelative":"sub-query/README.md","autoDesc":true}');export{u as comp,p as data};

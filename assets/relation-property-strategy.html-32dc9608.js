import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as k,c as r,b as o,w as a,f as c,e as s,d as n}from"./app-e02abd7d.js";const d={},v=c('<h1 id="自定义关联关系" tabindex="-1"><a class="header-anchor" href="#自定义关联关系" aria-hidden="true">#</a> 自定义关联关系</h1><p><code>eq</code>默认提供了标准化关联关系,并且支持多属性下的关联关系,关系之间使用等于来作为条件支持正向和反向两种,但是技术没有银弹所以很多时候我们会使用反范式技术来实现更加简洁,简便的方式来实现存储对应关系这种非标准关系存在于大量的业务系统中,并且实现各有不同,有逗号分割有json存储等</p><h2 id="entityrelationpropertyprovider" tabindex="-1"><a class="header-anchor" href="#entityrelationpropertyprovider" aria-hidden="true">#</a> EntityRelationPropertyProvider</h2><table><thead><tr><th>方法</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>getName</td><td>空</td><td>定义当前组件的名称</td></tr><tr><td>toImplicitSubQuery</td><td>null</td><td>当使用隐式子查询时候如何定义条件</td></tr><tr><td>toImplicitJoin</td><td>null</td><td>当使用隐式join的时候如何定义条件</td></tr><tr><td>relationMultiIdsFetcherPredicate</td><td>null</td><td>当<code>include</code>的时候如何设置条件值</td></tr><tr><td>relationMultiIdFetcherPredicate</td><td>null</td><td>当<code>include</code>的时候并且设置了<code>limit</code>的时候如何设置条件值</td></tr><tr><td>getOneToOneGetter</td><td>null</td><td>一对一抽象如何获取值</td></tr><tr><td>getDirectToOneGetter</td><td>null</td><td>直接关系对一如何获取值</td></tr><tr><td>getManyToOneGetter</td><td>null</td><td>多对一如何获取值</td></tr><tr><td>getOneToManyGetter</td><td>null</td><td>一对多如何获取值</td></tr><tr><td>getManyToManyGetter</td><td>null</td><td>多对多如何获取值</td></tr></tbody></table><h2 id="逗号分割" tabindex="-1"><a class="header-anchor" href="#逗号分割" aria-hidden="true">#</a> 逗号分割</h2>',5),m=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@EntityProxy"),s(`
`),n("span",{class:"token annotation punctuation"},"@Table"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"m8_user_book_ids"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@FieldNameConstants"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"M8UserBookIds"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"ProxyEntityAvailable"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"M8UserBookIds"),s(),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"M8UserBookIdsProxy"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("primaryKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" userId"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" userName"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Integer"),s(" userAge"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"LocalDateTime"),s(" createTime"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" bookIds"),n("span",{class:"token punctuation"},";"),s(`


    `),n("span",{class:"token annotation punctuation"},"@Navigate"),n("span",{class:"token punctuation"},"("),s("value "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},[s("RelationTypeEnum"),n("span",{class:"token punctuation"},"."),s("ManyToMany")]),n("span",{class:"token punctuation"},","),s(" selfProperty "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},[s("M8UserBookIds"),n("span",{class:"token punctuation"},"."),s("Fields")]),n("span",{class:"token punctuation"},"."),s("bookIds"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(" targetProperty "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},[s("M8UserBook2"),n("span",{class:"token punctuation"},"."),s("Fields")]),n("span",{class:"token punctuation"},"."),s("bookId"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(" relationPropertyStrategy "),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"find_in_set"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"M8UserBook2"),n("span",{class:"token punctuation"},">")]),s(" books"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@Table"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"m8_user_book2"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@EntityProxy"),s(`
`),n("span",{class:"token annotation punctuation"},"@FieldNameConstants"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"M8UserBook2"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"ProxyEntityAvailable"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"M8UserBook2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"M8UserBook2Proxy"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("primaryKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" bookId"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" bookName"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"BigDecimal"),s(" bookPrice"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=c(`<p><code>M8UserBookIds.bookIds</code>列使用逗号分割将<code>M8UserBook2.bookId</code>存储到单列中，mysql下使用<code>find_in_set</code>函数来实现</p><h2 id="findinsetrelationtoimplicitprovider" tabindex="-1"><a class="header-anchor" href="#findinsetrelationtoimplicitprovider" aria-hidden="true">#</a> FindInSetRelationToImplicitProvider</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FindInSetRelationToImplicitProvider</span> <span class="token keyword">implements</span> <span class="token class-name">EntityRelationPropertyProvider</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">EntityRelationPropertyProvider</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FindInSetRelationToImplicitProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;find_in_set&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ClientQueryable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">toImplicitSubQuery</span><span class="token punctuation">(</span><span class="token class-name">EntityExpressionBuilder</span> entityExpressionBuilder<span class="token punctuation">,</span> <span class="token class-name">TableAvailable</span> leftTable<span class="token punctuation">,</span> <span class="token class-name">NavigateMetadata</span> navigateMetadata<span class="token punctuation">,</span> <span class="token class-name">QueryRuntimeContext</span> runtimeContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">ClientQueryable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clientQueryable <span class="token operator">=</span> runtimeContext<span class="token punctuation">.</span><span class="token function">getSQLClientApiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createQueryable</span><span class="token punctuation">(</span>navigateMetadata<span class="token punctuation">.</span><span class="token function">getNavigatePropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> runtimeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>navigateMetadata<span class="token punctuation">.</span><span class="token function">getRelationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">RelationTypeEnum<span class="token punctuation">.</span>ManyToMany</span> <span class="token operator">&amp;&amp;</span> navigateMetadata<span class="token punctuation">.</span><span class="token function">getMappingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;many to many not support find_in_set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            clientQueryable<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetPropertiesOrPrimary <span class="token operator">=</span> navigateMetadata<span class="token punctuation">.</span><span class="token function">getTargetPropertiesOrPrimary</span><span class="token punctuation">(</span>runtimeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selfPropertiesOrPrimary <span class="token operator">=</span> navigateMetadata<span class="token punctuation">.</span><span class="token function">getSelfPropertiesOrPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                t<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">//这边实现了支持多属性模式如果你不支持直接使用单属性即可</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> targetPropertiesOrPrimary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">String</span> property <span class="token operator">=</span> targetPropertiesOrPrimary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token class-name">String</span> selfProperty <span class="token operator">=</span> selfPropertiesOrPrimary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        t<span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;FIND_IN_SET({0},{1})&quot;</span><span class="token punctuation">,</span> c <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                            c<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> property<span class="token punctuation">)</span>
                                    <span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span>leftTable<span class="token punctuation">,</span> selfProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
<span class="token comment">//                    t.multiEq(true, new SimpleEntitySQLTableOwner&lt;&gt;(leftTable), navigateMetadata.getTargetPropertiesOrPrimary(runtimeContext), navigateMetadata.getSelfPropertiesOrPrimary());</span>
                    navigateMetadata<span class="token punctuation">.</span><span class="token function">predicateFilterApply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">EasyObjectUtil</span><span class="token punctuation">.</span><span class="token function">typeCastNullable</span><span class="token punctuation">(</span>clientQueryable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">TableAvailable</span> <span class="token function">toImplicitJoin</span><span class="token punctuation">(</span><span class="token class-name">EntityExpressionBuilder</span> entityExpressionBuilder<span class="token punctuation">,</span> <span class="token class-name">TableAvailable</span> leftTable<span class="token punctuation">,</span> <span class="token class-name">String</span> property<span class="token punctuation">,</span> <span class="token class-name">String</span> fullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">relationMultiIdsFetcherPredicate</span><span class="token punctuation">(</span><span class="token class-name">WherePredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetWherePredicate<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetProps<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> relationIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//仅支持单个属性多个属性自己去实现</span>
        <span class="token class-name">String</span> targetProp <span class="token operator">=</span> targetProps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> collect <span class="token operator">=</span> relationIds<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">EasyStringUtil</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        targetWherePredicate<span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;FIND_IN_SET({0},{1})&quot;</span><span class="token punctuation">,</span> c <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            c<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span>targetProp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        targetWherePredicate.and(() -&gt; {</span>
<span class="token comment">//</span>
<span class="token comment">//            for (List&lt;Object&gt; relationId : relationIds) {</span>
<span class="token comment">//                Object o = relationId.get(0);</span>
<span class="token comment">//</span>
<span class="token comment">//                targetWherePredicate.sqlNativeSegment(&quot;FIND_IN_SET({0},{1})&quot;, c -&gt; {</span>
<span class="token comment">//                    c.expression(targetProp).value(o);</span>
<span class="token comment">//                }).or();</span>
<span class="token comment">//            }</span>
<span class="token comment">//        });</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">relationMultiIdFetcherPredicate</span><span class="token punctuation">(</span><span class="token class-name">WherePredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetWherePredicate<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetProps<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> relationIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">String</span> targetProp <span class="token operator">=</span> targetProps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> relationIds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        targetWherePredicate<span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;FIND_IN_SET({0},{1})&quot;</span><span class="token punctuation">,</span> c <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            c<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span>targetProp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RelationIncludeGetter</span> <span class="token function">getOneToOneGetter</span><span class="token punctuation">(</span><span class="token class-name">QueryRuntimeContext</span> runtimeContext<span class="token punctuation">,</span> <span class="token class-name">NavigateMetadata</span> navigateMetadata<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selfRelationColumn<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RelationExtraEntity</span><span class="token punctuation">&gt;</span></span> entities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RelationIncludeGetter</span> <span class="token function">getDirectToOneGetter</span><span class="token punctuation">(</span><span class="token class-name">QueryRuntimeContext</span> runtimeContext<span class="token punctuation">,</span> <span class="token class-name">NavigateMetadata</span> navigateMetadata<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RelationExtraEntity</span><span class="token punctuation">&gt;</span></span> includes<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> mappingRow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RelationIncludeGetter</span> <span class="token function">getManyToOneGetter</span><span class="token punctuation">(</span><span class="token class-name">QueryRuntimeContext</span> runtimeContext<span class="token punctuation">,</span> <span class="token class-name">NavigateMetadata</span> navigateMetadata<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetPropertyNames<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RelationExtraEntity</span><span class="token punctuation">&gt;</span></span> includes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RelationIncludeGetter</span> <span class="token function">getOneToManyGetter</span><span class="token punctuation">(</span><span class="token class-name">QueryRuntimeContext</span> runtimeContext<span class="token punctuation">,</span> <span class="token class-name">NavigateMetadata</span> navigateMetadata<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetPropertyNames<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RelationExtraEntity</span><span class="token punctuation">&gt;</span></span> includes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RelationIncludeGetter</span> <span class="token function">getManyToManyGetter</span><span class="token punctuation">(</span><span class="token class-name">QueryRuntimeContext</span> runtimeContext<span class="token punctuation">,</span> <span class="token class-name">NavigateMetadata</span> navigateMetadata<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetPropertyNames<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RelationExtraEntity</span><span class="token punctuation">&gt;</span></span> includes<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> mappingRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyFindInSetManyToMany</span><span class="token punctuation">(</span>includes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFindInSetManyToMany</span> <span class="token keyword">implements</span> <span class="token class-name">RelationIncludeGetter</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RelationExtraEntity</span><span class="token punctuation">&gt;</span></span> includes<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">MyFindInSetManyToMany</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RelationExtraEntity</span><span class="token punctuation">&gt;</span></span> includes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>includes <span class="token operator">=</span> includes<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">include</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getIncludeValue</span><span class="token punctuation">(</span><span class="token class-name">RelationValue</span> relationValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//toMany接口我们希望是如果没有查询到应该返回对应的空集合而不是null</span>
            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>relationValue<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> objects<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RelationExtraEntity</span> include <span class="token operator">:</span> includes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//如果要通用自己去实现参考RelationIncludeGetter的equals实现我这边是给专用的直接强转</span>
                <span class="token class-name">M8UserBook2</span> entity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">M8UserBook2</span><span class="token punctuation">)</span> include<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> relationValue<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> o <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> split<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getBookId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        objects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> objects<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你不需要额外的处理那么只需要像案例一样设置对应的接口返回即可,并且如果自己不知道如何编写<code>RelationIncludeGetter</code>那么可以使用强类型转成自己的类型而不是一味地追求通用性</p><h2 id="隐式子查询" tabindex="-1"><a class="header-anchor" href="#隐式子查询" aria-hidden="true">#</a> 隐式子查询</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M8UserBookIds</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">M8UserBookIds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>m <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    m<span class="token punctuation">.</span><span class="token function">books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x<span class="token punctuation">.</span><span class="token function">bookPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token operator">--</span> 第<span class="token number">1</span>条sql数据
<span class="token constant">SELECT</span>
    t<span class="token punctuation">.</span>\`user_id\`<span class="token punctuation">,</span>
    t<span class="token punctuation">.</span>\`user_name\`<span class="token punctuation">,</span>
    t<span class="token punctuation">.</span>\`user_age\`<span class="token punctuation">,</span>
    t<span class="token punctuation">.</span>\`create_time\`<span class="token punctuation">,</span>
    t<span class="token punctuation">.</span>\`book_ids\` 
<span class="token constant">FROM</span>
    \`m8_user_book_ids\` t 
<span class="token class-name">WHERE</span>
    <span class="token constant">EXISTS</span> <span class="token punctuation">(</span>
        <span class="token constant">SELECT</span>
            <span class="token number">1</span> 
        <span class="token constant">FROM</span>
            \`m8_user_book2\` t1 
        <span class="token class-name">WHERE</span>
            <span class="token function">FIND_IN_SET</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>\`book_id\`<span class="token punctuation">,</span>t<span class="token punctuation">.</span>\`book_ids\`<span class="token punctuation">)</span> 
            <span class="token constant">AND</span> t1<span class="token punctuation">.</span>\`book_price\` <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token class-name">LIMIT</span> <span class="token number">1</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="include拉取" tabindex="-1"><a class="header-anchor" href="#include拉取" aria-hidden="true">#</a> include拉取</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M8UserBookIds</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">M8UserBookIds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>m <span class="token operator">-&gt;</span> m<span class="token punctuation">.</span><span class="token function">books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token operator">--</span> 第<span class="token number">1</span>条sql数据
<span class="token constant">SELECT</span>
    \`user_id\`<span class="token punctuation">,</span>
    \`user_name\`<span class="token punctuation">,</span>
    \`user_age\`<span class="token punctuation">,</span>
    \`create_time\`<span class="token punctuation">,</span>
    \`book_ids\` 
<span class="token constant">FROM</span>
    \`m8_user_book_ids\`
<span class="token operator">--</span> 第<span class="token number">2</span>条sql数据
<span class="token constant">SELECT</span>
    t<span class="token punctuation">.</span>\`book_id\`<span class="token punctuation">,</span>
    t<span class="token punctuation">.</span>\`book_name\`<span class="token punctuation">,</span>
    t<span class="token punctuation">.</span>\`book_price\` 
<span class="token constant">FROM</span>
    \`m8_user_book2\` t 
<span class="token class-name">WHERE</span>
    <span class="token function">FIND_IN_SET</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>\`book_id\`<span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function y(f,w){const l=p("Mermaid"),i=p("Tabs");return k(),r("div",null,[v,o(i,{id:"139",data:[{id:"关系图"},{id:"M8UserBookIds"},{id:"M8UserBook2"}]},{title0:a(({value:t,isActive:e})=>[s("关系图")]),title1:a(({value:t,isActive:e})=>[s("M8UserBookIds")]),title2:a(({value:t,isActive:e})=>[s("M8UserBook2")]),tab0:a(({value:t,isActive:e})=>[o(l,{id:"mermaid-141",code:"eJxLLXLJTEwvSszlUgACX4vQ4tQip/z8bM+UYoVqsBgIBIcEefq5K5QCJT1TFAK8sUn4JeamwsU9/UJc3V2DwBKO6QhxF8cQ1xBPX1eF5KLUxJLUkEwkPVCzkiC2g4VrudCcZYTpKIh6LI4CSaA4ysnT3cXV2dPX0QcsF1CUmQyRxLAG5PuaGl3d/GoUu60UlHwT8yp1S/J1QbSCBtStOhBaU4kLACCUWss="})]),tab1:a(({value:t,isActive:e})=>[m]),tab2:a(({value:t,isActive:e})=>[b]),_:1}),g])}const _=u(d,[["render",y],["__file","relation-property-strategy.html.vue"]]);export{_ as default};

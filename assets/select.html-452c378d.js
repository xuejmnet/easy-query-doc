import{_ as n}from"./sql-executor-93723801.js";import{_ as s,a}from"./simple-nest-query-d3691a08.js";import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as p,c as e,f as o}from"./app-afbcad99.js";const c={},u=o(`<h1 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h1><p><code>easy-query</code>在 java 的静态语言特性下，参考众多 C# ORM(efcore,freesql,sqlsugar...),和 java ORM(mybatis-plus,beetlsql...)实现了支持单表多表，复杂，嵌套的 sql 表达式，并且拥有强类型语法提示，可以帮助不想写 sql 的用户，有洁癖的用户多一个选择.</p><h2 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h2><p><code>eq</code>的<code>select</code>是用来终结当前表达式生成新的表达式的方式,简单理解为表示告诉框架当前表达式需要返回的结果是<code>select</code>的结果,如果您了解<code>stream api</code>那么可以简单的理解为其<code>map</code>操作</p><div class="hint-container tip"><p class="hint-container-title">概念补充 说明!!!</p><blockquote><p><code>eq</code>这个 orm 与之前您认识的 java 其他 orm 不相同,这个 orm 实现了近乎 95%的 sql 功能,其中一个就是子查询嵌套,所谓的子查询嵌套就是将之前查询结果视作<code>派生表</code>或叫做<code>内嵌视图</code>,后续我们将其统一称其为<code>内嵌视图</code>,比如<code>select .... from (select id,name from table where name like ?) t where t.id = ?</code>这个 sql 的括号内的那一部分(<code>select id,name from table where name like ?</code>)我们称之为<code>内嵌视图</code></p></blockquote></div><p>所以我们可以很轻易的实现其他 orm 无法实现的</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>
    <span class="token punctuation">(</span>
        <span class="token keyword">select</span>
            key1<span class="token punctuation">,</span>
            key2<span class="token punctuation">,</span>
            <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">,</span>
            <span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">,</span>
            <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> s
        <span class="token keyword">from</span>
            <span class="token keyword">table</span>
        <span class="token keyword">where</span>
            name <span class="token operator">like</span> ?
        <span class="token keyword">group</span> <span class="token keyword">by</span>
            key1<span class="token punctuation">,</span>
            key2
    <span class="token punctuation">)</span> t1
    <span class="token keyword">left</span> <span class="token keyword">join</span> table2 t2 <span class="token keyword">on</span> t<span class="token punctuation">.</span>key1 <span class="token operator">=</span> t2<span class="token punctuation">.</span>key1
<span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="select-后置风格" tabindex="-1"><a class="header-anchor" href="#select-后置风格" aria-hidden="true">#</a> select 后置风格</h2><p>和原生 SQL 不同，在<code>eq</code>提供的 DSL 中，使用的是<code>select</code>后置风格，这个风格多见于<code>c#</code>语言的<code>orm</code>中和<code>stream api</code>有一种异曲同工之处，那么为什么<code>eq</code>选择<code>select</code>后置?</p><ul><li>强类型的 java 语言类型<code>select</code>后置有助于推导表达式后续可操作的类,比如<code>stream api</code></li><li><code>select后置</code>其实本质和书写 sql 是一样的,虽然你在编写 sql 的时候是 select 先写但是你在不写<code>from group by</code>等操作后是无法编写 select 的内容只能用<code>*</code>来代替,所以其实 sql 的书写本质也是<code>select后置</code></li></ul><img src="`+n+'" width="500"><div class="hint-container tip"><p class="hint-container-title">说明!!!</p><blockquote><p>这张图充分的说明了 sql 的执行过程和解析过程也是 eq 的书写过程,该执行流程中唯一能调换的就是<code>select</code>和<code>order by</code>的顺序</p></blockquote><blockquote><p>每次 select 会对之前的表达式进行汇总生成<code>内嵌视图</code>,对后续的 select 继续操作那么将对<code>内嵌视图</code>进行操作</p></blockquote><blockquote><p>其中6和7可以互相调换,如果先<code>select</code>后<code>order</code>那么将会对匿名表进行排序,如果先<code>order</code>后<code>select</code>那么会先排序后生成匿名表但是因为匿名表后续没有操作所以会展开</p></blockquote></div><p><code>select</code>语句出现在<code>where</code>，<code>orderBy</code>，<code>groupBy</code>，<code>having</code>等之后,如果表达式调用了<code>select</code>那么这个 sql 就是确定了的如果再次调用<code>where</code>那么前面的表达式将被视为<code>派生表</code>或<code>内嵌视图</code>，比如<code>select .... from (select id,name from table ) t where t.id = ?</code>每次<code>select</code>会对当前表达式进行一次结果集包装(<code>派生表</code>或<code>内嵌视图</code>)</p><img src="'+s+`"><p>我们以这个简单的例子为例可以看到我们应该编写的顺序是select在最后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">HelpProvince</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">HelpProvinceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token comment">//本质就是如下写法 不建议使用双括号的初始化可能会造成内存泄露</span>
        <span class="token comment">// .select(o-&gt;{</span>
        <span class="token comment">//        HelpProvinceProxy province= new HelpProvinceProxy();</span>
        <span class="token comment">//         province.id().set(o.id());</span>
        <span class="token comment">//         province.name().set(o.name());</span>
        <span class="token comment">//         return province;</span>
        <span class="token comment">// })</span>
        <span class="token comment">//.select(o-&gt;o.FETCHER.id().name().fetchProxy())//如果返回结果一样可以用fetcher</span>
        <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂的查询顺序<br><img src="`+a+`"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">HelpProvince</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//1</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//2</span>
        <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//3</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">HelpProvinceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//4 </span>
                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token comment">//.select(o-&gt;o.FETCHER.id().name().fetchProxy())//如果返回结果一样可以用fetcher</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">HelpProvinceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//6</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意点及说明!!!</p><blockquote><p>select一般都是最后写的,在你没有写表的时候只能用 * 来代替,先写表确定,然后写条件写排序写分组等确定了之后写选择的select的列不写就是主表的*如果在写where就对前面的表进行括号进行匿名表处理以此类推</p></blockquote></div><h2 id="分解表达式" tabindex="-1"><a class="header-anchor" href="#分解表达式" aria-hidden="true">#</a> 分解表达式</h2><h3 id="_1" tabindex="-1"><a class="header-anchor" href="#_1" aria-hidden="true">#</a> 1</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>表达式<span class="token operator">:</span>easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">HelpProvince</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>

sql<span class="token operator">:</span>select <span class="token operator">*</span> from help_province
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2" tabindex="-1"><a class="header-anchor" href="#_2" aria-hidden="true">#</a> 2</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>表达式<span class="token operator">:</span>easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">HelpProvince</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 

sql<span class="token operator">:</span>select <span class="token operator">*</span> from help_province where id<span class="token operator">=</span><span class="token char">&#39;1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3" tabindex="-1"><a class="header-anchor" href="#_3" aria-hidden="true">#</a> 3</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>表达式<span class="token operator">:</span>easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">HelpProvince</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sql<span class="token operator">:</span>select <span class="token operator">*</span> from help_province where id<span class="token operator">=</span><span class="token char">&#39;1&#39;</span> order by id asc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4" tabindex="-1"><a class="header-anchor" href="#_4" aria-hidden="true">#</a> 4</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>表达式<span class="token operator">:</span>          easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">HelpProvince</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">HelpProvinceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">)</span>

sql<span class="token operator">:</span>select id<span class="token punctuation">,</span>name from help_province where id<span class="token operator">=</span><span class="token char">&#39;1&#39;</span> order by id asc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以<code>select</code>方法作为终结方法结束本次<code>sql</code>链式,后续的操作就是将<code>select</code>和之前的表达式转成<code>匿名sql</code>类似<code>select * from (select * from help_province) t</code>，其中<code>fetcher</code>是<code>select</code>的简化操作不支持返回VO，当且仅当返回结果为自身时用于快速选择列</p><h3 id="_5" tabindex="-1"><a class="header-anchor" href="#_5" aria-hidden="true">#</a> 5</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>表达式<span class="token operator">:</span>easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">HelpProvince</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">HelpProvinceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token comment">//转成匿名表sql</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 

sql<span class="token operator">:</span>select <span class="token operator">*</span> from <span class="token punctuation">(</span>select id<span class="token punctuation">,</span>name from help_province where id<span class="token operator">=</span><span class="token char">&#39;1&#39;</span> order by id asc<span class="token punctuation">)</span> t where t<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token char">&#39;1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6" tabindex="-1"><a class="header-anchor" href="#_6" aria-hidden="true">#</a> 6</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>表达式<span class="token operator">:</span>easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">HelpProvince</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">HelpProvinceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token comment">//转成匿名表sql</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o<span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">HelpProvinceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span> 

sql<span class="token operator">:</span>select id from <span class="token punctuation">(</span>select id<span class="token punctuation">,</span>name from help_province where id<span class="token operator">=</span><span class="token char">&#39;1&#39;</span> order by id asc<span class="token punctuation">)</span> t where t<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token char">&#39;1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">链式说明!!!</p><blockquote><p>select之前的所有操作比如多个where,多个orderby都是对之前的追加,limit是替换前面的操作多次limit获取最后一次<br> 在entityQuery下groupBy不支持连续调用两个groupBy之间必须存在一个select指定要查询的结果才可以,其他api下多次调用行为也是追加</p></blockquote></div>`,34),l=[u];function i(k,d){return p(),e("div",null,l)}const f=t(c,[["render",i],["__file","select.html.vue"]]);export{f as default};

import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e}from"./app-095c1c07.js";const t={},o=e(`<h1 id="注解说明" tabindex="-1"><a class="header-anchor" href="#注解说明" aria-hidden="true">#</a> 注解说明</h1><h2 id="table" tabindex="-1"><a class="header-anchor" href="#table" aria-hidden="true">#</a> Table</h2><p>描述对象对应数据库表名,vo对象不需要,非数据库对象不需要</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>&quot;&quot;</td><td>数据库表名为空表示 nameConversion.convert(class.getSimpleName) 可以再运行时修改</td></tr><tr><td>schema</td><td>&quot;&quot;</td><td>数据库schema 可以在运行时修改,默认jdbc连接串的database</td></tr><tr><td>ignoreProperties</td><td>{}</td><td>需要忽略的属性,一般用于继承父类需要忽略父类的属性</td></tr><tr><td>shardingInitializer</td><td>UnShardingInitializer.class</td><td>分片初始化器,当且仅当对象是分片对象是用来初始化分片对象,也可以不添加后续手动添加</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;t_topic&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Topic</span> <span class="token punctuation">{</span>
    <span class="token comment">//.....</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="column" tabindex="-1"><a class="header-anchor" href="#column" aria-hidden="true">#</a> Column</h2><p>描述属性对应的列名</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>&quot;&quot;</td><td>对应数据库表的列名,默认空为nameConversion.convert(属性名)</td></tr><tr><td>primaryKey</td><td>false</td><td>表示是否是主键,如果是那么在update对象delete对象将会以这个字段为id</td></tr><tr><td>increment(弃用)</td><td>false</td><td>是否是自增列,如果是true,那么在<code>insertable().executeRows(true)</code>后获取自增id后将会填充到里面</td></tr><tr><td>generatedKey</td><td>false</td><td>是否是自增列,如果是true,那么在<code>insertable().executeRows(true)</code>后获取自增id后将会填充到里面</td></tr><tr><td>large</td><td>false</td><td>用来描述当前列是否是大列,如果是可以通过默认配置或者运行时指定是否需要查询出该列</td></tr><tr><td>conversion</td><td>DefaultValueConverter.class</td><td>值转换器,默认表示不转换,可以自定义枚举或者json等</td></tr><tr><td>valueUpdateAtomicTrack</td><td>DefaultValueUpdateAtomicTrack.class</td><td>原子更新,默认表示无原子更新</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;t_topic&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Topic</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>primaryKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> stars<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span><span class="token string">&quot;title1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="columnignore" tabindex="-1"><a class="header-anchor" href="#columnignore" aria-hidden="true">#</a> ColumnIgnore</h2><p>添加这个注解的属性将会被直接忽略映射到数据库</p><h2 id="insertignore" tabindex="-1"><a class="header-anchor" href="#insertignore" aria-hidden="true">#</a> InsertIgnore</h2><p>添加这个注解的属性将不会再插入时被赋值</p><h2 id="updateignore" tabindex="-1"><a class="header-anchor" href="#updateignore" aria-hidden="true">#</a> UpdateIgnore</h2><p>添加这个注解的属性将不会再更新时被更新除非手动指定,比如<code>创建时间</code>、<code>创建人</code>、<code>逻辑删除字段</code>,<code>large column</code>,如果当前字段标记<code>update ignore</code>那么如果是非track更新那么将会直接忽略,如果属性<code>updateSetInTrackDiff = true</code>那么在track下更新那么还是有效的</p><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p><code>large column</code>添加<code>UpdateIgnore</code>是为了保证大字段被查询出来后如果进行entity全字段更新那么因为<code>title</code>没有被查询所以更新的时候就会把null更新掉(默认更新策略就是全字段),所以这边采用更新忽略,如果需要可以用表达式忽略 [当然您也可以选择更新策略为非null更新]</p></blockquote></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;t_topic&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Topic</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>primaryKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> stars<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>large<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@UpdateIgnore</span> <span class="token comment">//大字段字段不需要update时更新 防止全字段更新把原字段改为null</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@UpdateIgnore</span> <span class="token comment">//创建时间字段不需要update时更新</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@LogicDelete</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">LogicDeleteStrategyEnum</span><span class="token punctuation">.</span><span class="token constant">BOOLEAN</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@UpdateIgnore</span> <span class="token comment">//逻辑删除字段不需要update时更新</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> deleted<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="logicdelete" tabindex="-1"><a class="header-anchor" href="#logicdelete" aria-hidden="true">#</a> LogicDelete</h2><p>逻辑删除,表示当前字段对应到数据库是逻辑删除表示,select将会过滤,update也会过滤,delete数据将会被改写为update</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>BOOLEAN</td><td>逻辑删除策略,默认true表示删除,false表示不删除</td></tr><tr><td>strategyName</td><td>&quot;&quot;</td><td>当逻辑删除为自定义逻辑删除时</td></tr></tbody></table><ul><li>BOOLEAN false表示未被删除</li><li>DELETE_LONG_TIMESTAMP 0表示未被删除</li><li>LOCAL_DATE_TIME null表示未被删除</li><li>LOCAL_DATE null表示未被删除</li><li>CUSTOM 用户自定义</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;t_topic&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Topic</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>primaryKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> stars<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>large<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@UpdateIgnore</span> <span class="token comment">//大字段字段不需要update时更新 防止全字段更新把原字段改为null</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@UpdateIgnore</span> <span class="token comment">//创建时间字段不需要update时更新</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@LogicDelete</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">LogicDeleteStrategyEnum</span><span class="token punctuation">.</span><span class="token constant">BOOLEAN</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@UpdateIgnore</span> <span class="token comment">//逻辑删除字段不需要update时更新</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> deleted<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="version" tabindex="-1"><a class="header-anchor" href="#version" aria-hidden="true">#</a> Version</h2><p>乐观锁也就是版本号</p><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>-</td><td>自行定义版本号策略</td></tr></tbody></table><h3 id="默认乐观锁版本号策略" tabindex="-1"><a class="header-anchor" href="#默认乐观锁版本号策略" aria-hidden="true">#</a> 默认乐观锁版本号策略</h3><ul><li>VersionIntStrategy</li><li>VersionLongStrategy</li><li>VersionTimestampStrategy (不推荐)</li><li>VersionUUIDStrategy</li></ul><h4 id="versionintstrategy" tabindex="-1"><a class="header-anchor" href="#versionintstrategy" aria-hidden="true">#</a> VersionIntStrategy</h4><p>//这边使用的是Version=2也可以使用version+1但是其实是一样的因为where后面限定了version=1</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">table</span> <span class="token keyword">set</span> version<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">where</span> id<span class="token operator">=</span>xxx <span class="token operator">and</span> version<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="versionlongstrategy" tabindex="-1"><a class="header-anchor" href="#versionlongstrategy" aria-hidden="true">#</a> VersionLongStrategy</h4><p>//这边使用的是Version=2也可以使用version+1但是其实是一样的因为where后面限定了version=1</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">table</span> <span class="token keyword">set</span> version<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">where</span> id<span class="token operator">=</span>xxx <span class="token operator">and</span> version<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="versionuuidstrategy" tabindex="-1"><a class="header-anchor" href="#versionuuidstrategy" aria-hidden="true">#</a> VersionUUIDStrategy</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">table</span> <span class="token keyword">set</span> version<span class="token operator">=</span>xxxxxxasd <span class="token keyword">where</span> id<span class="token operator">=</span>xxx <span class="token operator">and</span> version<span class="token operator">=</span>xxxxasdasd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="encryption" tabindex="-1"><a class="header-anchor" href="#encryption" aria-hidden="true">#</a> Encryption</h2><p>列加密,支持自定义数据加密存储,并且支持在数据库层面进行like搜索处理,拥有非常高的性能,并不是利用数据库加解密函数</p><h3 id="encryptionstrategy" tabindex="-1"><a class="header-anchor" href="#encryptionstrategy" aria-hidden="true">#</a> EncryptionStrategy</h3><p>用来处理如何加密解密数据策略,可以自定义实现</p><p>默认实现有一个aes+base64的<code>AbstractAesBase64EncryptionStrategy</code>抽象类,用户需要返回16位的向量和秘钥</p><h3 id="supportquerylike" tabindex="-1"><a class="header-anchor" href="#supportquerylike" aria-hidden="true">#</a> supportQueryLike</h3><p>用来表示是否需要支持like搜索,如果true那么就会在入参参数中对其进行分段加密</p><h2 id="navigate" tabindex="-1"><a class="header-anchor" href="#navigate" aria-hidden="true">#</a> Navigate</h2><p>导航属性 用在数据库对象和返回结果上面用于处理一对一，一对多，多对一，多对多</p><h2 id="shardingdatasourcekey" tabindex="-1"><a class="header-anchor" href="#shardingdatasourcekey" aria-hidden="true">#</a> ShardingDataSourceKey</h2><p>用来标识当前对象的数据库分库键是哪个</p><h2 id="shardingextradatasourcekey" tabindex="-1"><a class="header-anchor" href="#shardingextradatasourcekey" aria-hidden="true">#</a> ShardingExtraDataSourceKey</h2><p>用来标识当前对象是数据库分库额外分库键是哪个</p><h2 id="shardingtablekey" tabindex="-1"><a class="header-anchor" href="#shardingtablekey" aria-hidden="true">#</a> ShardingTableKey</h2><p>用来标识当前对象的数据库分表键是哪个</p><h2 id="shardingextratablekey" tabindex="-1"><a class="header-anchor" href="#shardingextratablekey" aria-hidden="true">#</a> ShardingExtraTableKey</h2><p>用来标识当前对象的数据库分表额外键是哪个</p><h2 id="easywherecondition" tabindex="-1"><a class="header-anchor" href="#easywherecondition" aria-hidden="true">#</a> EasyWhereCondition</h2><p>默认的动态条件对象查询条件,可以自行替换自定义注解来实现动态条件</p><h2 id="easyquerytrack" tabindex="-1"><a class="header-anchor" href="#easyquerytrack" aria-hidden="true">#</a> EasyQueryTrack</h2><p>默认的追踪上下文注解也可以自定义,用于方法之上</p><h2 id="entityproxy" tabindex="-1"><a class="header-anchor" href="#entityproxy" aria-hidden="true">#</a> EntityProxy</h2><p>生成代理对象,添加到实体和dto之上用来自动生成apt代理类,生成的文件存在于target目录下,clean后需要重新build</p><h2 id="entityfileproxy" tabindex="-1"><a class="header-anchor" href="#entityfileproxy" aria-hidden="true">#</a> EntityFileProxy</h2><p>同<code>EntityProxy</code>但是生成的文件存在源码中</p><h2 id="proxyproperty" tabindex="-1"><a class="header-anchor" href="#proxyproperty" aria-hidden="true">#</a> ProxyProperty</h2><p>用来防止生成的apt属性和系统自带的重复,可以再属性上定义别名</p>`,62),i=[o];function p(r,d){return n(),s("div",null,i)}const u=a(t,[["render",p],["__file","annotation.html.vue"]]);export{u as default};

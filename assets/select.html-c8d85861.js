import{_ as n,W as s,X as o,Y as e,Z as l,$ as c,a1 as d,C as u}from"./framework-7a1bedf3.js";const a={},r=e("h1",{id:"select",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#select","aria-hidden":"true"},"#"),l(" select")],-1),_=e("p",null,[e("code",null,"easy-query"),l("的"),e("code",null,"select"),l("是用来终结当前表达式生成新的表达式的方式")],-1),i=e("h2",{id:"api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#api","aria-hidden":"true"},"#"),l(" API")],-1),h=e("thead",null,[e("tr",null,[e("th",null,"方法"),e("th",null,"参数"),e("th",null,"返回"),e("th",null,"描述")])],-1),p=e("tr",null,[e("td",null,[e("code",null,"select(SqlExpression selectExpression)")]),e("td",null,"列选择器"),e("td",null,"this"),e("td",null,[l("返回当前"),e("code",null,"Queryable"),l("对象指定的列,用于按需查询")])],-1),f=e("tr",null,[e("td",null,[e("code",null,"select(Class<TR> resultClass)")]),e("td",null,"列选择器返回对象"),e("td",null,"this"),e("td",null,[l("返回当前"),e("code",null,"Queryable"),l("对象属性映射所对应的列名和返回结果属性列名一样的列,即两者属性名可以不一致但是只要两者属性名都是映射为相同"),e("code",null,"columnName"),l("即可互相映射，如果返回结果属性类型不包容原属性类型，比如"),e("code",null,"String->Integer"),l(" 那么可能会出现转换失败")])],-1),m=e("td",null,[e("code",null,"select(Class<TR> resultClass, SqlExpression selectExpression)")],-1),x=e("td",null,"列选择器返回对象,列选择器",-1),b=e("td",null,"this",-1),C=e("code",null,"Queryable",-1),y=e("code",null,"columnName",-1),g=e("code",null,"String->Integer",-1),E=e("strong",null,"！！！该方法默认不查询任何列需要手动在第二个参数表达式指定！！！",-1);function N(S,q){const t=u("font");return s(),o("div",null,[r,_,i,e("table",null,[h,e("tbody",null,[p,f,e("tr",null,[m,x,b,e("td",null,[l("返回当前"),C,l("对象属性映射所对应的列名和返回结果属性列名一样的列,即两者属性名可以不一致但是只要两者属性名都是映射为相同"),y,l("即可互相映射，如果返回结果属性类型不包容原属性类型，比如"),g,l(" 那么可能会出现转换失败,区别就是可以自己手动指定列,"),c(t,{color:"red"},{default:d(()=>[E]),_:1})])])])])])}const B=n(a,[["render",N],["__file","select.html.vue"]]);export{B as default};

import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as u,c as i,a as r,w as a,e as p,d as s,b as n}from"./app-7415a74f.js";const k={},d=p('<h1 id="默认行为配置" tabindex="-1"><a class="header-anchor" href="#默认行为配置" aria-hidden="true">#</a> 默认行为配置</h1><h2 id="默认行为" tabindex="-1"><a class="header-anchor" href="#默认行为" aria-hidden="true">#</a> 默认行为</h2><table><thead><tr><th>方法</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>select</td><td><code>queryLargeColumn</code>:<code>true</code></td><td>默认查询返回<code>@Column(large=true)</code> 不建议在实体对象上使用因为会导致update的时候有可能null会被更新掉,当然可以设置忽略更新<code>@UpdateIgnore</code>除非手动指定更新也是可以的</td></tr><tr><td>insert</td><td><code>SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS</code></td><td>默认生成语句不包含null列 0.8.14+有效</td></tr><tr><td>update</td><td><code>SQLExecuteStrategyEnum.ALL_COLUMNS</code></td><td>默认更新所有列包括null和非null</td></tr><tr><td>delete</td><td><code>allowDeleteStatement</code>:<code>false</code></td><td>默认执行物理删除会报错</td></tr><tr><td>insertBatchThreshold</td><td>512</td><td>如果insertable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率</td></tr><tr><td>updateBatchThreshold</td><td>512</td><td>如果updatable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率</td></tr></tbody></table><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2>',4),m=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{class:"language-yaml"},[n("code",null,[n("span",{class:"token key atrule"},"easy-query"),n("span",{class:"token punctuation"},":"),s(`
  `),n("span",{class:"token key atrule"},"enable"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean important"},"true"),s(`
  `),n("span",{class:"token key atrule"},"insert-strategy"),n("span",{class:"token punctuation"},":"),s(` only_not_null_columns
  `),n("span",{class:"token key atrule"},"update-strategy"),n("span",{class:"token punctuation"},":"),s(` all_columns
  `),n("span",{class:"token key atrule"},"delete-throw"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean important"},"true"),s(`
  `),n("span",{class:"token key atrule"},"query-large-column"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token boolean important"},"true"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
easyQuery `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"EasyQueryBootstrapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defaultBuilderConfiguration"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setDefaultDataSource"),n("span",{class:"token punctuation"},"("),s("dataSource"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"optionConfigure"),n("span",{class:"token punctuation"},"("),s("op"),n("span",{class:"token operator"},"->"),n("span",{class:"token punctuation"},"{"),s(`
            op`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setDeleteThrowError"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            op`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setInsertStrategy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SQLExecuteStrategyEnum"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ONLY_NOT_NULL_COLUMNS"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            op`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setUpdateStrategy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SQLExecuteStrategyEnum"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ALL_COLUMNS"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            op`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setQueryLargeColumn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"useDatabaseConfigure"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MySQLDatabaseConfiguration"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"build"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=p(`<h2 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h2><p><code>queryLargeColumn</code>表示是否查询出对应的表示为<code>@Column(large=true)</code>的字段,默认<code>true</code>表示查询,如果设置为false则需要手动指定对应列,可以通过调用api接口<code>queryLargeColumn(boolean)</code>传入对应的值来表示是否查询,建议和<code>@UpdateIgnore</code>如果你需要不返回的话,不然有可能导致更新策略为<code>AllColumn</code>的时候把这个字段更新为null,当然因为<code>easy-query</code>支持VO查询所以只需要查询结果中没有这个字段或者<code>@ColumnIgnore</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;query_large_column_test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryLargeColumnTestEntity</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>large <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//默认会被查询</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT \`id\`,\`name\`,\`content\` FROM \`query_large_column_test\`</span>


<span class="token comment">//设置不查询</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryLargeColumn</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//SELECT \`id\`,\`name\` FROM \`query_large_column_test\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> insert</h2><p><code>insertStrategy</code>表示sql的执行策略,<code>insert</code>命令默认采用<code>SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS</code>就是说默认生成的sql如果对象属性为null就不生成insert列。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">insertable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//默认not null列插入所以只会生成一列</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">INSERT</span> <span class="token constant">INTO</span> \`query_large_column_test\` <span class="token punctuation">(</span>\`id\`<span class="token punctuation">)</span> <span class="token constant">VALUES</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span> 
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">123</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>


<span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">insertable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSQLStrategy</span><span class="token punctuation">(</span><span class="token class-name">SQLExecuteStrategyEnum</span><span class="token punctuation">.</span><span class="token constant">ALL_COLUMNS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//所有列都插入</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">INSERT</span> <span class="token constant">INTO</span> \`query_large_column_test\` <span class="token punctuation">(</span>\`id\`<span class="token punctuation">,</span>\`name\`<span class="token punctuation">,</span>\`content\`<span class="token punctuation">)</span> <span class="token constant">VALUES</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span> 
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">123</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>



<span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">insertable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSQLStrategy</span><span class="token punctuation">(</span><span class="token class-name">SQLExecuteStrategyEnum</span><span class="token punctuation">.</span><span class="token constant">ONLY_NULL_COLUMNS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//只插入null列</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">INSERT</span> <span class="token constant">INTO</span> \`query_large_column_test\` <span class="token punctuation">(</span>\`name\`<span class="token punctuation">,</span>\`content\`<span class="token punctuation">)</span> <span class="token constant">VALUES</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span> 
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> update</h2><p><code>updateStrategy</code>表示sql的执行策略,<code>update</code>命令默认采用<code>SQLExecuteStrategyEnum.ALL_COLUMNS</code>就是说默认生成的sql无论对象是否是null属性都会进行更新。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">updatable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//默认更新所有列</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">UPDATE</span> \`query_large_column_test\` <span class="token constant">SET</span> \`name\` <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">,</span>\`content\` <span class="token operator">=</span> <span class="token operator">?</span> <span class="token constant">WHERE</span> \`id\` <span class="token operator">=</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">123</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>



<span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">updatable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSQLStrategy</span><span class="token punctuation">(</span><span class="token class-name">SQLExecuteStrategyEnum</span><span class="token punctuation">.</span><span class="token constant">ONLY_NOT_NULL_COLUMNS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将不会生成sql因为只有一个主键没有其他任何需要update的列</span>



<span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">updatable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSQLStrategy</span><span class="token punctuation">(</span><span class="token class-name">SQLExecuteStrategyEnum</span><span class="token punctuation">.</span><span class="token constant">ONLY_NOT_NULL_COLUMNS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//更新not null列</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">UPDATE</span> \`query_large_column_test\` <span class="token constant">SET</span> \`name\` <span class="token operator">=</span> <span class="token operator">?</span> <span class="token constant">WHERE</span> \`id\` <span class="token operator">=</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">123</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">123</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>



<span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">updatable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSQLStrategy</span><span class="token punctuation">(</span><span class="token class-name">SQLExecuteStrategyEnum</span><span class="token punctuation">.</span><span class="token constant">ONLY_NULL_COLUMNS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//更新null列</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">UPDATE</span> \`query_large_column_test\` <span class="token constant">SET</span> \`content\` <span class="token operator">=</span> <span class="token operator">?</span> <span class="token constant">WHERE</span> \`id\` <span class="token operator">=</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">123</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>



<span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">updatable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSQLStrategy</span><span class="token punctuation">(</span><span class="token class-name">SQLExecuteStrategyEnum</span><span class="token punctuation">.</span><span class="token constant">ONLY_NULL_COLUMNS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//因为没有null列所以不会生成sql返回受影响行数也是0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> delete</h2><p><code>deleteThrowError</code>是<code>easy-query</code>防止数据被删除的默认设置,默认为true,表示不允许删除数据,可以采用逻辑删除来处理数据的删除。可以通过api接口来实现物理删除</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">deletable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//抛错错误 can&#39;t execute delete statement</span>


<span class="token class-name">QueryLargeColumnTestEntity</span> queryLargeColumnTestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryLargeColumnTestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryLargeColumnTestEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">deletable</span><span class="token punctuation">(</span>queryLargeColumnTestEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowDeleteStatement</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//允许删除命令</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">DELETE</span> <span class="token constant">FROM</span> \`query_large_column_test\` <span class="token constant">WHERE</span> \`id\` <span class="token operator">=</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">123</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function g(b,L){const o=l("CodeTabs");return u(),i("div",null,[d,r(o,{id:"92",data:[{id:"SpringBoot"},{id:"控制台"}]},{title0:a(({value:t,isActive:e})=>[s("SpringBoot")]),title1:a(({value:t,isActive:e})=>[s("控制台")]),tab0:a(({value:t,isActive:e})=>[m]),tab1:a(({value:t,isActive:e})=>[v]),_:1}),y])}const C=c(k,[["render",g],["__file","behavior.html.vue"]]);export{C as default};

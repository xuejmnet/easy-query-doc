import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,f as e,e as n}from"./app-376614f2.js";const o="/easy-query-doc/plugin-market.jpg",p="/easy-query-doc/plugin-tools.png",c="/easy-query-doc/plugin-sql-format-preview.jpg",i="/easy-query-doc/plugin-sql-format-preview2.jpg",l="/easy-query-doc/startup5.png",u="/easy-query-doc/startup6.png",r="/easy-query-doc/plugin-database-1.png",d="/easy-query-doc/plugin-database-2.png",k="/easy-query-doc/plugin-database-3.png",m="/easy-query-doc/plugin-database-4.png",y="/easy-query-doc/plugin-database-5.png",g="/easy-query-doc/plugin-database-6.png",v="/easy-query-doc/plugin-database-7.png",b="/easy-query-doc/EQDTO1.jpg",h="/easy-query-doc/EQDTO2.jpg",q="/easy-query-doc/EQDTO3.jpg",_="/easy-query-doc/EQDTO4.jpg",f="/easy-query-doc/EQDTO5.jpg",w="/easy-query-doc/EQDTO6.jpg",E="/easy-query-doc/plugin-max1.jpg",x="/easy-query-doc/plugin-max2.jpg",j="/easy-query-doc/plugin-max3.jpg",I="/easy-query-doc/plugin-max3_1.png",Q="/easy-query-doc/plugin-max3_2.png",T="/easy-query-doc/plugin-max4.jpg",A="/easy-query-doc/plugin-max5.jpg",C="/easy-query-doc/plugin-max11.jpg",D="/easy-query-doc/plugin-max12.jpg",N="/easy-query-doc/plugin-max13.jpg",S="/easy-query-doc/plugin-max14.jpg",U="/easy-query-doc/plugin-max15.jpg",B="/easy-query-doc/plugin-max16.jpg",J={},O=n('<p>工欲善其事必先利其器,一款好用的助手插件可以帮助我们节省大量的时间去编写处理重复性劳动</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2><ul><li>无需构建项目，刷新Maven，使用插件可以直接生成代理类并添加接口</li><li>sql日志批量生成无占位可直接运行的sql 快捷键shift+m</li><li>根据表生成对应的实体（自定义模板导出导入）</li><li>查询时提示表别名</li><li>查询时提示更直观的关系运算符</li></ul><h2 id="选择合适的版本" tabindex="-1"><a class="header-anchor" href="#选择合适的版本" aria-hidden="true">#</a> 选择合适的版本</h2><table><thead><tr><th>插件版本</th><th>easy-query版本</th><th>更新内容</th></tr></thead><tbody><tr><td>0.0.16</td><td>1.8.4+</td><td><code>entityQuery</code>支持函数区分,SQLColumn生成分成更细的column</td></tr><tr><td>0.0.15</td><td>1.8.2+</td><td>支持带属性<code>SQLColumn</code></td></tr></tbody></table><p>支持的idea版本</p><ul><li>IntelliJ IDEA Ultimate 2023.3.2Compatible</li><li>IntelliJ IDEA Ultimate 2023.2.5Compatible</li><li>IntelliJ IDEA Ultimate 2023.1.5Compatible</li><li>IntelliJ IDEA Ultimate 2022.3.3Compatible</li><li>IntelliJ IDEA Ultimate 2022.2.5Compatible</li></ul><p>不支持以下版本如果需要支持可以加qq群联系群主</p><ul><li>IntelliJ IDEA Ultimate 2022.1.4Compatible</li><li>IntelliJ IDEA Ultimate 2021.3.3Compatible</li><li>IntelliJ IDEA Ultimate 2021.2.4Compatible</li><li>IntelliJ IDEA Ultimate 2021.1.3Compatible</li><li>IntelliJ IDEA Ultimate 2020.3.4Compatible</li></ul><p>因为插件内部附带<code>com.intellij.database</code>这个包所以社区版本的idea无法安装,如果不需要代码生成工具那么可以进群和联系群主会编译去除该插件的版本</p><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p>如果您非旗舰版idea可能无法使用当前插件您可以进群联系作者,我会给您编译一个社区版本支持的插件</p></blockquote></div><h2 id="版本升级" tabindex="-1"><a class="header-anchor" href="#版本升级" aria-hidden="true">#</a> 版本升级</h2><p>如果你是<code>@EntityProxy</code>那么只需要升级对应的框架版本和插件版本然后重新clean即可,如果你是<code>@EntityFileProxy</code>那么升级完框架和插件版本后需要重新调用插件的<code>AutoCompile</code>让生成的代理文件重新生成一遍</p><h2 id="插件下载" tabindex="-1"><a class="header-anchor" href="#插件下载" aria-hidden="true">#</a> 插件下载</h2><p>从idea的插件市场下载插件</p><img src="'+o+'"><h2 id="sql格式化" tabindex="-1"><a class="header-anchor" href="#sql格式化" aria-hidden="true">#</a> SQL格式化</h2><p>Easy Query插件支持将SQL和参数进行格式化成可以执行的SQL。</p><img src="'+p+'"><div class="hint-container warning"><p class="hint-container-title">注意点及说明!!!</p><blockquote><p>数据库格式化只是简单的把参数拼接到sql中这样就可以直接运行，但是因为参数的复杂程度可能导致sql拼接不正确，所以这边不能太依赖这个插件尤其是参数中存在括号参数等会被误认为是参数从而导致拼接错误,轻易实际为准,sql预览这个只是锦上添花并不能作为实际的参考</p></blockquote></div><img src="'+c+'"><img src="'+i+'"><h2 id="快速生成接口" tabindex="-1"><a class="header-anchor" href="#快速生成接口" aria-hidden="true">#</a> 快速生成接口</h2><img src="'+l+'"><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p>如果EasyQueryImplement没有效果请检查类是否添加了<code>@EntityProxy</code>或者<code>@EntityFileProxy</code></p></blockquote></div><img src="'+u+'"><h2 id="entity对象生成" tabindex="-1"><a class="header-anchor" href="#entity对象生成" aria-hidden="true">#</a> Entity对象生成</h2><img src="'+r+'"><img src="'+d+'"><img src="'+k+'"><img src="'+m+'"><img src="'+y+'"><img src="'+g+'"><img src="'+v+'"><h2 id="创建dto" tabindex="-1"><a class="header-anchor" href="#创建dto" aria-hidden="true">#</a> 创建DTO</h2><p>手动创建DTO是一件很麻烦的事情,可以在<code>easy-query:1.10.60^</code>+<code>插件0.0.48^</code>快速生成嵌套结构化对象模型,</p><img src="'+b+'"><img src="'+h+'"><img src="'+q+'"><img src="'+_+'"><img src="'+f+'"><img src="'+w+'"><h2 id="参数名提示" tabindex="-1"><a class="header-anchor" href="#参数名提示" aria-hidden="true">#</a> 参数名提示</h2><p>我们都知道Easy Query无论在哪个模式下都需要编写lambda表达式,lambda表达式中最繁琐的一个地方在于参数名的编写，<br> 一般推荐使用表别名作为参数名，现在可以在<code>1.9.34^</code>的版本依赖配合<code>0.0.25^</code>版本的插件自动提示并自动补充查询参数的编写。</p><p>首先使用<code>@EasyAlias</code>声明表别名。</p><img src="'+E+'"><p>查询此实体类时，插件将可以自动提示并自动补充查询参数的编写。<br> 如果选择<code>where_code_block</code>提示则会额外生成对应的<code>{}</code></p><img src="'+x+'"><img src="'+j+'"><p>关联查询</p><img src="'+I+'"><img src="'+Q+'"><p>除了配置<code>@EasyAlias</code>，我们也可以在<code>Tools</code>-&gt;<code>QuickTipSetting</code>设置，为没有添加<code>@EasyAlias</code>的实体类添加表别名</p><img src="'+T+'"><img src="'+A+`"><div class="hint-container tip"><p class="hint-container-title">填写说明</p><blockquote><p><code>o,t1:t2,t1:t2:t3</code>先按逗号分割,然后按冒号分割,分割结果按逗号分组,如果每组数量和lambda数量一致则使用这边的参数,如果配置了<code>@EasyAlias</code>对应的那个还是用<code>@EasyAlias</code><br> 比如查询单表没有配置<code>@EasyAlias</code>，但是全局配置了<code>o,t1:t2,t1:t2:t3</code>,<br> 那么如果只有一个入参就会生成<code>where(o-&gt;)</code>，关联查询时，有两个入参生成就会生成<code>where((t1,t2)-&gt;)</code><br> 如果参数不匹配则会按照每个对象的对象名称获取大写字母组成缩写,但是如果大写字母就一个则采用类名小写模式,比如<code>queryable(Topic.class).where(t-&gt;)</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
    <span class="token doc-comment comment">/**
     * 将对象类型转成lambda入参短名称
     * <span class="token keyword">@param</span> <span class="token parameter">str</span> Topic || SysUser
     * <span class="token keyword">@param</span> <span class="token parameter">index</span> 在第几个参数位
     * <span class="token keyword">@param</span> <span class="token parameter">total</span> 总共有几个参数
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">lambdaShortName</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> total<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> parameter <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>total<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> parameter<span class="token operator">+</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> parameter<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>智能提示选项中，<code>select</code>,<code>where</code>,<code>where_code_block</code>,<code>orderBy</code>,<code>orderBy_code_block</code>,<code>groupBy</code>,<code>having</code>,<code>having_code_block</code>,<code>on</code>,<code>on_code_block</code><br> 都是直接使用<code>.</code>即可产生提示，因为它们前面已经填了实体类，有足够的上下文满足生成提示的条件，<code>join</code>相关的提示写法比较特殊,比如<code>.leftJoin(Toplic.class,)</code>，<br> 也是需要填完实体类后才能产生提示，只不过在参数中填写的。</p><h2 id="关系运算符提示" tabindex="-1"><a class="header-anchor" href="#关系运算符提示" aria-hidden="true">#</a> 关系运算符提示</h2><p>我们都知道，Easy Query的关系运算符中，<code>&gt;</code>是<code>gt</code>方法，<code>&lt;</code>是<code>lt</code>方法。<br> 对于这些符合无需特别去记忆，Easy Query插件贴心的提供了这些关系运算符的提示，<br> 我们可以直接使用<code>&gt;</code>，<code>&lt;</code>等关系运算符的提示，插件将自动替换对应的方法名。</p><img src="`+C+'"><img src="'+D+'"><img src="'+N+'"><img src="'+S+'"><img src="'+U+'"><img src="'+B+'">',65),L=n(`<h2 id="默认错误消息" tabindex="-1"><a class="header-anchor" href="#默认错误消息" aria-hidden="true">#</a> 默认错误消息</h2><p><code>EasyAssertMessage</code>注解实现默认错误消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EasyAssertMessage</span><span class="token punctuation">(</span><span class="token string">&quot;未找到主题信息&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EasyAlias</span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Topic</span><span class="token punctuation">{</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>
<span class="token comment">//默认错误</span>
<span class="token comment">// select 1 from topic where id=?</span>
easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">Topic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereById</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//抛错 未找到主题信息 </span>
<span class="token comment">// select id,name,age.... from topic where id=?</span>
easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">Topic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findNotNull</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token comment">//抛错 未找到主题信息</span>
<span class="token comment">// select id,name,age.... from topic where id=? limit 1</span>
easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">Topic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereById</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">firstNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//抛错 未找到主题信息</span>
<span class="token comment">// select id,name,age.... from topic where id=? 附加断言仅一条</span>
easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">Topic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereById</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">singleNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//抛错 未找到主题信息</span>



<span class="token comment">//手动错误</span>
<span class="token comment">// select 1 from topic where id=?</span>
easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">Topic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereById</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token string">&quot;自定义错误&quot;</span><span class="token punctuation">)</span><span class="token comment">//抛错 自定义错误 </span>
<span class="token comment">// select id,name,age.... from topic where id=?</span>
easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">Topic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findNotNull</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;自定义错误&quot;</span><span class="token punctuation">)</span><span class="token comment">//抛错 自定义错误</span>
<span class="token comment">// select id,name,age.... from topic where id=? limit 1</span>
easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">Topic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereById</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">firstNotNull</span><span class="token punctuation">(</span><span class="token string">&quot;自定义错误&quot;</span><span class="token punctuation">)</span><span class="token comment">//抛错 自定义错误</span>
<span class="token comment">// select id,name,age.... from topic where id=? 附加断言仅一条</span>
easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">Topic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereById</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">singleNotNull</span><span class="token punctuation">(</span><span class="token string">&quot;自定义错误&quot;</span><span class="token punctuation">)</span><span class="token comment">//抛错 自定义错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function P(M,F){return a(),t("div",null,[O,e(` ## 快速匿名对象

\`anonymous\`智能提示

<img src="/plugin-max6.jpg">


<img src="/plugin-max7.jpg">



<img src="/plugin-max8.jpg">


<img src="/plugin-max9.jpg">


<img src="/plugin-max10.jpg"> `),L])}const G=s(J,[["render",P],["__file","plugin.html.vue"]]);export{G as default};

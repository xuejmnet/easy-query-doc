import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-6de1c9a0.js";const t={},p=e(`<p><code>easy-query</code>支持以数据库函数生成列值,比如通过自定义<code>nextId()</code>函数来实现插入时生成对应的id列,而不是普通的对象属性列.</p><h2 id="自定义函数创建数据库自动生成列" tabindex="-1"><a class="header-anchor" href="#自定义函数创建数据库自动生成列" aria-hidden="true">#</a> 自定义函数创建数据库自动生成列</h2><p>数据库对象,必须设置generatedKey为true,表示为自动生成的,如果不添加<code>generatedSQLColumnGenerator</code>那么将会视为自增列一样,不加入insert语句由数据库生成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;custom_increment&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomIncrement</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>primaryKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>generatedKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> generatedSQLColumnGenerator <span class="token operator">=</span> <span class="token class-name">MyDatabaseIncrementSQLColumnGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义插入列函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDatabaseIncrementSQLColumnGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">GeneratedKeySQLColumnGenerator</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">TableAvailable</span> table<span class="token punctuation">,</span> <span class="token class-name">ColumnMetadata</span> columnMetadata<span class="token punctuation">,</span> <span class="token class-name">SQLPropertyConverter</span> sqlPropertyConverter<span class="token punctuation">,</span> <span class="token class-name">QueryRuntimeContext</span> runtimeContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sqlPropertyConverter<span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;mysqlNextId()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我定义了mysql的函数<code>mysqlNextId</code>自动生成主键id由mysql数据库函数来实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CustomIncrement</span> customIncrement<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CustomIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//customIncrement.setId();//无论是否设置都会用 mysqlNextId 作为插入函数</span>
customIncrement<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
customIncrement<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
easyQuery<span class="token punctuation">.</span><span class="token function">insertable</span><span class="token punctuation">(</span>customIncrement<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">INSERT</span> <span class="token constant">INTO</span> \`custom_increment\` <span class="token punctuation">(</span>\`id\`<span class="token punctuation">,</span>\`name\`<span class="token punctuation">,</span>\`address\`<span class="token punctuation">)</span> <span class="token constant">VALUES</span> <span class="token punctuation">(</span><span class="token function">mysqlNextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例场景" tabindex="-1"><a class="header-anchor" href="#案例场景" aria-hidden="true">#</a> 案例场景</h2><p>pgsql的geo数据新增或者自定义数据库函数生成列时,仅新增时调用</p>`,10),o=[p];function c(l,u){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","generated-key-sql-column.html.vue"]]);export{d as default};

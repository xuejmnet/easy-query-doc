import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as s}from"./app-DvB_5WTW.js";const o={};function i(r,e){return s(),a("div",null,e[0]||(e[0]=[n(`<h1 id="object-to-database-column-mapping-rules" tabindex="-1"><a class="header-anchor" href="#object-to-database-column-mapping-rules"><span>Object to Database Column Mapping Rules</span></a></h1><p><code>eq</code> provides ways to map Java properties to database columns: <code>nameConversion</code> (recommendedüî•) and the annotation <code>@Column</code></p><p>Why provide this functionality? Because by default, we consider Java properties to be in lower camel case, meaning the <code>userAge</code> pattern where the first letter is lowercase and the first letter of each subsequent word is uppercase</p><h2 id="column" tabindex="-1"><a class="header-anchor" href="#column"><span>Column</span></a></h2><p>The annotation&#39;s value attribute can map entity properties to corresponding database names, but this method is fixed and cannot dynamically map according to the default conventions ofÂêÑdatabases</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Column</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user_age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nameconversion" tabindex="-1"><a class="header-anchor" href="#nameconversion"><span>NameConversion</span></a></h2><table><thead><tr><th>Method</th><th>Purpose</th></tr></thead><tbody><tr><td>convert</td><td>Used to convert property names or class names to database table names or column names</td></tr><tr><td>annotationCovert</td><td>Since annotation @Table(&quot;t_user&quot;) hardcodes the table name in lowercase, to adapt one set of code to multiple databases where some places may have uppercase, you can implement this method yourself and replace the framework&#39;s default implementation</td></tr></tbody></table><p>The process is as follows</p><p>Read field name or column name -&gt; Check if there&#39;s <code>@Column</code> or <code>@Table</code> -&gt; Convert the internal <code>value</code> or field name/class name to column name or table name through the <code>convert</code> method -&gt; Finally convert once more through <code>annotationCovert</code> to get what&#39;s needed, default is no processing</p><p>Interface supports default Java property to database column name conversion</p><p>Conversion results when default Java properties are in lower camel case:</p><table><thead><tr><th>property</th><th>nameConversion</th><th>column</th></tr></thead><tbody><tr><td>userAge</td><td>DefaultNameConversion</td><td>userAge</td></tr><tr><td>userAge</td><td>UnderlinedNameConversion</td><td>user_age</td></tr><tr><td>userAge</td><td>UpperUnderlinedNameConversion</td><td>USER_AGE</td></tr><tr><td>userAge</td><td>LowerCamelCaseNameConversion</td><td>userAge</td></tr><tr><td>userAge</td><td>UpperCamelCaseNameConversion</td><td>UserAge</td></tr></tbody></table><div class="language-log line-numbers-mode" data-highlighter="shiki" data-ext="log" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">property:userAge--&gt;conversion:DefaultNameConversion--&gt;column:userAge</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">property:userAge--&gt;conversion:UnderlinedNameConversion--&gt;column:user_age</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">property:userAge--&gt;conversion:UpperUnderlinedNameConversion--&gt;column:USER_AGE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">property:userAge--&gt;conversion:LowerCamelCaseNameConversion--&gt;column:userAge</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">property:userAge--&gt;conversion:UpperCamelCaseNameConversion--&gt;column:UserAge</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Note!!!</p><blockquote><p>If the default conversions cannot meet your needs, you can customize <code>NameConversion</code> to <a href="/easy-query-doc/en/framework/replace-configure">replace the framework&#39;s default interface</a></p></blockquote></div>`,15)]))}const p=t(o,[["render",i]]),c=JSON.parse('{"path":"/en/framework/mapping-db.html","title":"Object to Database Column Mapping Rules","lang":"en-US","frontmatter":{"title":"Object to Database Column Mapping Rules","order":60,"description":"Object to Database Column Mapping Rules eq provides ways to map Java properties to database columns: nameConversion (recommendedüî•) and the annotation @Column Why provide this f...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Object to Database Column Mapping Rules\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-27T05:04:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/en/framework/mapping-db.html"}],["meta",{"property":"og:site_name","content":"Documentation"}],["meta",{"property":"og:title","content":"Object to Database Column Mapping Rules"}],["meta",{"property":"og:description","content":"Object to Database Column Mapping Rules eq provides ways to map Java properties to database columns: nameConversion (recommendedüî•) and the annotation @Column Why provide this f..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-27T05:04:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-27T05:04:42.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://github.com/dromara/easy-query/easy-query-doc/framework/mapping-db.html"}]]},"git":{"createdTime":1761541482000,"updatedTime":1761541482000,"contributors":[{"name":"Âè™ÊòØÊàë","username":"","email":"alice@example.com","commits":1}]},"readingTime":{"minutes":1.03,"words":310},"filePathRelative":"en/framework/mapping-db.md","autoDesc":true}');export{p as comp,c as data};

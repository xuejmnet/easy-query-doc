import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as i,o}from"./app-UffRaxZQ.js";const s={};function r(d,e){return o(),a("div",null,e[0]||(e[0]=[i('<p>eqv2版本已经将主要核心功能全部开发完毕,用户如果不想升级可以继续使用v2，且bug依然会修复</p><p>为了框架更好更稳定的发展,与源码的阅读和可维护性,作者打算对v2版本大刀阔斧的进行修改(之前是以功能作为第一优先进行开发毕竟作者自己也要用),一方面是因为历史原因导致easy-query的api4j模块和api4kt模块占用大量类目导致entity下不得不取其他类名,<br> 另一方面过多的api选择让不但让作者精力分散并且也要用户有更多的误解和选择困难,所以v2升级到v3有如下breakchange</p><h2 id="breakchange" tabindex="-1"><a class="header-anchor" href="#breakchange"><span>BreakChange</span></a></h2><h2 id="配置项默认值变动" tabindex="-1"><a class="header-anchor" href="#配置项默认值变动"><span>配置项默认值变动</span></a></h2><table><thead><tr><th>配置项</th><th>v2默认值</th><th>v3默认值</th></tr></thead><tbody><tr><td>propertyMode</td><td>FIRST_LOWER</td><td>SAME_AS_ENTITY</td></tr><tr><td>mappingStrategy</td><td>COLUMN_ONLY</td><td>PROPERTY_FIRST</td></tr><tr><td>sharding</td><td>-</td><td>false</td></tr></tbody></table><h2 id="_3-0-3破坏性变更" tabindex="-1"><a class="header-anchor" href="#_3-0-3破坏性变更"><span>3.0.3破坏性变更</span></a></h2><p>新增属性</p><table><thead><tr><th>配置项</th><th>v2默认值</th><th>v3默认值</th></tr></thead><tbody><tr><td>sharding</td><td>-</td><td>false</td></tr></tbody></table><p><code>EntityExpressionExecutor</code>默认实现<code>DefaultEntityExpressionExecutor</code>不再支持分片,如果需要实现分片请替换实现为<code>ShardingEntityExpressionExecutor</code><br> 并且优化<code>DefaultEntityExpressionExecutor</code>内部逻辑</p><h2 id="默认移除keepnativestyle" tabindex="-1"><a class="header-anchor" href="#默认移除keepnativestyle"><span>默认移除keepNativeStyle</span></a></h2><p>框架默认使用keepStyle将原生sql片段单引号变成双单引号如果不需要可以使用messageFormat函数来禁用</p><h3 id="移除api4j" tabindex="-1"><a class="header-anchor" href="#移除api4j"><span>移除api4j</span></a></h3><p>v3版本将重心放到entity模式,顾<code>User::getName</code>这种方式不再推荐,所以api4j包直接移除,那么如果用户想用api4j并且想升级到v3怎么办,用户可以独立拉取v2源码下的<code>sql-api4j</code>然后单独引入v3的<code>sql-core</code>包做相关适配</p><h3 id="移除api4kt" tabindex="-1"><a class="header-anchor" href="#移除api4kt"><span>移除api4kt</span></a></h3><p>原因同上</p><h3 id="移除过期api" tabindex="-1"><a class="header-anchor" href="#移除过期api"><span>移除过期api</span></a></h3><p>移除带有<code>@Deprecated</code>标记的过期api,用户可以根据源码提示迁移到新版本api后再升级</p><ul><li><code>GroupKeys.TABLE1.....N</code></li><li><code>QueryStrategy</code>、<code>ProxyEntityOnDuplicateKeyUpdate</code>、<code>SQLOnDuplicateKeyIgnore</code>接口</li><li><code>queryLargeColumn</code>方法</li><li><code>@Column</code>下的<code>large</code>属性</li><li><code>exists</code>改成<code>table.expression().exists</code></li><li><code>notExists</code>改成<code>table.expression().notExists</code></li><li><code>valueOrDefault</code>、<code>fetchBy</code>、<code>selectSum</code>、<code>selectAvg</code>、<code>selectMax</code>、<code>selectMin</code>、<code>trimStart</code>、<code>trimEnd</code>、<code>plus+TimeUnit</code>、<code>duration+DateTimeDurationEnum</code>、<code>sqlType</code></li><li><code>SQLParameter</code>、<code>SQLConstantExpression</code>、<code>join</code>、<code>sqlType</code>、<code>sqlType</code>、<code>sqlType</code>、<code>sqlType</code>、<code>sqlType</code></li><li><code>fetchBy</code>、<code>keepNativeStyle</code></li></ul><h3 id="启动类报错" tabindex="-1"><a class="header-anchor" href="#启动类报错"><span>启动类报错</span></a></h3><p>必须配置文件选择一个数据库不可以不选</p><div class="language-log line-numbers-mode" data-highlighter="shiki" data-ext="log" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">org.springframework.beans.factory.BeanCreationException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">Error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> creating bean with name </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;easyQueryClient&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> defined in class path resource [com/easy/query/sql/starter/EasyQueryStarterBuildAutoConfiguration.class]: Failed to instantiate [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">com.easy.query.core.api.client.EasyQueryClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]: Factory method </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;easyQueryClient&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> threw exception with message: Please select the correct database dialect. For Spring-related configuration, set it in the yml file, for example:[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">easy-query.database</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: mysql]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="类、接口变动" tabindex="-1"><a class="header-anchor" href="#类、接口变动"><span>类、接口变动</span></a></h2><table><thead><tr><th>v2</th><th>v3</th></tr></thead><tbody><tr><td>SQLExpression1....11</td><td>SQLActionExpression1....11</td></tr><tr><td>ColumnFunctionCompareComparableStringChainExpression</td><td>StringTypeExpression</td></tr><tr><td>ColumnFunctionCompareComparableNumberChainExpression</td><td>NumberTypeExpression</td></tr><tr><td>ColumnFunctionCompareComparableDateTimeChainExpression</td><td>DateTimeTypeExpression</td></tr><tr><td>ColumnFunctionCompareComparableBooleanChainExpression</td><td>BooleanTypeExpression</td></tr><tr><td>ColumnFunctionCompareComparableAnyChainExpression</td><td>AnyTypeExpression</td></tr><tr><td>ColumnFunctionCompareComparablePartitionByChainExpression</td><td>PartitionByTypeExpression</td></tr><tr><td>ColumnFunctionCompareComparableJsonMapChainExpression</td><td>JsonMapTypeExpression</td></tr><tr><td>SQLExpression1....11</td><td>SQLActionExpression1....11</td></tr></tbody></table>',23)]))}const c=t(s,[["render",r]]),l=JSON.parse('{"path":"/v2-v3.html","title":"eqv2升级v3🔥","lang":"zh-CN","frontmatter":{"title":"eqv2升级v3🔥","order":90,"description":"eqv2版本已经将主要核心功能全部开发完毕,用户如果不想升级可以继续使用v2，且bug依然会修复 为了框架更好更稳定的发展,与源码的阅读和可维护性,作者打算对v2版本大刀阔斧的进行修改(之前是以功能作为第一优先进行开发毕竟作者自己也要用),一方面是因为历史原因导致easy-query的api4j模块和api4kt模块占用大量类目导致entity下不得不...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eqv2升级v3🔥\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-31T14:01:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/v2-v3.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"eqv2升级v3🔥"}],["meta",{"property":"og:description","content":"eqv2版本已经将主要核心功能全部开发完毕,用户如果不想升级可以继续使用v2，且bug依然会修复 为了框架更好更稳定的发展,与源码的阅读和可维护性,作者打算对v2版本大刀阔斧的进行修改(之前是以功能作为第一优先进行开发毕竟作者自己也要用),一方面是因为历史原因导致easy-query的api4j模块和api4kt模块占用大量类目导致entity下不得不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-31T14:01:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-31T14:01:03.000Z"}]]},"git":{"createdTime":1747264731000,"updatedTime":1756648863000,"contributors":[{"name":"xuejiaming","username":"xuejiaming","email":"326308290@qq.com","commits":6,"url":"https://github.com/xuejiaming"}]},"readingTime":{"minutes":1.99,"words":598},"filePathRelative":"v2-v3.md","autoDesc":true}');export{c as comp,l as data};

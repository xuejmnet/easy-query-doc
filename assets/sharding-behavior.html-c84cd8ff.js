import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as d,e as o}from"./app-a0882617.js";const c={},r=o('<h1 id="分片默认行为配置" tabindex="-1"><a class="header-anchor" href="#分片默认行为配置" aria-hidden="true">#</a> 分片默认行为配置</h1><h2 id="默认行为" tabindex="-1"><a class="header-anchor" href="#默认行为" aria-hidden="true">#</a> 默认行为</h2><table><thead><tr><th>方法</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>connectionMode</td><td><code>ConnectionModeEnum.SYSTEM_AUTO</code></td><td>系统自动选择有内存严格和连接数严格,内存严格表示会多开连接数，连接数严格会选择少开连接数在内存归并</td></tr><tr><td>maxShardingQueryLimit</td><td><code>5</code></td><td>当出现跨分片聚合也就是通过表达式无法精确到具体路由或筛选后路由大于1那么会开启最多多少个线程为一组进行查询聚合,默认是5。注意这个值的设置不可以大于数据库连接池数量</td></tr><tr><td>executorMaximumPoolSize</td><td><code>0</code></td><td>当值为0时分片聚合采用无界队列<code>Executors.newCachedThreadPool</code>,如果自定义必须大于<code>maxShardingQueryLimit</code>*分库数量，执行线程数 如果为0那么采用无界线程池<code>Executors.newCachedThreadPool</code>,如果是大于0采用长度为<code>executorQueueSize</code>的有界队列,核心线程数采用<code>executorCorePoolSize</code>并且需要比 <code>executorCorePoolSize</code>值大</td></tr><tr><td>executorCorePoolSize</td><td>当前环境线程数且最小为:<code>4</code></td><td>当且仅当<code>executorMaximumPoolSize</code>&gt;0生效</td></tr><tr><td>executorQueueSize</td><td><code>1024</code></td><td>当且仅当<code>executorMaximumPoolSize</code>&gt;0生效 分片聚合执行线程队列</td></tr><tr><td>throwIfRouteNotMatch</td><td><code>true</code></td><td>当查询没有路由匹配的时候查询是否报错,true:表示报错,false:表示返回默认值</td></tr><tr><td>shardingExecuteTimeoutMillis</td><td><code>30000(ms)</code></td><td>分片聚合超时时间默认30秒</td></tr><tr><td>maxShardingRouteCount</td><td><code>128</code></td><td>当出现条件分片大于多少时报错默认128,就是比如select where update where delete where路由到过多的表就会报错,entity操作比如update对象，insert，delete对象不会判断这个条件</td></tr><tr><td>defaultDataSourceName</td><td><code>ds0</code></td><td>默认分库数据源名称,分表设置与否无关紧要</td></tr><tr><td>defaultDataSourceMergePoolSize</td><td><code>0</code></td><td>默认数据源的数据源连接池大小分表有效,一般设置为最少最少 &gt;= maxShardingQueryLimit，当小于maxShardingQueryLimit后启动会抛出警告，建议和实际数据库连接池大小一致或者比实际稍小,用于防止获取链接死锁程序假死,假设线程池为3并且不设置当前值,那么如果有3个线程a,b,c分别需要聚合2个分片,那么如果线程a,b,c都拿到1个线程的情况下想要拿到下一个链接需要其中一个释放,那么就会导致死锁要分别等到其他线程超时,默认<code>DataSource.getConnection</code>没有设置超时时间所以需要自己定义,如果程序不涉及同DataSource分配聚合那么那么就不需要设置该值,如果需要聚合的情况下并且存在外部orm或者getconnection那么可能导致无法正确反应超时可以适当将该值降低</td></tr><tr><td>multiConnWaitTimeoutMillis</td><td><code>5000(ms)</code></td><td>默认5秒分表聚合多链接获取分表插入更新删除同理多个线程间等待获取时间单位毫秒(ms),用于分片聚合查询时一次性获取多个数据库connection但是因为连接池有限所以多个聚合线程间会等待防止死锁，比如连接池2个链接,本次查询需要2个链接聚合有两个线程,a线程已经获取了一个connection,b线程也获取一个,那么a线程想要获取下一个就必须等待b线程释放，b线程想要获取下一个也需要a线程释放或者等到<code>DataSource.getConnection()</code>超时</td></tr><tr><td>warningBusy</td><td><code>true</code></td><td>当获取链接时间大于<code>multiConnWaitTimeoutMillis*0.8</code>并且没有超时那么会log.warn打印警告信息</td></tr></tbody></table>',3),a=[r];function i(n,u){return e(),d("div",null,a)}const m=t(c,[["render",i],["__file","sharding-behavior.html.vue"]]);export{m as default};

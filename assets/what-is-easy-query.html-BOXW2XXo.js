import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,e as a,o as r}from"./app-DBmQRiHW.js";const o={};function s(i,e){return r(),d("div",null,e[0]||(e[0]=[a('<h1 id="easy-qeury-简介" tabindex="-1"><a class="header-anchor" href="#easy-qeury-简介"><span>easy-qeury 简介</span></a></h1><h1 id="qq群" tabindex="-1"><a class="header-anchor" href="#qq群"><span>QQ群</span></a></h1><p>EasyQuery官方QQ群: 170029046</p><div class="hint-container tip"><p class="hint-container-title">easy-query特性!!!</p><blockquote><p>一款java下最强的、最懂查询的<code>orm</code>，完美实现自动处理和手动处理复杂对象关系<br> 隐式join、隐式子查询、隐式分组、隐式分区分组、隐式case when、分库分表、字段加密检索、手动join多表子查询分组、code-first自动创建表结构、自动组装结构化对象数据......</p></blockquote></div><h2 id="easy-qeury-的发展" tabindex="-1"><a class="header-anchor" href="#easy-qeury-的发展"><span>easy-qeury 的发展</span></a></h2><p><code>easy-query</code>是一款始于2023年2月份的一款国产orm,初衷是让java也可以拥有和.net一样的操作数据库,该框架同时支持<code>java</code>和<code>kotlin</code>,🚀 java下唯一一款同时支持强类型对象关系查询和强类型SQL语法查询的ORM,拥有对象模型筛选、隐式子查询、隐式join、显式子查询、显式join,后续我们对该框架简称<code>eq</code></p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li>1.支持任意对象关系查询(标准单列 多列甚至左匹配)</li><li>2.支持隐式子查询转groupJoin的无敌优化性能</li><li>3.支持隐式partation by 筛选子查询第一个或第n个</li><li>4.支持任意对象关系的结构直接查询返回到前端selectAutoInclude</li><li>5.当以上都不满足还支持显式sql,只要能写sql就能用eq写表达式</li></ul><h2 id="使用人群" tabindex="-1"><a class="header-anchor" href="#使用人群"><span>使用人群</span></a></h2><ul><li>有<code>sql</code>基础，会<code>java stream</code>或者属性<code>java lambda</code></li><li><code>JPA</code>或者<code>Hibernate</code>用户</li><li>.net程序员转java的<code>墙裂</code>推荐你会拥有和<code>.net</code> orm不一样的体验++</li><li>喜欢强类型dsl，厌倦了xml手写字符串sql</li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p><code>eq</code>适用于任意支持jdbc的关系型数据库,并且用户可以自定义方言,支持数据模型建模筛选拉取,可以很高效的实现单表多表的crud</p><p>支持<code>dsl</code>模式编写数据库表达式查询数据也可以用<code>relation model</code>来实现数据模型关系筛选</p><h2 id="为什么选择eq" tabindex="-1"><a class="header-anchor" href="#为什么选择eq"><span>为什么选择eq</span></a></h2><ul><li>强类型 可以将大部分错误在编译时处理掉</li><li>弱类型 允许用户可以在动态场景下使用字符串属性来配合强类型dsl达到组合使用效果</li><li>高覆盖率单元测试 拥有2000+个单元测试</li><li>群主自己也在生产中使用，并且已经投入使用5个以上项目且稳定运行1-2年之久</li><li>出色的性能 哪怕是在其他orm的测试中也拥有非常出色的性能表现</li><li>轻量级 拥有零依赖项 框架整体从0到1全部自行实现可控</li><li><code>OLTP</code>+<code>OLAP</code>全方位掌控,<code>SQL</code>优化性能怪兽</li><li>所有sql尽可能不使用<code>select *</code>对于数据库原本5个列后面变成4个列后程序能马上反应出错误,如果是<code>*</code>那么只会让那一列变成null从而导致数据混乱</li></ul><p>如果还有人问为什么选择<code>eq</code>,那么我可以很负责任的告诉你该框架拥有非常强的强类型和非常强度动态类型,你一定很神奇,<code>eq</code>是如何做到的</p><p><code>eq</code>为了抽象在强类型api的下层使用了client模式,而client模式则可以支持任意弱类型,已有人通过client的api实现了一整套低代码框架,</p><p>除了实现低代码框架外还兼容所有已经适配的数据库,对用户而言无需考虑方言带来的差异</p><h2 id="数据库支持" tabindex="-1"><a class="header-anchor" href="#数据库支持"><span>数据库支持</span></a></h2><table><thead><tr><th>数据库名称</th><th>包名</th><th>springboot配置</th><th>solon配置</th></tr></thead><tbody><tr><td>MySQL</td><td>sql-mysql</td><td>mysql</td><td>mysql</td></tr><tr><td>Oracle</td><td>sql-oracle</td><td>oracle</td><td>oracle</td></tr><tr><td>PostgresSQL</td><td>sql-pgsql</td><td>pgsql</td><td>pgsql</td></tr><tr><td>SqlServer</td><td>sql-mssql</td><td>mssql</td><td>mssql</td></tr><tr><td>SqlServer RowNumber</td><td>sql-mssql</td><td>mssql_row_number</td><td>mssql_row_number</td></tr><tr><td>H2</td><td>sql-h2</td><td>h2</td><td>h2</td></tr><tr><td>SQLite</td><td>sql-sqlite</td><td>sqlite</td><td>sqlite</td></tr><tr><td>ClickHouse</td><td>sql-clickhouse</td><td>clickhouse</td><td>clickhouse</td></tr><tr><td>达梦dameng</td><td>sql-dameng</td><td>dameng</td><td>dameng</td></tr><tr><td>人大金仓KingbaseES</td><td>sql-kingbase-es</td><td>kingbase_es</td><td>kingbase_es</td></tr><tr><td>高斯</td><td>sql-gauss-db</td><td>gauss-db</td><td>gauss-db</td></tr><tr><td>DB2</td><td>sql-db2</td><td>db2</td><td>db2</td></tr></tbody></table><p><code>eq</code>目前已经抽象了表达式,所以原则上支持所有数据库,只需要自定义实现对应数据库的增删改查接口即可,也就是<a href="https://github.com/xuejmnet/easy-query/tree/main/sql-db-support" target="_blank" rel="noopener noreferrer"><code>sql-db-support</code>open in new window</a> 。所以如果不支持对应的sql那么你可以自行扩展或者提交相应的issue</p>',21)]))}const n=t(o,[["render",s]]),p=JSON.parse('{"path":"/startup/what-is-easy-query.html","title":"easy-query 简介","lang":"zh-CN","frontmatter":{"title":"easy-query 简介","order":1,"category":["Startup"],"description":"easy-qeury 简介 QQ群 EasyQuery官方QQ群: 170029046 easy-query特性!!! 一款java下最强的、最懂查询的orm，完美实现自动处理和手动处理复杂对象关系 隐式join、隐式子查询、隐式分组、隐式分区分组、隐式case when、分库分表、字段加密检索、手动join多表子查询分组、code-first自动创建...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"easy-query 简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-21T07:05:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/startup/what-is-easy-query.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"easy-query 简介"}],["meta",{"property":"og:description","content":"easy-qeury 简介 QQ群 EasyQuery官方QQ群: 170029046 easy-query特性!!! 一款java下最强的、最懂查询的orm，完美实现自动处理和手动处理复杂对象关系 隐式join、隐式子查询、隐式分组、隐式分区分组、隐式case when、分库分表、字段加密检索、手动join多表子查询分组、code-first自动创建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T07:05:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T07:05:22.000Z"}]]},"git":{"createdTime":1739323663000,"updatedTime":1750489522000,"contributors":[{"name":"xuejiaming","username":"xuejiaming","email":"326308290@qq.com","commits":6,"url":"https://github.com/xuejiaming"}]},"readingTime":{"minutes":3.56,"words":1069},"filePathRelative":"startup/what-is-easy-query.md","autoDesc":true}');export{n as comp,p as data};

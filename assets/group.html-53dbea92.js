import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as u,o as l,c as i,b as k,w as a,f as p,e as s,d as n}from"./app-bb15a8fa.js";const r={},d=p(`<h1 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h1><p><code>easy-query</code>提供了方便的分组查询功能的支持</p><h1 id="链式api" tabindex="-1"><a class="header-anchor" href="#链式api" aria-hidden="true">#</a> 链式api</h1><p>在<code>entity</code>模式下<code>groupBy</code>后会将多个结果集进行合并到<code>group.groupTable()</code>里面如果需要操作group前的表需要从<code>group.groupTable()</code>里面获取,当表达式是单表那么<code>group.groupTable()</code>本身就是当前表,当表达式是多表join的那么表达式的表访问存在于<code>group.groupTable().t1....tn</code></p><table><thead><tr><th>方法</th><th>后续</th></tr></thead><tbody><tr><td><code>groupBy(o-&gt;GroupKeys.of(o.column()))</code></td><td><code>group.groupTable()</code>本身就是<code>groupBy的入参o</code></td></tr><tr><td><code>groupBy((o1,o2)-&gt;GroupKeys.of(o1.column()))</code></td><td><code>group.groupTable().t1</code>就是<code>groupBy的入参o1</code> <code>group.groupTable().t2</code>就是<code>groupBy的入参o2</code></td></tr><tr><td><code>groupBy((o1,o2,o3)-&gt;GroupKeys.of(o1.column()，o2.column()))</code></td><td><code>group.groupTable().t1</code>就是<code>groupBy的入参o1</code> <code>group.groupTable().t2</code>就是<code>groupBy的入参o2</code> <code>group.groupTable().t3</code>就是<code>groupBy的入参o3</code></td></tr></tbody></table><p>参数前后变化<br> 我们用一个简单的案例来描述一下java下面的stream api是如何变化的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>

        <span class="token comment">// 构造函数、getters &amp; setters 省略</span>
    <span class="token punctuation">}</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> people <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 使用Stream API进行分组</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> groupedPeople <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getCity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 输出分组结果</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> groupedPeople<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;City: &quot;</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, People: &quot;</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p><code>groupBy</code>后原先的<code>List&lt;Person&gt;</code> 变成了 <code>Map&lt;String, List&lt;Person&gt;&gt;</code>这个我们在表达式中称之为<code>group感知</code>在java层面基本上没有orm实现了这种效果(或者说极少一部分orm才有这个特性),<br><code>group感知</code>有什么用,最重要的一点就是帮助用户了解数据结构的变化从而实现一个<code>简易的防呆设计(除了group by的字段其余字段应该以聚合函数的形式出现在select里面)</code></p></blockquote></div>`,8),m=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"TopicGroupTestDTO"),n("span",{class:"token punctuation"},">")]),s(" topicGroupTestDTOS "),n("span",{class:"token operator"},"="),s(" easyEntityQuery"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queryable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Topic"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"where"),n("span",{class:"token punctuation"},"("),s("o "),n("span",{class:"token operator"},"->"),s(" o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"id"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"eq"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"3"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"//创建group by 2.3.4之前使用GroupKeys.TABLE1_10.of"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"groupBy"),n("span",{class:"token punctuation"},"("),s("o "),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token class-name"},"GroupKeys"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"of"),n("span",{class:"token punctuation"},"("),s("o"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"id"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"select"),n("span",{class:"token punctuation"},"("),s("g"),n("span",{class:"token operator"},"->"),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token class-name"},"TopicGroupTestDTOProxy"),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"TopicGroupTestDTOProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    result`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"id"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("g"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"key1"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    result`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"idCount"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("g"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"intCount"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    result`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"idMin"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("g"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"groupTable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"id"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"//.select(TopicGroupTestDTO.class,g -> Select.of("),s(`
                       `),n("span",{class:"token comment"},"//group.key1().as(TopicGroupTestDTO::getId),"),s(`
                       `),n("span",{class:"token comment"},"//group.groupTable().id().intCount().as(TopicGroupTestDTO::getIdCount),"),s(`
                       `),n("span",{class:"token comment"},"//group.groupTable().id().min().as(TopicGroupTestDTO::getIdMin)"),s(`
                `),n("span",{class:"token comment"},"//))"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`


`),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Preparing"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"SELECT"),s(" t"),n("span",{class:"token punctuation"},"."),s("`id` "),n("span",{class:"token constant"},"AS"),s(" `id`"),n("span",{class:"token punctuation"},","),n("span",{class:"token function"},"COUNT"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token punctuation"},"."),s("`id`"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token constant"},"AS"),s(" `id_count`"),n("span",{class:"token punctuation"},","),n("span",{class:"token function"},"MIN"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token punctuation"},"."),s("`id`"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token constant"},"AS"),s(" `id_min` "),n("span",{class:"token constant"},"FROM"),s(" t_topic t "),n("span",{class:"token constant"},"WHERE"),s(" t"),n("span",{class:"token punctuation"},"."),s("`id` "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token constant"},"GROUP"),s(),n("span",{class:"token constant"},"BY"),s(" t"),n("span",{class:"token punctuation"},"."),s("`id`\n"),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Parameters"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"3"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token operator"},"<="),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Total"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
`),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"TopicGroupTestDTO"),n("span",{class:"token punctuation"},">")]),s(" list "),n("span",{class:"token operator"},"="),s(" easyQueryClient"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"queryable"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Topic"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"where"),n("span",{class:"token punctuation"},"("),s("t_topic "),n("span",{class:"token operator"},"->"),s(" t_topic"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"eq"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[s("TopicProxy"),n("span",{class:"token punctuation"},"."),s("Fields")]),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"3"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"groupBy"),n("span",{class:"token punctuation"},"("),s("t_topic "),n("span",{class:"token operator"},"->"),s(" t_topic"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"column"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[s("TopicProxy"),n("span",{class:"token punctuation"},"."),s("Fields")]),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"select"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TopicGroupTestDTO"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),s(" t_topic "),n("span",{class:"token operator"},"->"),s(" t_topic"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"columnAs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"id"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"id"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"columnCountAs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"id"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"idCount"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`


`),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Preparing"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"SELECT"),s(" t"),n("span",{class:"token punctuation"},"."),s("`id` "),n("span",{class:"token constant"},"AS"),s(" `id`"),n("span",{class:"token punctuation"},","),n("span",{class:"token function"},"COUNT"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token punctuation"},"."),s("`id`"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token constant"},"AS"),s(" `id_count` "),n("span",{class:"token constant"},"FROM"),s(" t_topic t "),n("span",{class:"token constant"},"WHERE"),s(" t"),n("span",{class:"token punctuation"},"."),s("`id` "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token constant"},"GROUP"),s(),n("span",{class:"token constant"},"BY"),s(" t"),n("span",{class:"token punctuation"},"."),s("`id`\n"),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},">"),s(),n("span",{class:"token class-name"},"Parameters"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"3"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token operator"},"<="),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Total"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=p('<p>EntityQuery <code>group</code> 多表2张表及以上,<code>group.groupTable()</code>无法表示为对应的表,需要通过<code>group.groupTable().t1......t10</code>来表示</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BlogGroupIdAndName</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">Topic</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">BlogEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>t<span class="token punctuation">,</span> b2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> t<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                    t<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    t<span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                <span class="token comment">//创建group by 2.3.4之前使用GroupKeys.TABLE1_10.of</span>\n                <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> b2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">GroupKeys</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b2<span class="token punctuation">.</span><span class="token function">star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>group <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BlogGroupIdAndNameProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">key1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">.</span><span class="token function">idCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">groupTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>t2<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> t<span class="token punctuation">.</span>`id` <span class="token constant">AS</span> `id`<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>`id`<span class="token punctuation">)</span> <span class="token constant">AS</span> `id_count` <span class="token constant">FROM</span> `t_topic` t <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> `t_blog` t1 <span class="token constant">ON</span> t1<span class="token punctuation">.</span>`deleted` <span class="token operator">=</span> <span class="token operator">?</span> <span class="token constant">AND</span> t<span class="token punctuation">.</span>`id` <span class="token operator">=</span> t1<span class="token punctuation">.</span>`id` <span class="token constant">WHERE</span> t<span class="token punctuation">.</span>`title` <span class="token constant">IS</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AND</span> t<span class="token punctuation">.</span>`create_time` <span class="token operator">&lt;=</span> <span class="token operator">?</span> <span class="token constant">GROUP</span> <span class="token constant">BY</span> t<span class="token punctuation">.</span>`id`<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>`star`\n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">04</span><span class="token constant">T05</span><span class="token operator">:</span><span class="token function">06</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Time</span> <span class="token class-name">Elapsed</span><span class="token operator">:</span> <span class="token function">7</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2);function b(f,y){const c=u("CodeTabs");return l(),i("div",null,[d,k(c,{id:"61",data:[{id:"对象模式"},{id:"client模式"}]},{title0:a(({value:t,isActive:o})=>[s("对象模式")]),title1:a(({value:t,isActive:o})=>[s("client模式")]),tab0:a(({value:t,isActive:o})=>[m]),tab1:a(({value:t,isActive:o})=>[v]),_:1}),g])}const h=e(r,[["render",b],["__file","group.html.vue"]]);export{h as default};

import{_ as l}from"./sql-executor-93723801.js";import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as k,c as r,f as o,a as d,w as a,e,b as n,d as s}from"./app-9e8186a3.js";const m={},v=e(`<h1 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h1><p><code>easy-query</code>在 java 的静态语言特性下，参考众多 C# ORM(efcore,freesql,sqlsugar...),和 java ORM(mybatis-plus,beetlsql...)实现了支持单表多表，复杂，嵌套的 sql 表达式，并且拥有强类型语法提示，可以帮助不想写 sql 的用户，有洁癖的用户多一个选择.</p><h2 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h2><p><code>eq</code>的<code>select</code>是用来终结当前表达式生成新的表达式的方式,简单理解为表示告诉框架当前表达式需要返回的结果是<code>select</code>的结果,如果您了解<code>stream api</code>那么可以简单的理解为其<code>map</code>操作</p><div class="hint-container tip"><p class="hint-container-title">概念补充 说明!!!</p><blockquote><p><code>eq</code>这个 orm 与之前您认识的 java 其他 orm 不相同,这个 orm 实现了近乎 95%的 sql 功能,其中一个就是子查询嵌套,所谓的子查询嵌套就是将之前查询结果视作<code>派生表</code>或叫做<code>内嵌视图</code>,后续我们将其统一称其为<code>内嵌视图</code>,比如<code>select .... from (select id,name from table where name like ?) t where t.id = ?</code>这个 sql 的括号内的那一部分(<code>select id,name from table where name like ?</code>)我们称之为<code>内嵌视图</code><br> :::</p></blockquote><p>所以我们可以很轻易的实现其他 orm 无法实现的</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>
    <span class="token punctuation">(</span>
        <span class="token keyword">select</span>
            key1<span class="token punctuation">,</span>
            key2<span class="token punctuation">,</span>
            <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">,</span>
            <span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">,</span>
            <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> s
        <span class="token keyword">from</span>
            <span class="token keyword">table</span>
        <span class="token keyword">where</span>
            name <span class="token operator">like</span> ?
        <span class="token keyword">group</span> <span class="token keyword">by</span>
            key1<span class="token punctuation">,</span>
            key2
    <span class="token punctuation">)</span> t1
    <span class="token keyword">left</span> <span class="token keyword">join</span> table2 t2 <span class="token keyword">on</span> t<span class="token punctuation">.</span>key1 <span class="token operator">=</span> t2<span class="token punctuation">.</span>key1
<span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="select-后置风格" tabindex="-1"><a class="header-anchor" href="#select-后置风格" aria-hidden="true">#</a> select 后置风格</h2><p>和原生 SQL 不同，在<code>eq</code>提供的 DSL 中，使用的是<code>select</code>后置风格，这个风格多见于<code>c#</code>语言的<code>orm</code>中和<code>stream api</code>有一种异曲同工之处，那么为什么<code>eq</code>选择<code>select</code>后置?</p><ul><li>强类型的 java 语言类型<code>select</code>后置有助于推导表达式后续可操作的类,比如<code>stream api</code></li><li><code>select后置</code>其实本质和书写 sql 是一样的,虽然你在编写 sql 的时候是 select 先写但是你在不写<code>from group by</code>等操作后是无法编写 select 的内容只能用<code>*</code>来代替,所以其实 sql 的书写本质也是<code>select后置</code></li></ul><img src="`+l+'" width="500"><div class="hint-container tip"><p class="hint-container-title">说明!!!</p><blockquote><p>这张图充分的说明了 sql 的执行过程和解析过程也是 eq 的书写过程,该执行流程中唯一能调换的就是<code>select</code>和<code>order by</code>的顺序</p></blockquote><ul><li>每次 select 会对之前的表达式进行汇总生成<code>内嵌视图</code>,对后续的 select 继续操作那么将对<code>内嵌视图</code>进行操作</li></ul></div></div><p><code>select</code>语句出现在<code>where</code>，<code>orderBy</code>，<code>groupBy</code>，<code>having</code>等之后,如果表达式调用了<code>select</code>那么这个 sql 就是确定了的如果再次调用<code>where</code>那么前面的表达式将被视为<code>派生表</code>或<code>内嵌视图</code>，比如<code>select .... from (select id,name from table ) t where t.id = ?</code>每次<code>select</code>会对当前表达式进行一次结果集包装(<code>派生表</code>或<code>内嵌视图</code>)</p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2>',7),b=e("<table><thead><tr><th>方法</th><th>支持后续链式</th><th>描述</th></tr></thead><tbody><tr><td><code>select(o-&gt;proxy)</code></td><td>✅</td><td>用户可以自定义实现返回结果<br> (返回结果必须是 Proxy 类, 简单说就是 DTO 需要添加注解<code>@EntityProxy</code>)</td></tr><tr><td><code>selectColumn(o-&gt;o.column())</code></td><td>❌</td><td>用于用户返回单个字段, 当然也可以直接用<code>select(o-&gt;o.id())</code>需要<code>eq 2.0.0^</code></td></tr><tr><td><code>select(Class&lt;TR&gt;)</code></td><td>❌</td><td>自动映射表和 DTO 对应关系, (对应关系是 DTO 映射的 columnName 和实体的 columnName 一致则映射), 比如两个属性都是<code>name</code>, 但是实体添加了<code>@Column(value=&quot;my_name&quot;)</code>那么 DTO 的<code>name</code>属性如果没有添加对应的注解, 将无法自动映射需要手动<code>as</code>来进行查询</td></tr><tr><td><code>select(Class&lt;TR&gt;,expression)</code></td><td>❌</td><td>用户可以对任意<code>DTO</code>对象的 class 进行自动或者手动映射比如 <br> <code>select(DTO.class,o-&gt;Select.of(o.FETCHER.allFields(),o.name().as(&quot;myName&quot;)))</code></td></tr><tr><td><code>selectAutoInclude</code></td><td>❌</td><td>支持用户返回任意列的数据库对象关系关联的数据, 比如嵌套结构: <br> {name:.. , age:... ,list:[{...}, {...}]}</td></tr><tr><td><code>selectAutoInclude expression</code></td><td>❌</td><td>支持用户返回任意列的数据库对象关系关联的数据,<br>并且还可以<code>额外自定义join</code>返回其他数据, 比如嵌套结构: <br> {name:.. , age:... ,address:...,list:[{...}, {...}]},其中 address 是用户地址的所属信息额外赋值</td></tr></tbody></table>",1),y=n("h2",{id:"select-o-proxy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#select-o-proxy","aria-hidden":"true"},"#"),s(),n("code",null,"select(o->proxy)")],-1),f=n("p",null,[s("该 api 返回自定义"),n("code",null,"proxy"),s("对象比如我们创建了如下返回结果")],-1),g=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
`),n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@FieldNameConstants"),s(`
`),n("span",{class:"token annotation punctuation"},"@EntityProxy"),s(`
`),n("span",{class:"token annotation punctuation"},"@SuppressWarnings"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"EasyQueryFieldMissMatch"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BankCardVO"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" id"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" uid"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token doc-comment comment"},`/**
     * 银行卡号
     */`),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" code"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token doc-comment comment"},`/**
     * 银行卡类型借记卡 储蓄卡
     */`),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" type"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" userName"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" bankName"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
`),n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@EntityProxy"),s(`
`),n("span",{class:"token annotation punctuation"},"@SuppressWarnings"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"EasyQueryFieldMissMatch"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"DocUserVO"),s(),n("span",{class:"token punctuation"},"{"),s(`


    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" id"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" phone"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Integer"),s(" age"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Long"),s(" cardCount"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=e(`<p>因为我们添加了<code>@EntityProxy</code>注解所以默认会生成<code>BankCardVOProxy</code>的 apt 类，其中我们的<code>userName</code>和<code>bankName</code>是非<code>BankCard</code>表内的数据,<br> 所以需要我们额外赋值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//手动join</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BankCardVO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">DocBankCard</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">DocUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>bank_card<span class="token punctuation">,</span> user<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> bank_card<span class="token punctuation">.</span><span class="token function">uid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">DocBank</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>bank_card<span class="token punctuation">,</span> user<span class="token punctuation">,</span> bank<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> bank_card<span class="token punctuation">.</span><span class="token function">bankId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>bank<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bank_card<span class="token punctuation">,</span> user<span class="token punctuation">,</span> bank<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            user<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bank_card<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;储蓄卡&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bank_card<span class="token punctuation">,</span> user<span class="token punctuation">,</span> bank<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">BankCardVOProxy</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankCardVOProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            r<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span>bank_card<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于是查询所有的bankCard字段</span>
            r<span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            r<span class="token punctuation">.</span><span class="token function">bankName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bank<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> r<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>t<span class="token punctuation">.</span>code<span class="token punctuation">,</span>t<span class="token punctuation">.</span>type<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>name <span class="token class-name">AS</span> user_name<span class="token punctuation">,</span>t2<span class="token punctuation">.</span>name <span class="token constant">AS</span> bank_name <span class="token constant">FROM</span> doc_bank_card t <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> doc_user t1 <span class="token constant">ON</span> t<span class="token punctuation">.</span>uid <span class="token operator">=</span> t1<span class="token punctuation">.</span>id <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> doc_bank t2 <span class="token constant">ON</span> t<span class="token punctuation">.</span>bank_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id <span class="token constant">WHERE</span> t1<span class="token punctuation">.</span>name <span class="token constant">LIKE</span> <span class="token operator">?</span> <span class="token constant">AND</span> t<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token operator">%</span>小明<span class="token operator">%</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>储蓄卡<span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>

<span class="token comment">//上下两种结果一样</span>
<span class="token comment">//隐式join</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BankCardVO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">DocBankCard</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>bank_card <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            bank_card<span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bank_card<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;储蓄卡&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>bank_card <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">BankCardVOProxy</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BankCardVOProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            r<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span>bank_card<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于是查询所有的bankCard字段</span>
            r<span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bank_card<span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            r<span class="token punctuation">.</span><span class="token function">bankName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bank_card<span class="token punctuation">.</span><span class="token function">bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> r<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>t<span class="token punctuation">.</span>code<span class="token punctuation">,</span>t<span class="token punctuation">.</span>type<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>name <span class="token class-name">AS</span> user_name<span class="token punctuation">,</span>t2<span class="token punctuation">.</span>name <span class="token constant">AS</span> bank_name <span class="token constant">FROM</span> doc_bank_card t <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> doc_user t1 <span class="token constant">ON</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t<span class="token punctuation">.</span>uid <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> doc_bank t2 <span class="token constant">ON</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t<span class="token punctuation">.</span>bank_id <span class="token constant">WHERE</span> t1<span class="token punctuation">.</span>name <span class="token constant">LIKE</span> <span class="token operator">?</span> <span class="token constant">AND</span> t<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token operator">%</span>小明<span class="token operator">%</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>储蓄卡<span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>



<span class="token comment">//隐式select子查询</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DocUserVO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">DocUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            user<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">DocUserVOProxy</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DocUserVOProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            r<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于是查询所有的bankCard字段</span>
            r<span class="token punctuation">.</span><span class="token function">cardCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">bankCards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> r<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>t<span class="token punctuation">.</span>phone<span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token constant">FROM</span> doc_bank_card t1 <span class="token constant">WHERE</span> t1<span class="token punctuation">.</span>uid <span class="token operator">=</span> t<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token constant">AS</span> card_count <span class="token constant">FROM</span> doc_user t <span class="token constant">WHERE</span> t<span class="token punctuation">.</span>name <span class="token constant">LIKE</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token operator">%</span>小明<span class="token operator">%</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>

<span class="token comment">//手动select子查询</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DocUserVO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">DocUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            user<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">DocUserVOProxy</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DocUserVOProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            r<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于是查询所有的bankCard字段</span>
            <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> longQuery <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">DocBankCard</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>bank_card <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                        bank_card<span class="token punctuation">.</span><span class="token function">uid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            r<span class="token punctuation">.</span><span class="token function">cardCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSubQuery</span><span class="token punctuation">(</span>longQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> r<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>t<span class="token punctuation">.</span>phone<span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token constant">FROM</span> doc_bank_card t1 <span class="token constant">WHERE</span> t1<span class="token punctuation">.</span>uid <span class="token operator">=</span> t<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token constant">AS</span> card_count <span class="token constant">FROM</span> doc_user t <span class="token constant">WHERE</span> t<span class="token punctuation">.</span>name <span class="token constant">LIKE</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token operator">%</span>小明<span class="token operator">%</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>

<span class="token comment">//手动sql片段</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DocUserVO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">DocUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            user<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">DocUserVOProxy</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DocUserVOProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            r<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于是查询所有的bankCard字段</span>
            r<span class="token punctuation">.</span><span class="token function">cardCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSQL</span><span class="token punctuation">(</span><span class="token string">&quot;IFNULL({0},1)&quot;</span><span class="token punctuation">,</span>c <span class="token operator">-&gt;</span> c<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> r<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>t<span class="token punctuation">.</span>phone<span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token function">IFNULL</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token constant">AS</span> card_count <span class="token constant">FROM</span> doc_user t <span class="token constant">WHERE</span> t<span class="token punctuation">.</span>name <span class="token constant">LIKE</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token operator">%</span>小明<span class="token operator">%</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理对象赋值" tabindex="-1"><a class="header-anchor" href="#代理对象赋值" aria-hidden="true">#</a> 代理对象赋值</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>set</code></td><td><code>r.set(value)</code>将常量或者数据库函数值赋值给<code>proxy</code>对象需要类型一致</td></tr><tr><td><code>setNull</code></td><td>赋值给列</td></tr><tr><td><code>setSubQuery</code></td><td>赋值一个子查询结果</td></tr><tr><td><code>setSQL</code></td><td>赋值自定义字符串 sql 片段</td></tr><tr><td><code>setExpression</code></td><td>同<code>set</code>无需类型一致(弱类型)</td></tr><tr><td><code>selectAll</code></td><td>同<code>t.*</code>将某张表的列自动映射匹配到结果对象中</td></tr></tbody></table>`,4);function w(q,E){const c=i("Tabs");return k(),r("div",null,[v,o(` ::: tabs

@tab entity `),b,o(" ::: "),y,f,d(c,{id:"153",data:[{id:"CardVO"},{id:"UserVO"}]},{title0:a(({value:t,isActive:p})=>[s("CardVO")]),title1:a(({value:t,isActive:p})=>[s("UserVO")]),tab0:a(({value:t,isActive:p})=>[g]),tab1:a(({value:t,isActive:p})=>[h]),_:1}),_])}const S=u(m,[["render",w],["__file","select.html.vue"]]);export{S as default};

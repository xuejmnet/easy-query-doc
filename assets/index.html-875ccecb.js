import{_ as o}from"./sql-executor-93723801.js";import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as u,b as p,w as e,f as s,e as d,d as t}from"./app-bb15a8fa.js";const m={},h=s(`<h1 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h1><p><code>easy-query</code>在java的静态语言特性下，参考众多C# ORM(efcore,freesql,sqlsugar...),和java ORM(mybatis-plus,beetlsql...)实现了支持单表多表，复杂，嵌套的sql表达式，并且拥有强类型语法提示，可以帮助不想写sql的用户，有洁癖的用户多一个选择.</p><h1 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h1><p><code>eq</code>的<code>select</code>是用来终结当前表达式生成新的表达式的方式,简单理解为表示告诉框架当前表达式需要返回的结果是<code>select</code>的结果,如果您了解<code>stream api</code>那么可以简单的理解为其<code>map</code>操作</p><div class="hint-container tip"><p class="hint-container-title">概念补充 说明!!!</p><blockquote><p><code>eq</code>这个orm与之前您认识的java其他orm不相同,这个orm实现了近乎95%的sql功能,其中一个就是子查询嵌套,所谓的子查询嵌套就是将之前查询结果视作<code>派生表</code>或叫做<code>内嵌视图</code>,后续我们将其统一称其为<code>内嵌视图</code>,比如<code>select .... from (select id,name from table where name like ?) t where t.id = ?</code>这个sql的括号内的那一部分(<code>select id,name from table where name like ?</code>)我们称之为<code>内嵌视图</code></p></blockquote></div><p>所以我们可以很轻易的实现其他orm无法实现的</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>
    <span class="token punctuation">(</span>
        <span class="token keyword">select</span>
            key1<span class="token punctuation">,</span>
            key2<span class="token punctuation">,</span>
            <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">,</span>
            <span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">,</span>
            <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> s
        <span class="token keyword">from</span>
            <span class="token keyword">table</span>
        <span class="token keyword">where</span>
            name <span class="token operator">like</span> ?
        <span class="token keyword">group</span> <span class="token keyword">by</span>
            key1<span class="token punctuation">,</span>
            key2
    <span class="token punctuation">)</span> t1
    <span class="token keyword">left</span> <span class="token keyword">join</span> table2 t2 <span class="token keyword">on</span> t<span class="token punctuation">.</span>key1 <span class="token operator">=</span> t2<span class="token punctuation">.</span>key1
<span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="select后置风格" tabindex="-1"><a class="header-anchor" href="#select后置风格" aria-hidden="true">#</a> select后置风格</h2><p>和原生SQL不同，在<code>eq</code>提供的DSL中，使用的是<code>select</code>后置风格，这个风格多见于<code>c#</code>语言的<code>orm</code>中和<code>stream api</code>有一种异曲同工之处，那么为什么<code>eq</code>选择<code>select</code>后置?</p><ul><li>强类型的java语言类型<code>select</code>后置有助于推导表达式后续可操作的类,比如<code>stream api</code></li><li><code>select后置</code>其实本质和书写sql是一样的,虽然你在编写sql的时候是select先写但是你在不写<code>from group by</code>等操作后是无法编写select的内容只能用<code>*</code>来代替,所以其实sql的书写本质也是<code>select后置</code></li></ul><img src="`+o+'" width="500"><div class="hint-container tip"><p class="hint-container-title">说明!!!</p><blockquote><p>这张图充分的说明了sql的执行过程和解析过程也是eq的书写过程,该执行流程中唯一能调换的就是<code>select</code>和<code>order by</code>的顺序</p></blockquote><ul><li>每次select会对之前的表达式进行汇总生成<code>内嵌视图</code>,对后续的select继续操作那么将对<code>内嵌视图</code>进行操作</li></ul></div><p><code>select</code>语句出现在<code>where</code>，<code>orderBy</code>，<code>groupBy</code>，<code>having</code>等之后,如果表达式调用了<code>select</code>那么这个sql就是确定了的如果再次调用<code>where</code>那么前面的表达式将被视为<code>派生表</code>或<code>内嵌视图</code>，比如<code>select .... from (select id,name from table ) t where t.id = ?</code>每次<code>select</code>会对当前表达式进行一次结果集包装(<code>派生表</code>或<code>内嵌视图</code>)</p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2>',14),b=t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"方法"),t("th",null,"支持后续链式"),t("th",null,"描述")])]),t("tbody",null,[t("tr",null,[t("td",null,[t("code",null,"select proxy")]),t("td",null,"✅"),t("td",null,[d("用户可以自定义实现返回结果"),t("br"),d(" (返回结果必须是Proxy类, 简单说就是DTO需要添加注解"),t("code",null,"@EntityProxy"),d(")")])]),t("tr",null,[t("td",null,[t("code",null,"selectColumn")]),t("td",null,"❌"),t("td",null,[d("用于用户返回单个字段, 当然也可以直接用"),t("code",null,"select(o->o.id())"),d("需要"),t("code",null,"eq 2.0.0^")])]),t("tr",null,[t("td",null,[t("code",null,"select(Class<TR>)")]),t("td",null,"❌"),t("td",null,[d("自动映射表和DTO对应关系, (对应关系是DTO映射的columnName和实体的columnName一致则映射), 比如两个属性都是"),t("code",null,"name"),d(", 但是实体添加了"),t("code",null,'@Column(value="my_name")'),d("那么DTO的"),t("code",null,"name"),d("属性如果没有添加对应的注解, 将无法自动映射需要手动"),t("code",null,"as"),d("来进行查询")])]),t("tr",null,[t("td",null,[t("code",null,"select(Class<TR>,expression)")]),t("td",null,"❌"),t("td",null,[d("用户可以对任意"),t("code",null,"DTO"),d("对象的class进行自动或者手动映射比如 "),t("br"),d(),t("code",null,'select(DTO.class,o->Select.of(o.FETCHER.allFields(),o.name().as("myName")))')])]),t("tr",null,[t("td",null,[t("code",null,"selectAutoInclude")]),t("td",null,"❌"),t("td",null,[d("支持用户返回任意列的数据库对象关系关联的数据, 比如嵌套结构: "),t("br"),d(" {name:.. , age:... ,list:[{...}, {...}]}")])]),t("tr",null,[t("td",null,[t("code",null,"selectAutoInclude expression")]),t("td",null,"❌"),t("td",null,[d("支持用户返回任意列的数据库对象关系关联的数据,"),t("br"),d("并且还可以"),t("code",null,"额外自定义join"),d("返回其他数据, 比如嵌套结构: "),t("br"),d(" {name:.. , age:... ,list:[{...}, {...}]}")])])])],-1),k=t("p",null,"编写中...",-1),v=t("p",null,"编写中...",-1),y=s('<h2 id="api-1" tabindex="-1"><a class="header-anchor" href="#api-1" aria-hidden="true">#</a> API</h2><table><thead><tr><th>方法</th><th>参数</th><th>返回</th><th>描述</th></tr></thead><tbody><tr><td>streamBy</td><td><code>Function&lt;Stream&lt;T&gt;,TR&gt; fetcher</code></td><td>任意stream的终结方法</td><td>使用java方式只需要迭代一次返回符合stream的结果</td></tr><tr><td>toSql</td><td></td><td>string</td><td>返回当前表达式即将执行的sql语句</td></tr><tr><td>any</td><td></td><td>boolean</td><td>返回当前表达式是在数据库中是否存在匹配项,存在至少一条返回true,无法匹配任意一条在返回false</td></tr><tr><td>required</td><td></td><td>void</td><td>返回当前表达式是在数据库中是否存在匹配项,存在至少一条,无法匹配任意一条抛错</td></tr><tr><td>all</td><td>lambda</td><td>boolean</td><td>返回当前表达式是在数据库中是否所有的都匹配,参数为符合条件的表达式</td></tr><tr><td>count</td><td></td><td>long</td><td>返回当前表达式在数据库中命中的条数有多少,没有匹配数返回0</td></tr><tr><td>firstOrNull</td><td></td><td>TEntity</td><td>返回当前表达式在数据库中命中的第一条,如果没命中就返回null</td></tr><tr><td>toList</td><td></td><td>List&lt;TEntity&gt;</td><td>返回当前表达式在数据库中命中的所有结果,如果没有结果则返回空集合</td></tr><tr><td>where</td><td>lambda</td><td>this</td><td>对当前表达式进行条件追加</td></tr><tr><td>limit</td><td>1.offset,2.rows</td><td>this</td><td>对当前表达式进行查询结果返回和偏移进行限制，offset表示跳过多少条，limit表示获取多少条</td></tr><tr><td>orderBy</td><td>lambda</td><td>this</td><td>对当前表达式进行查询结果进行排序</td></tr><tr><td>sumBigDecimalOrDefault</td><td>lambda,默认值</td><td>BigDecimal</td><td>用于对lambda列进行求和,返回结果BigDecimal防止结果溢出</td></tr><tr><td>sumOrDefault</td><td>lambda,默认值</td><td>列类型</td><td>用于对lambda列进行求和</td></tr><tr><td>maxOrDefault</td><td>lambda,默认值</td><td>列类型</td><td>用于对lambda列进行最大值查询</td></tr><tr><td>minOrDefault</td><td>lambda,默认值</td><td>列类型</td><td>用于对lambda列进行最小值查询</td></tr><tr><td>avgOrDefault</td><td>lambda,默认值</td><td>列类型</td><td>用于对lambda列进行平均值值查询</td></tr><tr><td>lenOrDefault</td><td>lambda,默认值</td><td>列类型</td><td>用于对lambda列进行长度查询</td></tr><tr><td>whereById</td><td>object 主键</td><td>this</td><td>添加单主键条件</td></tr><tr><td>whereObject</td><td>object 查询对象</td><td>this</td><td>添加对象查询条件</td></tr><tr><td>groupBy</td><td>lambda</td><td>this</td><td>查询分组</td></tr><tr><td>having</td><td>lambda</td><td>this</td><td>查询对分组结果进行筛选</td></tr><tr><td>orderByDynamic</td><td><code>EasyDynamicOrderByConfiguration</code></td><td>this</td><td>添加查询动态排序</td></tr><tr><td>distinct</td><td></td><td>this</td><td>对查询结果进行去重</td></tr><tr><td>toPageResult</td><td>long,long</td><td><code>PageResult</code></td><td>对结果进行先count，然后limit+toList查询结果并且封装成<code>PageResult</code>返回</td></tr><tr><td>toShardingPageResult</td><td>long,long,sequenceCountLine</td><td><code>PageResult</code></td><td>支持高性能分片下的分页查询,如果第三个参数为null那么和toPageResult行为一致</td></tr><tr><td>leftJoin</td><td>lambda</td><td>this</td><td>左链接</td></tr><tr><td>rightJoin</td><td>lambda</td><td>this</td><td>右链接</td></tr><tr><td>innerJoin</td><td>lambda</td><td>this</td><td>内链接</td></tr><tr><td>disableLogicDelete</td><td></td><td>this</td><td>本次查询不启用逻辑删除</td></tr><tr><td>enableLogicDelete</td><td></td><td>this</td><td>本次查询启用逻辑删除</td></tr><tr><td>noInterceptor</td><td></td><td>this</td><td>本次查询不使用拦截器</td></tr><tr><td>noInterceptor</td><td>name</td><td>this</td><td>不使用指定name的拦截器</td></tr><tr><td>useInterceptor</td><td></td><td>this</td><td>本次查询使用拦截器</td></tr><tr><td>useInterceptor</td><td>name</td><td>this</td><td>使用指定name的拦截器</td></tr><tr><td>asTracking</td><td></td><td>this</td><td>本次查询使用追踪，需要开启追踪后才有效</td></tr><tr><td>asNoTracking</td><td></td><td>this</td><td>本次查询不使用追踪,默认就是不使用追踪</td></tr><tr><td>asTable</td><td>tableName</td><td>this</td><td>指定本次查询最近的表的表名,如果最近的表是匿名表则设置表别名alias</td></tr><tr><td>asTable</td><td>lambda</td><td>this</td><td>指定本次查询最近的表的表名,如果最近的表是匿名表则设置表别名alias,表达式入参为现有表名返回设置的表名</td></tr><tr><td>union</td><td>queryable</td><td>this</td><td>union 查询</td></tr><tr><td>unionAll</td><td>queryable</td><td>this</td><td>union all查询</td></tr></tbody></table>',2);function f(g,q){const l=r("Tabs");return i(),u("div",null,[h,p(l,{id:"62",data:[{id:"entity"},{id:"lambda"},{id:"client"}]},{title0:e(({value:a,isActive:n})=>[d("entity")]),title1:e(({value:a,isActive:n})=>[d("lambda")]),title2:e(({value:a,isActive:n})=>[d("client")]),tab0:e(({value:a,isActive:n})=>[b]),tab1:e(({value:a,isActive:n})=>[k]),tab2:e(({value:a,isActive:n})=>[v]),_:1}),y])}const T=c(m,[["render",f],["__file","index.html.vue"]]);export{T as default};

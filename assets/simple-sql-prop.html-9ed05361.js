import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-a5b564ea.js";const p={},o=t(`<h1 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h1><p>简单数据库函数属性是针对<code>ColumnValueSQLConverter</code>的一种简单实现,不需要注册主键等相关信息,当然仅适合哪种无需特殊定制且没有复杂动态需求的业务需求</p><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p>当前模式是一种简易的表达式,但是无法适配多个数据库,所以还是建议如果有条件那么还是使用<code>ColumnValueSQLConverter</code>来做数据库函数属性</p></blockquote></div><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><p><code>@Column(sqlExpression=@ColumnSQLExpression(....))</code></p><table><thead><tr><th>属性</th><th>默认值</th><th>关键字处理</th></tr></thead><tbody><tr><td>sql</td><td>&quot;&quot;</td><td>sql模板,为空表示不生效</td></tr><tr><td>realColumn</td><td>false</td><td>表示当前不是一个数据库的真实列</td></tr><tr><td>args</td><td>[]</td><td>模板参数类型<code>ExpressionArg</code></td></tr></tbody></table><p>ExpressionArg</p><table><thead><tr><th>属性</th><th>默认值</th><th>关键字处理</th></tr></thead><tbody><tr><td>prop</td><td>&quot;&quot;</td><td>属性名当val值和ignoreVal值一样则使用prop作为参数入参</td></tr><tr><td>val</td><td>&quot;&quot;</td><td>变量的string形式的表示,当val值和ignoreVal值一样则使用prop作为参数入参,<code>0,1,true,false</code>均可表示<code>Boolean</code>类型</td></tr><tr><td>ignoreVal</td><td>&quot;&quot;</td><td>因为<code>prop</code>和<code>val</code>在当前表达式内选其一,比如<code>ignoreVal=&quot;-1&quot;</code>那么当<code>val=&quot;-1&quot;</code>时<code>val</code>被认为用户需要忽略的所以表达式会使用<code>prop</code></td></tr><tr><td>valType</td><td>String.class</td><td>val值的字符串形式转成对应的基本类型(仅支持基本类型)</td></tr></tbody></table><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;t_user_extra&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EntityProxy</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserExtra2</span> <span class="token keyword">implements</span> <span class="token class-name">ProxyEntityAvailable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserExtra2</span><span class="token punctuation">,</span> <span class="token class-name">UserExtra2Proxy</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>primaryKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> birthday<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@InsertIgnore</span>
    <span class="token annotation punctuation">@UpdateIgnore</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>sqlExpression <span class="token operator">=</span> <span class="token annotation punctuation">@ColumnSQLExpression</span><span class="token punctuation">(</span>sql<span class="token operator">=</span><span class="token string">&quot;CONCAT({0},{1})&quot;</span><span class="token punctuation">,</span>args <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@ExpressionArg</span><span class="token punctuation">(</span>prop <span class="token operator">=</span> <span class="token string">&quot;firstName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@ExpressionArg</span><span class="token punctuation">(</span>prop <span class="token operator">=</span> <span class="token string">&quot;lastName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fullName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@InsertIgnore</span>
    <span class="token annotation punctuation">@UpdateIgnore</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>sqlConversion <span class="token operator">=</span> <span class="token class-name">UserAgeColumnValueSQLConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>




<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserExtra2</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">UserExtra2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            u<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            u<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            u<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> \`id\`<span class="token punctuation">,</span>\`first_name\`<span class="token punctuation">,</span>\`last_name\`<span class="token punctuation">,</span>\`birthday\`<span class="token punctuation">,</span><span class="token function">CONCAT</span><span class="token punctuation">(</span>\`first_name\`<span class="token punctuation">,</span>\`last_name\`<span class="token punctuation">)</span> <span class="token constant">AS</span> \`full_name\`<span class="token punctuation">,</span><span class="token function">CEILING</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">timestampdiff</span><span class="token punctuation">(</span><span class="token constant">DAY</span><span class="token punctuation">,</span> \`birthday\`<span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token constant">AS</span> \`age\` <span class="token constant">FROM</span> \`t_user_extra\` <span class="token class-name">WHERE</span> <span class="token function">CONCAT</span><span class="token punctuation">(</span>\`first_name\`<span class="token punctuation">,</span>\`last_name\`<span class="token punctuation">)</span> <span class="token constant">LIKE</span> <span class="token operator">?</span> <span class="token class-name">AND</span> <span class="token function">CONCAT</span><span class="token punctuation">(</span>\`first_name\`<span class="token punctuation">,</span>\`last_name\`<span class="token punctuation">)</span> <span class="token constant">IN</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token class-name">AND</span> <span class="token function">CEILING</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">timestampdiff</span><span class="token punctuation">(</span><span class="token constant">DAY</span><span class="token punctuation">,</span> \`birthday\`<span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">365</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">123</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">2</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">365</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">12</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Time</span> <span class="token class-name">Elapsed</span><span class="token operator">:</span> <span class="token function">6</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),e=[o];function c(l,u){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","simple-sql-prop.html.vue"]]);export{k as default};

import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as o,o as c}from"./app-BUpLPGR9.js";const r={};function d(i,e){return c(),a("div",null,e[0]||(e[0]=[o('<h1 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h1><p><code>easy-query</code>在<code>3.0.44^</code>正式完善了缓存相关包,经过作者多年的经验对缓存在使用上和一致性上提供了相对平衡的一个点,<br> 支持两种一致性方案</p><ul><li>1.cdc缓存一致性</li><li>2.延迟删除+逻辑删除缓存一致性</li></ul><p>有时候数据库是否有开启binlog或者是否有cdc权限并不是我们能控制的，所以如果用户对数据库进行直接操作我们可以通过第二种解决方案来实现</p><p>并且支持多级缓存，文档将提供redis+caffeine的二级缓存模式来加快缓存的拉取</p><h2 id="模式" tabindex="-1"><a class="header-anchor" href="#模式"><span>模式</span></a></h2><p><code>easy-cache</code>提供了二种模式</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>kv</td><td>采用k-v键值对拥有最高效的性能,仅支持对象缓存id查询仅支持返回单一对象</td></tr><tr><td>all</td><td>采用k-v+index模式</td></tr></tbody></table><h2 id="缓存key" tabindex="-1"><a class="header-anchor" href="#缓存key"><span>缓存key</span></a></h2><p>默认缓存key是<code>CACHE:Topic:99</code>存储value为hash表也就是<code>Map&lt;String,Map&lt;String,Object&gt;&gt;</code>的形式进行存储，二级key作为查询时的sql条件,如果sql条件存在关联关系表则会将整个sql进行md5(sql+parameter)作为二级key存储因为存在关联表后整个sql会变得很长,当然你也可以替换掉默认的缓存实现<code>CacheKeyFactory</code>只需实现<code>String getKey(ClientQueryable&lt;?&gt; entityQueryable)</code>方法函数即可</p>',10)]))}const s=t(r,[["render",d]]),l=JSON.parse('{"path":"/cache/","title":"缓存","lang":"zh-CN","frontmatter":{"title":"缓存","description":"缓存 easy-query在3.0.44^正式完善了缓存相关包,经过作者多年的经验对缓存在使用上和一致性上提供了相对平衡的一个点, 支持两种一致性方案 1.cdc缓存一致性 2.延迟删除+逻辑删除缓存一致性 有时候数据库是否有开启binlog或者是否有cdc权限并不是我们能控制的，所以如果用户对数据库进行直接操作我们可以通过第二种解决方案来实现 并且支...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-08T05:21:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/cache/"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"缓存"}],["meta",{"property":"og:description","content":"缓存 easy-query在3.0.44^正式完善了缓存相关包,经过作者多年的经验对缓存在使用上和一致性上提供了相对平衡的一个点, 支持两种一致性方案 1.cdc缓存一致性 2.延迟删除+逻辑删除缓存一致性 有时候数据库是否有开启binlog或者是否有cdc权限并不是我们能控制的，所以如果用户对数据库进行直接操作我们可以通过第二种解决方案来实现 并且支..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-08T05:21:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-08T05:21:54.000Z"}]]},"git":{"createdTime":1751878023000,"updatedTime":1751952114000,"contributors":[{"name":"xuejiaming","username":"xuejiaming","email":"326308290@qq.com","commits":2,"url":"https://github.com/xuejiaming"}]},"readingTime":{"minutes":1.17,"words":351},"filePathRelative":"cache/readme.md","autoDesc":true}');export{s as comp,l as data};

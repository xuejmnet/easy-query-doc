import{_ as e}from"./sql-executor-93723801.js";import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{o as c,c as t,f as d}from"./app-b89cc2b6.js";const i={},r=d('<div class="hint-container tip"><p class="hint-container-title">注意点及说明!!!</p><blockquote><p>下面所有方法包括<code>where</code>、<code>select</code>、<code>groupBy</code>、<code>orderBy</code>、<code>having</code>都是相同原理,支持单参数时为主表,全参数时为一一对应的表,注意表达式应该以<code>select</code>作为整个表达式的终结方法,相当于<code>select</code>之后就是对之前的表达式进行匿名表处理,<code>select * from (select id,name from user) t</code> 如果提前<code>select</code>相当于是进行了一次匿名表,最后的终结方法收集器比如<code>toList</code>、<code>firstOrNull</code>、<code>count</code>等会自动判断是否需要<code>select</code>，如果需要会对当前表达式的主表进行<code>select(o-&gt;o.columnAll())</code>操作<br> 不建议select返回双括号初始化譬如<code>new HelpProvinceProxy(){{......}}</code>可能会造成内存泄露</p></blockquote></div><h2 id="api说明" tabindex="-1"><a class="header-anchor" href="#api说明" aria-hidden="true">#</a> api说明</h2><p>简单的查询编写顺序</p><img src="'+e+'" width="500"><div class="hint-container tip"><p class="hint-container-title">注意点及说明!!!</p><blockquote><p>其中6和7可以互相调换,如果先<code>select</code>后<code>order</code>那么将会对匿名表进行排序,如果先<code>order</code>后<code>select</code>那么会先排序后生成匿名表但是因为匿名表后续没有操作所以会展开</p></blockquote></div>',5),s=[r];function l(a,n){return c(),t("div",null,s)}const m=o(i,[["render",l],["__file","api-use.html.vue"]]);export{m as default};

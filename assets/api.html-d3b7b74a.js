import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c as k,b as n,d as s,e as o,w as a,f as c}from"./app-ed7606e1.js";const d={},m=n("h1",{id:"api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#api","aria-hidden":"true"},"#"),s(" api")],-1),v=n("p",null,"在快速开始的章节我们已经了解了如何快速实现,接下来我们将对其进行分析和api介绍",-1),b={href:"https://github.com/xuejmnet/easy-query-samples",target:"_blank",rel:"noopener noreferrer"},y=c(`<h2 id="databasecodefirst" tabindex="-1"><a class="header-anchor" href="#databasecodefirst" aria-hidden="true">#</a> DatabaseCodeFirst</h2><table><thead><tr><th>接口</th><th>功能</th></tr></thead><tbody><tr><td>createDatabaseIfNotExists</td><td>如果数据库不存在则创建数据库(oracle、dameng不支持)</td></tr><tr><td>tableExists</td><td>传入一个对象class,返回true表示存在，false表示不存在</td></tr><tr><td>createTableCommand</td><td>生成创建表命令</td></tr><tr><td>dropTableCommand</td><td>生成删除表命令</td></tr><tr><td>syncTableCommand</td><td>自动同步表结构 如果数据库不存在则创建数据库(oracle不支持) 如果表不存在则创建表 如果表存在且class内的属性比数据库列多则自动生成添加列 如果列或者表添加<code>renameFrom</code>则自动生成rename命令</td></tr></tbody></table><h2 id="codefirstcommand" tabindex="-1"><a class="header-anchor" href="#codefirstcommand" aria-hidden="true">#</a> CodeFirstCommand</h2><table><thead><tr><th>接口</th><th>功能</th></tr></thead><tbody><tr><td>executeWithEnvTransaction</td><td>如果你是<code>spring</code>或者<code>solon</code>等框架调用此方法使用框架自身的事务</td></tr><tr><td>executeWithTransaction</td><td>开始<code>eq</code>的事务,需要你手动调用<code>commit()</code>函数</td></tr></tbody></table><p>一般建议采用<code>executeWithTransaction</code>在方法内先对<code>sql</code>进行打印和对其进行hash计算比如<code>md5</code>,然后由用户看到后输入相同hash值来确定用户确实要执行该<code>sql</code></p><p>具体代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">CodeFirstCommand</span> codeFirstCommand <span class="token operator">=</span> databaseCodeFirst<span class="token punctuation">.</span><span class="token function">syncTableCommand</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">MyMigrationBlog0</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
codeFirstCommand<span class="token punctuation">.</span><span class="token function">executeWithTransaction</span><span class="token punctuation">(</span>arg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> md5 <span class="token operator">=</span> <span class="token class-name">MD5Util</span><span class="token punctuation">.</span><span class="token function">getMD5Hash</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sql-hash:&quot;</span> <span class="token operator">+</span> md5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;2a927e4ae0dbf7d6f6d687a50888df93&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        arg<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列说明表说明" tabindex="-1"><a class="header-anchor" href="#列说明表说明" aria-hidden="true">#</a> 列说明表说明</h2><p>我们如何添加列说明和表说明在生成的代码中</p>`,9),g=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@Table"),n("span",{class:"token punctuation"},"("),s("value "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"t_company"'),n("span",{class:"token punctuation"},","),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"企业表"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@EntityProxy"),s(`
`),n("span",{class:"token annotation punctuation"},"@FieldNameConstants"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Company"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"ProxyEntityAvailable"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Company"),s(),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"CompanyProxy"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token doc-comment comment"},`/**
     * 企业id
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("primaryKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"企业id"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" id"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token doc-comment comment"},`/**
     * 企业名称
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"企业名称"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 企业创建时间
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"企业创建时间"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"LocalDateTime"),s(" createTime"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 注册资金
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"注册资金"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"BigDecimal"),s(" registerMoney"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 企业拥有的用户
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Navigate"),n("span",{class:"token punctuation"},"("),s("value "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},[s("RelationTypeEnum"),n("span",{class:"token punctuation"},"."),s("OneToMany")]),n("span",{class:"token punctuation"},","),s(`
            selfProperty `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},[s("Company"),n("span",{class:"token punctuation"},"."),s("Fields")]),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            targetProperty `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},[s("SysUser"),n("span",{class:"token punctuation"},"."),s("Fields")]),n("span",{class:"token punctuation"},"."),s("companyId"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"SysUser"),n("span",{class:"token punctuation"},">")]),s(" users"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
`),n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@Table"),n("span",{class:"token punctuation"},"("),s("value "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"t_user"'),n("span",{class:"token punctuation"},","),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"用户表"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@EntityProxy"),s(`
`),n("span",{class:"token annotation punctuation"},"@FieldNameConstants"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"SysUser"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"ProxyEntityAvailable"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"SysUser"),s(),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"SysUserProxy"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token doc-comment comment"},`/**
     * 用户id
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("primaryKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"用户id"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" id"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token doc-comment comment"},`/**
     * 用户姓名
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"用户姓名"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token doc-comment comment"},`/**
     * 用户出生日期
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"用户出生日期"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"LocalDateTime"),s(" birthday"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 用户所属企业id
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Column"),n("span",{class:"token punctuation"},"("),s("comment "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"用户所属企业id"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" companyId"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 用户所属企业
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Navigate"),n("span",{class:"token punctuation"},"("),s("value "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},[s("RelationTypeEnum"),n("span",{class:"token punctuation"},"."),s("ManyToOne")]),n("span",{class:"token punctuation"},","),s(`
            selfProperty `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},[s("SysUser"),n("span",{class:"token punctuation"},"."),s("Fields")]),n("span",{class:"token punctuation"},"."),s("companyId"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
            targetProperty `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},[s("Company"),n("span",{class:"token punctuation"},"."),s("Fields")]),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Company"),s(" company"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=c('<p>重新执行后我们发现sql已经添加了说明备注信息了</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">check</span> db <span class="token keyword">sql</span>:<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">where</span> schema_name<span class="token operator">=</span><span class="token string">&#39;eq_db&#39;</span>\n<span class="token keyword">create</span> db <span class="token keyword">sql</span>:<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>eq_db<span class="token punctuation">`</span></span> <span class="token keyword">default</span> <span class="token keyword">charset</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci<span class="token punctuation">;</span>\n\n<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> Preparing: \n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_company<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> \n<span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;企业id&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;企业名称&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;企业创建时间&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>register_money<span class="token punctuation">`</span></span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;注册资金&#39;</span><span class="token punctuation">,</span> \n <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">Engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;企业表&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> \n<span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户id&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户姓名&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>birthday<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户出生日期&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>company_id<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户所属企业id&#39;</span><span class="token punctuation">,</span> \n <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">Engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;用户表&#39;</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span> Total: <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据库类型" tabindex="-1"><a class="header-anchor" href="#数据库类型" aria-hidden="true">#</a> 数据库类型</h2><p>id使用<code>varchar(255)</code>大部分情况下太过于浪费了,有时候我们需要将其重新设置一下那么应该如何实现呢</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>\n    <span class="token doc-comment comment">/**\n     * 企业id\n     */</span>\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>primaryKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>comment <span class="token operator">=</span> <span class="token string">&quot;企业id&quot;</span><span class="token punctuation">,</span>dbType <span class="token operator">=</span> <span class="token string">&quot;varchar(32)&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在属性上自己定义数据库类型生成sql将会使用对应的类型了</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_company<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> \n<span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;企业id&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;企业名称&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;企业创建时间&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>register_money<span class="token punctuation">`</span></span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;注册资金&#39;</span><span class="token punctuation">,</span> \n <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">Engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;企业表&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="是否可为空" tabindex="-1"><a class="header-anchor" href="#是否可为空" aria-hidden="true">#</a> 是否可为空</h2><p>通过添加<code>nullable = false</code>来表明数据库对应的列为非空列</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**\n     * 企业名称\n     */</span>\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>comment <span class="token operator">=</span> <span class="token string">&quot;企业名称&quot;</span><span class="token punctuation">,</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_company<span class="token punctuation">`</span></span> <span class="token punctuation">(</span> \n<span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;企业id&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;企业名称&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;企业创建时间&#39;</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>register_money<span class="token punctuation">`</span></span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">&#39;注册资金&#39;</span><span class="token punctuation">,</span> \n <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">Engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;企业表&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加列" tabindex="-1"><a class="header-anchor" href="#添加列" aria-hidden="true">#</a> 添加列</h2><p>我们在现有类里面添加一个类然后执行代码<code>执行syncTableCommand</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//添加一个新列</span>\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>comment <span class="token operator">=</span> <span class="token string">&quot;测试列&quot;</span><span class="token punctuation">,</span>dbType <span class="token operator">=</span> <span class="token string">&quot;varchar(500)&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> column<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">check</span> db <span class="token keyword">sql</span>:<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">where</span> schema_name<span class="token operator">=</span><span class="token string">&#39;eq_db&#39;</span>\n<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> Preparing: \n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_company<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;测试列&#39;</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span> Total: <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改列名" tabindex="-1"><a class="header-anchor" href="#修改列名" aria-hidden="true">#</a> 修改列名</h2><p>我们将<code>column</code>列修改为<code>column1</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>comment <span class="token operator">=</span> <span class="token string">&quot;测试列&quot;</span><span class="token punctuation">,</span>dbType <span class="token operator">=</span> <span class="token string">&quot;varchar(500)&quot;</span><span class="token punctuation">,</span>renameFrom <span class="token operator">=</span> <span class="token string">&quot;column&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> column1<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行<code>syncTableCommand</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">check</span> db <span class="token keyword">sql</span>:<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token keyword">where</span> schema_name<span class="token operator">=</span><span class="token string">&#39;eq_db&#39;</span>\n<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">&gt;</span> Preparing: \n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_company<span class="token punctuation">`</span></span> CHANGE <span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span> <span class="token identifier"><span class="token punctuation">`</span>column1<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;测试列&#39;</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span> Total: <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',20);function T(f,E){const l=p("ExternalLinkIcon"),i=p("Tabs");return r(),k("div",null,[m,v,n("p",null,[s("本章源代码在git上如果需要请自行获取"),n("a",b,[s("点我获取"),o(l)])]),y,o(i,{id:"112",data:[{id:"Company"},{id:"SysUser"}]},{title0:a(({value:e,isActive:t})=>[s("Company")]),title1:a(({value:e,isActive:t})=>[s("SysUser")]),tab0:a(({value:e,isActive:t})=>[g]),tab1:a(({value:e,isActive:t})=>[w]),_:1}),h])}const N=u(d,[["render",T],["__file","api.html.vue"]]);export{N as default};

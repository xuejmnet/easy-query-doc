import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,d as l,e as a}from"./app-7d9844f3.js";const i={},u=a(`<h1 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h1><p><code>easy-query</code>的不但支持表达式的强类型sql,也支持手写sql来实现crud</p><h2 id="查询sqlquery" tabindex="-1"><a class="header-anchor" href="#查询sqlquery" aria-hidden="true">#</a> 查询sqlQuery</h2><p>强类型结果返回</p><h3 id="无参数强类型返回" tabindex="-1"><a class="header-anchor" href="#无参数强类型返回" aria-hidden="true">#</a> 无参数强类型返回</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BlogEntity</span><span class="token punctuation">&gt;</span></span> blogEntities <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">sqlQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_blog t&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BlogEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_blog t
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">100</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有参数强类型返回" tabindex="-1"><a class="header-anchor" href="#有参数强类型返回" aria-hidden="true">#</a> 有参数强类型返回</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BlogEntity</span><span class="token punctuation">&gt;</span></span> blogEntities <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">sqlQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_blog t where t.id=?&quot;</span><span class="token punctuation">,</span> <span class="token class-name">BlogEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_blog t where t<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询sqlquerymap" tabindex="-1"><a class="header-anchor" href="#查询sqlquerymap" aria-hidden="true">#</a> 查询sqlQueryMap</h2><p><code>Map</code>返回默认<code>key</code>忽略大小写</p><h3 id="无参数map返回" tabindex="-1"><a class="header-anchor" href="#无参数map返回" aria-hidden="true">#</a> 无参数Map返回</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> blogs <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">sqlQueryMap</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_blog t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_blog t
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有参数map返回" tabindex="-1"><a class="header-anchor" href="#有参数map返回" aria-hidden="true">#</a> 有参数Map返回</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> blogs <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">sqlQueryMap</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_blog t  where t.id=?&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> t_blog t  where t<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="执行" tabindex="-1"><a class="header-anchor" href="#执行" aria-hidden="true">#</a> 执行</h2><h3 id="无参数" tabindex="-1"><a class="header-anchor" href="#无参数" aria-hidden="true">#</a> 无参数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> newContent<span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">sqlExecute</span><span class="token punctuation">(</span><span class="token string">&quot;update t_blog set content=&#39;&quot;</span><span class="token operator">+</span>newContent <span class="token operator">+</span><span class="token string">&quot;&#39; where id=&#39;1&#39;&quot;</span><span class="token punctuation">)</span>


<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> update t_blog set content<span class="token operator">=</span>&#39;<span class="token number">3</span>af23d78<span class="token operator">-</span><span class="token number">86f</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">48</span>b1<span class="token operator">-</span>bc51<span class="token operator">-</span>ce0e0f63113d&#39; where id<span class="token operator">=</span><span class="token char">&#39;1&#39;</span>
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有参数" tabindex="-1"><a class="header-anchor" href="#有参数" aria-hidden="true">#</a> 有参数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> newContent<span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">sqlExecute</span><span class="token punctuation">(</span><span class="token string">&quot;update t_blog set content=? where id=?&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>newContent<span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> update t_blog set content<span class="token operator">=</span><span class="token operator">?</span> where id<span class="token operator">=</span><span class="token operator">?</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token number">0d</span><span class="token number">93119</span>a<span class="token operator">-</span><span class="token number">9e57</span><span class="token operator">-</span><span class="token number">4d</span><span class="token number">71</span><span class="token operator">-</span>a67b<span class="token operator">-</span><span class="token function">58d24823a88b</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="自定义sql片段" tabindex="-1"><a class="header-anchor" href="#自定义sql片段" aria-hidden="true">#</a> 自定义SQL片段</h1><p><code>easy-query</code>默认提供了数据库自定义<code>SQL</code>片段,其中 <a href="/easy-query-doc/guide/query/case-when">《CaseWhen》</a> 就是有数据库自定义片段来自行实现api</p><p>如何设计api完全可以看用户自行实现。</p><h2 id="sqlsegmentas" tabindex="-1"><a class="header-anchor" href="#sqlsegmentas" aria-hidden="true">#</a> sqlSegmentAs</h2><p>最好是封装自行实现,譬如case-when的实现就是扩展实现,如果没有这个封装的必要可以用sqlNativeSegment,支持属性和参数化</p><p><strong>建议参考 case when,如果临时使用建议使用 sqlNativeSegment</strong></p><h2 id="sqlnativesegment" tabindex="-1"><a class="header-anchor" href="#sqlnativesegment" aria-hidden="true">#</a> sqlNativeSegment</h2><p>无需编写复杂封装代码</p><p>说明</p><ul><li><code>sqlNativeSegment</code>一次个参数为原生数据库片段</li><li>第二个参数为表达式,如果第一个原生sql片段存在变量比如表列或者参数值,那么可以通过第二个参数lambda选择<code>expression</code>或者<code>value</code>或<code>constValue</code>，<code>expreesion</code>传入当前表的属性表达式或者制定表的,value传递常量值会议参数形式体现在片段上,<code>constValue</code>会拼接到字符串上,拼接的规则底层为<code>MessageFormat</code>仅需满足此即可</li></ul><h2 id="案例二" tabindex="-1"><a class="header-anchor" href="#案例二" aria-hidden="true">#</a> 案例二</h2><p><code>OVER(Partition By ... Order By ...)</code> 采用pgsql语法来实现</p>`,31),k={href:"https://github.com/babyfish-ct/jimmer",target:"_blank",rel:"noopener noreferrer"},r=a(`<ul><li>获取书本价格在所有书籍中的名次</li><li>获取数据的价格在所属书店中的名次</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;t_book_test&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">H2BookTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>primaryKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> edition<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> price<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> storeId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">String</span> sql <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">columnAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;rank() over(order by {0} desc) as rank1&quot;</span><span class="token punctuation">,</span> it <span class="token operator">-&gt;</span> it<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;rank() over(partition by {0} order by {1} desc) as rank2&quot;</span><span class="token punctuation">,</span> it <span class="token operator">-&gt;</span> it
                            <span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getStoreId</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token class-name">SELECT</span> 
    id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>edition<span class="token punctuation">,</span>price<span class="token punctuation">,</span>store_id<span class="token punctuation">,</span>
    <span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">over</span><span class="token punctuation">(</span>order by price desc<span class="token punctuation">)</span> as rank1<span class="token punctuation">,</span>
    <span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">over</span><span class="token punctuation">(</span>partition by store_id order by price desc<span class="token punctuation">)</span> as rank2 
<span class="token constant">FROM</span> t_book_test



<span class="token comment">//别名自动设置</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">asAlias</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">columnAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;rank() over(order by {0} desc) as rank1&quot;</span><span class="token punctuation">,</span> it <span class="token operator">-&gt;</span> it<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;rank() over(partition by {0} order by {1} desc) as rank2&quot;</span><span class="token punctuation">,</span> it <span class="token operator">-&gt;</span> it
                        <span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getStoreId</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">SELECT</span> 
    x<span class="token punctuation">.</span>id<span class="token punctuation">,</span>x<span class="token punctuation">.</span>name<span class="token punctuation">,</span>x<span class="token punctuation">.</span>edition<span class="token punctuation">,</span>x<span class="token punctuation">.</span>price<span class="token punctuation">,</span>x<span class="token punctuation">.</span>store_id<span class="token punctuation">,</span>
    <span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">over</span><span class="token punctuation">(</span>order by x<span class="token punctuation">.</span>price desc<span class="token punctuation">)</span> as rank1<span class="token punctuation">,</span>
    <span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">over</span><span class="token punctuation">(</span>partition by x<span class="token punctuation">.</span>store_id order by x<span class="token punctuation">.</span>price desc<span class="token punctuation">)</span> as rank2 
<span class="token constant">FROM</span> t_book_test x


<span class="token comment">//合并两个sql native segment</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">asAlias</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">columnAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;rank() over(order by {0} desc) as rank1,rank() over(partition by {1} order by {2} desc) as rank2&quot;</span><span class="token punctuation">,</span>
                        it <span class="token operator">-&gt;</span> it<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getStoreId</span><span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token constant">SELECT</span> x<span class="token punctuation">.</span>id<span class="token punctuation">,</span>x<span class="token punctuation">.</span>name<span class="token punctuation">,</span>x<span class="token punctuation">.</span>edition<span class="token punctuation">,</span>x<span class="token punctuation">.</span>price<span class="token punctuation">,</span>x<span class="token punctuation">.</span>store_id<span class="token punctuation">,</span>
    <span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">over</span><span class="token punctuation">(</span>order by x<span class="token punctuation">.</span>price desc<span class="token punctuation">)</span> as rank1<span class="token punctuation">,</span>
    <span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">over</span><span class="token punctuation">(</span>partition by x<span class="token punctuation">.</span>store_id order by x<span class="token punctuation">.</span>price desc<span class="token punctuation">)</span> as rank2 
    <span class="token constant">FROM</span> t_book_test x



<span class="token class-name">String</span> sql <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;regexp_like({0},{1})&quot;</span><span class="token punctuation">,</span> it <span class="token operator">-&gt;</span> it<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;^Ste(v|ph)en$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">columnAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>edition<span class="token punctuation">,</span>price<span class="token punctuation">,</span>store_id <span class="token constant">FROM</span> t_book_test <span class="token class-name">WHERE</span> <span class="token function">regexp_like</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span>


<span class="token comment">//join多表下的sql native segment</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> easyQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">DefTable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>t<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">,</span><span class="token class-name">DefTable</span><span class="token operator">::</span><span class="token function">getMobile</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>o1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">sqlNativeSegment</span><span class="token punctuation">(</span><span class="token string">&quot;regexp_like({0},{1}) AND regexp_like({2},{1})&quot;</span><span class="token punctuation">,</span> it <span class="token operator">-&gt;</span> it
                        <span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token class-name">H2BookTest</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">)</span><span class="token comment">//单参数使用默认表的也就是o.sqlNativeSegment的o表就是第一张表</span>
                        <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;^Ste(v|ph)en$&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span><span class="token class-name">DefTable</span><span class="token operator">::</span><span class="token function">getAvatar</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//使用第二张表的avatar</span>
                        <span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">columnAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toSQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">SELECT</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>t<span class="token punctuation">.</span>edition<span class="token punctuation">,</span>t<span class="token punctuation">.</span>price<span class="token punctuation">,</span>t<span class="token punctuation">.</span>store_id 
<span class="token constant">FROM</span> t_book_test t <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> t_def_table t1 <span class="token constant">ON</span> t<span class="token punctuation">.</span>price <span class="token operator">=</span> t1<span class="token punctuation">.</span>mobile 
<span class="token class-name">WHERE</span> <span class="token function">regexp_like</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>price<span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token class-name">AND</span> <span class="token function">regexp_like</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>avatar<span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function d(v,m){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("案例来自 "),n("a",k,[s("jimmer"),l(t)])]),r])}const f=p(i,[["render",d],["__file","native-sql.html.vue"]]);export{f as default};

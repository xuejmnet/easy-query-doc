import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as o,o as a}from"./app-Db9EbxW4.js";const i={};function p(n,e){return a(),r("div",null,e[0]||(e[0]=[o('<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h1><p>What are computed properties? Computed properties are not simple wrapper types or basic types, but properties derived through conversion functions or calculations.</p><p>Computed properties can be divided into two major categories: <code>in-memory computed properties</code> and <code>database computed properties</code></p><h2 id="differences" tabindex="-1"><a class="header-anchor" href="#differences"><span>Differences</span></a></h2><table><thead><tr><th>Computed Property</th><th>vo</th><th>Difference</th></tr></thead><tbody><tr><td>In-memory computed property</td><td>If entity has <code>@Column</code>, then <code>vo or dto</code> must also have corresponding <code>conversion</code></td><td>Function acts on the retrieved value, function will be applied to the value at the Java layer</td></tr><tr><td>Database computed property</td><td><code>vo or dto</code> only needs property name consistency or manual as</td><td>Function acts at the database layer, retrieved value is already converted</td></tr></tbody></table><h2 id="in-memory-computed-properties" tabindex="-1"><a class="header-anchor" href="#in-memory-computed-properties"><span>In-memory Computed Properties</span></a></h2><ul><li><code>json</code> property <code>private UserExtra userExtra;</code> used to describe database stored string or json type, mapped to java object, supports filtering, return sorting, etc.</li><li><code>collection</code> property <code>private List&lt;UserLabels&gt; userLabels;</code> used to describe database stored string or json type, mapped to java collection, supports filtering, return sorting, etc.</li><li>Enum property <code>private UserStatusEnum userStatus;</code> used to describe database stored string or number type, mapped to java enum property, supports filtering, return sorting, etc.</li></ul><h2 id="database-computed-properties" tabindex="-1"><a class="header-anchor" href="#database-computed-properties"><span>Database Computed Properties</span></a></h2><ul><li>Enhanced property <code>private String idCard;</code> automatically adds <code>base64</code> encoding when writing to database and automatically decodes when reading, supports filtering, return sorting, etc.</li><li>Simple computed property: composite property <code>private String fullName;</code> it is composed of <code>firstName</code> and <code>lastName</code>, or age, which is a dynamic value generated by subtracting the current time and birthday, supports filtering, return sorting, etc.</li><li>Status computed property: for example, you have a certificate table, the certificate table has certificate expiration time, then the certificate has a dynamic hidden property called status, whether the certificate has expired can be implemented through this status</li><li>Complex computed property: composed of sub-table or additional table data, such as <code>private Integer StudentSize;</code> if class and user are one-to-many, then this property is used to describe how many students are in the class, supports filtering sorting return</li><li>Function auto-increment property: this property can have data generated by the database, such as the database function has <code>mysqlNextId()</code> or <code>gis</code> generated by the database function, then it is applicable to this method only effective when inserting</li></ul><p>The difference between in-memory computed properties and database computed properties is</p>',10)]))}const c=t(i,[["render",p]]),u=JSON.parse('{"path":"/en/prop/","title":"Computed Properties Directory","lang":"en-US","frontmatter":{"title":"Computed Properties Directory","description":"Introduction What are computed properties? Computed properties are not simple wrapper types or basic types, but properties derived through conversion functions or calculations. ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Computed Properties Directory\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-26T17:39:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/en/prop/"}],["meta",{"property":"og:site_name","content":"Documentation"}],["meta",{"property":"og:title","content":"Computed Properties Directory"}],["meta",{"property":"og:description","content":"Introduction What are computed properties? Computed properties are not simple wrapper types or basic types, but properties derived through conversion functions or calculations. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-26T17:39:47.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-26T17:39:47.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://github.com/dromara/easy-query/easy-query-doc/prop/"}]]},"git":{"createdTime":1761500387000,"updatedTime":1761500387000,"contributors":[{"name":"只是我","username":"","email":"alice@example.com","commits":1}]},"readingTime":{"minutes":1.25,"words":374},"filePathRelative":"en/prop/README.md","autoDesc":true}');export{c as comp,u as data};

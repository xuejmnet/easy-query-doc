import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as t,d as i,e as l,o as h}from"./app-m4uaPpdH.js";const k={},p=["src"],d=["src"],r=["src"],c=["src"],o=["src"],g=["src"],y=["src"];function A(a,s){return h(),e("div",null,[s[0]||(s[0]=t('<h1 id="lambda表达式别名提示" tabindex="-1"><a class="header-anchor" href="#lambda表达式别名提示"><span>lambda表达式别名提示</span></a></h1><h2 id="参数名提示" tabindex="-1"><a class="header-anchor" href="#参数名提示"><span>参数名提示</span></a></h2><p>我们都知道Easy Query无论在哪个模式下都需要编写lambda表达式,lambda表达式中最繁琐的一个地方在于参数名的编写，<br> 一般推荐使用表别名作为参数名，现在可以在<code>1.9.34^</code>的版本依赖配合<code>0.0.25^</code>版本的插件自动提示并自动补充查询参数的编写。</p><p>首先使用<code>@EasyAlias</code>声明表别名。</p>',4)),i("img",{src:a.$withBase("/images/plugin-max1.jpg")},null,8,p),s[1]||(s[1]=i("p",null,[l("查询此实体类时，插件将可以自动提示并自动补充查询参数的编写。"),i("br"),l(" 如果选择"),i("code",null,"where_code_block"),l("提示则会额外生成对应的"),i("code",null,"{}")],-1)),i("img",{src:a.$withBase("/images/plugin-max2.jpg")},null,8,d),i("img",{src:a.$withBase("/images/plugin-max3.jpg")},null,8,r),s[2]||(s[2]=i("p",null,"关联查询",-1)),i("img",{src:a.$withBase("/images/plugin-max3_1.png")},null,8,c),i("img",{src:a.$withBase("/images/plugin-max3_2.png")},null,8,o),s[3]||(s[3]=t('<p>除了配置<code>@EasyAlias</code>，我们也可以在<code>Tools</code>-&gt;<code>QuickTipSetting</code>设置，为没有添加<code>@EasyAlias</code>的实体类添加表别名</p><h1 id="quicktipsetting保存" tabindex="-1"><a class="header-anchor" href="#quicktipsetting保存"><span>QuickTipSetting保存</span></a></h1><p>首先现在当前项目根目录创建文件<code>easy-query.setting</code>,既可保存</p>',3)),i("img",{src:a.$withBase("/images/plugin-max4.jpg")},null,8,g),i("img",{src:a.$withBase("/images/plugin-max5.jpg")},null,8,y),s[4]||(s[4]=t(`<div class="hint-container tip"><p class="hint-container-title">填写说明</p><blockquote><p><code>o,t1:t2,t1:t2:t3</code>先按逗号分割,然后按冒号分割,分割结果按逗号分组,如果每组数量和lambda数量一致则使用这边的参数,如果配置了<code>@EasyAlias</code>对应的那个还是用<code>@EasyAlias</code><br> 比如查询单表没有配置<code>@EasyAlias</code>，但是全局配置了<code>o,t1:t2,t1:t2:t3</code>,<br> 那么如果只有一个入参就会生成<code>where(o-&gt;)</code>，关联查询时，有两个入参生成就会生成<code>where((t1,t2)-&gt;)</code><br> 如果参数不匹配则会按照每个对象的对象名称获取大写字母组成缩写,但是如果大写字母就一个则采用类名小写模式,比如<code>queryable(Topic.class).where(t-&gt;)</code></p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 将对象类型转成lambda入参短名称</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> str</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> Topic || SysUser</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> index</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 在第几个参数位</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> total</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 总共有几个参数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lambdaShortName</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> total) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] chars </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toCharArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">chars</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;t&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> chars</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Character</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isUpperCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(chars[i])</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> parameter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(chars[i]).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toLowerCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(total</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(index</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toLowerCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>智能提示选项中，<code>select</code>,<code>where</code>,<code>where_code_block</code>,<code>orderBy</code>,<code>orderBy_code_block</code>,<code>groupBy</code>,<code>having</code>,<code>having_code_block</code>,<code>on</code>,<code>on_code_block</code><br> 都是直接使用<code>.</code>即可产生提示，因为它们前面已经填了实体类，有足够的上下文满足生成提示的条件，<code>join</code>相关的提示写法比较特殊,比如<code>.leftJoin(Toplic.class,)</code>，<br> 也是需要填完实体类后才能产生提示，只不过在参数中填写的。</p>`,2))])}const B=n(k,[["render",A]]),b=JSON.parse('{"path":"/plugin/lambda-alias.html","title":"lambda表达式提示","lang":"zh-CN","frontmatter":{"title":"lambda表达式提示","order":70,"category":["plugin"],"description":"lambda表达式别名提示 参数名提示 我们都知道Easy Query无论在哪个模式下都需要编写lambda表达式,lambda表达式中最繁琐的一个地方在于参数名的编写， 一般推荐使用表别名作为参数名，现在可以在1.9.34^的版本依赖配合0.0.25^版本的插件自动提示并自动补充查询参数的编写。 首先使用@EasyAlias声明表别名。 查询此实体类...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lambda表达式提示\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-26T05:21:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuejmnet\\",\\"url\\":\\"https://github.com/xuejmnet\\"}]}"],["meta",{"property":"og:url","content":"https://github.com/dromara/easy-query/easy-query-doc/plugin/lambda-alias.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"lambda表达式提示"}],["meta",{"property":"og:description","content":"lambda表达式别名提示 参数名提示 我们都知道Easy Query无论在哪个模式下都需要编写lambda表达式,lambda表达式中最繁琐的一个地方在于参数名的编写， 一般推荐使用表别名作为参数名，现在可以在1.9.34^的版本依赖配合0.0.25^版本的插件自动提示并自动补充查询参数的编写。 首先使用@EasyAlias声明表别名。 查询此实体类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-10-26T05:21:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-26T05:21:01.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://github.com/dromara/easy-query/easy-query-doc/en/plugin/lambda-alias.html"}]]},"git":{"createdTime":1761456061000,"updatedTime":1761456061000,"contributors":[{"name":"xuejiaming","username":"xuejiaming","email":"326308290@qq.com","commits":1,"url":"https://github.com/xuejiaming"}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"plugin/lambda-alias.md","autoDesc":true}');export{B as comp,b as data};

import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as u,e as r,w as a,f as p,d as s,b as n}from"./app-734b66b0.js";const k={},d=p('<h1 id="数据库关键字处理" tabindex="-1"><a class="header-anchor" href="#数据库关键字处理" aria-hidden="true">#</a> 数据库关键字处理</h1><p>我们常常遇到java的属性命名规范问题,比如boolean <code>is</code>开头或者<code>private String aType</code>这种命名,在<code>eq</code>里面设置<code>propertyMode</code>为<code>same_as_entity</code>那么即可，还有一种情况是我们的属性名和数据库关键字冲突,比如<code>private String order</code>其中<code>order</code>是数据库关键字那么我们应该怎么处理呢。</p><p><code>eq</code>默认不需要用户关心数据库关键字,因为<code>eq</code>默认已经对sql语句进行了关键字处理(只要你选择正确的数据库)</p><table><thead><tr><th>数据库</th><th>关键字处理</th></tr></thead><tbody><tr><td>MySQL</td><td>`order`</td></tr><tr><td>PGSQL</td><td>&quot;order&quot;</td></tr><tr><td>MsSQL</td><td>[order]</td></tr></tbody></table><h2 id="选择数据库" tabindex="-1"><a class="header-anchor" href="#选择数据库" aria-hidden="true">#</a> 选择数据库</h2>',5),m=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
`),n("span",{class:"token class-name"},"EasyQueryClient"),s(" client "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"EasyQueryBootstrapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defaultBuilderConfiguration"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setDefaultDataSource"),n("span",{class:"token punctuation"},"("),s("dataSource"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"optionConfigure"),n("span",{class:"token punctuation"},"("),s("op "),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"//进行一系列可以选择的配置"),s(`
            `),n("span",{class:"token comment"},"//op.setPrintSql(true);"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token comment"},"//设置真确的数据库"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"useDatabaseConfigure"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"MySQLDatabaseConfiguration"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"build"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{class:"language-yaml"},[n("code",null,[s(`
`),n("span",{class:"token key atrule"},"easy-query"),n("span",{class:"token punctuation"},":"),s(`
  `),n("span",{class:"token comment"},"#支持的数据库"),s(`
  `),n("span",{class:"token key atrule"},"database"),n("span",{class:"token punctuation"},":"),s(` mysql
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{class:"language-yaml"},[n("code",null,[s(`

`),n("span",{class:"token key atrule"},"easy-query"),n("span",{class:"token punctuation"},":"),s(` 
  `),n("span",{class:"token comment"},"# 配置自定义日志"),s(`
  `),n("span",{class:"token comment"},"# log-class: ..."),s(`
  `),n("span",{class:"token key atrule"},"db1"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token comment"},"# 支持mysql pgsql h2 mssql dameng mssql_row_number kingbase_es等其余数据库在适配中"),s(`
    `),n("span",{class:"token key atrule"},"database"),n("span",{class:"token punctuation"},":"),s(` mysql
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=p(`<h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">&quot;test_table&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@EntityProxy</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EntityColumnKey</span> <span class="token keyword">implements</span> <span class="token class-name">ProxyEntityAvailable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EntityColumnKey</span> <span class="token punctuation">,</span> <span class="token class-name">EntityColumnKeyProxy</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>primaryKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token class-name">EasyQueryClient</span> client <span class="token operator">=</span> <span class="token class-name">EasyQueryBootstrapper</span><span class="token punctuation">.</span><span class="token function">defaultBuilderConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setDefaultDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">optionConfigure</span><span class="token punctuation">(</span>op <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//进行一系列可以选择的配置</span>
            <span class="token comment">//op.setPrintSql(true);</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">//设置真确的数据库</span>
        <span class="token punctuation">.</span><span class="token function">useDatabaseConfigure</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MySQLDatabaseConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">EasyEntityQuery</span> easyEntityQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEasyEntityQuery</span><span class="token punctuation">(</span>easyQueryClient<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">DatabaseCodeFirst</span> databaseCodeFirst <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">getDatabaseCodeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
databaseCodeFirst<span class="token punctuation">.</span><span class="token function">createDatabaseIfNotExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CodeFirstCommand</span> codeFirstCommand <span class="token operator">=</span> databaseCodeFirst<span class="token punctuation">.</span><span class="token function">syncTableCommand</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">EntityColumnKey</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
codeFirstCommand<span class="token punctuation">.</span><span class="token function">executeWithTransaction</span><span class="token punctuation">(</span>arg<span class="token operator">-&gt;</span>arg<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">EntityColumnKey</span> entityColumnKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EntityColumnKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
entityColumnKey<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
entityColumnKey<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
easyEntityQuery<span class="token punctuation">.</span><span class="token function">insertable</span><span class="token punctuation">(</span>entityColumnKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EntityColumnKey</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> easyEntityQuery<span class="token punctuation">.</span><span class="token function">queryable</span><span class="token punctuation">(</span><span class="token class-name">EntityColumnKey</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>




check db sql<span class="token operator">:</span>select <span class="token number">1</span> from information_schema<span class="token punctuation">.</span>schemata where schema_name<span class="token operator">=</span>&#39;easy<span class="token operator">-</span>query<span class="token operator">-</span>test&#39;
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> 
<span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token constant">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> \`test_table\` <span class="token punctuation">(</span> 
\`id\` <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> <span class="token constant">NULL</span> <span class="token punctuation">,</span>
\`key\` <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token constant">NULL</span> <span class="token punctuation">,</span> 
 <span class="token class-name">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span>\`id\`<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token class-name">Engine</span><span class="token operator">=</span><span class="token class-name">InnoDB</span><span class="token punctuation">;</span>
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">INSERT</span> <span class="token constant">INTO</span> \`test_table\` <span class="token punctuation">(</span>\`id\`<span class="token punctuation">,</span>\`key\`<span class="token punctuation">)</span> <span class="token constant">VALUES</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">2</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token constant">SELECT</span> \`id\`<span class="token punctuation">,</span>\`key\` <span class="token constant">FROM</span> \`test_table\`
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Time</span> <span class="token class-name">Elapsed</span><span class="token operator">:</span> <span class="token function">2</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
<span class="token operator">&lt;=</span><span class="token operator">=</span> <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">[</span><span class="token class-name">EntityColumnKey</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">说明!!!</p><blockquote><p>上述实体的key为关键字我们对其设置mysql后将会对列名添加关键字处理</p></blockquote></div>`,3);function g(f,h){const o=l("Tabs");return i(),u("div",null,[d,r(o,{id:"50",data:[{id:"console"},{id:"springboot"},{id:"solon"}]},{title0:a(({value:t,isActive:e})=>[s("console")]),title1:a(({value:t,isActive:e})=>[s("springboot")]),title2:a(({value:t,isActive:e})=>[s("solon")]),tab0:a(({value:t,isActive:e})=>[m]),tab1:a(({value:t,isActive:e})=>[v]),tab2:a(({value:t,isActive:e})=>[b]),_:1}),y])}const _=c(k,[["render",g],["__file","key-word.html.vue"]]);export{_ as default};

const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":863,\"nextId\":863,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#🔔-qq-群-170029046\",\"2\":\"v-8daa1a0e#🔔-交流-qq-群\",\"3\":\"v-8daa1a0e#easyquery-官方-qq-群-170029046\",\"4\":\"v-8daa1a0e#github-仓库\",\"5\":\"v-8daa1a0e#gitee-仓库\",\"6\":\"v-8daa1a0e#许可证\",\"7\":\"v-8daa1a0e#文档主题\",\"8\":\"v-e6adff1c\",\"9\":\"v-e6adff1c#支持的数据库\",\"10\":\"v-335ea0a4\",\"11\":\"v-1445ee5a\",\"12\":\"v-1445ee5a#springboot-启动报错\",\"13\":\"v-1445ee5a#没有生成proxy\",\"14\":\"v-1445ee5a#如果插件报错\",\"15\":\"v-1445ee5a#阿里镜像找不到依赖\",\"16\":\"v-1445ee5a#删除错误\",\"17\":\"v-1445ee5a#proxy不存在\",\"18\":\"v-f5686eac\",\"19\":\"v-f5686eac#预览\",\"20\":\"v-f5686eac#快速实现表单查询\",\"21\":\"v-f5686eac#数据库对象\",\"22\":\"v-f5686eac#查询对象\",\"23\":\"v-f5686eac#表单查询1\",\"24\":\"v-f5686eac#表单查询2\",\"25\":\"v-f5686eac#表单查询3\",\"26\":\"v-96f5eae0\",\"27\":\"v-96f5eae0#简介\",\"28\":\"v-96f5eae0#entityquery\",\"29\":\"v-96f5eae0#idea-插件安装\",\"30\":\"v-96f5eae0#依赖注入\",\"31\":\"v-96f5eae0#依赖注入-1\",\"32\":\"v-96f5eae0#数据库表对象\",\"33\":\"v-96f5eae0#自动生成\",\"34\":\"v-96f5eae0#运行\",\"35\":\"v-96f5eae0#单个查询\",\"36\":\"v-96f5eae0#返回列表\",\"37\":\"v-96f5eae0#count查询\",\"38\":\"v-96f5eae0#返回自定义列\",\"39\":\"v-96f5eae0#分组\",\"40\":\"v-96f5eae0#分页\",\"41\":\"v-96f5eae0#join多表查询\",\"42\":\"v-96f5eae0#排序\",\"43\":\"v-96f5eae0#lambdaquery\",\"44\":\"v-96f5eae0#依赖注入-2\",\"45\":\"v-96f5eae0#数据库表对象-1\",\"46\":\"v-96f5eae0#propertyquery\",\"47\":\"v-760ae03a\",\"48\":\"v-760ae03a#爱心\",\"49\":\"v-5d4c4494\",\"50\":\"v-1473bf53\",\"51\":\"v-1473bf53#catalog\",\"52\":\"v-4e65ec78\",\"53\":\"v-c151bf32\",\"54\":\"v-438ffe52\",\"55\":\"v-438ffe52#markdown-introduction\",\"56\":\"v-438ffe52#markdown-config\",\"57\":\"v-438ffe52#markdown-extension\",\"58\":\"v-438ffe52#vuepress-enhancement\",\"59\":\"v-438ffe52#theme-enhancement\",\"60\":\"v-438ffe52#custom-container\",\"61\":\"v-438ffe52#tabs\",\"62\":\"v-438ffe52#code-tabs\",\"63\":\"v-438ffe52#superscript-and-subscript\",\"64\":\"v-438ffe52#align\",\"65\":\"v-438ffe52#attrs\",\"66\":\"v-438ffe52#footnote\",\"67\":\"v-438ffe52#mark\",\"68\":\"v-438ffe52#tasklist\",\"69\":\"v-438ffe52#image-enhancement\",\"70\":\"v-438ffe52#chart\",\"71\":\"v-438ffe52#echarts\",\"72\":\"v-438ffe52#flowchart\",\"73\":\"v-438ffe52#mermaid\",\"74\":\"v-438ffe52#tex\",\"75\":\"v-438ffe52#include-files\",\"76\":\"v-438ffe52#code-demo\",\"77\":\"v-438ffe52#stylize\",\"78\":\"v-438ffe52#playground\",\"79\":\"v-438ffe52#vue-playground\",\"80\":\"v-438ffe52#presentation\",\"81\":\"v-6e19edb7\",\"82\":\"v-6e19edb7#page-information\",\"83\":\"v-6e19edb7#page-content\",\"84\":\"v-6e19edb7#page-structure\",\"85\":\"v-2d0a870d\",\"86\":\"v-2d0a870d#github-repository\",\"87\":\"v-2d0a870d#gitee-repository\",\"88\":\"v-2d0a870d#license\",\"89\":\"v-2d0a870d#doument-theme\",\"90\":\"v-2d0a870d#🔔qq-group\",\"91\":\"v-2d0a870d#easyquery官方qq群-170029046\",\"92\":\"v-fffb8e28\",\"93\":\"v-fffb8e28#指南\",\"94\":\"v-fffb8e28#easyquery\",\"95\":\"v-fffb8e28#特性\",\"96\":\"v-fffb8e28#学习指南\",\"97\":\"v-fffb8e28#基础\",\"98\":\"v-4d2a090a\",\"99\":\"v-2525f74b\",\"100\":\"v-2525f74b#目录指引\",\"101\":\"v-9f79e170\",\"102\":\"v-9f79e170#查询\",\"103\":\"v-9f79e170#插入\",\"104\":\"v-9f79e170#修改\",\"105\":\"v-9f79e170#删除\",\"106\":\"v-9a1dee92\",\"107\":\"v-9a1dee92#目录指引\",\"108\":\"v-1891eab6\",\"109\":\"v-1891eab6#非结构化平铺数据\",\"110\":\"v-1891eab6#用户dto\",\"111\":\"v-1891eab6#结构化数据返回\",\"112\":\"v-1891eab6#穿透结构返回\",\"113\":\"v-0e078300\",\"114\":\"v-0e078300#获取最新\",\"115\":\"v-0e078300#spring-boot工程\",\"116\":\"v-0e078300#springboot多数据源\",\"117\":\"v-0e078300#springboot-启动报错\",\"118\":\"v-0e078300#创建springboot应用\",\"119\":\"v-0e078300#添加依赖\",\"120\":\"v-0e078300#属性模式\",\"121\":\"v-0e078300#entity模式\",\"122\":\"v-0e078300#添加配置\",\"123\":\"v-0e078300#注入bean\",\"124\":\"v-0e078300#添加配置文件\",\"125\":\"v-0e078300#添加控制器\",\"126\":\"v-167abf6e\",\"127\":\"v-55ff1b88\",\"128\":\"v-55ff1b88#关系对象\",\"129\":\"v-55ff1b88#案例-1\",\"130\":\"v-55ff1b88#案例-2\",\"131\":\"v-55ff1b88#案例-3\",\"132\":\"v-55ff1b88#案例-4\",\"133\":\"v-55ff1b88#案例-5\",\"134\":\"v-55ff1b88#案例-6\",\"135\":\"v-55ff1b88#案例-7\",\"136\":\"v-55ff1b88#案例-8\",\"137\":\"v-55ff1b88#案例-9\",\"138\":\"v-55ff1b88#案例-10\",\"139\":\"v-55ff1b88#案例9进阶\",\"140\":\"v-55ff1b88#高级扩展\",\"141\":\"v-6d810b18\",\"142\":\"v-6d810b18#关系对象\",\"143\":\"v-6d810b18#多对多说明\",\"144\":\"v-6d810b18#案例1\",\"145\":\"v-6d810b18#案例2\",\"146\":\"v-6d810b18#案例3\",\"147\":\"v-6d810b18#案例4\",\"148\":\"v-6d810b18#案例5\",\"149\":\"v-6d810b18#案例6\",\"150\":\"v-cc18d22c\",\"151\":\"v-cc18d22c#快速查询\",\"152\":\"v-cc18d22c#快速筛选\",\"153\":\"v-b4dd848a\",\"154\":\"v-b4dd848a#安装插件\",\"155\":\"v-b4dd848a#快速生成接口\",\"156\":\"v-1ef8b044\",\"157\":\"v-1ef8b044#单模块\",\"158\":\"v-1ef8b044#多模块\",\"159\":\"v-48612ae2\",\"160\":\"v-48612ae2#简介\",\"161\":\"v-48612ae2#entityquery\",\"162\":\"v-48612ae2#安装插件-可选\",\"163\":\"v-48612ae2#依赖注入\",\"164\":\"v-48612ae2#数据库表对象\",\"165\":\"v-48612ae2#生成apt文件\",\"166\":\"v-48612ae2#添加数据库对象接口\",\"167\":\"v-48612ae2#运行\",\"168\":\"v-48612ae2#单个查询\",\"169\":\"v-48612ae2#返回列表\",\"170\":\"v-48612ae2#count查询\",\"171\":\"v-48612ae2#返回自定义列\",\"172\":\"v-48612ae2#分组\",\"173\":\"v-48612ae2#分页\",\"174\":\"v-48612ae2#join多表查询\",\"175\":\"v-48612ae2#排序\",\"176\":\"v-48612ae2#额外配置\",\"177\":\"v-66177016\",\"178\":\"v-66177016#查询\",\"179\":\"v-66177016#单个查询\",\"180\":\"v-66177016#集合查询\",\"181\":\"v-66177016#判断结果是否存在\",\"182\":\"v-66177016#聚合结果\",\"183\":\"v-66177016#排序\",\"184\":\"v-66177016#分组筛选\",\"185\":\"v-66177016#自定义返回结果\",\"186\":\"v-66177016#多表查询\",\"187\":\"v-269ae70f\",\"188\":\"v-5d5cfe70\",\"189\":\"v-5d5cfe70#目录\",\"190\":\"v-5d5cfe70#编写的所有扩展如何添加到当前orm中\",\"191\":\"v-5d5cfe70#自行处理\",\"192\":\"v-5d5cfe70#solon\",\"193\":\"v-e8200854\",\"194\":\"v-e8200854#valueupdateatomictrack\",\"195\":\"v-e8200854#系统默认实现\",\"196\":\"v-e8200854#例子\",\"197\":\"v-66e16470\",\"198\":\"v-66e16470#primarykeygenerator\",\"199\":\"v-66e16470#如何使用\",\"200\":\"v-66e16470#uuidprimarykeygenerator\",\"201\":\"v-66e16470#雪花id\",\"202\":\"v-66e16470#相关搜索\",\"203\":\"v-8d29f6b2\",\"204\":\"v-8d29f6b2#例如\",\"205\":\"v-8d29f6b2#代码注意点\",\"206\":\"v-8d29f6b2#原因可能\",\"207\":\"v-8d29f6b2#相关搜索\",\"208\":\"v-69bdcd42\",\"209\":\"v-69bdcd42#模式\",\"210\":\"v-6a5d0d87\",\"211\":\"v-6a5d0d87#encryptionstrategy\",\"212\":\"v-6a5d0d87#encryption\",\"213\":\"v-6a5d0d87#demo数据\",\"214\":\"v-6a5d0d87#插入数据测试\",\"215\":\"v-6a5d0d87#加密实现类支持模糊搜索高性能\",\"216\":\"v-6a5d0d87#加密方式\",\"217\":\"v-6a5d0d87#实现加密策略\",\"218\":\"v-6a5d0d87#abstractunsupportemojiaesbase64encryptionstrategy\",\"219\":\"v-6a5d0d87#abstractsupportemojiaesbase64encryptionstrategy\",\"220\":\"v-6a5d0d87#测试\",\"221\":\"v-d2e44a9a\",\"222\":\"v-d2e44a9a#find-in-set编写\",\"223\":\"v-d2e44a9a#sqlnativesegment封装\",\"224\":\"v-b4c9a8b4\",\"225\":\"v-b4c9a8b4#ifnull编写\",\"226\":\"v-b4c9a8b4#columnpropertyfunction\",\"227\":\"v-b4c9a8b4#columnfunction\",\"228\":\"v-0006c2af\",\"229\":\"v-0006c2af#mysql加密解密\",\"230\":\"v-0006c2af#columnvaluesqlconverter\",\"231\":\"v-0006c2af#案例\",\"232\":\"v-0006c2af#新增数据\",\"233\":\"v-0006c2af#查询数据\",\"234\":\"v-0006c2af#更新数据\",\"235\":\"v-0006c2af#按列更新\",\"236\":\"v-0006c2af#计算属性\",\"237\":\"v-0006c2af#查询\",\"238\":\"v-0006c2af#插入\",\"239\":\"v-0006c2af#复杂子查询\",\"240\":\"v-0006c2af#相关博客\",\"241\":\"v-11884a67\",\"242\":\"v-11884a67#spring-boot\",\"243\":\"v-11884a67#非spring-boot环境\",\"244\":\"v-11884a67#api\",\"245\":\"v-11884a67#trackmanager\",\"246\":\"v-11884a67#queryable\",\"247\":\"v-11884a67#easyquery\",\"248\":\"v-11884a67#demo数据\",\"249\":\"v-11884a67#新增测试数据\",\"250\":\"v-11884a67#追踪更新\",\"251\":\"v-11884a67#开启追踪后对象属性不修改更新\",\"252\":\"v-11884a67#不追踪更新\",\"253\":\"v-7623c560\",\"254\":\"v-7623c560#自定义函数创建数据库自动生成列\",\"255\":\"v-7623c560#案例场景\",\"256\":\"v-c42f8ac8\",\"257\":\"v-c42f8ac8#interceptor-api\",\"258\":\"v-c42f8ac8#demo数据\",\"259\":\"v-c42f8ac8#entityinterceptor\",\"260\":\"v-c42f8ac8#api\",\"261\":\"v-c42f8ac8#updatesetinterceptor\",\"262\":\"v-c42f8ac8#api-1\",\"263\":\"v-c42f8ac8#predicatefilterinterceptor\",\"264\":\"v-c42f8ac8#api-2\",\"265\":\"v-c42f8ac8#租户模式实现\",\"266\":\"v-c42f8ac8#按需拦截\",\"267\":\"v-327cfc1b\",\"268\":\"v-327cfc1b#jdbcexecutorlistener\",\"269\":\"v-327cfc1b#jdbcexecutebeforearg\",\"270\":\"v-327cfc1b#jdbcexecuteafterarg\",\"271\":\"v-327cfc1b#自定义监听器\",\"272\":\"v-327cfc1b#循环监听\",\"273\":\"v-327cfc1b#springboot为例\",\"274\":\"v-327cfc1b#solon\",\"275\":\"v-504f9a57\",\"276\":\"v-504f9a57#demo数据\",\"277\":\"v-504f9a57#logicdelete\",\"278\":\"v-504f9a57#例子\",\"279\":\"v-504f9a57#strategy\",\"280\":\"v-504f9a57#禁用逻辑删除\",\"281\":\"v-504f9a57#禁用部分逻辑删除\",\"282\":\"v-504f9a57#自定义逻辑删除\",\"283\":\"v-504f9a57#自定义逻辑删除数据\",\"284\":\"v-504f9a57#实现自定义逻辑删除策略\",\"285\":\"v-504f9a57#测试\",\"286\":\"v-504f9a57#相关搜索\",\"287\":\"v-c34280c8\",\"288\":\"v-c34280c8#通用函数\",\"289\":\"v-c34280c8#字符串函数\",\"290\":\"v-c34280c8#时间函数\",\"291\":\"v-c34280c8#案例\",\"292\":\"v-c34280c8#返回列函数\",\"293\":\"v-c34280c8#条件函数\",\"294\":\"v-33d2738e\",\"295\":\"v-33d2738e#返回列函数\",\"296\":\"v-33d2738e#条件函数\",\"297\":\"v-7308988c\",\"298\":\"v-7308988c#jdbctypehandlermanager\",\"299\":\"v-7308988c#jdbctypehandler\",\"300\":\"v-7308988c#如何添加\",\"301\":\"v-696bf3dd\",\"302\":\"v-696bf3dd#api\",\"303\":\"v-696bf3dd#springboot\",\"304\":\"v-696bf3dd#控制台\",\"305\":\"v-696bf3dd#枚举值\",\"306\":\"v-696bf3dd#数据库对象属性枚举值\",\"307\":\"v-696bf3dd#数据库对象属性integer值\",\"308\":\"v-696bf3dd#注解模式\",\"309\":\"v-696bf3dd#json对象\",\"310\":\"v-696bf3dd#集合类型的json支持\",\"311\":\"v-4c69f6d6\",\"312\":\"v-4c69f6d6#java版本实现\",\"313\":\"v-4c69f6d6#替换系统默认lambda表达式解析\",\"314\":\"v-4c69f6d6#新增\",\"315\":\"v-4c69f6d6#查询\",\"316\":\"v-4c69f6d6#更新\",\"317\":\"v-4c69f6d6#相关搜索\",\"318\":\"v-309affc9\",\"319\":\"v-309affc9#相关配置\",\"320\":\"v-309affc9#demo数据\",\"321\":\"v-309affc9#api\",\"322\":\"v-309affc9#easyversionstrategy\",\"323\":\"v-309affc9#测试数据\",\"324\":\"v-309affc9#实体更新\",\"325\":\"v-309affc9#表达式更新\",\"326\":\"v-309affc9#逻辑删除加版本号\",\"327\":\"v-309affc9#实体对象删除\",\"328\":\"v-309affc9#表达式删除\",\"329\":\"v-5d5c2d30\",\"330\":\"v-5d5c2d30#introduction\",\"331\":\"v-5d5c2d30#details\",\"332\":\"v-177e1f06\",\"333\":\"v-7702eca6\",\"334\":\"v-fd1be79c\",\"335\":\"v-fd1be79c#api说明\",\"336\":\"v-fd1be79c#分解表达式\",\"337\":\"v-fd1be79c#_1\",\"338\":\"v-fd1be79c#_2\",\"339\":\"v-fd1be79c#_3\",\"340\":\"v-fd1be79c#_4\",\"341\":\"v-fd1be79c#_5\",\"342\":\"v-fd1be79c#_6\",\"343\":\"v-fd1be79c#单表api使用\",\"344\":\"v-fd1be79c#多表查询api\",\"345\":\"v-fd1be79c#多表返回表达式\",\"346\":\"v-fd1be79c#多表自定义结果api\",\"347\":\"v-5800893a\",\"348\":\"v-5800893a#默认行为\",\"349\":\"v-5800893a#配置\",\"350\":\"v-5800893a#select\",\"351\":\"v-5800893a#insert\",\"352\":\"v-5800893a#update\",\"353\":\"v-5800893a#delete\",\"354\":\"v-1fb92641\",\"355\":\"v-1fb92641#_1-表达式删除\",\"356\":\"v-1fb92641#_2-实体删除\",\"357\":\"v-1fb92641#_3-强制物理删除\",\"358\":\"v-5c70e1f3\",\"359\":\"v-5c70e1f3#_1-单条插入\",\"360\":\"v-5c70e1f3#_2-多条插入\",\"361\":\"v-5c70e1f3#_3-链式添加\",\"362\":\"v-5c70e1f3#_4-自增主键回填\",\"363\":\"v-5c70e1f3#_5-策略新增\",\"364\":\"v-5c70e1f3#_6-mysql方言\",\"365\":\"v-5c70e1f3#onduplicatekeyignore\",\"366\":\"v-5c70e1f3#onduplicatekeyupdate\",\"367\":\"v-5c70e1f3#_7-pgsql方言\",\"368\":\"v-5c70e1f3#onconflictdonothing\",\"369\":\"v-5c70e1f3#onconflictdoupdate\",\"370\":\"v-5c70e1f3#map插入\",\"371\":\"v-118852c7\",\"372\":\"v-118852c7#支持的db\",\"373\":\"v-118852c7#onconflictthen\",\"374\":\"v-118852c7#存在就忽略不更新\",\"375\":\"v-118852c7#指定存在的条件\",\"376\":\"v-118852c7#存在就更新\",\"377\":\"v-118852c7#存在就更新-1\",\"378\":\"v-118852c7#相关搜索\",\"379\":\"v-c7bd4004\",\"380\":\"v-c7bd4004#结论\",\"381\":\"v-c7bd4004#tosql性能附带双列tobean\",\"382\":\"v-c7bd4004#tobean数据库表20列\",\"383\":\"v-613f4354\",\"384\":\"v-613f4354#测试方法\",\"385\":\"v-613f4354#测试单条数据查询\",\"386\":\"v-613f4354#测试列表-list-数据查询\",\"387\":\"v-613f4354#测试列表-list1w-数据查询\",\"388\":\"v-613f4354#分页查询\",\"389\":\"v-613f4354#数据更新\",\"390\":\"v-613f4354#更多的测试\",\"391\":\"v-688ad1d4\",\"392\":\"v-688ad1d4#🔔交流qq群\",\"393\":\"v-688ad1d4#easyquery官方qq群-170029046\",\"394\":\"v-688ad1d4#psvm下\",\"395\":\"v-688ad1d4#安装依赖\",\"396\":\"v-688ad1d4#新建java类\",\"397\":\"v-688ad1d4#初始化代码\",\"398\":\"v-1a1acb44\",\"399\":\"v-1a1acb44#查询对象\",\"400\":\"v-1a1acb44#测试数据\",\"401\":\"v-1a1acb44#查询第一条数据\",\"402\":\"v-1a1acb44#查询第一条数据且不为null\",\"403\":\"v-1a1acb44#查询多条数据\",\"404\":\"v-1a1acb44#自定义列\",\"405\":\"v-1a1acb44#创建匿名表\",\"406\":\"v-797fc8eb\",\"407\":\"v-797fc8eb#默认行为\",\"408\":\"v-e291cf30\",\"409\":\"v-e291cf30#手动事务\",\"410\":\"v-e291cf30#api\",\"411\":\"v-e291cf30#如何开启\",\"412\":\"v-4068b5e3\",\"413\":\"v-4068b5e3#_0-对象主键更新\",\"414\":\"v-4068b5e3#_1-更新指定列\",\"415\":\"v-4068b5e3#_2-表列自更新\",\"416\":\"v-4068b5e3#_3-表列原子更新\",\"417\":\"v-4068b5e3#_3-差异更新\",\"418\":\"v-4068b5e3#_4-指定列更新或条件\",\"419\":\"v-4068b5e3#_5-策略更新\",\"420\":\"v-4068b5e3#map更新\",\"421\":\"v-4068b5e3#_6-更新自定义sql\",\"422\":\"v-4068b5e3#_7-注意\",\"423\":\"v-17d50ac1\",\"424\":\"v-5df413ae\",\"425\":\"v-5df413ae#table\",\"426\":\"v-5df413ae#column\",\"427\":\"v-5df413ae#columnignore\",\"428\":\"v-5df413ae#insertignore\",\"429\":\"v-5df413ae#updateignore\",\"430\":\"v-5df413ae#logicdelete\",\"431\":\"v-5df413ae#version\",\"432\":\"v-5df413ae#默认乐观锁版本号策略\",\"433\":\"v-5df413ae#versionintstrategy\",\"434\":\"v-5df413ae#versionlongstrategy\",\"435\":\"v-5df413ae#versionuuidstrategy\",\"436\":\"v-5df413ae#encryption\",\"437\":\"v-5df413ae#encryptionstrategy\",\"438\":\"v-5df413ae#supportquerylike\",\"439\":\"v-5df413ae#navigate\",\"440\":\"v-5df413ae#shardingdatasourcekey\",\"441\":\"v-5df413ae#shardingextradatasourcekey\",\"442\":\"v-5df413ae#shardingtablekey\",\"443\":\"v-5df413ae#shardingextratablekey\",\"444\":\"v-5df413ae#easywherecondition\",\"445\":\"v-5df413ae#easyquerytrack\",\"446\":\"v-5df413ae#entityproxy\",\"447\":\"v-5df413ae#entityfileproxy\",\"448\":\"v-5df413ae#proxyproperty\",\"449\":\"v-413bd002\",\"450\":\"v-413bd002#五种模式\",\"451\":\"v-413bd002#单表查询\",\"452\":\"v-413bd002#proxy模式\",\"453\":\"v-413bd002#依赖安装\",\"454\":\"v-413bd002#lambda表达式树模式\",\"455\":\"v-413bd002#依赖安装-1\",\"456\":\"v-536ebfed\",\"457\":\"v-536ebfed#获取最新\",\"458\":\"v-536ebfed#api接口选型\",\"459\":\"v-536ebfed#使用示例\",\"460\":\"v-536ebfed#非spring-boot初始化\",\"461\":\"v-ad88c224\",\"462\":\"v-ad88c224#获取最新\",\"463\":\"v-ad88c224#spring-boot工程\",\"464\":\"v-ad88c224#获取最新-1\",\"465\":\"v-ad88c224#spring-boot初始化\",\"466\":\"v-ad88c224#非spring-boot初始化\",\"467\":\"v-124c900c\",\"468\":\"v-124c900c#默认配置项\",\"469\":\"v-124c900c#分表分库特有配置\",\"470\":\"v-124c900c#spring-boot\",\"471\":\"v-124c900c#非spring-boot\",\"472\":\"v-0c874194\",\"473\":\"v-0c874194#国产框架solon配置\",\"474\":\"v-0c874194#什么是solon\",\"475\":\"v-0c874194#获取最新\",\"476\":\"v-0c874194#快速开始\",\"477\":\"v-0c874194#新建java-maven项目\",\"478\":\"v-0c874194#添加项目依赖\",\"479\":\"v-0c874194#新建datasource注入\",\"480\":\"v-0c874194#新增控制器\",\"481\":\"v-0c874194#solon启动\",\"482\":\"v-0c874194#easy-query查询\",\"483\":\"v-0c874194#solon配置easy-query个性化\",\"484\":\"v-0c874194#额外配置\",\"485\":\"v-0c874194#逻辑删除\",\"486\":\"v-0c874194#solon所有配置\",\"487\":\"v-0c874194#配置影响到所有的数据源\",\"488\":\"v-07b820b1\",\"489\":\"v-07b820b1#获取最新\",\"490\":\"v-07b820b1#spring-boot工程\",\"491\":\"v-07b820b1#springboot多数据源\",\"492\":\"v-07b820b1#springboot-启动报错\",\"493\":\"v-07b820b1#多数据源\",\"494\":\"v-07b820b1#创建springboot应用\",\"495\":\"v-07b820b1#添加依赖\",\"496\":\"v-07b820b1#属性模式\",\"497\":\"v-07b820b1#代理模式\",\"498\":\"v-07b820b1#添加配置\",\"499\":\"v-07b820b1#注入bean\",\"500\":\"v-07b820b1#添加配置文件\",\"501\":\"v-07b820b1#添加控制器\",\"502\":\"v-f4175cfa\",\"503\":\"v-1074f60a\",\"504\":\"v-1074f60a#新建一个springboot项目\",\"505\":\"v-1074f60a#配置bean\",\"506\":\"v-1074f60a#数据库脚本\",\"507\":\"v-1074f60a#创建对象\",\"508\":\"v-1074f60a#添加翻译缓存服务\",\"509\":\"v-1074f60a#测试添加控制器\",\"510\":\"v-eb7e222a\",\"511\":\"v-33e6399e\",\"512\":\"v-33e6399e#新建项目\",\"513\":\"v-33e6399e#添加依赖\",\"514\":\"v-33e6399e#添加kapt设置\",\"515\":\"v-33e6399e#新增数据库对象\",\"516\":\"v-33e6399e#编译\",\"517\":\"v-33e6399e#运行\",\"518\":\"v-33e6399e#错误\",\"519\":\"v-33e6399e#完整的pom\",\"520\":\"v-9158abca\",\"521\":\"v-9158abca#springboot\",\"522\":\"v-6618cc45\",\"523\":\"v-6618cc45#创建配置\",\"524\":\"v-6618cc45#注解动态处理\",\"525\":\"v-6618cc45#aop配置\",\"526\":\"v-6618cc45#使用\",\"527\":\"v-441b7f30\",\"528\":\"v-441b7f30#解决痛点一\",\"529\":\"v-441b7f30#easyalias\",\"530\":\"v-441b7f30#quicktipsetting\",\"531\":\"v-441b7f30#智能提示\",\"532\":\"v-441b7f30#默认错误消息\",\"533\":\"v-441b7f30#看不懂大于小于记不住\",\"534\":\"v-1134bc25\",\"535\":\"v-1134bc25#选择合适的版本\",\"536\":\"v-1134bc25#🔔交流qq群\",\"537\":\"v-1134bc25#easyquery官方qq群-170029046\",\"538\":\"v-1134bc25#版本升级\",\"539\":\"v-1134bc25#下载\",\"540\":\"v-1134bc25#插件功能介绍\",\"541\":\"v-1134bc25#entity对象生成\",\"542\":\"v-1134bc25#apt自动生成\",\"543\":\"v-1134bc25#entityquery\",\"544\":\"v-bd56e426\",\"545\":\"v-bd56e426#可以被替换的接口\",\"546\":\"v-bd56e426#自定义nameconversion\",\"547\":\"v-bd56e426#springboot环境\",\"548\":\"v-bd56e426#非springboot环境\",\"549\":\"v-bd56e426#solon环境替换默认行为\",\"550\":\"v-5d5821d6\",\"551\":\"v-5d5821d6#introduction\",\"552\":\"v-5d5821d6#details\",\"553\":\"v-0b6fc5f8\",\"554\":\"v-59b843c0\",\"555\":\"v-676e35f0\",\"556\":\"v-676e35f0#跨表计算属性\",\"557\":\"v-676e35f0#查询\",\"558\":\"v-7c168aa7\",\"559\":\"v-7c168aa7#api\",\"560\":\"v-7c168aa7#springboot\",\"561\":\"v-7c168aa7#控制台\",\"562\":\"v-7c168aa7#集合类型的json支持\",\"563\":\"v-453b9488\",\"564\":\"v-453b9488#复合计算属性\",\"565\":\"v-453b9488#查询\",\"566\":\"v-453b9488#插入\",\"567\":\"v-0e3fe14a\",\"568\":\"v-0e3fe14a#api\",\"569\":\"v-0e3fe14a#springboot\",\"570\":\"v-0e3fe14a#控制台\",\"571\":\"v-0e3fe14a#枚举值\",\"572\":\"v-0e3fe14a#数据库对象属性枚举值\",\"573\":\"v-0e3fe14a#数据库对象属性integer值\",\"574\":\"v-0e3fe14a#注解模式\",\"575\":\"v-f242771e\",\"576\":\"v-f242771e#api\",\"577\":\"v-f242771e#springboot\",\"578\":\"v-f242771e#控制台\",\"579\":\"v-f242771e#json对象\",\"580\":\"v-232815d6\",\"581\":\"v-232815d6#自定义函数创建数据库自动生成列\",\"582\":\"v-232815d6#案例场景\",\"583\":\"v-3ab3077e\",\"584\":\"v-3ab3077e#mysql加密解密\",\"585\":\"v-3ab3077e#columnvaluesqlconverter\",\"586\":\"v-3ab3077e#案例\",\"587\":\"v-3ab3077e#新增数据\",\"588\":\"v-3ab3077e#查询数据\",\"589\":\"v-3ab3077e#更新数据\",\"590\":\"v-3ab3077e#按列更新\",\"591\":\"v-3ab3077e#相关博客\",\"592\":\"v-87681a0a\",\"593\":\"v-87681a0a#查询\",\"594\":\"v-87681a0a#筛选\",\"595\":\"v-87681a0a#排序\",\"596\":\"v-41aa4f5a\",\"597\":\"v-41aa4f5a#单表查询\",\"598\":\"v-41aa4f5a#多表\",\"599\":\"v-41aa4f5a#嵌套多表\",\"600\":\"v-41aa4f5a#自定义vo返回结果\",\"601\":\"v-41aa4f5a#api\",\"602\":\"v-6088414c\",\"603\":\"v-6088414c#背景\",\"604\":\"v-6088414c#场景\",\"605\":\"v-6088414c#draft\",\"606\":\"v-6088414c#案例一\",\"607\":\"v-6088414c#案例二\",\"608\":\"v-6088414c#注意\",\"609\":\"v-7325db66\",\"610\":\"v-7325db66#string\",\"611\":\"v-7325db66#integer\",\"612\":\"v-7325db66#map\",\"613\":\"v-7325db66#支持的类型\",\"614\":\"v-2b4612d6\",\"615\":\"v-2b4612d6#简单查询\",\"616\":\"v-2b4612d6#多条件casewhen\",\"617\":\"v-755cd5fa\",\"618\":\"v-755cd5fa#objectsort\",\"619\":\"v-755cd5fa#objectsortbuilder\",\"620\":\"v-755cd5fa#单字段动态排序\",\"621\":\"v-755cd5fa#多字段组合动态排序\",\"622\":\"v-755cd5fa#join动态排序\",\"623\":\"v-755cd5fa#uisort\",\"624\":\"v-44287dac\",\"625\":\"v-44287dac#api\",\"626\":\"v-44287dac#案例\",\"627\":\"v-b826779a\",\"628\":\"v-b826779a#默认配置项\",\"629\":\"v-b826779a#查询对象\",\"630\":\"v-b826779a#动态条件-1\",\"631\":\"v-b826779a#条件接受\",\"632\":\"v-b826779a#属性一对一查询\",\"633\":\"v-b826779a#动态查询条件1\",\"634\":\"v-b826779a#属性一对多查询\",\"635\":\"v-b826779a#动态条件多表join\",\"636\":\"v-b826779a#替换whereobject实现\",\"637\":\"v-b826779a#如何替换框架行为\",\"638\":\"v-b826779a#接口\",\"639\":\"v-b826779a#相关搜索\",\"640\":\"v-761d1a43\",\"641\":\"v-761d1a43#api说明\",\"642\":\"v-0d476366\",\"643\":\"v-f398ff10\",\"644\":\"v-f398ff10#api变化\",\"645\":\"v-f398ff10#leftjoin\",\"646\":\"v-f398ff10#innerjoin\",\"647\":\"v-f398ff10#嵌套join\",\"648\":\"v-f398ff10#group-join\",\"649\":\"v-f398ff10#join2表以上\",\"650\":\"v-f398ff10#查询某一张表的所有字段\",\"651\":\"v-f398ff10#查询所有字段忽略其中一个\",\"652\":\"v-f398ff10#一个相对比较全的查询\",\"653\":\"v-1ad9680e\",\"654\":\"v-1ad9680e#查询sqlquery\",\"655\":\"v-1ad9680e#无参数强类型返回\",\"656\":\"v-1ad9680e#有参数强类型返回\",\"657\":\"v-1ad9680e#查询sqlquerymap\",\"658\":\"v-1ad9680e#无参数map返回\",\"659\":\"v-1ad9680e#有参数map返回\",\"660\":\"v-1ad9680e#执行\",\"661\":\"v-1ad9680e#无参数\",\"662\":\"v-1ad9680e#有参数\",\"663\":\"v-1ad9680e#entityquery\",\"664\":\"v-1ad9680e#随机排序\",\"665\":\"v-1ad9680e#随机排序带参数\",\"666\":\"v-1ad9680e#返回结果\",\"667\":\"v-1ad9680e#自定义原生sql查询\",\"668\":\"v-1ad9680e#sqlnativesegment\",\"669\":\"v-1ad9680e#案例二\",\"670\":\"v-1ad9680e#注意\",\"671\":\"v-1ad9680e#相关搜索\",\"672\":\"v-0a5901d5\",\"673\":\"v-0a5901d5#案例\",\"674\":\"v-4bfe3244\",\"675\":\"v-4bfe3244#一个字段排序\",\"676\":\"v-4bfe3244#双字段排序\",\"677\":\"v-4bfe3244#动态排序\",\"678\":\"v-4bfe3244#函数排序\",\"679\":\"v-4bfe3244#null最前最后\",\"680\":\"v-ae3272cc\",\"681\":\"v-ae3272cc#简单分页\",\"682\":\"v-ae3272cc#join分页\",\"683\":\"v-ae3272cc#group分页\",\"684\":\"v-ae3272cc#自定义分页返回结果\",\"685\":\"v-ae3272cc#替换接口\",\"686\":\"v-ae3272cc#默认实现\",\"687\":\"v-ae3272cc#无依赖使用自己的pageresult\",\"688\":\"v-ae3272cc#框架提供的分页器\",\"689\":\"v-ae3272cc#添加自己的分页返回结果接口\",\"690\":\"v-ae3272cc#自定义pager\",\"691\":\"v-ae3272cc#测试代码\",\"692\":\"v-1a6ae726\",\"693\":\"v-1a6ae726#对象关系\",\"694\":\"v-1a6ae726#联级查询\",\"695\":\"v-321e42e3\",\"696\":\"v-321e42e3#联级查询\",\"697\":\"v-0a7aaaea\",\"698\":\"v-0a7aaaea#一对一说明\",\"699\":\"v-0a7aaaea#多对一说明\",\"700\":\"v-0a7aaaea#一对多说明\",\"701\":\"v-0a7aaaea#多对多说明\",\"702\":\"v-0a7aaaea#多次include\",\"703\":\"v-0a7aaaea#多关联查询\",\"704\":\"v-0a7aaaea#navigate\",\"705\":\"v-0a7aaaea#普通链接查询\",\"706\":\"v-0a7aaaea#onetoone\",\"707\":\"v-0a7aaaea#onetomany\",\"708\":\"v-0a7aaaea#manytoone\",\"709\":\"v-0a7aaaea#多对多\",\"710\":\"v-0a7aaaea#多次include-1\",\"711\":\"v-0a7aaaea#多关联查询-1\",\"712\":\"v-0a7aaaea#省市区\",\"713\":\"v-0a7aaaea#关联查询vo返回自定义列\",\"714\":\"v-38806110\",\"715\":\"v-2e216cf6\",\"716\":\"v-2e216cf6#java对象\",\"717\":\"v-2e216cf6#输出指定列\",\"718\":\"v-2e216cf6#相同属性不同列名不映射\",\"719\":\"v-2e216cf6#全字段查询\",\"720\":\"v-2e216cf6#追加映射字段\",\"721\":\"v-2e216cf6#忽略查询字段\",\"722\":\"v-52d0a8d2\",\"723\":\"v-52d0a8d2#数据库对象模型\",\"724\":\"v-52d0a8d2#自动模式\",\"725\":\"v-52d0a8d2#手动模式\",\"726\":\"v-52d0a8d2#sum连表统计\",\"727\":\"v-4ed68f2a\",\"728\":\"v-4ed68f2a#select后置风格\",\"729\":\"v-4ed68f2a#api\",\"730\":\"v-4ed68f2a#selector说明\",\"731\":\"v-4ed68f2a#按需返回vo对象\",\"732\":\"v-4ed68f2a#按需快速join返回列\",\"733\":\"v-4ed68f2a#匿名表\",\"734\":\"v-4ed68f2a#匿名表案例2\",\"735\":\"v-4ed68f2a#tomap\",\"736\":\"v-3b106569\",\"737\":\"v-3b106569#案例一\",\"738\":\"v-3b106569#案例二\",\"739\":\"v-3b106569#案例三\",\"740\":\"v-4488498b\",\"741\":\"v-4488498b#api\",\"742\":\"v-4488498b#案例\",\"743\":\"v-4488498b#api-1\",\"744\":\"v-4488498b#案例-1\",\"745\":\"v-4488498b#mysql不生效\",\"746\":\"v-4488498b#pgsql不生效\",\"747\":\"v-4488498b#相关搜索\",\"748\":\"v-7fa82c48\",\"749\":\"v-7fa82c48#查询sqlquery\",\"750\":\"v-7fa82c48#无参数强类型返回\",\"751\":\"v-7fa82c48#有参数强类型返回\",\"752\":\"v-7fa82c48#查询sqlquerymap\",\"753\":\"v-7fa82c48#无参数map返回\",\"754\":\"v-7fa82c48#有参数map返回\",\"755\":\"v-7fa82c48#map\",\"756\":\"v-54389ffd\",\"757\":\"v-54389ffd#单表union\",\"758\":\"v-54389ffd#复杂union\",\"759\":\"v-54389ffd#自定义结果集\",\"760\":\"v-54389ffd#不同表union\",\"761\":\"v-7e0b0fd2\",\"762\":\"v-7e0b0fd2#自动子查询\",\"763\":\"v-7e0b0fd2#数据库对象模型\",\"764\":\"v-7e0b0fd2#查询企业存在用户成年的\",\"765\":\"v-7e0b0fd2#查询企业存条件是企业所有用户平均年龄大于18\",\"766\":\"v-7e0b0fd2#exists\",\"767\":\"v-7e0b0fd2#not-exists\",\"768\":\"v-7e0b0fd2#in\",\"769\":\"v-7e0b0fd2#not-in\",\"770\":\"v-99f96e36\",\"771\":\"v-99f96e36#api\",\"772\":\"v-99f96e36#动态条件\",\"773\":\"v-99f96e36#null-pointer\",\"774\":\"v-99f96e36#动态条件2\",\"775\":\"v-3acd5000\",\"776\":\"v-3acd5000#目录\",\"777\":\"v-3acd5000#案例源码\",\"778\":\"v-38156841\",\"779\":\"v-38156841#创建数据库\",\"780\":\"v-38156841#配置文件\",\"781\":\"v-38156841#添加额外数据源\",\"782\":\"v-38156841#新增\",\"783\":\"v-38156841#修改\",\"784\":\"v-7c23572b\",\"785\":\"v-7c23572b#创建数据库\",\"786\":\"v-7c23572b#配置文件\",\"787\":\"v-7c23572b#添加额外数据源\",\"788\":\"v-7c23572b#新增\",\"789\":\"v-7c23572b#修改\",\"790\":\"v-02da83f4\",\"791\":\"v-02da83f4#创建表\",\"792\":\"v-02da83f4#配置文件\",\"793\":\"v-02da83f4#新增\",\"794\":\"v-02da83f4#修改\",\"795\":\"v-02da83f4#删除\",\"796\":\"v-23926ee3\",\"797\":\"v-23926ee3#配置对象\",\"798\":\"v-23926ee3#配置路由\",\"799\":\"v-272edeb6\",\"800\":\"v-239678f0\",\"801\":\"v-239678f0#新建项目\",\"802\":\"v-239678f0#创建自定义注解\",\"803\":\"v-239678f0#创建自定义接口\",\"804\":\"v-239678f0#新建模板\",\"805\":\"v-239678f0#新建apt处理器\",\"806\":\"v-239678f0#编写业务调试\",\"807\":\"v-239678f0#新建用户和仓储\",\"808\":\"v-58bef234\",\"809\":\"v-2c98b822\",\"810\":\"v-2c98b822#额外搜索\",\"811\":\"v-4c495dc4\",\"812\":\"v-4c495dc4#异常\",\"813\":\"v-4c495dc4#进阶\",\"814\":\"v-4c495dc4#高阶\",\"815\":\"v-4c495dc4#springboot替换\",\"816\":\"v-4c495dc4#非springboot\",\"817\":\"v-2b64e284\",\"818\":\"v-2b64e284#目录\",\"819\":\"v-c1942916\",\"820\":\"v-65c00218\",\"821\":\"v-36295574\",\"822\":\"v-36295574#markdown-介绍\",\"823\":\"v-36295574#markdown-配置\",\"824\":\"v-36295574#markdown-扩展\",\"825\":\"v-36295574#vuepress-扩展\",\"826\":\"v-36295574#主题扩展\",\"827\":\"v-36295574#自定义容器\",\"828\":\"v-36295574#代码块\",\"829\":\"v-36295574#上下角标\",\"830\":\"v-36295574#自定义对齐\",\"831\":\"v-36295574#attrs\",\"832\":\"v-36295574#脚注\",\"833\":\"v-36295574#标记\",\"834\":\"v-36295574#任务列表\",\"835\":\"v-36295574#图片增强\",\"836\":\"v-36295574#图表\",\"837\":\"v-36295574#echarts\",\"838\":\"v-36295574#流程图\",\"839\":\"v-36295574#mermaid\",\"840\":\"v-36295574#tex-语法\",\"841\":\"v-36295574#导入文件\",\"842\":\"v-36295574#代码演示\",\"843\":\"v-36295574#样式化\",\"844\":\"v-36295574#交互演示\",\"845\":\"v-36295574#vue-交互演示\",\"846\":\"v-36295574#幻灯片\",\"847\":\"v-62ced1a6\",\"848\":\"v-62ced1a6#页面信息\",\"849\":\"v-62ced1a6#页面内容\",\"850\":\"v-62ced1a6#页面结构\",\"851\":\"v-47357bdb\",\"852\":\"v-47357bdb#功能亮点\",\"853\":\"v-47357bdb#bar\",\"854\":\"v-47357bdb#foo\",\"855\":\"v-763c1cd7\",\"856\":\"v-763c1cd7#介绍\",\"857\":\"v-763c1cd7#详情\",\"858\":\"v-1e317375\",\"859\":\"v-763e2284\",\"860\":\"v-763e2284#介绍\",\"861\":\"v-763e2284#详情\",\"862\":\"v-00fb7173\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[4,4],\"2\":[4],\"3\":[5],\"4\":[2,2],\"5\":[2,2],\"6\":[1,4],\"7\":[1,3],\"8\":[1,8],\"9\":[1,27],\"10\":[1,5],\"11\":[3,1],\"12\":[2,70],\"13\":[1,9],\"14\":[1,15],\"15\":[2,48],\"16\":[1,30],\"17\":[1,60],\"18\":[2,34],\"19\":[1],\"20\":[1,1],\"21\":[1,30],\"22\":[1,24],\"23\":[1,80],\"24\":[1,27],\"25\":[1,49],\"26\":[1],\"27\":[1,11],\"28\":[1,13],\"29\":[2,2],\"30\":[1,51],\"31\":[1,47],\"32\":[1],\"33\":[1,24],\"34\":[1,127],\"35\":[1,46],\"36\":[1,35],\"37\":[1,49],\"38\":[1,77],\"39\":[1,96],\"40\":[1,73],\"41\":[1,70],\"42\":[1,67],\"43\":[1,8],\"44\":[1,43],\"45\":[1],\"46\":[1,3],\"47\":[1,4],\"48\":[1,1],\"49\":[1,7],\"50\":[2],\"51\":[1,8],\"52\":[4,40],\"53\":[2,10],\"54\":[2,32],\"55\":[2,19],\"56\":[2,26],\"57\":[2,18],\"58\":[2,16],\"59\":[2,18],\"60\":[2,24],\"61\":[1,2],\"62\":[2,2],\"63\":[3,4],\"64\":[1,7],\"65\":[1,6],\"66\":[1,7],\"67\":[1,7],\"68\":[1,6],\"69\":[2,8],\"70\":[1,2],\"71\":[1,2],\"72\":[1,2],\"73\":[1,2],\"74\":[1,11],\"75\":[2,10],\"76\":[2,2],\"77\":[1,9],\"78\":[1,2],\"79\":[2,2],\"80\":[1,7],\"81\":[2,10],\"82\":[2,27],\"83\":[2,49],\"84\":[2,34],\"85\":[1],\"86\":[2,2],\"87\":[2,2],\"88\":[1,4],\"89\":[2,3],\"90\":[2],\"91\":[2],\"92\":[1],\"93\":[1,4],\"94\":[1,17],\"95\":[1,23],\"96\":[1,3],\"97\":[1,6],\"98\":[1,3],\"99\":[2,10],\"100\":[1,117],\"101\":[1,6],\"102\":[1,24],\"103\":[1,11],\"104\":[1,15],\"105\":[1,18],\"106\":[2,10],\"107\":[1,114],\"108\":[2,11],\"109\":[1,2],\"110\":[1,49],\"111\":[1,96],\"112\":[1,55],\"113\":[1],\"114\":[1,7],\"115\":[2,67],\"116\":[1,43],\"117\":[2,145],\"118\":[1,6],\"119\":[1],\"120\":[1,39],\"121\":[1,44],\"122\":[1,79],\"123\":[1,98],\"124\":[1,32],\"125\":[1,17],\"126\":[1,11],\"127\":[2,40],\"128\":[1,11],\"129\":[2,31],\"130\":[2,20],\"131\":[2,23],\"132\":[2,33],\"133\":[2,28],\"134\":[2,19],\"135\":[2,24],\"136\":[2,29],\"137\":[2,40],\"138\":[2,25],\"139\":[1,9],\"140\":[1,145],\"141\":[2,1],\"142\":[1,7],\"143\":[1],\"144\":[1,74],\"145\":[1,40],\"146\":[1,50],\"147\":[1,49],\"148\":[1,28],\"149\":[1,57],\"150\":[1],\"151\":[1,4],\"152\":[1,121],\"153\":[1,13],\"154\":[1,2],\"155\":[1,5],\"156\":[1,4],\"157\":[1,253],\"158\":[1,77],\"159\":[1],\"160\":[1,20],\"161\":[1,11],\"162\":[3,6],\"163\":[1,47],\"164\":[1],\"165\":[1,5],\"166\":[1,34],\"167\":[1,177],\"168\":[1,53],\"169\":[1,35],\"170\":[1,49],\"171\":[1,78],\"172\":[1,99],\"173\":[1,66],\"174\":[1,95],\"175\":[1,65],\"176\":[1,39],\"177\":[2,4],\"178\":[1],\"179\":[1,22],\"180\":[1,21],\"181\":[1,17],\"182\":[1,38],\"183\":[1,31],\"184\":[1,43],\"185\":[1,168],\"186\":[1,59],\"187\":[1],\"188\":[1,4],\"189\":[1,15],\"190\":[1,8],\"191\":[1,49],\"192\":[1,28],\"193\":[3,19],\"194\":[1,2],\"195\":[1,21],\"196\":[1,65],\"197\":[1,7],\"198\":[1,14],\"199\":[1,12],\"200\":[1,45],\"201\":[1,50],\"202\":[1,1],\"203\":[1,9],\"204\":[1,25],\"205\":[1,62],\"206\":[1,50],\"207\":[1,1],\"208\":[1,6],\"209\":[1,12],\"210\":[1,8],\"211\":[1,12],\"212\":[1,14],\"213\":[1],\"214\":[1,68],\"215\":[1,4],\"216\":[1,28],\"217\":[1,8],\"218\":[1,1],\"219\":[1,52],\"220\":[1,110],\"221\":[3,21],\"222\":[3],\"223\":[1,77],\"224\":[3,29],\"225\":[1],\"226\":[1,15],\"227\":[1,88],\"228\":[1,8],\"229\":[1,21],\"230\":[1,58],\"231\":[1,91],\"232\":[1,57],\"233\":[1,56],\"234\":[1,53],\"235\":[1,77],\"236\":[1,77],\"237\":[1,91],\"238\":[1,33],\"239\":[1,1],\"240\":[1,2],\"241\":[1,6],\"242\":[2,7],\"243\":[2,13],\"244\":[1],\"245\":[1,14],\"246\":[1,10],\"247\":[1,13],\"248\":[1],\"249\":[1,60],\"250\":[1,66],\"251\":[1,62],\"252\":[1,86],\"253\":[1,6],\"254\":[1,60],\"255\":[1,2],\"256\":[1,33],\"257\":[2,45],\"258\":[1],\"259\":[1],\"260\":[1,152],\"261\":[1,3],\"262\":[1,112],\"263\":[1],\"264\":[1,12],\"265\":[1,118],\"266\":[1,9],\"267\":[1,3],\"268\":[1,11],\"269\":[1,29],\"270\":[1,28],\"271\":[1,83],\"272\":[1,39],\"273\":[1,88],\"274\":[1,97],\"275\":[1,27],\"276\":[1],\"277\":[1,4],\"278\":[1,49],\"279\":[1,28],\"280\":[1,53],\"281\":[1,60],\"282\":[1,4],\"283\":[1],\"284\":[1,93],\"285\":[1,81],\"286\":[1,3],\"287\":[3,4],\"288\":[1,22],\"289\":[1,54],\"290\":[1,46],\"291\":[1],\"292\":[1,29],\"293\":[1,52],\"294\":[1,21],\"295\":[1,29],\"296\":[1,52],\"297\":[1],\"298\":[1,13],\"299\":[1,6],\"300\":[1,14],\"301\":[1,9],\"302\":[1,19],\"303\":[1,2],\"304\":[1,12],\"305\":[1,2],\"306\":[1,168],\"307\":[1,71],\"308\":[1,199],\"309\":[1,143],\"310\":[1,110],\"311\":[1,83],\"312\":[1,1],\"313\":[1,150],\"314\":[1,67],\"315\":[1,87],\"316\":[1,58],\"317\":[1,3],\"318\":[1,4],\"319\":[1,2],\"320\":[1],\"321\":[1],\"322\":[1,21],\"323\":[1,76],\"324\":[1,46],\"325\":[1,54],\"326\":[1,8],\"327\":[1,75],\"328\":[1,77],\"329\":[2],\"330\":[1,5],\"331\":[1,2],\"332\":[1,4],\"333\":[1,18],\"334\":[2,27],\"335\":[1,46],\"336\":[1],\"337\":[1,11],\"338\":[1,18],\"339\":[1,22],\"340\":[1,30],\"341\":[1,28],\"342\":[1,33],\"343\":[1],\"344\":[1,5],\"345\":[1],\"346\":[1],\"347\":[1],\"348\":[1,34],\"349\":[1],\"350\":[1,47],\"351\":[1,41],\"352\":[1,45],\"353\":[1,39],\"354\":[1,45],\"355\":[2,28],\"356\":[2,36],\"357\":[2,2],\"358\":[1,66],\"359\":[2,32],\"360\":[2,72],\"361\":[2,33],\"362\":[2,72],\"363\":[2,41],\"364\":[2,3],\"365\":[1,79],\"366\":[1,95],\"367\":[2,3],\"368\":[1,32],\"369\":[1,50],\"370\":[1,39],\"371\":[1,7],\"372\":[1,22],\"373\":[1,5],\"374\":[1,48],\"375\":[1,52],\"376\":[1,53],\"377\":[1,55],\"378\":[1,2],\"379\":[1,8],\"380\":[1,6],\"381\":[1],\"382\":[1],\"383\":[1,18],\"384\":[1,35],\"385\":[1,94],\"386\":[3,83],\"387\":[3,100],\"388\":[1,76],\"389\":[1,86],\"390\":[1,12],\"391\":[1,6],\"392\":[1],\"393\":[2],\"394\":[1],\"395\":[1,52],\"396\":[1,33],\"397\":[1,147],\"398\":[1,1],\"399\":[1,40],\"400\":[1,24],\"401\":[1,3],\"402\":[1,8],\"403\":[1,8],\"404\":[1,1],\"405\":[1],\"406\":[1],\"407\":[1,92],\"408\":[1],\"409\":[1,4],\"410\":[1,27],\"411\":[1,42],\"412\":[1,47],\"413\":[2],\"414\":[2,2],\"415\":[2],\"416\":[2],\"417\":[2,129],\"418\":[2,37],\"419\":[2,48],\"420\":[1,36],\"421\":[2],\"422\":[2,21],\"423\":[1,16],\"424\":[1],\"425\":[1,32],\"426\":[1,53],\"427\":[1,1],\"428\":[1,1],\"429\":[1,48],\"430\":[1,57],\"431\":[1,6],\"432\":[1,5],\"433\":[1,10],\"434\":[1,10],\"435\":[1,9],\"436\":[1,5],\"437\":[1,4],\"438\":[1,2],\"439\":[1,5],\"440\":[1,1],\"441\":[1,1],\"442\":[1,1],\"443\":[1,1],\"444\":[1,2],\"445\":[1,2],\"446\":[1,4],\"447\":[1,1],\"448\":[1,2],\"449\":[1],\"450\":[1,43],\"451\":[1],\"452\":[1,2],\"453\":[1,38],\"454\":[1,3],\"455\":[1,70],\"456\":[1,5],\"457\":[1,7],\"458\":[1,7],\"459\":[1,2],\"460\":[2,68],\"461\":[1],\"462\":[1,7],\"463\":[2,22],\"464\":[1,7],\"465\":[2,58],\"466\":[2,61],\"467\":[3,2],\"468\":[1,135],\"469\":[1,115],\"470\":[2,26],\"471\":[2,28],\"472\":[1],\"473\":[1,5],\"474\":[1,28],\"475\":[1,7],\"476\":[1],\"477\":[2],\"478\":[1,41],\"479\":[1,17],\"480\":[1,17],\"481\":[1,61],\"482\":[2,68],\"483\":[2,131],\"484\":[1],\"485\":[1,62],\"486\":[1,58],\"487\":[1,34],\"488\":[1],\"489\":[1,7],\"490\":[2,65],\"491\":[1,109],\"492\":[2,54],\"493\":[1,215],\"494\":[1,6],\"495\":[1],\"496\":[1,39],\"497\":[1,44],\"498\":[1,79],\"499\":[1,98],\"500\":[1,32],\"501\":[1,17],\"502\":[1],\"503\":[2,20],\"504\":[1,59],\"505\":[1,85],\"506\":[1,52],\"507\":[1,39],\"508\":[1,53],\"509\":[1,41],\"510\":[1,20],\"511\":[1,5],\"512\":[1],\"513\":[1,32],\"514\":[1,28],\"515\":[1,22],\"516\":[1,2],\"517\":[1,141],\"518\":[1,7],\"519\":[1,156],\"520\":[1,3],\"521\":[1,76],\"522\":[1,110],\"523\":[1,89],\"524\":[1,17],\"525\":[1,46],\"526\":[1,43],\"527\":[1,3],\"528\":[1,18],\"529\":[1,12],\"530\":[1,61],\"531\":[1,16],\"532\":[1,30],\"533\":[1,15],\"534\":[1,2],\"535\":[1,33],\"536\":[1],\"537\":[2],\"538\":[1,3],\"539\":[1,1],\"540\":[1,13],\"541\":[1],\"542\":[1],\"543\":[1],\"544\":[1,8],\"545\":[1,103],\"546\":[1,1],\"547\":[1,32],\"548\":[1,38],\"549\":[1,18],\"550\":[2],\"551\":[1,5],\"552\":[1,2],\"553\":[1,4],\"554\":[1,46],\"555\":[1],\"556\":[1,90],\"557\":[1,56],\"558\":[1,9],\"559\":[1,13],\"560\":[1,2],\"561\":[1,12],\"562\":[1,110],\"563\":[1],\"564\":[1,83],\"565\":[1,91],\"566\":[1,33],\"567\":[1,9],\"568\":[1,17],\"569\":[1,2],\"570\":[1,12],\"571\":[1,2],\"572\":[1,168],\"573\":[1,71],\"574\":[1,199],\"575\":[1,9],\"576\":[1,13],\"577\":[1,2],\"578\":[1,13],\"579\":[1,143],\"580\":[1,6],\"581\":[1,60],\"582\":[1,2],\"583\":[1,8],\"584\":[1,21],\"585\":[1,65],\"586\":[1,95],\"587\":[1,57],\"588\":[1,56],\"589\":[1,53],\"590\":[1,77],\"591\":[1,2],\"592\":[1,135],\"593\":[1,33],\"594\":[1,41],\"595\":[1,47],\"596\":[1,18],\"597\":[1],\"598\":[1],\"599\":[1],\"600\":[1,32],\"601\":[1,123],\"602\":[1,2],\"603\":[1,3],\"604\":[1,8],\"605\":[1,5],\"606\":[1,58],\"607\":[1,55],\"608\":[1,59],\"609\":[1,4],\"610\":[1],\"611\":[1],\"612\":[1,6],\"613\":[1,22],\"614\":[1,33],\"615\":[1,69],\"616\":[1,79],\"617\":[1,3],\"618\":[1,15],\"619\":[1,23],\"620\":[1,58],\"621\":[1,73],\"622\":[1,87],\"623\":[1,89],\"624\":[1,4],\"625\":[1,19],\"626\":[1,74],\"627\":[1,4],\"628\":[1,11],\"629\":[1,32],\"630\":[1],\"631\":[1,203],\"632\":[1,85],\"633\":[1,74],\"634\":[1,131],\"635\":[1,17],\"636\":[1,4],\"637\":[1,2],\"638\":[1,4],\"639\":[1,1],\"640\":[2,11],\"641\":[1,73],\"642\":[1,132],\"643\":[1,3],\"644\":[1,11],\"645\":[1,42],\"646\":[1,61],\"647\":[1,66],\"648\":[2,76],\"649\":[1,51],\"650\":[1,69],\"651\":[1,69],\"652\":[1,51],\"653\":[1,3],\"654\":[1,1],\"655\":[1,17],\"656\":[1,23],\"657\":[1,1],\"658\":[1,16],\"659\":[1,22],\"660\":[1],\"661\":[1,30],\"662\":[1,38],\"663\":[1,27],\"664\":[1],\"665\":[1],\"666\":[1,139],\"667\":[1,92],\"668\":[1,31],\"669\":[1,101],\"670\":[1,32],\"671\":[1,1],\"672\":[1,69],\"673\":[1,113],\"674\":[1,2],\"675\":[1],\"676\":[1],\"677\":[1,1],\"678\":[1],\"679\":[1,56],\"680\":[1,3],\"681\":[1,35],\"682\":[1,67],\"683\":[1,57],\"684\":[1,5],\"685\":[1,16],\"686\":[1,38],\"687\":[1,7],\"688\":[1,3],\"689\":[1,26],\"690\":[1,30],\"691\":[1,22],\"692\":[2,2],\"693\":[1],\"694\":[1,90],\"695\":[2,10],\"696\":[1,90],\"697\":[2,59],\"698\":[1],\"699\":[1],\"700\":[1],\"701\":[1],\"702\":[1],\"703\":[1,42],\"704\":[1,25],\"705\":[1,62],\"706\":[1,61],\"707\":[1,61],\"708\":[1,54],\"709\":[1,61],\"710\":[1,46],\"711\":[1],\"712\":[1,120],\"713\":[1,138],\"714\":[1,76],\"715\":[1,4],\"716\":[1],\"717\":[1],\"718\":[1,6],\"719\":[1,1],\"720\":[1],\"721\":[1,4],\"722\":[1,16],\"723\":[1],\"724\":[1,57],\"725\":[1],\"726\":[1,3],\"727\":[1,2],\"728\":[1,8],\"729\":[1,47],\"730\":[1],\"731\":[1,36],\"732\":[1,39],\"733\":[1,35],\"734\":[1,78],\"735\":[1,52],\"736\":[1,1],\"737\":[1,85],\"738\":[1,62],\"739\":[1,56],\"740\":[1,32],\"741\":[1,10],\"742\":[1,108],\"743\":[1,14],\"744\":[1,50],\"745\":[1,8],\"746\":[1,8],\"747\":[1,1],\"748\":[1,7],\"749\":[1,1],\"750\":[1,17],\"751\":[1,23],\"752\":[1,1],\"753\":[1,16],\"754\":[1,22],\"755\":[1,6],\"756\":[4,60],\"757\":[1,44],\"758\":[1,79],\"759\":[1,88],\"760\":[1,71],\"761\":[2,6],\"762\":[1],\"763\":[1],\"764\":[1,41],\"765\":[1,39],\"766\":[1],\"767\":[2],\"768\":[1],\"769\":[2],\"770\":[1,6],\"771\":[1,71],\"772\":[1,56],\"773\":[2,26],\"774\":[1,54],\"775\":[1,11],\"776\":[1,5],\"777\":[1,3],\"778\":[1,13],\"779\":[1,5],\"780\":[1,54],\"781\":[1,102],\"782\":[1,111],\"783\":[1,97],\"784\":[1,13],\"785\":[1,6],\"786\":[1,54],\"787\":[1,102],\"788\":[1,109],\"789\":[1,94],\"790\":[1,13],\"791\":[1,7],\"792\":[1,53],\"793\":[1,109],\"794\":[1,89],\"795\":[1,59],\"796\":[1,45],\"797\":[1,111],\"798\":[1,62],\"799\":[1,14],\"800\":[1],\"801\":[1,89],\"802\":[1,10],\"803\":[1,43],\"804\":[1,50],\"805\":[1,65],\"806\":[1,12],\"807\":[1,31],\"808\":[1,1],\"809\":[1,192],\"810\":[1,1],\"811\":[1,2],\"812\":[1,36],\"813\":[1,21],\"814\":[1,47],\"815\":[1,25],\"816\":[1,24],\"817\":[1],\"818\":[1,5],\"819\":[1,18],\"820\":[1,7],\"821\":[2,11],\"822\":[2,8],\"823\":[2,13],\"824\":[2,11],\"825\":[2,10],\"826\":[1,10],\"827\":[1,19],\"828\":[1,1],\"829\":[1,3],\"830\":[1,3],\"831\":[1,5],\"832\":[1,3],\"833\":[1,3],\"834\":[1,5],\"835\":[1,2],\"836\":[1,1],\"837\":[1,1],\"838\":[1,1],\"839\":[1,1],\"840\":[2,10],\"841\":[1,6],\"842\":[1,1],\"843\":[1,5],\"844\":[1,1],\"845\":[2,1],\"846\":[1,3],\"847\":[1,3],\"848\":[1,20],\"849\":[1,17],\"850\":[1,16],\"851\":[1],\"852\":[1],\"853\":[1,2],\"854\":[1,2],\"855\":[2],\"856\":[1,4],\"857\":[1,2],\"858\":[1,2],\"859\":[2],\"860\":[1,4],\"861\":[1,2],\"862\":[1,2]},\"averageFieldLength\":[1.164542294322132,36.13054946760289],\"storedFields\":{\"0\":{\"h\":\"项目主页\"},\"1\":{\"h\":\"🔔 QQ 群: 170029046\",\"t\":[\" 为往圣继绝学，一个人或许能走的更快，但一群人会走的更远。 \"]},\"2\":{\"h\":\"🔔 交流 QQ 群\"},\"3\":{\"h\":\"EasyQuery 官方 QQ 群: 170029046\"},\"4\":{\"h\":\"github 仓库\",\"t\":[\"easy-query\"]},\"5\":{\"h\":\"gitee 仓库\",\"t\":[\"easy-query\"]},\"6\":{\"h\":\"许可证\",\"t\":[\"Apache-2.0 License\"]},\"7\":{\"h\":\"文档主题\",\"t\":[\"vuepress-theme-hope\"]},\"8\":{\"h\":\"数据库支持\",\"t\":[\"easy-query目前已经抽象了表达式,所以原则上支持所有数据库,只需要自定义实现对应数据库的增删改查接口即可,也就是sql-db-support 所以如果不支持对应的sql那么你可以自行扩展或者提交相应的issue\"]},\"9\":{\"h\":\"支持的数据库\",\"t\":[\"数据库名称\",\"包名\",\"springboot配置\",\"solon配置\",\"MySQL\",\"sql-mysql\",\"mysql\",\"mysql\",\"PostgresSQL\",\"sql-pgsql\",\"pgsql\",\"pgsql\",\"SqlServer\",\"sql-mssql\",\"mssql\",\"mssql\",\"SqlServer RowNumber\",\"sql-mssql\",\"mssql_row_number\",\"mssql_row_number\",\"H2\",\"sql-h2\",\"h2\",\"h2\",\"达梦dameng\",\"sql-dameng\",\"dameng\",\"dameng\",\"人大金仓KingbaseES\",\"sql-kingbase-es\",\"kingbase_es\",\"kingbase_es\",\"Oracle\",\"sql-oracle\",\"oracle\",\"oracle\",\"SQLite\",\"sql-sqlite\",\"sqlite\",\"sqlite\",\"ClickHouse\",\"sql-clickhouse\",\"clickhouse\",\"clickhouse\"]},\"10\":{\"h\":\"🔥对象关系查询\",\"t\":[\"何谓ORM对象关系映射,何谓对象关系查询,就是针对各个表之间的关系进行关联,从而达到对象间的互相引用和互相调用,便于快速的写出需要的便捷的代码\"]},\"11\":{\"h\":\"常见问题(重要)❗️❗️❗️\",\"t\":[\"这里主要汇总了一些常见的问题\"]},\"12\":{\"h\":\"SpringBoot 启动报错\",\"t\":[\"java.lang.IllegalStateException: Unable to load cache item at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:79) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:419) ~[spring-core-5.3.29.jar:5.3.29] \",\"主要原因是\",\"缺少aop依赖\",\"aop组件版本不对\",\"解决办法添加对应的依赖\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> \",\"如果不想使用aop可以禁用默认加载aop追踪 在application.yml同级目录下添加easy-query-track:enable:false\",\"easy-query: enable: true database: mysql name-conversion: underlined start-time-job: true easy-query-track: # 默认是true enable: false \"]},\"13\":{\"h\":\"没有生成Proxy\",\"t\":[\"如果没有生成Proxy请先确定是否引入sql-api-proxy包,如果使用@EntityProxy请确定是否引入sql-processor各个生成的模块都需要,如果是@EntityFileProxy请确认是否引用插件。 插件可以有效的提升用户体验\"]},\"14\":{\"h\":\"如果插件报错\",\"t\":[\"如果idea报错Slow operations are prohibited on EDT. See SlowOperations.assertSlowOperationsAreAllowed javadoc\",\"那么就双击shift输入Registry...然后在弹出的地方搜索slow 将ide.slow.operations.assertion的value勾去掉\"]},\"15\":{\"h\":\"阿里镜像找不到依赖？\",\"t\":[\"Could not find artifact xxxxx:pom:xxxx in alimaven (http://maven.aliyun.com/nexus/content/groups/public/) \",\"这个是因为目前阿里云镜像正在维护，可以替换为腾讯云或者华为云的镜像源，更改 Maven 安装目录下的 settings.xml 文件， 添加如下配置：\",\"腾讯云：\",\"<mirror> <id>tencent-cloud</id> <mirrorOf>*</mirrorOf> <name>tencent-cloud</name> <url>https://mirrors.cloud.tencent.com/nexus/repository/maven-public/</url> </mirror> \",\"华为云：\",\"<mirror> <id>huawei-cloud</id> <mirrorOf>*</mirrorOf> <name>huawei-cloud</name> <url>https://mirrors.huaweicloud.com/repository/maven/</url> </mirror> \"]},\"16\":{\"h\":\"删除错误\",\"t\":[\"'DELETE' statement without 'WHERE' clears all data in the table\",\"这个错误是因为eq默认不允许删除不显式指定where,您可以进行如下操作\",\"//随便添加一个条件即可 easyEntityQuery.deletable(User.class).disableLogicDelete()allowDeleteStatement(true).where(u->u.id().isNotNull()).executeRows(); easyEntityQuery.deletable(User.class).disableLogicDelete()allowDeleteStatement(true).where(u->u.expression().sql(\\\"1=1\\\")).executeRows(); \"]},\"17\":{\"h\":\"proxy不存在\",\"t\":[\"报错!!!\",\"如果遇到build后报错java:程序包xxxxxxxx.proxy不存在\",\"查看是否引入sql-processor包\",\"设置idea的注解处理器 Build,Execution,Deployment,Compiler,Annotation Processors 选择Enable annotation processing 并且选择Obtain processors from project classpath\",\"如果您之前已经存在annotationProcessorPaths那么你可以在里面添加eq的apt处理，如果未使用过那么还是建议需要apt的模块单独引入sql-processor 以下配置那么在各个独立module处不需要在引入sql-processor\",\"<plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <annotationProcessorPaths> <!-- 注意顺序 --> <path> <!-- lombok... --> </path> <path> <!-- mapstruct... --> </path> <path> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </path> </annotationProcessorPaths> </configuration> </plugin> \"]},\"18\":{\"h\":\"快速了解 🔥\",\"t\":[\"EasyQuery官方QQ群: 170029046\",\"easy-query特性!!!\",\"一款兼具dsl的操控性和object relation query的便捷性，同时具备两者的orm\",\"说明!!!\",\"1.8.0+版本easy-query推出了实验性api,entity-query在之后的一周时间里面,作者对框架的api进行了大刀阔斧,现在做到了非常强大，如果你们是c#使用过efcore，freesql，sqlsugar那么使用这个框架对你们来说肯定是最完美的,1.9.0之后的版本和之前的easyEntityQuery有着很大的不一样,实在抱歉这次changebreak因为这次更新实在是让人太着迷了\",\"group by 感知,一款没有group 感知的orm称不上一个好orm\",\"匿名类型平替,因为java没有匿名类型所以在多次select后需要创建VO对象来作为临时存储是非常复杂的事情,所以提供了draft草稿类型来平替匿名类型\",\"强类型纠错,提供了强类型纠错防止number类型赋值给string或者datetime等类型\"]},\"19\":{\"h\":\"预览\"},\"20\":{\"h\":\"快速实现表单查询\",\"t\":[\"业务场景\"]},\"21\":{\"h\":\"数据库对象\",\"t\":[\"@Table(\\\"t_sys_user\\\") @EntityProxy @Data public class SysUser implements ProxyEntityAvailable<SysUser , SysUserProxy> { @Column(primaryKey = true) private String id; private String name; private String account; private String departName; private String phone; private LocalDateTime createTime; } \",\"其中ProxyEntityAvailable<SysUser , SysUserProxy>接口和SysUserProxy全部由插件自动生成,如果你不想用插件那么可以将注解@EntityFileProxy换成@EntityProxy\"]},\"22\":{\"h\":\"查询对象\",\"t\":[\" @Data public class SysUserQueryRequest { @EasyWhereCondition private String name; @EasyWhereCondition private String account; @EasyWhereCondition private String departName; @EasyWhereCondition private String phone; @EasyWhereCondition(type = EasyWhereCondition.Condition.RANGE_LEFT_CLOSED,propName = \\\"createTime\\\" ) private LocalDateTime createTimeBegin; @EasyWhereCondition(type = EasyWhereCondition.Condition.RANGE_RIGHT_CLOSED,propName = \\\"createTime\\\" ) private LocalDateTime createTimeEnd; } \"]},\"23\":{\"h\":\"表单查询1\",\"t\":[\"//由前端上传json SysUserQueryRequest sysUserQueryRequest = new SysUserQueryRequest(); sysUserQueryRequest.setName(\\\"小明\\\"); sysUserQueryRequest.setCreateTimeBegin(LocalDateTime.now().plusDays(-10)); sysUserQueryRequest.setCreateTimeEnd(LocalDateTime.now()); sysUserQueryRequest.setPhone(\\\"180\\\"); //快速实现分页查询 条件过滤默认非null不加入条件如果是字符串还需满足非空 List<SysUser> pageResult = easyEntityQuery.queryable(SysUser.class) .filterConfigure(NotNullOrEmptyValueFilter.DEFAULT)//非null并且字符串非空即加入条件 .where(o -> { o.name().like(sysUserQueryRequest.getName()); o.account().like(sysUserQueryRequest.getAccount()); o.phone().like(sysUserQueryRequest.getPhone()); o.departName().like(sysUserQueryRequest.getDepartName()); o.createTime().rangeClosed(sysUserQueryRequest.getCreateTimeBegin(), sysUserQueryRequest.getCreateTimeEnd()); }) .toList(); \",\"==> Preparing: SELECT COUNT(*) FROM `t_sys_user` WHERE `name` LIKE ? AND `phone` LIKE ? AND `create_time` >= ? AND `create_time` <= ? ==> Parameters: %小明%(String),%180%(String),2023-11-11T21:50:19.835(LocalDateTime),2023-11-21T21:50:19.836(LocalDateTime) ==> Preparing: SELECT `id`,`name`,`account`,`depart_name`,`phone`,`create_time` FROM `t_sys_user` WHERE `name` LIKE ? AND `phone` LIKE ? AND `create_time` >= ? AND `create_time` <= ? LIMIT 10 ==> Parameters: %小明%(String),%180%(String),2023-11-11T21:51:34.740(LocalDateTime),2023-11-21T21:51:34.740(LocalDateTime) \"]},\"24\":{\"h\":\"表单查询2\",\"t\":[\"//由前端上传json SysUserQueryRequest sysUserQueryRequest = new SysUserQueryRequest(); sysUserQueryRequest.setName(\\\"小明\\\"); sysUserQueryRequest.setCreateTimeBegin(LocalDateTime.now().plusDays(-10)); sysUserQueryRequest.setCreateTimeEnd(LocalDateTime.now()); sysUserQueryRequest.setPhone(\\\"180\\\"); //快速实现分页查询 动态对象条件 EasyPageResult<SysUser> pageResult = easyEntityQuery.queryable(SysUser.class) .whereObject(sysUserQueryRequest) .toPageResult(1, 10); \"]},\"25\":{\"h\":\"表单查询3\",\"t\":[\"//由前端上传json SysUserQueryRequest sysUserQueryRequest = new SysUserQueryRequest(); sysUserQueryRequest.setName(\\\"小明\\\"); sysUserQueryRequest.setCreateTimeBegin(LocalDateTime.now().plusDays(-10)); sysUserQueryRequest.setCreateTimeEnd(LocalDateTime.now()); sysUserQueryRequest.setPhone(\\\"180\\\"); //快速实现分页查询 手动处理是否需要添加到查询条件中 List<SysUser> pageResult = easyEntityQuery.queryable(SysUser.class) .where(o -> {//条件里面判断是否要继续 o.name().like(EasyStringUtil.isNotBlank(sysUserQueryRequest.getName()),sysUserQueryRequest.getName()); o.account().like(EasyStringUtil.isNotBlank(sysUserQueryRequest.getAccount()),sysUserQueryRequest.getAccount()); o.phone().like(EasyStringUtil.isNotBlank(sysUserQueryRequest.getPhone()),sysUserQueryRequest.getPhone()); o.departName().like(EasyStringUtil.isNotBlank(sysUserQueryRequest.getDepartName()),sysUserQueryRequest.getDepartName()); o.createTime().rangeClosed(sysUserQueryRequest.getCreateTimeBegin() != null,sysUserQueryRequest.getCreateTimeBegin(),sysUserQueryRequest.getCreateTimeEnd() != null, sysUserQueryRequest.getCreateTimeEnd()); }) .toList(); List<SysUser> pageResult = easyEntityQuery .queryable(SysUser.class)//where第一个参数表示后面的条件是否需要追加上去 .where(EasyStringUtil.isNotBlank(sysUserQueryRequest.getName()),o->o.name().like(sysUserQueryRequest.getName())) .where(EasyStringUtil.isNotBlank(sysUserQueryRequest.getAccount()),o->o.account().like(sysUserQueryRequest.getAccount())) .where(EasyStringUtil.isNotBlank(sysUserQueryRequest.getPhone()),o->o.phone().like(sysUserQueryRequest.getPhone())) .where(sysUserQueryRequest.getCreateTimeBegin() != null,o->o.createTime().gt(sysUserQueryRequest.getCreateTimeBegin())) .where(sysUserQueryRequest.getCreateTimeEnd() != null,o->o.createTime().lt(sysUserQueryRequest.getCreateTimeEnd())) .toList(); \"]},\"26\":{\"h\":\"快速开始🔥🔥🔥\"},\"27\":{\"h\":\"简介\",\"t\":[\"在使用前您需要知晓目前1.8.0+版本的easy-query提供了4中api机制分别是lambda、property、proxy、entity其中每个api都有自己的特点,其中easyEntityQuery是最新开发的api,使用起来非常顺畅流畅,非常推荐,4种模式可以在一个应用里面共存\"]},\"28\":{\"h\":\"EntityQuery\",\"t\":[\"本次我们采用easyEntityQuery来实现优雅的crud\",\"@EntityProxy (推荐🔥🔥🔥) 配合sql-processor包+插件使用apt，支持clear重新build生成或者插件生成\",\"@EntityFileProxy 配合插件使用apt apt不会被clear清除(不是很推荐因为依赖插件)\",\"这边建议推荐使用@EntityProxy+sql-processor包因为这样可以保证在其他IDE下也能使用并且不依赖插件\"]},\"29\":{\"h\":\"idea 插件安装\",\"t\":[\"插件的安装可以帮助我们针对自动生成的文件进行快速管理无感.\",\"下面我们分别以两种注解模式来说明如何开发\"]},\"30\":{\"h\":\"依赖注入\",\"t\":[\" <dependencies> <!-- 核心包 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-core</artifactId> <version>${easy-query.version}</version> <scope>compile</scope> </dependency> <!-- mysql方言 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> <scope>compile</scope> </dependency> <!-- entity-query的api包 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> <scope>compile</scope> </dependency> <!-- entity-query的apt包 如果你是多模块只需要在生成apt的对象模块处需要引入 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> <scope>compile</scope> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.17</version> </dependency> <!-- 数据源 --> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> </dependencies> \",\"不是很推荐除非电脑差\"]},\"31\":{\"h\":\"依赖注入\",\"t\":[\" <dependencies> <!-- 核心包 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-core</artifactId> <version>${easy-query.version}</version> <scope>compile</scope> </dependency> <!-- mysql方言 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> <scope>compile</scope> </dependency> <!-- entity-query的api包 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> <scope>compile</scope> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.17</version> </dependency> <!-- 数据源 --> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> </dependencies> \"]},\"32\":{\"h\":\"数据库表对象\"},\"33\":{\"h\":\"自动生成\",\"t\":[\"@EntityFileProxy这个注解会在当前类同级包下创建一个proxy包并且生成对应的代理对象用来操作 生成到源码文件里面\",\"@EntityProxy这个注解会在当前类同级包下创建一个proxy包并且生成对应的代理对象用来操作 生成到target目录下需要build\",\"ProxyEntityAvailable这个接口仅数据库对象需要实现,vo bo之类的无需实现该接口只需要添加注解@EntityFileProxy或者@EntityProxy\",\"说明!!!\",\"这两个注解仅生成文件路径不一样,file的需要插件支持,没有file的需要引入sql-processor包,如果您不想依赖插件或者您不是idea开发java那么可以采用@EntityProxy配合sql-processor包在build之后会自动生成代理对象,如果还是报错只需要刷新下maven即可\",\"添加注解后呼出Generate不知道快捷键就右键生成get set的那个菜单\",\"如果你是@EntityProxy那么生成路径则在\",\"自动生成的EntityProxy类会在用户修改属性字段后同步修改\"]},\"34\":{\"h\":\"运行\",\"t\":[\" public class Main { public static void main(String[] args) { HikariDataSource dataSource = new HikariDataSource(); dataSource.setJdbcUrl(\\\"jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\"); dataSource.setUsername(\\\"root\\\"); dataSource.setPassword(\\\"root\\\"); dataSource.setDriverClassName(\\\"com.mysql.cj.jdbc.Driver\\\"); dataSource.setMaximumPoolSize(20); //采用控制台输出打印sql LogFactory.useStdOutLogging(); //property的api EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setPrintSql(true); op.setKeepNativeStyle(true); }) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); //lambda模式的api 需要引入sql-api4j包 //DefaultEasyQuery easyQuery = new DefaultEasyQuery(easyQueryClient) // 需要引入sql-api-proxy //EasyProxyQuery easyProxyQuery = new DefaultEasyProxyQuery(easyQueryClient); //使用新版本api对象查询 //需要引入sql-api-proxy EasyEntityQuery easyEntityQuery = new DefaultEasyEntityQuery(easyQueryClient); //根据id查询第一条 Topic topic1 = easyEntityQuery.queryable(Topic.class) .whereById(\\\"1\\\").firstOrNull(); //根据id查询并且断言仅一条 Topic topic2 = easyEntityQuery.queryable(Topic.class) .whereById(\\\"1\\\").singleOrNull(); //根据id查询自定义条件返回第一条 Topic topic3 = easyEntityQuery.queryable(Topic.class) .where(o -> { o.id().eq(\\\"1\\\"); }) .firstOrNull(); //根据条件返回符合的集合默认ArrayList实现 List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.id().eq(\\\"1\\\"); }) .toList(); //判断小明是否存在 boolean exists= easyEntityQuery.queryable(Topic.class).where(o->o.name().like(\\\"小明\\\")).any(); //断言小明是否存在 easyEntityQuery.queryable(Topic.class).where(o->o.name().like(\\\"小明\\\")).required(\\\"未找到小明\\\"); System.out.println(\\\"Hello world!\\\"); } } //打印的sql ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? LIMIT 1 ==> Parameters: 1(String) <== Time Elapsed: 14(ms) <== Total: 1 \"]},\"35\":{\"h\":\"单个查询\",\"t\":[\" //根据id查询第一条 Topic topic1 = easyEntityQuery.queryable(Topic.class) .whereById(\\\"1\\\").firstOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? LIMIT 1 ==> Parameters: 1(String) <== Time Elapsed: 10(ms) <== Total: 1 //根据id查询并且断言仅一条 Topic topic2 = easyEntityQuery.queryable(Topic.class) .whereById(\\\"1\\\").singleOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? ==> Parameters: 1(String) <== Time Elapsed: 6(ms) <== Total: 1 //根据id查询自定义条件返回第一条 Topic topic3 = easyEntityQuery.queryable(Topic.class) .where(o -> { o.id().eq(\\\"1\\\"); }) .firstOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? LIMIT 1 ==> Parameters: 1(String) <== Time Elapsed: 7(ms) <== Total: 1 //根据id查询 Topic topic2 = easyEntityQuery.queryable(Topic.class) .findOrNull(\\\"1\\\"); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? ==> Parameters: 1(String) <== Time Elapsed: 6(ms) <== Total: 1 \"]},\"36\":{\"h\":\"返回列表\",\"t\":[\"List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.id().eq(\\\"1\\\"); }) .toList(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? ==> Parameters: 1(String) <== Time Elapsed: 10(ms) <== Total: 1 \"]},\"37\":{\"h\":\"count查询\",\"t\":[\" long count = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"11\\\"); o.createTime().le(LocalDateTime.now()); }).count(); int intCount = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"11\\\"); o.createTime().le(LocalDateTime.now()); }).intCount(); ==> Preparing: SELECT COUNT(*) FROM `t_topic` WHERE `title` LIKE ? AND `create_time` <= ? ==> Parameters: %11%(String),2023-12-16T14:17:04.065(LocalDateTime) <== Time Elapsed: 2(ms) <== Total: 1 \"]},\"38\":{\"h\":\"返回自定义列\",\"t\":[\" @Data @EntityProxy public class TopicVO{ private String id; private String title; } List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o->{ o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022,2,1,3,4)); }) .orderBy(o -> { o.id().asc(); o.createTime().desc(); }) .select(o->new TopicVOProxy().adapter(r->{ r.id().set(o.id()); //手动指定赋值 r.title().set(o.title()) })) .toList(); ==> Preparing: SELECT t.`id` as `id`,t.`title` as `title` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? ORDER BY t.`id` ASC,t.`create_time` DESC ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) <== Time Elapsed: 4(ms) <== Total: 98 List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o->{ o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022,2,1,3,4)); }) .orderBy(o -> { o.id().asc(); o.createTime().desc(); }) .select(o->new TopicProxy().adapter(r->{ r.selectAll(o);//查询所有 r.selectIgnores(o.id());//忽略id })) .toList(); ==> Preparing: SELECT t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? ORDER BY t.`id` ASC,t.`create_time` DESC ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 98 \"]},\"39\":{\"h\":\"分组\",\"t\":[\" List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o->{ o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022,2,1,3,4)); }) //会生成{key1:x,key2:x.... group:{t1:xx,t2:xx}}其中key1...keyn表示key默认支持10个 t1...tn表示前面的表 //无论join了多少张表group后全部只有一个入参参数其余参数在group属性里面 .groupBy(o-> GroupKeys.TABLE1.of(o.id())) .select(o->new TopicProxy().adapter(r->{ r.id().set(o.key1());//key1就是id r.stars().set(o.intCount());//COUNT(*)返回int 默认返回long类型 })) .toList(); ==> Preparing: SELECT t.`id` AS `id`,COUNT(*) AS `stars` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? GROUP BY t.`id` ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) //草稿模式无需定义返回结果,返回草稿支持1-10 Draft1-Draft10 List<Draft3<String, Integer, Integer>> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022, 2, 1, 3, 4)); }) .groupBy(o -> GroupKeys.TABLE1.of(o.id())) .select(o -> new TopicProxy().adapter(r->{ r.id().set(o.key1());//key1就是id r.stars().set(o.intCount());//COUNT(*)返回int 默认返回long类型 })) .select(o -> Select.DRAFT.of( o.id().nullOrDefault(\\\"123\\\"),//如果为空就赋值123 o.stars(), o.stars().abs()//取绝对值 )) .toList(); ==> Preparing: SELECT IFNULL(t1.`id`,?) AS `value1`,t1.`stars` AS `value2`,ABS(t1.`stars`) AS `value3` FROM (SELECT t.`id` AS `id`,COUNT(*) AS `stars` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? GROUP BY t.`id`) t1 ==> Parameters: 123(String),%123%(String),2022-02-01T03:04(LocalDateTime) \"]},\"40\":{\"h\":\"分页\",\"t\":[\" EasyPageResult<Topic> pageResult = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022, 2, 1, 3, 4)); }) .orderBy(o -> { o.id().asc(); o.createTime().desc(); }) .select(o -> new TopicProxy().adapter(r->{ r.selectExpression(o.id(),o.title());//表达式仅查询id和title //下面的和上面的一致 下面的是手动指定返回结果 //如果查询列名和VO结果一致那么可以不需要手动指定 //r.id().set(o.id()); //r.title().set(o.title()); })) //.select(o->new TopicProxy())//全属性映射等于selectAll(o) .toPageResult(1, 20); ==> Preparing: SELECT COUNT(*) FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`title` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? ORDER BY t.`id` ASC,t.`create_time` DESC LIMIT 20 ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 20 \"]},\"41\":{\"h\":\"join多表查询\",\"t\":[\" @Data @EntityProxy public class TopicVO{ private String id; private String title; private Integer stars; } List<Topic> list = easyEntityQuery.queryable(Topic.class) .leftJoin(Topic.class, (t, t1) -> {//第一个参数t表示第一个表,第二个参数t1表示第二个表 t.id().eq(t1.id());// ON t.`id` = t1.`id` }) .where((t, t1) -> { t.title().like(\\\"11\\\"); t1.createTime().le(LocalDateTime.of(2021, 1, 1, 1, 1)); }) .select((t, t1) -> new TopicVOProxy().adapter(r->{ r.id().set(t.id()); r.stars().set(t.stars()); r.title().set(t1.id()); })).toList(); ==> Preparing: SELECT t.`id` AS `id`,t.`stars` AS `stars`,t1.`id` AS `title` FROM `t_topic` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` WHERE t.`title` LIKE ? AND t1.`create_time` <= ? ==> Parameters: %11%(String),2021-01-01T01:01(LocalDateTime) <== Time Elapsed: 12(ms) <== Total: 0 \"]},\"42\":{\"h\":\"排序\",\"t\":[\" List<Topic> list = easyEntityQuery.queryable(Topic.class) .leftJoin(Topic.class, (t, t1) -> { t.id().eq(t1.id()); }) .orderBy((t, t1) -> { t.id().asc(); t1.createTime().desc(); }) //查询t表的所有除了id和title,并且返回t1的title取别名为content .select((t,t1)->new TopicProxy().adapter(r->{ r.selectAll(t); r.selectIgnores(t.id(),t.title()); r.id().set(t1.title()); })) .toList(); ==> Preparing: SELECT t.`stars`,t.`create_time`,t1.`title` AS `id` FROM `t_topic` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` ORDER BY t.`id` ASC,t1.`create_time` DESC <== Time Elapsed: 14(ms) <== Total: 101 //使用草稿无需定义返回结果 List<Draft3<Integer, LocalDateTime, String>> list = easyEntityQuery.queryable(Topic.class) .leftJoin(Topic.class, (t, t1) -> { t.id().eq(t1.id()); }) .orderBy((t, t1) -> { t.id().asc(); t1.createTime().desc(); }) .select((t, t1) -> Select.DRAFT.of( t.stars(), t.createTime(), t1.title() )) .toList(); ==> Preparing: SELECT t.`stars` AS `value1`,t.`create_time` AS `value2`,t1.`title` AS `value3` FROM `t_topic` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` ORDER BY t.`id` ASC,t1.`create_time` DESC \"]},\"43\":{\"h\":\"LambdaQuery\",\"t\":[\"如果您习惯了mybatis-plus的模式,那么lambda查询可以让你回到mp的写法并且更加符合逻辑\",\"新建一个java8以上的任意项目我们创建maven的空项目即可然后引入对应的包,sql-core提供了property的api模式,sql-api-proxy则是真正的针对property的模式增加的强类型entity模式的包\"]},\"44\":{\"h\":\"依赖注入\",\"t\":[\" <dependencies> <!-- mysql方言 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> <!-- lambda-query的api包 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api4j</artifactId> <version>${easy-query.version}</version> </dependency> <!-- mysql驱动 --> <!-- 选择自己的合适版本 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.17</version> </dependency> <!-- 数据源 --> <!-- 选择自己的合适版本 --> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <!-- 选择自己的合适版本 --> <!-- <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> --> </dependencies> \"]},\"45\":{\"h\":\"数据库表对象\"},\"46\":{\"h\":\"PropertyQuery\",\"t\":[\"如果您习惯了mybatis-plus的模式,那么lambda查询可以让你回到mp的写法并且更加符合逻辑\"]},\"47\":{\"h\":\"服务支持\",\"t\":[\"您的支持是我坚持的动力,在这里希望您可以免费给我点个star\",\"GITHUB\",\"GITEE\"]},\"48\":{\"h\":\"爱心\",\"t\":[\"如果您觉得这个框架有用可以请作者喝杯咖啡\"]},\"49\":{\"h\":\"版本升级指南\",\"t\":[\"直接升级修改版本号即可1.0.0-1.x 最后一个版本号没有破坏性变动 甚至0.x版本都可以直接升级上来\"]},\"50\":{\"h\":\"Features Demo\"},\"51\":{\"h\":\"Catalog\",\"t\":[\"Markdown Enhance\",\"Page Config\",\"Function Disable\",\"Encryption Demo\"]},\"52\":{\"h\":\"Disabling layout and features\",\"t\":[\"You can disable some function and layout on the page by setting the Frontmatter of the page.\",\"This page is an demo that disables the following features:\",\"Navbar\",\"Sidebar\",\"Breadcrumb\",\"Page information\",\"Contributors\",\"Edit link\",\"Update time\",\"Prev/Next link\",\"Comment\",\"Footer\",\"Back to top button\"]},\"53\":{\"h\":\"Encryption Article\",\"t\":[\"The actual article content.\",\"Paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text.\",\"Paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text.\"]},\"54\":{\"h\":\"Markdown Enhance\",\"t\":[\"VuePress basically generate pages from Markdown files. So you can use it to generate documentation or blog sites easily.\",\"You should create and write Markdown files, so that VuePress can convert them to different pages according to file structure.\"]},\"55\":{\"h\":\"Markdown Introduction\",\"t\":[\"If you are a new learner and don’t know how to write Markdown, please read Markdown Intro and Markdown Demo.\"]},\"56\":{\"h\":\"Markdown Config\",\"t\":[\"VuePress introduce configuration for each Markdown page using Frontmatter.\",\"相关信息\",\"Frontmatter is a important concept in VuePress. If you don’t know it, you need to read Frontmatter Introduction.\"]},\"57\":{\"h\":\"Markdown Extension\",\"t\":[\"The Markdown content in VuePress will be parsed by markdown-it, which supports syntax extensions via markdown-it plugins.\"]},\"58\":{\"h\":\"VuePress Enhancement\",\"t\":[\"To enrich document writing, VuePress has extended Markdown syntax.\",\"For these extensions, please read Markdown extensions in VuePress.\"]},\"59\":{\"h\":\"Theme Enhancement\",\"t\":[\"By using vuepress-plugin-md-enhance, the theme extends more Markdown syntax and provides richer writing functions.\"]},\"60\":{\"h\":\"Custom Container\",\"t\":[\"Safely use {{ variable }} in Markdown.\",\"Custom Title\",\"A custom information container with code, link.\",\"const a = 1; \",\"Custom Title\",\"A custom tip container\",\"Custom Title\",\"A custom warning container\",\"Custom Title\",\"A custom danger container\",\"Custom Title\",\"A custom details container\",\"View Detail\"]},\"61\":{\"h\":\"Tabs\",\"t\":[\"View Detail\"]},\"62\":{\"h\":\"Code Tabs\",\"t\":[\"View Detail\"]},\"63\":{\"h\":\"Superscript and Subscript\",\"t\":[\"19th H2O\",\"View Detail\"]},\"64\":{\"h\":\"Align\",\"t\":[\"I am center\",\"I am right align\",\"View Detail\"]},\"65\":{\"h\":\"Attrs\",\"t\":[\"A word having id.\",\"View Detail\"]},\"66\":{\"h\":\"Footnote\",\"t\":[\"This text has footnote[1].\",\"View Detail\"]},\"67\":{\"h\":\"Mark\",\"t\":[\"You can mark important words .\",\"View Detail\"]},\"68\":{\"h\":\"Tasklist\",\"t\":[\" Plan A\",\" Plan B\",\"View Detail\"]},\"69\":{\"h\":\"Image Enhancement\",\"t\":[\"Support setting color scheme and size\",\"View Detail\"]},\"70\":{\"h\":\"Chart\",\"t\":[\"View Detail\"]},\"71\":{\"h\":\"Echarts\",\"t\":[\"View Detail\"]},\"72\":{\"h\":\"Flowchart\",\"t\":[\"View Detail\"]},\"73\":{\"h\":\"Mermaid\",\"t\":[\"View Detail\"]},\"74\":{\"h\":\"Tex\",\"t\":[\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\",\"View Detail\"]},\"75\":{\"h\":\"Include files\",\"t\":[\"Markdown Enhance\",\"Page Config\",\"Function Disable\",\"Encryption Demo\",\"View Detail\"]},\"76\":{\"h\":\"Code Demo\",\"t\":[\"View Detail\"]},\"77\":{\"h\":\"Stylize\",\"t\":[\"Donate Mr.Hope a cup of coffee. \",\"View Detail\"]},\"78\":{\"h\":\"Playground\",\"t\":[\"View Detail\"]},\"79\":{\"h\":\"Vue Playground\",\"t\":[\"View Detail\"]},\"80\":{\"h\":\"Presentation\",\"t\":[\"View Detail\",\"This is footnote content ↩︎\"]},\"81\":{\"h\":\"Page Config\",\"t\":[\"Content before more comment is regarded as page excerpt.\"]},\"82\":{\"h\":\"Page Information\",\"t\":[\"You can set page information in Markdown’s Frontmatter.\",\"The author is Ms.Hope.\",\"The writing date is January 1, 2020\",\"Category is \\\"Guide\\\"\",\"Tags are \\\"Page Config\\\" and \\\"Guide\\\"\"]},\"83\":{\"h\":\"Page Content\",\"t\":[\"You are free to write your Markdown here.\",\"Assets\",\"You can place images besides your Markdown files, but you should use relative links (i.e.: starting with ./) for them.\",\"For images in .vuepress/public directory, please use absolute links (i.e.: starting with /) for them.\",\"The theme contains a custom badge:\",\"A dark blue badge text badge at the end of line. \"]},\"84\":{\"h\":\"Page Structure\",\"t\":[\"This page should contain:\",\"BreadCrumb\",\"Title and information\",\"TOC (Table of Contents)\",\"Meta information including update time and contributors\",\"Comments\",\"Navbar\",\"Sidebar\",\"Footer\",\"Back to top button\",\"You can customize them in theme options and page frontmatter.\"]},\"85\":{\"h\":\"项目主页\"},\"86\":{\"h\":\"github repository\",\"t\":[\"easy-query\"]},\"87\":{\"h\":\"gitee repository\",\"t\":[\"easy-query\"]},\"88\":{\"h\":\"License\",\"t\":[\"Apache-2.0 License\"]},\"89\":{\"h\":\"doument theme\",\"t\":[\"vuepress-theme-hope\"]},\"90\":{\"h\":\"🔔QQ Group\"},\"91\":{\"h\":\"EasyQuery官方QQ群: 170029046\"},\"92\":{\"h\":\"使用指南\"},\"93\":{\"h\":\"指南\",\"t\":[\"License\",\"Stargazers over time\"]},\"94\":{\"h\":\"EasyQuery\",\"t\":[\"easy-query🚀 一款高性能、轻量级、强类型的Java对象查询ORM框架支持分库分表读写分离\",\"QQ群: 170029046\",\"问题反馈请前往:\",\"https://github.com/xuejmnet/easy-query/issues\",\"或者\",\"https://gitee.com/xuejm/easy-query/issues\"]},\"95\":{\"h\":\"特性\",\"t\":[\" 全局默认、自定义软删除，可以自己实现软删除或者使用系统默认定义的软删除\",\" 全局自定义拦截器，支持查询、修改、删除条件拦截器，对象插入、修改拦截器、修改set字段拦截器\",\" 单表查询、多表join查询\",\" 自定义更新、实体更新、条件更新\",\" 追踪查询，差异更新实体\",\" 企业级数据库列加密,支持like搜索\",\" 乐观锁版本号\",\" 自定义分库分表\",\" 读写分离\"]},\"96\":{\"h\":\"学习指南\",\"t\":[\"EasyQuery目前除了基础的增删改查外未来还将支持分库分表，读写分离，字段加密等企业级功能\"]},\"97\":{\"h\":\"基础\",\"t\":[\"《EasyQuery:数据新增》\",\"《EasyQuery:数据修改》\",\"《EasyQuery:数据删除》\",\"《EasyQuery:数据查询》\"]},\"98\":{\"h\":\"实战\",\"t\":[\"easy-query的实战环境会尽可能的给大家带来实际开发过程中我们采用的设计类型，并且给大家带来更多的解决方案\"]},\"99\":{\"h\":\"easy-query简介目录\",\"t\":[\"如果您是c#转过来的开发，如果您不想使用复杂恶心的xml来编写sql,如果您是一个有追求的喜欢强类型的技术开发,如果您是一个刚入行java的新人，那么easy-query将是非常适合您的一个框架，没有mybatis的繁琐,可以快速的编写crud代码和复杂代码。\"]},\"100\":{\"h\":\"目录指引\",\"t\":[\"无实体查询,无实体更新,无实体新增,无实体删除等操作\",\"动态条件,form表单查询,有值就添加到条件,没值就忽略 DynamicWhere\",\"动态排序,form表单排序,前端指定排序 DynamicOrderBy\",\"对象关系结构化VO自动组装返回,支持一对多一对一结果筛选,排序,limit\",\"多数据源,动态多数据源，支持SpringEL，使用场景多租户(一个租户一个库) DynamicDataSource\",\"软删除，软删除部分禁用启用非常方便，软删除记录删除时间,删除人 LogicDelete\",\"自定义错误异常快速针对firstNotNull、singleNotNull、requiredException\",\"枚举和数据库映射,数据脱敏,数据编码存储解码获取,枚举属性,json或者数组,计算属性等 ValueConverter,ColumnValueSQLConverter\",\"数据填充,自动赋值创建人创建时间,修改人修改时间 拦截器、 对象实战\",\"慢sql监听拦截,自动上报预警 jdbc执行监听器\",\"数据库列的加密和加密后的模糊查询企业级解决方案 数据库列加密\",\"分库分表，读写分离 分库分表，读写分离 (敬请期待已经完成功能文档还在完善中)\",\"VO对象直接返回 自定义vo列返回\",\"数据库对象模型关联查询：一对多、一对一、多对多、多对一 对象关系查询\",\"对象关系关联查询nosql不仅仅是sql联级筛选,支持额外条件过滤比如公用中间表,多对多关联+type区分 联级筛选Include Filter\",\"对象关系查询、SQL查询强类型语法的sql查询语法\",\"智能的差异识别更新、并发更新 更新、追踪\",\"自带分页方法和无依赖分页链式返回 分页\",\"Embeddable、ValueObject对象 值对象\",\"数据权限,业务权限拦截器,我能查看我下面的所有组,组长可以查询所有组员的数据,组员查看自己的数据\",\"原生sql片段使用,方便开发人员使用数据库特有的函数或者方言\",\"java函数数据库封装支持各个数据库\",\"group感知,在众多orm中极少数orm才会支持的group感知\",\"无任何依赖的框架,不会有任何冲突\",\"sql多表查询支持join、in、exists等子查询\",\"idea插件提供更加高效快速的开发效率和开发体验\",\"sql上下文泛型限制\",\"大数据流式查询防止oom\",\"自带便捷的batch批处理\",\"动态报名支持对查询的表名进行动态设置可以再非分库分表模式下直接操作对应表\",\"配合easy-cache实现缓存的便捷使用并且是一个企业级别的延迟双删\",\"insert or update语法方言 InsertOrUpdate\",\"计算属性,额外计算列比如年龄是动态的而不是固定的,所以年龄应该是(当前时间-出生日期),复杂计算属性比如班级表存在学生数量这个属性这个属性应该是select count(*) from student where class_id=?\",\"自定义主键,支持雪花id,uuid等其他一系列id的自定义生成,支持多主键模式PrimaryKeyGenerator\"]},\"101\":{\"h\":\"entity和proxy的api区别\",\"t\":[\"首先如果您无法接受entityQuery模式需要对象实现ProxyEntityAvailable接口的也可以换成easyProxyQuery来查询两者出了部分功能不太一样本质是一样的\",\"说明!!!\",\"部分使用代理对象的地方需要使用EntityProxy.createTable()来创建创建后两者是一样的,所以具体使用哪种用户自行抉择\"]},\"102\":{\"h\":\"查询\",\"t\":[\"easyEntityQuery对象因为泛型感知已经知晓Proxy所以可以直接通过class来获取查询,而Proxy因为数据库对象是孤单对象没有具体的proxy绑定只有Proxy能够感知到数据库对象所以两种在创建的时候会不一样\",\"//entity easyEntityQuery.queryable(SysUser.class).where(o->o.id().eq(\\\"123\\\")); easyEntityQuery.queryable(SysUser.class) .leftJoin(Topic.class,(user,topic)->user.id().eq(topic.id())) //proxy easyProxyQuery.queryable(SysUserProxy.createTable()).where(o->o.id().eq(\\\"123\\\")); easyProxyQuery.queryable(SysUserProxy.createTable()) .leftJoin(TopicProxy.createTable(),(user,topic)->user.id().eq(topic.id())) \"]},\"103\":{\"h\":\"插入\",\"t\":[\"//entity easyEntityQuery.insertable(new SysUser()).... //proxy easyProxyQuery.insertable(new SysUser()).useProxy(SysUserProxy.createTable()).... \"]},\"104\":{\"h\":\"修改\",\"t\":[\"//entity //对象更新包括对象集合 easyEntityQuery.updateable(new SysUser()).... //自定义更新 easyEntityQuery.updateable(SysUser.class).... //proxy //对象更新包括对象集合如果后续不需要处理column信息那么不需要useProxy easyProxyQuery.updateable(new SysUser())).useProxy(SysUserProxy.createTable()).... //自定义更新 easyProxyQuery.updateable(SysUserProxy.createTable()).... \"]},\"105\":{\"h\":\"删除\",\"t\":[\"//entity //对象更新包括对象集合 easyEntityQuery.deletable(new SysUser()).... //自定义更新 easyEntityQuery.upddeletableteable(SysUser.class).... //proxy //对象更新包括对象集合如果后续不需要处理column信息那么不需要useProxy easyProxyQuery.updateable(new SysUser())).useProxy(SysUserProxy.createTable()).... //自定义删除 easyProxyQuery.deletable(SysUserProxy.createTable()).... \"]},\"106\":{\"h\":\"easy-query简介目录\",\"t\":[\"如果您是c#转过来的开发，如果您不想使用复杂恶心的xml来编写sql,如果您是一个有追求的喜欢强类型的技术开发,如果您是一个刚入行java的新人，那么easy-query将是非常适合您的一个框架，没有mybatis的繁琐,可以快速的编写crud代码和复杂代码。\"]},\"107\":{\"h\":\"目录指引\",\"t\":[\"无实体查询,无实体更新,无实体新增,无实体删除等操作\",\"动态条件,form表单查询,有值就添加到条件,没值就忽略 DynamicWhere\",\"动态排序,form表单排序,前端指定排序 DynamicOrderBy\",\"对象关系结构化VO自动组装返回,支持一对多一对一结果筛选,排序,limit\",\"多数据源,动态多数据源，支持SpringEL，使用场景多租户(一个租户一个库) DynamicDataSource\",\"软删除，软删除部分禁用启用非常方便，软删除记录删除时间,删除人 LogicDelete\",\"自定义错误异常快速针对firstNotNull、singleNotNull、requiredException\",\"枚举和数据库映射,数据脱敏,数据编码存储解码获取,枚举属性,json或者数组,计算属性等 ValueConverter,ColumnValueSQLConverter\",\"数据填充,自动赋值创建人创建时间,修改人修改时间 拦截器、 对象实战\",\"慢sql监听拦截,自动上报预警 jdbc执行监听器\",\"数据库列的加密和加密后的模糊查询企业级解决方案 数据库列加密\",\"分库分表，读写分离 分库分表，读写分离 (敬请期待已经完成功能文档还在完善中)\",\"VO对象直接返回 自定义vo列返回\",\"数据库对象模型关联查询：一对多、一对一、多对多、多对一 对象关系查询\",\"对象关系关联查询nosql不仅仅是sql联级筛选,支持额外条件过滤比如公用中间表,多对多关联+type区分 联级筛选Include Filter\",\"对象关系查询、SQL查询强类型语法的sql查询语法\",\"智能的差异识别更新、并发更新 更新、追踪\",\"自带分页方法和无依赖分页链式返回 分页\",\"Embeddable、ValueObject对象 值对象\",\"数据权限,业务权限拦截器,我能查看我下面的所有组,组长可以查询所有组员的数据,组员查看自己的数据\",\"原生sql片段使用,方便开发人员使用数据库特有的函数或者方言\",\"java函数数据库封装支持各个数据库\",\"group感知,在众多orm中极少数orm才会支持的group感知\",\"无任何依赖的框架,不会有任何冲突\",\"sql多表查询支持join、in、exists等子查询\",\"idea插件提供更加高效快速的开发效率和开发体验\",\"sql上下文泛型限制\",\"大数据流式查询防止oom\",\"自带便捷的batch批处理\",\"动态报名支持对查询的表名进行动态设置可以再非分库分表模式下直接操作对应表\",\"配合easy-cache实现缓存的便捷使用并且是一个企业级别的延迟双删\",\"insert or update语法方言 InsertOrUpdate\",\"计算属性,额外计算列比如年龄是动态的而不是固定的,所以年龄应该是(当前时间-出生日期),复杂计算属性比如班级表存在学生数量这个属性这个属性应该是select count(*) from student where class_id=?\"]},\"108\":{\"h\":\"自定义dto 🔥🔥🔥\",\"t\":[\"本章节我们将展示easy-query的超强dto返回,支持结构化数据返回,非结构化平铺数据返回还有穿透结构返回\",\"非结构化平铺数据\",\"结构化数据返回 一对一 一对多 多对多\",\"穿透结构返回 一对一 一对多 多对多\",\"我们依然使用用户角色菜单和用户地址来描述下列接口\"]},\"109\":{\"h\":\"非结构化平铺数据\",\"t\":[\"非机构化数据返回是我们平时在使用时最最最常见的结构返回,类似直白的sql结果\"]},\"110\":{\"h\":\"用户dto\",\"t\":[\"@Data @FieldNameConstants public class SysUserDTO { private String id; private String name; private LocalDateTime createTime; //来自SysUserAddress.addr private String myAddress; } List<SysUserDTO> users = easyEntityQuery.queryable(SysUser.class) .where(s -> s.name().like(\\\"小明\\\")) .select(SysUserDTO.class, s -> Select.of( s.FETCHER.allFields(),//将s表的所有字段哦度映射到SysUserDTO中 s.address().addr().as(\\\"myAddress\\\")//额外将用户地址映射到myAddress中 )).toList(); //如果你不想使用字符串那么可以在SysUserDTO中使用lombok注解@FieldNameConstants List<SysUserDTO> users = easyEntityQuery.queryable(SysUser.class) .where(s -> s.name().like(\\\"小明\\\")) .select(SysUserDTO.class, s -> Select.of( s.FETCHER.allFields(), s.address().addr().as(SysUserDTO.Fields.myAddress)//当然也可以使用SysUserDTO::getMyAddress )).toList(); \",\"可能有些用户希望自己一个一个进行赋值那么我们可以这么处理\",\" @Data @EntityProxy public class SysUserDTO { private String id; private String name; private LocalDateTime createTime; //来自SysUserAddress.addr private String myAddress; } List<SysUserDTO> users = easyEntityQuery.queryable(SysUser.class) .where(s -> s.name().like(\\\"小明\\\")) .select(s -> { SysUserDTOProxy r = new SysUserDTOProxy(); //r.selectAll(s); 如果字段一样可以这么写直接映射 r.id().set(s.id()); r.name().set(s.name()); r.createTime().set(s.createTime()); r.myAddress().set(s.address().addr()); return r; }).toList(); \"]},\"111\":{\"h\":\"结构化数据返回\",\"t\":[\"右键需要生成dto的包,选择CreateStructDTO(安装插件最新版本即可) 选择您需要的类,选择\",\" /** * this file automatically generated by easy-query struct dto mapping * 当前文件是easy-query自动生成的 结构化dto 映射 * {@link com.easy.query.test.entity.blogtest.SysUser } * * @author easy-query */ @Data public class StructSysUserDTO { private String id; private String name; private LocalDateTime createTime; @Navigate(value = RelationTypeEnum.OneToOne) private InternalAddress address; @Navigate(value = RelationTypeEnum.ManyToMany) private List<InternalRoles> roles; /** * {@link com.easy.query.test.entity.blogtest.SysUserAddress } */ @Data public static class InternalAddress { private String id; private String userId; private String province; private String city; private String area; private String addr; } /** * {@link com.easy.query.test.entity.blogtest.SysRole } */ @Data public static class InternalRoles { private String id; private String name; private LocalDateTime createTime; @Navigate(value = RelationTypeEnum.ManyToMany) private List<InternalMenus> menus; } /** * {@link com.easy.query.test.entity.blogtest.SysMenu } */ @Data public static class InternalMenus { private String id; private String name; private String route; private String icon; } } //可以直接筛选出结构化DTO List<StructSysUserDTO> users = easyEntityQuery.queryable(SysUser.class) .where(s -> s.name().like(\\\"小明\\\")) .selectAutoInclude(StructSysUserDTO.class).toList(); \",\"如果我们结构化DTO需要多一个额外字段由其他表来的那么我们该怎么办呢,selectAutoInclude支持对主表进行额外筛选如果需要从表也要自定义那么请将第三个参数replace改成false然后自行include处理\",\"主表添加Topic.stars\",\" /** * this file automatically generated by easy-query struct dto mapping * 当前文件是easy-query自动生成的 结构化dto 映射 * {@link com.easy.query.test.entity.blogtest.SysUser } * * @author easy-query */ @Data @FieldNameConstants public class StructSysUserDTO { private String id; private String name; private LocalDateTime createTime; private Integer topicStars; @Navigate(value = RelationTypeEnum.OneToOne) private InternalAddress address; @Navigate(value = RelationTypeEnum.ManyToMany) private List<InternalRoles> roles; /** * {@link com.easy.query.test.entity.blogtest.SysUserAddress } */ @Data public static class InternalAddress { ....省略 } /** * {@link com.easy.query.test.entity.blogtest.SysRole } */ @Data public static class InternalRoles { ....省略 } /** * {@link com.easy.query.test.entity.blogtest.SysMenu } */ @Data public static class InternalMenus { ....省略 } } List<StructSysUserDTO> users = easyEntityQuery.queryable(SysUser.class) .leftJoin(Topic.class,(s, t2) -> s.id().eq(t2.id())) .where(s -> s.name().like(\\\"小明\\\")) .selectAutoInclude(StructSysUserDTO.class,(s, t2)->Select.of( //////s.FETCHER.allFields(),请注意不需要添加这一行因为selectAutoInclude会自动执行allFields t2.stars().nullOrDefault(1).as(StructSysUserDTO.Fields.topicStars)//这样我们就将结构化主表字段增加了额外字段 )).toList(); \"]},\"112\":{\"h\":\"穿透结构返回\",\"t\":[\"快速返回用户拥有的菜单,因为用户和菜单中间由角色进行关联并且两者都是多对多所以如果需要自行实现那么是非常麻烦的一件事情\",\"用户和菜单之间隔着角色的多对多所以如果想要获取用户的菜单id直接可以通过这种方式快速筛选\",\"方式1 仅获取用户拥有的菜单id\",\"List<String> menuIds = easyEntityQuery.queryable(SysUser.class) .where(s -> s.name().like(\\\"小明\\\")) .toList(s -> s.roles().flatElement().menus().flatElement().id()); \",\"方式2 仅获取用户拥有的菜单id和菜单名称\",\" List<SysMenu> menuIdNames = easyEntityQuery.queryable(SysUser.class) .where(s -> s.name().like(\\\"小明\\\")) .toList(s -> s.roles().flatElement().menus().flatElement(x->x.FETCHER.id().name())); \",\"方式三返回用户DTO和用户拥有的菜单id集合和角色id集合\",\" @Data public class SysUserFlatDTO { private String id; private String name; private LocalDateTime createTime; //穿透获取用户下的roles下的menus下的id 如果穿透获取的是非基本类型那么对象只能是数据库对象而不是dto对象 @NavigateFlat(value = RelationMappingTypeEnum.ToMany,mappingPath = { SysUser.Fields.roles, SysRole.Fields.menus, SysMenu.Fields.id }) private List<String> menuIds; //非基本对象也可以直接返回数据库对象 // @NavigateFlat(value = RelationMappingTypeEnum.ToMany,mappingPath = { // SysUser.Fields.roles, // SysRole.Fields.menus // }) // private List<SysMenu> menu; @NavigateFlat(value = RelationMappingTypeEnum.ToMany,mappingPath = { SysUser.Fields.roles, SysMenu.Fields.id }) private List<String> roleIds; } List<SysUserFlatDTO> users = easyEntityQuery.queryable(SysUser.class) .where(s -> s.name().like(\\\"小明\\\")) .selectAutoInclude(SysUserFlatDTO.class).toList(); \"]},\"113\":{\"h\":\"框架SpringBoot\"},\"114\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"115\":{\"h\":\"spring-boot工程\",\"t\":[\"<properties> <easy-query.version>latest-version</easy-query.version> </properties> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-springboot-starter</artifactId> <version>${easy-query.version}</version> </dependency> \",\"#配置文件 easy-query: #是否启动默认true enable: true #支持的数据库 database: mysql #对象属性和数据库列名的转换器 name-conversion: underlined #当执行物理删除是否报错,true表示报错,false表示不报错,默认true,如果配置为true,可以通过allowDeleteStament来实现允许 delete-throw: true #是否打印sql 默认true 需要配置log信息才可以 默认实现sl4jimpl print-sql: true #配置为默认追踪,但是如果不添加@EasyQueryTrack注解还是不会启用所以建议开启这个如果需要只需要额外添加注解即可 default-track: true #sqlNativeSegment输入和格式化无需处理单引号会自动处理为双单引号 keep-native-style: true \",\"//依赖注入 //强类型api @Autowired private EasyEntityQuery easyEntityQuery;//(强力推荐🔥🔥🔥) //强类型api @Autowired private EasyProxyQuery easyProxyQuery;//(强力推荐🔥🔥🔥) //动态类型api @Autowired private EasyQueryClient easyQueryClient;//通过字符串属性方式来实现查询 \"]},\"116\":{\"h\":\"springboot多数据源\",\"t\":[\"多数据源请查看DynamicDataSource\",\"注意点及说明!!!\",\"注意自行构建的数据源如果DataSource不是被spring接管的Bean那么事务将不会生效\",\"说明!!!\",\"创建完拦截器后需要配置到QueryConfiguration,如果你是springboot并且是默认easy-query只需要添加@Component如果是solon那么可以查看配置或配置到所有数据源 如果您是自行构建的easy-query需要自行添加拦截器\",\"QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyEncryptionStrategy(new DefaultAesEasyEncryptionStrategy()); configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); configuration.applyInterceptor(new MyEntityInterceptor()); configuration.applyShardingInitializer(new DataSourceAndTableShardingInitializer()); configuration.applyValueConverter(new EnumConverter()); configuration.applyColumnValueSQLConverter(new MySQLAesEncryptColumnValueSQLConverter()); configuration.applyGeneratedKeySQLColumnGenerator(new MyDatabaseIncrementSQLColumnGenerator()); TableRouteManager tableRouteManager = runtimeContext.getTableRouteManager(); tableRouteManager.addRoute(new TopicShardingTableRoute()); DataSourceRouteManager dataSourceRouteManager = runtimeContext.getDataSourceRouteManager(); dataSourceRouteManager.addRoute(new TopicShardingDataSourceTimeDataSourceRoute()); \"]},\"117\":{\"h\":\"SpringBoot 启动报错\",\"t\":[\"注意\",\"因为默认添加了track的aop如果启动报错那么就添加一下aop\",\"java.lang.IllegalStateException: Unable to load cache item at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:79) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:419) ~[spring-core-5.3.29.jar:5.3.29] \",\"主要原因是\",\"缺少aop依赖\",\"aop组件版本不对\",\"解决办法添加对应的依赖\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> \",\"Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'easyQueryInitializeOption' defined in class path resource [com/easy/query/sql/starter/EasyQueryStarterAutoConfiguration.class]: Unsatisfied dependency expressed through method 'easyQueryInitializeOption' parameter 1; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.Map<java.lang.String, com.easy.query.core.basic.extension.version.VersionStrategy>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} \",\"可能是springboot版本太低导致没有的依赖不是以空map返回而是报错\",\"建议重写bean\",\"// @Bean // @ConditionalOnMissingBean // public EasyQueryInitializeOption easyQueryInitializeOption(Map<String, Interceptor> interceptorMap, // Map<String, VersionStrategy> versionStrategyMap, // Map<String, LogicDeleteStrategy> logicDeleteStrategyMap, // Map<String, ShardingInitializer> shardingInitializerMap, // Map<String, EncryptionStrategy> encryptionStrategyMap, // Map<String, ValueConverter<?, ?>> valueConverterMap, // Map<String, TableRoute<?>> tableRouteMap, // Map<String, DataSourceRoute<?>> dataSourceRouteMap, // Map<String, ValueUpdateAtomicTrack<?>> valueUpdateAtomicTrackMap, // Map<String, JdbcTypeHandler> jdbcTypeHandlerMap, // Map<String, ColumnValueSQLConverter> columnValueSQLConverterMap, // Map<String, IncrementSQLColumnGenerator> incrementSQLColumnGeneratorMap // ) { // return new EasyQueryInitializeOption(interceptorMap, // versionStrategyMap, // logicDeleteStrategyMap, // shardingInitializerMap, // encryptionStrategyMap, // valueConverterMap, // tableRouteMap, // dataSourceRouteMap, // valueUpdateAtomicTrackMap, // jdbcTypeHandlerMap, // columnValueSQLConverterMap, // incrementSQLColumnGeneratorMap); // } @Bean @Primary public EasyQueryInitializeOption easyQueryInitializeOption(Map<String, Interceptor> interceptorMap ) { return new EasyQueryInitializeOption(interceptorMap, versionStrategyMap, Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap()); } \",\"有些用户喜欢拥有非常强的强迫症,这边给出如何自行处理实现类starter,无依赖引入easy-query\"]},\"118\":{\"h\":\"创建springboot应用\",\"t\":[\"下载地址 https://start.spring.io/\"]},\"119\":{\"h\":\"添加依赖\"},\"120\":{\"h\":\"属性模式\",\"t\":[\" <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-core</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 自己选择对应的驱动--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.31</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> \"]},\"121\":{\"h\":\"Entity模式\",\"t\":[\" <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-core</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 代理模式--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 自己选择对应的驱动--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 用来生成代理对象--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.31</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> \"]},\"122\":{\"h\":\"添加配置\",\"t\":[\"首先我们如果需要支持springboot的事务需要再easy-query的springboot-strater处拷贝三个源码文件\",\" public class SpringConnectionManager extends DefaultConnectionManager { public SpringConnectionManager(EasyQueryDataSource easyDataSource, EasyConnectionFactory easyConnectionFactory, EasyDataSourceConnectionFactory easyDataSourceConnectionFactory) { super(easyDataSource, easyConnectionFactory, easyDataSourceConnectionFactory); } @Override public boolean currentThreadInTransaction() { return TransactionSynchronizationManager.isActualTransactionActive() || isOpenTransaction(); } @Override public void closeEasyConnection(EasyConnection easyConnection) { if(easyConnection==null){ return; } //当前没开事务,但是easy query手动开启了 if (!TransactionSynchronizationManager.isActualTransactionActive()) { if (super.isOpenTransaction()) { return; } } else { if (super.isOpenTransaction()) { throw new EasyQueryException(\\\"repeat transaction can't closed connection\\\"); } } DataSourceWrapper dataSourceUnit = easyDataSource.getDataSourceNotNull(easyConnection.getDataSourceName(), ConnectionStrategyEnum.ShareConnection); DataSourceUtils.releaseConnection(easyConnection.getConnection(), dataSourceUnit.getDataSourceUnit().getDataSource()); } } public class SpringDataSourceUnit extends DefaultDataSourceUnit { public SpringDataSourceUnit(String dataSourceName, DataSource dataSource, int mergePoolSize, boolean warningBusy) { super(dataSourceName,dataSource,mergePoolSize,warningBusy); } @Override protected Connection getConnection() throws SQLException { return DataSourceUtils.getConnection(dataSource); } } public class SpringDataSourceUnitFactory implements DataSourceUnitFactory { private final EasyQueryOption easyQueryOption; public SpringDataSourceUnitFactory(EasyQueryOption easyQueryOption){ this.easyQueryOption = easyQueryOption; } @Override public DataSourceUnit createDataSourceUnit(String dataSourceName, DataSource dataSource, int mergePoolSize) { return new SpringDataSourceUnit(dataSourceName,dataSource,mergePoolSize,easyQueryOption.isWarningBusy()); } } \"]},\"123\":{\"h\":\"注入bean\",\"t\":[\" @Configuration public class EasyQueryConfiguration { @Bean(\\\"oracleDataSource\\\") public DataSource oracleDataSource(){ return DataSourceBuilder.create() .url(\\\"jdbc:h2:mem:testdb\\\") .driverClassName(\\\"org.h2.Driver\\\") .username(\\\"sa\\\") .password(\\\"password\\\") .build(); } @Bean(\\\"orcale\\\")//使用的时候通过注入指定名称即可 public EasyQueryClient easyQueryClient(@Qualifier(\\\"oracleDataSource\\\") DataSource dataSource){ EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .replaceService(DataSourceUnitFactory.class, SpringDataSourceUnitFactory.class) .replaceService(NameConversion.class, UnderlinedNameConversion.class) .replaceService(ConnectionManager.class, SpringConnectionManager.class) .optionConfigure(builder -> { // builder.setDeleteThrowError(easyQueryProperties.getDeleteThrow()); // builder.setInsertStrategy(easyQueryProperties.getInsertStrategy()); // builder.setUpdateStrategy(easyQueryProperties.getUpdateStrategy()); // builder.setMaxShardingQueryLimit(easyQueryProperties.getMaxShardingQueryLimit()); // builder.setExecutorMaximumPoolSize(easyQueryProperties.getExecutorMaximumPoolSize()); // builder.setExecutorCorePoolSize(easyQueryProperties.getExecutorCorePoolSize()); // builder.setThrowIfRouteNotMatch(easyQueryProperties.isThrowIfRouteNotMatch()); // builder.setShardingExecuteTimeoutMillis(easyQueryProperties.getShardingExecuteTimeoutMillis()); // builder.setQueryLargeColumn(easyQueryProperties.isQueryLargeColumn()); // builder.setMaxShardingRouteCount(easyQueryProperties.getMaxShardingRouteCount()); // builder.setExecutorQueueSize(easyQueryProperties.getExecutorQueueSize()); // builder.setDefaultDataSourceName(easyQueryProperties.getDefaultDataSourceName()); // builder.setDefaultDataSourceMergePoolSize(easyQueryProperties.getDefaultDataSourceMergePoolSize()); // builder.setMultiConnWaitTimeoutMillis(easyQueryProperties.getMultiConnWaitTimeoutMillis()); // builder.setWarningBusy(easyQueryProperties.isWarningBusy()); // builder.setInsertBatchThreshold(easyQueryProperties.getInsertBatchThreshold()); // builder.setUpdateBatchThreshold(easyQueryProperties.getUpdateBatchThreshold()); // builder.setPrintSql(easyQueryProperties.isPrintSql()); // builder.setStartTimeJob(easyQueryProperties.isStartTimeJob()); // builder.setDefaultTrack(easyQueryProperties.isDefaultTrack()); // builder.setRelationGroupSize(easyQueryProperties.getRelationGroupSize()); // builder.setKeepNativeStyle(easyQueryProperties.isKeepNativeStyle()); // builder.setNoVersionError(easyQueryProperties.isNoVersionError()); // builder.setReverseOffsetThreshold(easyQueryProperties.getReverseOffsetThreshold()); }) .useDatabaseConfigure(new OracleDatabaseConfiguration()) .build(); return easyQueryClient; } @Bean public EasyEntityQuery easyEntityQuery(EasyQueryClient easyQueryClient){ return new DefaultEasyEntityQuery(easyQueryClient); } } \"]},\"124\":{\"h\":\"添加配置文件\",\"t\":[\"server: port: 8080 spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/easy-sharding-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root \"]},\"125\":{\"h\":\"添加控制器\",\"t\":[\" @RestController @RequestMapping(\\\"/my\\\") public class MyController { @Autowired private EasyEntityQuery easyEntityQuery; @GetMapping(\\\"/test\\\") public Object test() { return \\\"hello world\\\"; } } \"]},\"126\":{\"h\":\"多模块\",\"t\":[\"demo地址https://github.com/xuejmnet/eq-multi-module\",\"多模块项目需要注意的是需要在您需要使用APT技术也就是使用注解@EntityPorxy的模块添加sql-processor,更多问题可以参考常见问题\"]},\"127\":{\"h\":\"对象关系查询案例1 ✨\",\"t\":[\"为什么我们需要对象关系查询,为什么对象关系查询叫做nodsl一个好的 orm 的方向肯定是不仅仅是 dsl 语句,毕竟dsl语句只是强类型拼接sql,对象关系才是orm的精髓，但是如果一个orm只有对象关系查询那么这个orm也不是一个好的orm,一个好的orm应该是dsl+nodsl\",\"默认不使用 include 那么是不会自动查询导航属性,如果 select 返回导航属性那么自动会进行 include,如果是 VO 对象映射那么 include 也需要手动调用.\",\"以下情况不需要调用include或者includes\",\"返回对一导航属性而不是对多包括相关列,其中对一包括多对一,一对一\",\"返回导航属性本身.select(o->o.parent())\",\"返回导航属性的列比如.select(o->o.parent().id())\",\"返回对多的导航属性比如.select(o->o.roles().toList())\",\"说明!!!\",\"如果您的对象关系涉及到多对多请使用 1.10.29+的版本,在之前版本会有一个失误导致关系会提前在where中体现导致结果不正确.再次感谢用户←X→↑Y↓大佬的测试指出问题所在\"]},\"128\":{\"h\":\"关系对象\",\"t\":[\"接下来我将演示学校的关系信息,也就是\",\"班级,老师,学生,学生家庭地址\",\"其中一个班级有多个学生,一个班级有多个老师,一个老师也可以教多个班级,每个学生都有自己的家庭地址,每个学生都有多门自己选择的课程\"]},\"129\":{\"h\":\"案例 1\",\"t\":[\"查询班级下面存在学生姓金的班级\",\"List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { s.schoolStudents().any(stu -> { stu.name().likeMatchLeft(\\\"金\\\"); }); }).toList(); //上下写法一样 List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { s.schoolStudents().where(stu -> { stu.name().likeMatchLeft(\\\"金\\\"); }).any(); }).toList(); //联级穿透 flatElement后仅支持但条件判断,多条件会生成多个Exists函数 //所以如果存在多条件还是建议使用where来处理 flatElement支持多层级穿透 List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { //展开schoolStudents集合穿透到下方直接判断名称 s.schoolStudents().flatElement().name().likeMatchLeft(\\\"金\\\"); }).toList(); //上下两种都可以表示查询班级表过滤班级关联的学生并且存在学生姓金的 \",\"查询班级下面不存在学生姓金的班级\",\"List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { s.schoolStudents().none(stu -> { stu.name().likeMatchLeft(\\\"金\\\"); }); }).toList(); //上下两种都可以表示查询班级表过滤班级关联的学生并且不存在学生姓金的 List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { s.schoolStudents().where(stu -> { stu.name().likeMatchLeft(\\\"金\\\"); }).none(); }).toList(); \"]},\"130\":{\"h\":\"案例 2\",\"t\":[\"查询班级下面存在学生家地址是绍兴市的班级有哪些\",\" List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { s.schoolStudents().any(stu -> { stu.schoolStudentAddress().address().like(\\\"绍兴市\\\"); }); }).toList(); \"]},\"131\":{\"h\":\"案例 3\",\"t\":[\"查询班级下面存在学生姓金的有且只有 5 位的班级\",\" List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { s.schoolStudents().where(stu -> { stu.name().likeMatchLeft(\\\"金\\\"); }).count().eq(5L); }).toList(); \"]},\"132\":{\"h\":\"案例 4\",\"t\":[\"查询班级下面存在学生平均年龄小于等于 12 岁的班级(可以筛选如获取班级语文平均分不足 60 的同理)\",\" List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { s.schoolStudents().avg(stu->stu.age()).le(BigDecimal.valueOf(12)); }).toList(); \",\"查询班级下面存在学生为男生的平均年龄小于等于 12 岁的班级\",\" List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { s.schoolStudents().where(o->o.sex().eq(SexEnum.Male)).avg(stu->stu.age()).le(BigDecimal.valueOf(12)); }).toList(); \"]},\"133\":{\"h\":\"案例 5\",\"t\":[\"假设班级和学生没有直接关系\",\"查询班级下面老师的有姓金的并且获取班级和老师\",\" List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) //include和includes分别获取对一和对多的关系 include(s)的第二个参数可以筛选返回的数据结果如果不加就返回当前班级下的所有关联的老师 .includes(s -> s.schoolTeachers(),s->{ //获取对多的老师的信息但是必须是姓金的才返回 s.where(t->t.name().likeMatchLeft(\\\"金\\\")); }) .where(s -> { //判定班级下的老师有姓金的 s.schoolTeachers().where(teacher->{ teacher.name().likeMatchLeft(\\\"金\\\"); }).any(); }).toList(); \"]},\"134\":{\"h\":\"案例 6\",\"t\":[\"查询学生叫做小明的并且获取小明的所在班级和家庭地址\",\"List<SchoolStudent> list = easyEntityQuery.queryable(SchoolStudent.class) .include(s -> s.schoolStudentAddress()) .include(s -> s.schoolClass()) .where(s -> { s.name().eq(\\\"小明\\\"); }).toList(); \"]},\"135\":{\"h\":\"案例 7\",\"t\":[\"查询班级叫做一班的和班级下面的学生并且返回学生的家庭地址包括班级下的老师\",\" List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .includes(s -> s.schoolTeachers()) .includes(s -> s.schoolStudents(),x->{ x.include(y->y.schoolStudentAddress()); }) .where(s -> { s.name().eq(\\\"一班\\\"); }).toList(); \"]},\"136\":{\"h\":\"案例 8\",\"t\":[\"查询班级叫做一班的和班级下面的年龄最大的前三位学生并且返回学生的家庭地址包括班级下的老师\",\" List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) .includes(s -> s.schoolTeachers()) .includes(s -> s.schoolStudents(),x->{ x.include(y->y.schoolStudentAddress()) .orderBy(y->y.age().desc()) .limit(3); }) .where(s -> { s.name().eq(\\\"一班\\\"); }).toList(); \"]},\"137\":{\"h\":\"案例 9\",\"t\":[\"查询课程这个课程是一班的,因为课程目前没有直接和班级设置关系所以只能通过学生来实现\",\"//实现方式1 直接查询课程筛选出关联的班级是一班的 一次sql查询 List<SchoolCourse> courses = easyEntityQuery.queryable(SchoolCourse.class) .where(s -> { s.schoolStudent().schoolClass().name().like(\\\"一班\\\"); }).toList(); //easy-query版本2.0.3+ //实现方式2 直接查询一班然后拉取的时候额外查出所需要的学生下的课程 分多次sql查询 List<SchoolCourse> courses = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { s.name().like(\\\"一班\\\"); }) //注意如果返回结果是对多的集合需要调用flatElement来展开结果,如果是单个对象则不需要 //返回结果意思查询学生并且展开查询下面的课程然后展开 .toList(x -> x.schoolStudents().flatElement().schoolCourses().flatElement()); //方式2适合多对多情况下比如查询小明所拥有的菜单,因为小明和角色是多对多,角色和菜单也是多对多可以通过方式2当前也可以通过方式1 \"]},\"138\":{\"h\":\"案例 10\",\"t\":[\"返回 VO 对象自动 include 返回层级对象\",\"自动筛选返回结构化数据,要求对应的导航属性是一样的才可以比如数据库实体关联学生属性叫做shoolStudents那么 VO 也必须是这个名称\",\"//查询班级叫做一班的并且返回对应的VO并且会自动根据VO会拉取相应的数据 List<SchoolClassVO> listx= easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.name().like(\\\"一班\\\")) .selectAutoInclude(SchoolClassVO.class) .toList(); \"]},\"139\":{\"h\":\"案例9进阶\",\"t\":[\"手动创建VO是很复杂的一件事情,可以再easy-query:1.10.60^+插件0.0.48^快速生成嵌套结构化对象模型,\"]},\"140\":{\"h\":\"高级扩展\",\"t\":[\"额外过滤条件支持比如\",\"用户和书本的关系\",\"@Table(\\\"relation_user\\\") @EntityProxy @Data public class RelationUser implements ProxyEntityAvailable<RelationUser , com.easy.query.test.entity.relation.proxy.RelationUserProxy> { @Column(primaryKey = true) private String id; private String name; /** * book type=1 */ @Navigate(value = RelationTypeEnum.OneToMany,targetProperty =\\\"userId\\\", extraFilter = BookNavigateExtraFilterStrategy.class) private List<RelationBook> books; /** * 时间2022年以前的 */ @Navigate(value = RelationTypeEnum.OneToMany,targetProperty =\\\"userId\\\", extraFilter = BookNavigateExtraFilterStrategy.class) private List<RelationBook> historyBooks; } @Table(\\\"relation_teacher\\\") @EntityProxy @Data public class RelationTeacher implements ProxyEntityAvailable<RelationTeacher , RelationTeacherProxy> { @Column(primaryKey = true) private String id; private String name; /** * book type=2 */ @Navigate(value = RelationTypeEnum.OneToMany,targetProperty =\\\"userId\\\", extraFilter = BookNavigateExtraFilterStrategy.class) private List<RelationBook> books; } \",\"用户里面有两个书本导航属性,分别是用户有多本书和用户所拥有的历史书籍,其中因为书本分为学生版和老师版本所以在书本里面和当前用户关联的书籍只有type=1的才是，type=2的书籍是老师的书籍\",\"BookNavigateExtraFilterStrategy用来添加导航属性额外条件\",\"//@Component public class BookNavigateExtraFilterStrategy implements NavigateExtraFilterStrategy { @Override public SQLExpression1<WherePredicate<?>> getPredicateFilterExpression(NavigateBuilder builder) { //parentType EntityMetadata entityMetadata = builder.getNavigateOption().getEntityMetadata(); //导航属性类型 Class<?> navigatePropertyType = builder.getNavigateOption().getNavigatePropertyType(); //导航属性名称 String propertyName = builder.getNavigateOption().getPropertyName(); //因为这个策略是他通用的所以可以在这边判断当然你也可以选择定义多个策略不通用 if(Objects.equals(RelationUser.class,entityMetadata.getEntityClass())){ //如果是历史书籍那么应该是2022年以前的书籍 if(Objects.equals(\\\"historyBooks\\\",propertyName)){ LocalDateTime histroy = LocalDateTime.of(2022, 1, 1, 0, 0); return o->o.le(\\\"createTime\\\",histroy); } //否则就是用户的 return o->o.eq(\\\"bookType\\\",1); } else if(Objects.equals(RelationTeacher.class,entityMetadata.getEntityClass())){ //老师的责应该是type=2的 return o->o.eq(\\\"bookType\\\",2); } throw new RuntimeTimeException(); } } \",\"查询用户的书籍是否包含小学\",\" List<RelationUser> users = easyEntityQuery.queryable(RelationUser.class) .where(r -> r.books().any(book -> { book.name().like(\\\"小学\\\"); })) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `relation_user` t WHERE EXISTS (SELECT 1 FROM `relation_book` t1 WHERE (t1.`user_id` = t.`id` AND t1.`book_type` = ?) AND t1.`name` LIKE ? LIMIT 1) ==> Parameters: 1(Integer),%小学%(String) \",\"查询老师的书籍是否包含老师字样的书籍\",\" List<RelationTeacher> teacher = easyEntityQuery.queryable(RelationTeacher.class) .where(r -> r.books().any(book -> { book.name().like(\\\"老师\\\"); })) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `relation_teacher` t WHERE EXISTS (SELECT 1 FROM `relation_book` t1 WHERE (t1.`user_id` = t.`id` AND t1.`book_type` = ?) AND t1.`name` LIKE ? LIMIT 1) ==> Parameters: 2(Integer),%老师%(String) \",\"查询历史书籍\",\"//查询用户的历史书籍里面是否有一本名称包含小学的书 List<RelationUser> users = easyEntityQuery.queryable(RelationUser.class) .where(r -> r.historyBooks().any(book -> { book.name().like(\\\"小学\\\"); })) .toList(); //默认会添加2022年以前因为你查询的是历史书籍 ==> Preparing: SELECT t.`id`,t.`name` FROM `relation_user` t WHERE EXISTS (SELECT 1 FROM `relation_book` t1 WHERE (t1.`user_id` = t.`id` AND t1.`create_time` <= ?) AND t1.`name` LIKE ? LIMIT 1) ==> Parameters: 2022-01-01T00:00(LocalDateTime),%小学%(String) \"]},\"141\":{\"h\":\"对象关系查询案例2 ✨\",\"t\":[\"用户角色菜单信息表的展示\"]},\"142\":{\"h\":\"关系对象\",\"t\":[\"用户、角色、菜单典型的多对多关联关系(隐式子查询)\",\"其中用户和用户所在地址为一对一关系(隐式join)\"]},\"143\":{\"h\":\"多对多说明\"},\"144\":{\"h\":\"案例1\",\"t\":[\"查询杭州或绍兴的用户\",\" List<SysUser> userInHz = easyEntityQuery.queryable(SysUser.class) .where(s -> { //隐式子查询会自动join用户表和地址表 s.or(()->{ s.address().city().eq(\\\"杭州市\\\"); s.address().city().eq(\\\"绍兴市\\\"); }); }).toList(); SELECT t.`id`, t.`name`, t.`create_time` FROM `t_user` t LEFT JOIN `t_user_address` t1 ON t1.`user_id` = t.`id` WHERE ( t1.`city` = '杭州市' OR t1.`city` = '绍兴市' ) \",\"查询用户叫做小明的返回小明的姓名和小明所在地址\",\" List<Draft2<String, String>> userNameAndAddr = easyEntityQuery.queryable(SysUser.class) .where(s -> { s.name().eq(\\\"小明\\\"); }).select(s -> Select.DRAFT.of( s.name(), s.address().addr()//隐式join因为用户返回了地址标的地址信息 )).toList(); SELECT t.`name` AS `value1`, t1.`addr` AS `value2` FROM `t_user` t LEFT JOIN `t_user_address` t1 ON t1.`user_id` = t.`id` WHERE t.`name` = '小明' \",\"查询用户叫做小明的返回用户的姓名地址和角色数量\",\" List<Draft3<String, String, Long>> userNameAndAddrAndRoleCount = easyEntityQuery.queryable(SysUser.class) .where(s -> { s.name().eq(\\\"小明\\\"); }).select(s -> Select.DRAFT.of( s.name(), s.address().addr(), s.roles().count()//隐式子查询返回用户拥有的角色数量 )).toList(); SELECT t.`name` AS `value1`, t1.`addr` AS `value2`, (SELECT COUNT(*) FROM `t_role` t3 WHERE EXISTS ( SELECT 1 FROM `t_user_role` t4 WHERE t4.`role_id` = t3.`id` AND t4.`user_id` = t.`id` LIMIT 1 ) ) AS `value3` FROM `t_user` t LEFT JOIN `t_user_address` t1 ON t1.`user_id` = t.`id` WHERE t.`name` = '小明' \"]},\"145\":{\"h\":\"案例2\",\"t\":[\"查询用户下面存在角色是收货员的用户\",\" List<SysUser> 收货员 = easyEntityQuery.queryable(SysUser.class) .where(s -> { //筛选条件为角色集合里面有角色名称叫做收货员的 s.roles().where(role -> { role.name().eq(\\\"收货员\\\"); }).any(); }).toList(); SELECT t.`id`, t.`name`, t.`create_time` FROM `t_user` t WHERE EXISTS ( SELECT 1 FROM `t_role` t1 WHERE EXISTS ( SELECT 1 FROM `t_user_role` t2 WHERE t2.`role_id` = t1.`id` AND t2.`user_id` = t.`id` LIMIT 1 ) AND t1.`name` = '收货员' LIMIT 1 ) \"]},\"146\":{\"h\":\"案例3\",\"t\":[\"查询用户下面存在角色是XX员,并且存在个数大于5个的用户,就是说需要满足用户下面的角色是xx员的起码有5个及以上的\",\" List<SysUser> 收货员 = easyEntityQuery.queryable(SysUser.class) .where(s -> { //筛选条件为角色集合里面有角色名称叫做xx员的 s.roles().where(role -> { role.name().likeMatchRight(\\\"员\\\"); }).count().gt(5L);//count数量大于5个 }).toList(); -- 第1条sql数据 SELECT t.`id`, t.`name`, t.`create_time` FROM `t_user` t WHERE ( SELECT COUNT(*) FROM `t_role` t1 WHERE EXISTS ( SELECT 1 FROM `t_user_role` t2 WHERE t2.`role_id` = t1.`id` AND t2.`user_id` = t.`id` LIMIT 1 ) AND t1.`name` LIKE '%员' ) > 5 \"]},\"147\":{\"h\":\"案例4\",\"t\":[\"查询用户下面存在的任意角色不大于2022年创建的\",\" LocalDateTime localDateTime = LocalDateTime.of(2022, 1, 1, 0, 0); List<SysUser> 收货员 = easyEntityQuery.queryable(SysUser.class) .where(s -> { //筛选条件为角色集合里面有角色最大时间不能大于2022年的 s.roles().max(role -> role.createTime()).lt(localDateTime); }).toList(); SELECT t.`id`, t.`name`, t.`create_time` FROM `t_user` t WHERE ( SELECT MAX(t1.`create_time`) FROM `t_role` t1 WHERE EXISTS ( SELECT 1 FROM `t_user_role` t2 WHERE t2.`role_id` = t1.`id` AND t2.`user_id` = t.`id` LIMIT 1 ) ) < '2022-01-01 00:00' \"]},\"148\":{\"h\":\"案例5\",\"t\":[\"说明!!!\",\"如果你需要返回数据库表对象而不是自定义StructDTO那么需要自行include/includes否则框架不会返回对多的那一方\",\"查询每个用户和前3个最早创建的角色(支持分页)适用于评论和评论子表前N个\",\" List<SysUser> 收货员 = easyEntityQuery.queryable(SysUser.class) //前面的表达式表示要返回roles后面的表示如何返回返回按时间正序的3个 .includes(s -> s.roles(),x->{ x.orderBy(r->r.createTime().asc()).limit(3); }) .toList(); \"]},\"149\":{\"h\":\"案例6\",\"t\":[\"查询用户小明下面的菜单\",\"方式2和方式3生成的sql一样都是隐式子查询,方式1采用的是多次查询筛选用户获取用户下的菜单信息\",\" //方式1多次查询 List<SysMenu> menus = easyEntityQuery.queryable(SysUser.class) .where(s -> { s.name().eq(\\\"小明\\\"); }) .toList(x -> x.roles().flatElement().menus().flatElement()); //方式2一次次查询 List<SysMenu> menus = easyEntityQuery.queryable(SysMenu.class) .where(s -> { //判断菜单下的角色存在角色的用户叫做小明的 s.roles().any(role -> { role.users().any(user -> { user.name().eq(\\\"小明\\\"); }); }); }).toList(); //方式3展开查询 List<SysMenu> menus = easyEntityQuery.queryable(SysMenu.class) .where(s -> { //判断菜单下的角色存在角色的用户叫做小明的 //s.roles().flatElement().users().flatElement().name().eq(\\\"小明\\\");//如果只有一个条件name可以这么写 //flatElement表示放弃当前表的查询比如roles表因为没有条件所以不需要直接展开即可对roles下的users进行筛选 s.roles().flatElement().users().any(user -> { user.name().eq(\\\"小明\\\"); }); }).toList(); -- 第1条sql数据 SELECT t.`id`, t.`name`, t.`route`, t.`icon` FROM `t_menu` t WHERE EXISTS ( SELECT 1 FROM `t_role` t1 WHERE EXISTS ( SELECT 1 FROM `t_role_menu` t2 WHERE t2.`role_id` = t1.`id` AND t2.`menu_id` = t.`id` LIMIT 1 ) AND EXISTS ( SELECT 1 FROM `t_user` t3 WHERE EXISTS ( SELECT 1 FROM `t_user_role` t4 WHERE t4.`user_id` = t3.`id` AND t4.`role_id` = t1.`id` LIMIT 1 ) AND t3.`name` = '小明' LIMIT 1 ) LIMIT 1 ) \"]},\"150\":{\"h\":\"快速了解api🔥🔥🔥\"},\"151\":{\"h\":\"快速查询\",\"t\":[\"easy-query提供了一套快速查询的api,这套api支持sql模式的增删改查和join,也支持stream模式的对象函数查询扩展\"]},\"152\":{\"h\":\"快速筛选\",\"t\":[\"首先我们定义一个user用户信息对象\",\"@Table(\\\"t_user\\\") @Data @EntityProxy public class SysUser implements ProxyEntityAvailable<SysUser , SysUserProxy> { @Column(primaryKey = true) private String id; private String name; private LocalDateTime createTime; } \",\"筛选用户名称包含小明的\",\"easyEntityQuery.queryable(SysUser.class) .where(s->s.name().like(\\\"小明\\\")) .toList() \",\"筛选用户名称包含小明并且是2020年以前创建的\",\"easyEntityQuery.queryable(SysUser.class) .where(s->{ s.name().like(\\\"小明\\\"); s.createTime().lt(LocalDateTime.of(2020,1,1,0,0)) }) .toList() \",\"筛选用户名称包含小明的或者名称包含小红的\",\"easyEntityQuery.queryable(SysUser.class) .where(s->{ s.or(()->{ s.name().like(\\\"小明\\\"); s.name().like(\\\"小红\\\"); }) }) .toList() \",\"假设我们存在一张表是用户地址信息表\",\"@Table(\\\"t_user_address\\\") @Data @EntityProxy public class SysUserAddress implements ProxyEntityAvailable<SysUserAddress , SysUserAddressProxy> { @Column(primaryKey = true) private String id; private String userId; private String province; private String city; private String area; private String addr; } \",\"筛选用户叫做小明并且地址是绍兴的\",\" easyEntityQuery.queryable(SysUser.class) .leftJoin(SysUserAddress.class,(s,a)->s.id().eq(a.userId())) .where((s,a)->{ s.name().like(\\\"小明\\\"); a.area().eq(\\\"绍兴\\\"); }) .toList() \",\"说明!!!\",\"上述这个模式我们称之为显式join,就是手动将用户表和用户地址表进行join\",\"接下来我们在用户表上添加一个对象关联关系,一对一用户地址表,用来表明一个用户有一个地址\",\"@Table(\\\"t_user\\\") @Data @EntityProxy public class SysUser implements ProxyEntityAvailable<SysUser , SysUserProxy> { @Column(primaryKey = true) private String id; private String name; private LocalDateTime createTime; @Navigate(value = RelationTypeEnum.OneToOne,targetProperty = \\\"userId\\\") private SysUserAddress address; } \",\"接下来我们再次来筛选用户叫做小明并且地址是绍兴的\",\" easyEntityQuery.queryable(SysUser.class) .where(s->{ s.name().like(\\\"小明\\\"); s.address().area().eq(\\\"绍兴\\\"); }) .toList() \",\"说明!!!\",\"上述这个模式我们称之为隐式join,就是因为用户表里面已经约定好和用户地址的对应关系,所以无需手动join也可以实现筛选\",\"接下来我们给用户添加书籍,一个用户拥有多本书籍\",\"@Table(\\\"t_user_book\\\") @Data @EntityProxy @EasyAlias(\\\"user\\\") public class UserBook implements ProxyEntityAvailable<UserBook , UserBookProxy> { @Column(primaryKey = true) private String id; private String userId; private String name; private LocalDateTime createTime; private String author; } \",\"如果我们要查找哪些用户拥有《java高级开发》的书籍\",\"//第一种情况我们可以通过in子查询来实现 List<SysUser> list = easyEntityQuery.queryable(SysUser.class) .where(user -> { user.id().in( easyEntityQuery.queryable(UserBook.class) .where(u_book -> { u_book.name().like(\\\"java高级开发\\\"); }).select(u_book -> u_book.userId()) ); }).toList(); //第二种情况我们可以用exists List<SysUser> list = easyEntityQuery.queryable(SysUser.class) .where(user -> { user.expression().exists(()->{ return easyEntityQuery.queryable(UserBook.class) .where(u_book -> { u_book.userId().eq(user.id());//指定条件链接内外两张表 u_book.name().like(\\\"java高级开发\\\"); }); }); }).toList(); \",\"说明!!!\",\"上述这个模式我们称之为显式子查询,就是手动将用户表和用户书本表表通过子查询关联in或者exists的方式进行链接查询\",\"接下来我们在用户表示添加一个对象就是用户拥有的书本,用户和书本关系为一对多表名一个用户拥有多本书籍\",\"@Table(\\\"t_user\\\") @Data @EntityProxy public class SysUser implements ProxyEntityAvailable<SysUser , SysUserProxy> { @Column(primaryKey = true) private String id; private String name; private LocalDateTime createTime; @Navigate(value = RelationTypeEnum.OneToOne,targetProperty = \\\"userId\\\") private SysUserAddress address; @Navigate(value = RelationTypeEnum.OneToMany,targetProperty = \\\"userId\\\") private List<UserBook> books; } \",\"接下来我们继续查找哪些用户拥有《java高级开发》的书籍\",\" List<SysUser> list = easyEntityQuery.queryable(SysUser.class) .where(user -> { //any就是可以理解为stream查询中的anyMatch,也可以where(条件).any(); user.books().any(book -> { book.name().like(\\\"java高级开发\\\"); }); }).toList(); //上下两个方法都行 // List<SysUser> list = easyEntityQuery.queryable(SysUser.class) // .where(user -> { // user.books().where(book -> { // book.name().like(\\\"java高级开发\\\"); // }).any(); // }).toList(); //如果我们对子表的条件有且仅有一个的时候我们还可以简化any的写法 List<SysUser> list = easyEntityQuery.queryable(SysUser.class) .where(user -> { //展开元素进判断单个条件name user.books().flatElement().name().like(\\\"java高级开发\\\"); }).toList(); \",\"说明!!!\",\"上述这个模式我们称之为隐式子查询,就是通过模型对象关系自动动将用户表和用户书本表表通过关联关系进行关联查询\",\"如果我们需要查询用户至少有两本金庸小说的书籍\",\"//显式子查询 List<SysUser> list = easyEntityQuery.queryable(SysUser.class) .where(user -> { user.expression().subQuery(() -> { return easyEntityQuery.queryable(UserBook.class) .where(u_book -> { u_book.author().eq(\\\"金庸\\\"); u_book.userId().eq(user.id()); }).selectCount(); }).gt(2L); }).toList(); //隐式子查询 List<SysUser> list = easyEntityQuery.queryable(SysUser.class) .where(user -> { user.books().where(book -> { book.author().eq(\\\"金庸\\\"); }).count().gt(2L); }).toList(); \",\"上下两个查询高判立下下面的更加优雅更加通俗易懂\"]},\"153\":{\"h\":\"安装插件提高开发体验\",\"t\":[\"经过第一章节 《快速开始》 的快速开始体验,我相信你应该已经把项目跑起来了。\",\"那么你是否对这种开发感觉有点麻烦,毕竟需要先build-project,然后还需要刷新Maven然后还要添加接口,那么是否有办法可以简化这些操作呢,答案是有的就是这一章节的插件\",\"说明!!!\",\"如果您非旗舰版idea可能无法使用当前插件您可以进群联系作者,我会给您编译一个社区版本支持的插件\"]},\"154\":{\"h\":\"安装插件\",\"t\":[\"插件的安装可以帮助我们针对自动生成的文件进行快速管理无感.\"]},\"155\":{\"h\":\"快速生成接口\",\"t\":[\"说明!!!\",\"如果EasyQueryImplement没有效果请检查类是否添加了@EntityProxy或者@EntityFileProxy\",\"说明!!!\",\"插件的功能并非这些我们将会在后续的章节对插件的使用进行详细介绍目前您只需要知道这两点就可以解决掉上述的apt缺点和您的疑虑\"]},\"156\":{\"h\":\"SpringBoot快速开始🔥🔥🔥\",\"t\":[\"一般我们创建springboot项目有两种一种是单模块,一种是多模块,接下来我会分别实现这两种模块下easy-query应该如何集成\"]},\"157\":{\"h\":\"单模块\",\"t\":[\"首先我们创建springboot项目或者maven项目 具体的pom.xml如下\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.17</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>org.easy-query</groupId> <artifactId>springbootdemo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>springbootdemo</name> <description>springbootdemo</description> <properties> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> <maven.install.skip>true</maven.install.skip> <maven.deploy.skip>true</maven.deploy.skip> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> <!--druid依赖--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.21</version> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.31</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.18</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>2.0.25</version> </dependency> <!-- 不需要在引入因为starter已经引入了 --> <!-- <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${project.version}</version> <scope>compile</scope> </dependency> --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-springboot-starter</artifactId> <version>2.0.25</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> \",\"配置application.yml\",\"server: port: 8080 spring: profiles: active: dev datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root #配置文件 easy-query: #是否启动默认true enable: true #支持的数据库 database: mysql #对象属性和数据库列名的转换器 name-conversion: underlined #当执行物理删除是否报错,true表示报错,false表示不报错,默认true,如果配置为true,可以通过allowDeleteStament来实现允许 delete-throw: true #是否打印sql 默认true 需要配置log信息才可以 默认实现sl4jimpl print-sql: true #配置为默认追踪,但是如果不添加@EasyQueryTrack注解还是不会启用所以建议开启这个如果需要只需要额外添加注解即可 default-track: true #sqlNativeSegment输入和格式化无需处理单引号会自动处理为双单引号 keep-native-style: true \",\"编写数据库对象\",\"手动实现ProxyEntityAvailable接口或者使用插件实现(推荐)\",\"说明!!!\",\"使用插件就右键Generate/生成选择EntityQueryImplement(菜单如果不知道就是生成get/set的地方,还是不知道就是windows就是jalt+insert,mac就是command+n)TopicProxy如果您没有安装插件那么就是在编写好上述代码后进行build会在target目录生成,如果生成后无法引用则标记annotations目录为generated sources root,具体请看下方截图\",\"//import com.easy.query.core.annotation.Table; //import com.easy.query.core.annotation.Column; //@Data //如果您有lombok @Table(\\\"t_topic\\\")//注意必须使用easy-query的注解 @EntityProxy public class Topic implements ProxyEntityAvailable<Topic,TopicProxy>{ @Column(primaryKey = true)//注意必须使用easy-query的注解 private String id; private Integer stars; private String title; private String name; private LocalDateTime createTime; //get set方法... } \",\"说明!!!\",\"如果您有洁癖不想实现这个接口也是可以的,就是在使用的时候使用easyProxyQuery而不是easyEntityQuery 只是有些框架是一套试题的情况下那么不需要实现接口也可以用entityQuery的api仅此而已正常使用还是推荐大家实现ProxyEntityAvailable接口 不是很推荐使用起来会稍微麻烦一点点击查看两者的区别 不是很推荐使用起来会稍微麻烦一点点击查看两者的区别 不是很推荐使用起来会稍微麻烦一点点击查看两者的区别\",\"//easyEntityQuery.queryable(SysUser.class) //easyProxyQuery.queryable(SysUserProxy.createTable()) \",\"依赖注入easyEntityQuery即可完美使用\",\"//依赖注入 //强类型api @Autowired private EasyEntityQuery easyEntityQuery;//(强力推荐🔥🔥🔥) //强类型api @Autowired private EasyProxyQuery easyProxyQuery;//(强力推荐🔥🔥🔥) //动态类型api @Autowired private EasyQueryClient easyQueryClient;//通过字符串属性方式来实现查询 \"]},\"158\":{\"h\":\"多模块\",\"t\":[\"多模块和单模块的区别就是在需要生成Proxy的模块引入sql-processor包即可\",\"<dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>last-version</version> </dependency> \",\"如果不清楚具体样例可以参考如下源码\",\"demo地址https://github.com/xuejmnet/eq-multi-module\",\"多模块项目需要注意的是需要在您需要使用APT技术也就是使用注解@EntityPorxy的模块添加sql-processor,更多问题可以参考常见问题\",\"报错!!!\",\"如果遇到build后报错java:程序包xxxxxxxx.proxy不存在\",\"查看是否引入sql-processor包\",\"设置idea的注解处理器 Build,Execution,Deployment,Compiler,Annotation Processors 选择Enable annotation processing 并且选择Obtain processors from project classpath\",\"如果您之前已经存在annotationProcessorPaths那么你可以在里面添加eq的apt处理，如果未使用过那么还是建议需要apt的模块单独引入sql-processor 以下配置那么在各个独立module处不需要在引入sql-processor\",\"<plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <annotationProcessorPaths> <!-- 注意顺序 --> <path> <!-- lombok... --> </path> <path> <!-- mapstruct... --> </path> <path> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </path> </annotationProcessorPaths> </configuration> </plugin> \"]},\"159\":{\"h\":\"Main函数快速开始🔥🔥🔥\"},\"160\":{\"h\":\"简介\",\"t\":[\"在使用前您需要知晓目前1.8.0+版本的easy-query提供了3中api机制分别是lambda、property、entity其中每个api都有自己的特点,其中easyEntityQuery是最新开发的api,使用起来非常顺畅流畅,非常推荐,3种模式可以在一个应用里面共存\",\"如果您希望直接快速体验可以下载对应代码jdk17+springboot3.1.0\",\"demo地址https://github.com/xuejmnet/eq-multi-module\"]},\"161\":{\"h\":\"EntityQuery\",\"t\":[\"EasyEntityQuery接口为EntityQuery暴露给用户的crudapi接口,我们的主要操作处理都是通过该接口实现的,要实现这个功能有以下两种方式\",\"如果是多模块那么可以再每个需要生成proxy的module处的pom.xml引入sql-processor包或者在项目maven插件处进行配置\",\"具体的easy-query包版本可以在文档首页进行查看当前是 最新版本easy-query 如果无法看到具体版本可以去github或者gitee源码右侧有对应的release版本\"]},\"162\":{\"h\":\"安装插件(可选)\",\"t\":[\"可以提高用户体验\",\"新建一个java8以上的任意项目我们创建maven的空项目即可然后引入对应的包,sql-core提供了property的api模式,sql-api-proxy则是真正的针对property的模式增加的强类型entity模式的包\"]},\"163\":{\"h\":\"依赖注入\",\"t\":[\" <dependencies> <!-- mysql方言 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> <!-- entity-query的api包 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> </dependency> <!-- entity-query的apt包 如果你是多模块只需要在生成apt的对象模块处需要引入 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </dependency> <!-- mysql驱动 --> <!-- 选择自己的合适版本 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.17</version> </dependency> <!-- 数据源 --> <!-- 选择自己的合适版本 --> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <!-- 选择自己的合适版本 --> <!-- <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> --> </dependencies> \"]},\"164\":{\"h\":\"数据库表对象\"},\"165\":{\"h\":\"生成apt文件\",\"t\":[\"如果存在如下情况无法获取到TopicProxy对象那么就将目录标记为生成目录\",\"说明!!!\",\"如果您还是不行那么建议您点击idea右侧的maven刷新按钮进行刷新即可\",\"说明!!!\",\"如果您第一步安装了插件那么在你鼠标移出当前entity的编辑区域那么就会自动生成Proxy类或者呼出get set的界面点击CompileCurrentFile\"]},\"166\":{\"h\":\"添加数据库对象接口\",\"t\":[\"说明!!!\",\"如果您有洁癖不想实现这个接口也是可以的,就是在使用的时候使用easyProxyQuery而不是easyEntityQuery 只是有些框架是一套试题的情况下那么不需要实现接口也可以用entityQuery的api仅此而已正常使用还是推荐大家实现ProxyEntityAvailable接口 不是很推荐使用起来会稍微麻烦一点点击查看两者的区别 不是很推荐使用起来会稍微麻烦一点点击查看两者的区别 不是很推荐使用起来会稍微麻烦一点点击查看两者的区别\",\"//easyEntityQuery.queryable(SysUser.class) //easyProxyQuery.queryable(SysUserProxy.createTable()) \",\"实现接口即可\",\"说明!!!\",\"如果您第一步安装了插件那么可以在呼出get set的目录点击EasyQueryImplements自动实现接口\",\"说明!!!\",\"2.0.15+版本框架不需要实现proxyTableClass方法，idea-plugin插件在0.0.57后也将不会生成该方法 2.0.15+版本框架不需要实现proxyTableClass方法，idea-plugin插件在0.0.57后也将不会生成该方法 2.0.15+版本框架不需要实现proxyTableClass方法，idea-plugin插件在0.0.57后也将不会生成该方法 如果您的项目是多模块那么只需要在需要使用@EntityProxy注解的模块下使用sql-processor即可\",\"说明!!!\",\"如果出现no primary key或者not found [id] mapping column name之类的错误请排查lombok是否生效,是否存在get set方法\"]},\"167\":{\"h\":\"运行\",\"t\":[\"说明!!!\",\"如果出现无法build或者启动那么请确认是否引入了sql-processor包\",\" public class Main { public static void main(String[] args) { HikariDataSource dataSource = new HikariDataSource(); dataSource.setJdbcUrl(\\\"jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\"); dataSource.setUsername(\\\"root\\\"); dataSource.setPassword(\\\"root\\\"); dataSource.setDriverClassName(\\\"com.mysql.cj.jdbc.Driver\\\"); dataSource.setMaximumPoolSize(20); //采用控制台输出打印sql LogFactory.useStdOutLogging(); //property的api EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setPrintSql(true); op.setKeepNativeStyle(true); }) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); EasyEntityQuery easyEntityQuery = new DefaultEasyEntityQuery(easyQueryClient); //不需要实现接口但是使用方式有点区别 EasyProxyQuery easyProxyQuery = new DefaultEasyProxyQuery(easyQueryClient); //根据id查询第一条 Topic topic1 = easyEntityQuery.queryable(Topic.class) .whereById(\\\"1\\\").firstOrNull(); //根据id查询并且断言仅一条 Topic topic2 = easyEntityQuery.queryable(Topic.class) .whereById(\\\"1\\\").singleOrNull(); //根据id查询自定义条件返回第一条 Topic topic3 = easyEntityQuery.queryable(Topic.class) .where(o -> { o.id().eq(\\\"1\\\"); }) .firstOrNull(); //根据条件返回符合的集合默认ArrayList实现 List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.id().eq(\\\"1\\\"); }) .toList(); //判断小明是否存在 boolean exists= easyEntityQuery.queryable(Topic.class).where(o->o.name().like(\\\"小明\\\")).any(); //断言小明是否存在 easyEntityQuery.queryable(Topic.class).where(o->o.name().like(\\\"小明\\\")).required(\\\"未找到小明\\\"); System.out.println(\\\"Hello world!\\\"); } } //打印的sql ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? LIMIT 1 ==> Parameters: 1(String) <== Time Elapsed: 14(ms) <== Total: 1 \",\"报错!!!\",\"如果遇到build后报错java:程序包xxxxxxxx.proxy不存在\",\"查看是否引入sql-processor包\",\"设置idea的注解处理器 Build,Execution,Deployment,Compiler,Annotation Processors 选择Enable annotation processing 并且选择Obtain processors from project classpath\",\"如果您之前已经存在annotationProcessorPaths那么你可以在里面添加eq的apt处理，如果未使用过那么还是建议需要apt的模块单独引入sql-processor 以下配置那么在各个独立module处不需要在引入sql-processor\",\"<plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <annotationProcessorPaths> <!-- 注意顺序 --> <path> <!-- lombok... --> </path> <path> <!-- mapstruct... --> </path> <path> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </path> </annotationProcessorPaths> </configuration> </plugin> \"]},\"168\":{\"h\":\"单个查询\",\"t\":[\" //根据id查询第一条 Topic topic1 = easyEntityQuery.queryable(Topic.class) .whereById(\\\"1\\\").firstOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? LIMIT 1 ==> Parameters: 1(String) <== Time Elapsed: 10(ms) <== Total: 1 //根据id查询返回自定义列 Topic topic1 = easyEntityQuery.queryable(Topic.class) .whereById(\\\"1\\\").select(t->t.FETCHER.id().stars().fetchProxy()).firstOrNull(); ==> Preparing: SELECT `id`,`stars` FROM `t_topic` WHERE `id` = ? LIMIT 1 ==> Parameters: 1(String) <== Time Elapsed: 10(ms) <== Total: 1 //根据id查询并且断言仅一条 Topic topic2 = easyEntityQuery.queryable(Topic.class) .whereById(\\\"1\\\").singleOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? ==> Parameters: 1(String) <== Time Elapsed: 6(ms) <== Total: 1 //根据id查询自定义条件返回第一条 Topic topic3 = easyEntityQuery.queryable(Topic.class) .where(o -> { o.id().eq(\\\"1\\\"); }) .firstOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? LIMIT 1 ==> Parameters: 1(String) <== Time Elapsed: 7(ms) <== Total: 1 //根据id查询 Topic topic2 = easyEntityQuery.queryable(Topic.class) .findOrNull(\\\"1\\\"); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? ==> Parameters: 1(String) <== Time Elapsed: 6(ms) <== Total: 1 \"]},\"169\":{\"h\":\"返回列表\",\"t\":[\"List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.id().eq(\\\"1\\\"); }) .toList(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? ==> Parameters: 1(String) <== Time Elapsed: 10(ms) <== Total: 1 \"]},\"170\":{\"h\":\"count查询\",\"t\":[\" long count = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"11\\\"); o.createTime().le(LocalDateTime.now()); }).count(); int intCount = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"11\\\"); o.createTime().le(LocalDateTime.now()); }).intCount(); ==> Preparing: SELECT COUNT(*) FROM `t_topic` WHERE `title` LIKE ? AND `create_time` <= ? ==> Parameters: %11%(String),2023-12-16T14:17:04.065(LocalDateTime) <== Time Elapsed: 2(ms) <== Total: 1 \"]},\"171\":{\"h\":\"返回自定义列\",\"t\":[\" @Data @EntityProxy public class TopicVO{ private String id; private String title; } List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o->{ o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022,2,1,3,4)); }) .orderBy(o -> { o.id().asc(); o.createTime().desc(); }) .select(o->new TopicVOProxy() .id().set(o.id()) .title().set(o.title()) ) .toList(); //上下两种映射都行 List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o->{ o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022,2,1,3,4)); }) .orderBy(o -> { o.id().asc(); o.createTime().desc(); }) .select(TopicVO.class) //自动映射VO有的属性 .toList(); ==> Preparing: SELECT t.`id` as `id`,t.`title` as `title` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? ORDER BY t.`id` ASC,t.`create_time` DESC ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) <== Time Elapsed: 4(ms) <== Total: 98 List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022, 2, 1, 3, 4)); }) .orderBy(o -> { o.id().asc(); o.createTime().desc(); }) .select(o -> new TopicProxy() .selectAll(o) .selectIgnores(o.id()) ) .toList(); //上下两种映射都行 List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o->{ o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022,2,1,3,4)); }) .orderBy(o -> { o.id().asc(); o.createTime().desc(); }) .select(Topic.class,o->Select.of( o.FETCHER.allFieldsExclude(o.id()) )) .toList(); ==> Preparing: SELECT t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? ORDER BY t.`id` ASC,t.`create_time` DESC ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 98 \"]},\"172\":{\"h\":\"分组\",\"t\":[\" List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022,2,1,3,4)); }) //会生成{key1:x,key2:x.... group:{t1:xx,t2:xx}}其中key1...keyn表示key默认支持10个 t1...tn表示前面的表 //无论join了多少张表group后全部只有一个入参参数其余参数在group属性里面 .groupBy(o -> GroupKeys.TABLE1.of(o.id())) .select(o -> new TopicProxy() .id().set(o.key1())//key1就是id .stars().set(o.intCount())//COUNT(*)返回int 默认返回long类型 ) .toList(); List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o->{ o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022,2,1,3,4)); }) //会生成{key1:x,key2:x.... group:{t1:xx,t2:xx}}其中key1...keyn表示key默认支持10个 t1...tn表示前面的表 //无论join了多少张表group后全部只有一个入参参数其余参数在group属性里面 .groupBy(o-> GroupKeys.TABLE1.of(o.id())) .select(Topic.class,o->{ TopicProxy r = new TopicProxy(); r.id().set(o.key1());//key1就是id r.stars().set(o.intCount());//COUNT(*)返回int 默认返回long类型 return r; }) .toList(); //上下两种映射都行 List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o->{ o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022,2,1,3,4)); }) //会生成{key1:x,key2:x.... group:{t1:xx,t2:xx}}其中key1...keyn表示key默认支持10个 t1...tn表示前面的表 //无论join了多少张表group后全部只有一个入参参数其余参数在group属性里面 .groupBy(o-> GroupKeys.TABLE1.of(o.id())) .select(Topic.class,o->Select.of( o.key1(), o.intCount().as(Topic::getStars) )) .toList(); ==> Preparing: SELECT t.`id` AS `id`,COUNT(*) AS `stars` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? GROUP BY t.`id` ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) //草稿模式无需定义返回结果,返回草稿支持1-10 Draft1-Draft10 List<Draft3<String, Integer, Integer>> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022, 2, 1, 3, 4)); }) .groupBy(o -> GroupKeys.TABLE1.of(o.id())) .select(o -> new TopicProxy() .id().set(o.key1())//key1就是id .stars().set(o.intCount())//COUNT(*)返回int 默认返回long类型 ) .select(o -> Select.DRAFT.of( o.id().nullOrDefault(\\\"123\\\"),//如果为空就赋值123 o.stars(), o.stars().abs()//取绝对值 )) .toList(); ==> Preparing: SELECT IFNULL(t1.`id`,?) AS `value1`,t1.`stars` AS `value2`,ABS(t1.`stars`) AS `value3` FROM (SELECT t.`id` AS `id`,COUNT(*) AS `stars` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? GROUP BY t.`id`) t1 ==> Parameters: 123(String),%123%(String),2022-02-01T03:04(LocalDateTime) \"]},\"173\":{\"h\":\"分页\",\"t\":[\" EasyPageResult<Topic> pageResult = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022, 2, 1, 3, 4)); }) .orderBy(o -> { o.id().asc(); o.createTime().desc(); }) .select(o -> new TopicProxy().selectExpression(o.id(),o.title())) //.select(o->new TopicProxy())//全属性映射等于selectAll(o) .toPageResult(1, 20); ==> Preparing: SELECT COUNT(*) FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`title` FROM `t_topic` t WHERE t.`title` LIKE ? AND t.`create_time` >= ? ORDER BY t.`id` ASC,t.`create_time` DESC LIMIT 20 ==> Parameters: %123%(String),2022-02-01T03:04(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 20 \"]},\"174\":{\"h\":\"join多表查询\",\"t\":[\" @Data @EntityProxy public class TopicVO{ private String id; private String title; private Integer stars; } List<Topic> list = easyEntityQuery.queryable(Topic.class) .leftJoin(Topic.class, (t, t1) -> {//第一个参数t表示第一个表,第二个参数t1表示第二个表 t.id().eq(t1.id());// ON t.`id` = t1.`id` }) .where((t, t1) -> { t.title().like(\\\"11\\\"); t1.createTime().le(LocalDateTime.of(2021, 1, 1, 1, 1)); }) .select((t, t1) -> new TopicVOProxy() .id().set(t.id()) .stars().set(t.stars()) .title().set(t1.id()) ).toList(); ==> Preparing: SELECT t.`id` AS `id`,t.`stars` AS `stars`,t1.`id` AS `title` FROM `t_topic` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` WHERE t.`title` LIKE ? AND t1.`create_time` <= ? ==> Parameters: %11%(String),2021-01-01T01:01(LocalDateTime) <== Time Elapsed: 12(ms) <== Total: 0 List<TopicTypeVO> vo = easyEntityQuery.queryable(BlogEntity.class) .leftJoin(SysUser.class, (b, s2) -> b.id().eq(s2.id())) .select(TopicTypeVO.class, (b1, s2) -> Select.of( b1.FETCHER.id().content().createTime().as(\\\"createTime\\\"), s2.FETCHER.address().idCard() )).toList(); ==> Preparing: SELECT t.`id`,t.`content`,t.`create_time` AS `create_time`,t1.`address`,t1.`id_card` FROM `t_blog` t LEFT JOIN `easy-query-test`.`t_sys_user` t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? ==> Parameters: false(Boolean) \"]},\"175\":{\"h\":\"排序\",\"t\":[\" List<Topic> list = easyEntityQuery.queryable(Topic.class) .leftJoin(Topic.class, (t, t1) -> { t.id().eq(t1.id()); }) .orderBy((t, t1) -> { t.id().asc(); t1.createTime().desc(); }) //查询t表的所有除了id和title,并且返回t1的title取别名为content .select((t,t1) -> new TopicProxy() .selectAll(t) .selectIgnores(t.id(),t.title()) .id().set(t1.title()) ) .toList(); ==> Preparing: SELECT t.`stars`,t.`create_time`,t1.`title` AS `id` FROM `t_topic` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` ORDER BY t.`id` ASC,t1.`create_time` DESC <== Time Elapsed: 14(ms) <== Total: 101 //使用草稿无需定义返回结果 List<Draft3<Integer, LocalDateTime, String>> list = easyEntityQuery.queryable(Topic.class) .leftJoin(Topic.class, (t, t1) -> { t.id().eq(t1.id()); }) .orderBy((t, t1) -> { t.id().asc(); t1.createTime().desc(); }) .select((t, t1) -> Select.DRAFT.of( t.stars(), t.createTime(), t1.title() )) .toList(); ==> Preparing: SELECT t.`stars` AS `value1`,t.`create_time` AS `value2`,t1.`title` AS `value3` FROM `t_topic` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` ORDER BY t.`id` ASC,t1.`create_time` DESC \"]},\"176\":{\"h\":\"额外配置\",\"t\":[\"如果您之前已经存在annotationProcessorPaths那么你可以在里面添加eq的apt处理，如果未使用过那么还是建议需要apt的模块单独引入sql-processor 以下配置那么在各个独立module处不需要在引入sql-processor\",\"<plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <annotationProcessorPaths> <!-- 注意顺序 --> <path> <!-- lombok... --> </path> <path> <!-- mapstruct... --> </path> <path> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </path> </annotationProcessorPaths> </configuration> </plugin> \"]},\"177\":{\"h\":\"SQL查询 ✨\",\"t\":[\"前面一个篇章我们将讲解了对象查询,让我们通过对象关系可以非常优雅的实现数据筛选和复杂的数据筛选逻辑,但是对象查询并不是万能的,所以sql查询也是不可或缺的一个完整的orm应该是sql+对象查询\"]},\"178\":{\"h\":\"查询\"},\"179\":{\"h\":\"单个查询\",\"t\":[\"按id查询\",\"//结果不能为null按单主键查询 BlogEntity blog = easyEntityQuery.queryable(BlogEntity.class) .findNotNull(\\\"1\\\"); //结果可为null按单主键查询 BlogEntity blog = easyEntityQuery.queryable(BlogEntity.class) .findOrNull(\\\"1\\\"); //添加主键条件结果不能为null BlogEntity blog = easyEntityQuery.queryable(BlogEntity.class) .whereById(\\\"1\\\") .firstNotNull(); //添加主键条件结果可为null BlogEntity blog = easyEntityQuery.queryable(BlogEntity.class) .whereById(\\\"1\\\") .firstOrNull(); //添加主键条件结果不能为null且至多一条 BlogEntity blog = easyEntityQuery.queryable(BlogEntity.class) .whereById(\\\"1\\\") .singleNotNull(); //添加主键条件结果可为null且至多一条 BlogEntity blog = easyEntityQuery.queryable(BlogEntity.class) .whereById(\\\"1\\\") .singleOrNull(); \"]},\"180\":{\"h\":\"集合查询\",\"t\":[\"//返回集合不会为null,类型为ArrayList List<BlogEntity> blogs = easyEntityQuery.queryable(BlogEntity.class).toList(); //添加自定义筛选条件返回集合不会为null,类型为ArrayList List<BlogEntity> blogs = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }).toList(); \"]},\"181\":{\"h\":\"判断结果是否存在\",\"t\":[\"boolean any = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }).any(); \"]},\"182\":{\"h\":\"聚合结果\",\"t\":[\"long count = easyEntityQuery.queryable(BlogEntity.class).count(); int count = easyEntityQuery.queryable(BlogEntity.class).intCount(); //添加筛选条件对star列进行求和返回结果或者null BigDecimal bigDecimal = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }).sumBigDecimalOrNull(o -> o.star()); //区别 BigDecimal版本防止溢出 Integer integer = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }).sumOrNull(o -> o.star()); //添加筛选条件对star列进行求和返回结果或者默认值(BigDecimal.ZERO) BigDecimal bigDecimal = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }).sumBigDecimalOrDefault(o -> o.star(),BigDecimal.ZERO); Integer integer = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }).sumOrDefault(o -> o.star(),0); //avg max min 等函数同理 \"]},\"183\":{\"h\":\"排序\",\"t\":[\"//按创建时间asc排序 List<BlogEntity> list = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }).orderBy(b -> b.createTime().asc()).toList(); //按创建时间asc,star desc排序 List<BlogEntity> list = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }).orderBy(b -> { b.createTime().asc(); b.star().desc(); }).toList(); //支持null last或者first支持所有数据库自动实现对应方言 List<BlogEntity> list = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }).orderBy(b -> { b.createTime().asc(OrderByModeEnum.NULLS_LAST); b.star().desc(OrderByModeEnum.NULLS_FIRST); }).toList(); \"]},\"184\":{\"h\":\"分组筛选\",\"t\":[\"//按title聚合返回title和count结果 List<Draft2<String, Long>> list = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }) .groupBy(b -> GroupKeys.TABLE1.of(b.title())) .select(group -> Select.DRAFT.of( group.key1(), group.count() )).toList(); List<Draft2<String, Long>> list = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }) .groupBy(b -> GroupKeys.TABLE1.of(b.title())) .having(group -> group.count().gt(1L))//having count(*) > 1 .select(group -> Select.DRAFT.of( group.key1(), group.count() )).toList(); List<Draft2<String, Long>> list = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }) .groupBy(b -> GroupKeys.TABLE1.of(b.title())) .having(group -> group.groupTable().createTime().max().eq(LocalDateTime.now())) //having max(time) = now() .select(group -> Select.DRAFT.of( group.key1(), group.count() )).toList(); //返回max或者min List<Draft2<String, String>> list = easyEntityQuery.queryable(BlogEntity.class) .where(b -> { b.title().like(\\\"123\\\"); b.star().gt(1); }) .groupBy(b -> GroupKeys.TABLE1.of(b.title())) .having(group -> group.count().gt(1L))//having count(*) > 1 .select(group -> Select.DRAFT.of( group.key1(), group.groupTable().id().max() //group.max(group.groupTable().id())//上下都行 )).toList(); \"]},\"185\":{\"h\":\"自定义返回结果\",\"t\":[\"临时结果,支持后续链式结果存储到value1-value10强类型\",\"SELECT t.`id` AS `value1`, t.`phone` AS `value2`, t1.`title` AS `value3` FROM `t_sys_user` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = false AND t.`phone` = t1.`title` WHERE t.`depart_name` LIKE '%123%' AND t1.`star` > 1 List<Draft3<String, String, String>> list = easyEntityQuery.queryable(SysUser.class) .leftJoin(BlogEntity.class, (s, b2) -> s.phone().eq(b2.title())) .where((s1, b2) -> { s1.departName().like(\\\"123\\\"); b2.star().gt(1); }) .select((s1, b2) -> Select.DRAFT.of( s1.id(), s1.phone(), b2.title() )).toList(); \",\"map链式结果\",\" -- 第1条sql数据 SELECT t.`id` AS `id`, t.`phone` AS `phone`, t1.`star` AS `star` FROM `t_sys_user` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = false AND t.`phone` = t1.`title` WHERE t.`depart_name` LIKE '%123%' AND t1.`star` > 1 MapKey<String> id = MapKeys.stringKey(\\\"id\\\"); MapKey<String> phone = MapKeys.stringKey(\\\"phone\\\"); MapKey<Integer> star = MapKeys.integerKey(\\\"star\\\"); List<Map<String, Object>> list = easyEntityQuery.queryable(SysUser.class) .leftJoin(BlogEntity.class, (s, b2) -> s.phone().eq(b2.title())) .where((s1, b2) -> { s1.departName().like(\\\"123\\\"); b2.star().gt(1); }) .select((s1, b2) -> { MapTypeProxy map = new MapTypeProxy(); map.put(id, s1.id()); map.put(phone, s1.phone()); map.put(star, b2.star()); return map; }).toList(); \",\" SELECT t2.`phone` AS `value1`, t2.`star` AS `value2`, t3.`create_time` AS `value3` FROM (SELECT t.`id` AS `id`, t.`phone` AS `phone`, t1.`star` AS `star` FROM `t_sys_user` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = false AND t.`phone` = t1.`title` WHERE t.`depart_name` LIKE '%123%' AND t1.`star` > 1) t2 LEFT JOIN `t_topic` t3 ON t2.`id` = t3.`id` MapKey<String> id = MapKeys.stringKey(\\\"id\\\"); MapKey<String> phone = MapKeys.stringKey(\\\"phone\\\"); MapKey<Integer> star = MapKeys.integerKey(\\\"star\\\"); List<Draft3<String, Integer, LocalDateTime>> list = easyEntityQuery.queryable(SysUser.class) .leftJoin(BlogEntity.class, (s, b2) -> s.phone().eq(b2.title())) .where((s1, b2) -> { s1.departName().like(\\\"123\\\"); b2.star().gt(1); }) .select((s1, b2) -> { MapTypeProxy map = new MapTypeProxy(); map.put(id, s1.id()); map.put(phone, s1.phone()); map.put(star, b2.star()); return map; }) .leftJoin(Topic.class, (m, t) -> m.get(id).eq(t.id())) .select((m, t) -> Select.DRAFT.of( m.get(phone), m.get(star), t.createTime() )).toList(); \",\"自定义返回结果不支持后续链式只支持最终结果\",\"//返回当前对象只查询id，content，createTime List<BlogEntity> list = easyEntityQuery.queryable(BlogEntity.class) .select(b -> b.FETCHER.id().content().createTime().fetchProxy()) .toList(); //映射到VO List<BlogEntityVO1> list1 = easyEntityQuery.queryable(BlogEntity.class) .select(BlogEntityVO1.class).toList(); //映射到VO返回设置为查询id，content，createTime List<BlogEntityVO1> list1 = easyEntityQuery.queryable(BlogEntity.class) .select(BlogEntityVO1.class, b -> Select.of( b.FETCHER.id().content().createTime() )).toList(); //映射到VO返回设置为查询id，content AS content1，createTime AS createTime1 //其中content1和createTime1为BlogEntityVO1的属性字段 List<BlogEntityVO1> list1 = easyEntityQuery.queryable(BlogEntity.class) .select(BlogEntityVO1.class, b -> Select.of( b.FETCHER.id().content().as(\\\"content1\\\").createTime().as(\\\"createTime1\\\") )).toList(); //映射到VO 主表查询全字段忽略title和createTime,并且createTime查询映射到别名createTime1,表2查询stars as stars1,title as title1 List<BlogEntityVO1> list1 = easyEntityQuery.queryable(BlogEntity.class) .innerJoin(Topic.class, (b, t2) -> b.id().eq(t2.id())) .select(BlogEntityVO1.class, (b1, t2) -> Select.of( b1.FETCHER.allFieldsExclude(b1.title(), b1.createTime()).createTime().as(\\\"createTime1\\\"), t2.stars().as(\\\"stars1\\\"), t2.title().as(\\\"title1\\\") )).toList(); \",\"自定义返回结果支持后续链式将前面的结果作为匿名表\",\"每次select就是将当前查询结果作为匿名临时表,所谓匿名临时表就是select * from ( select * from xxx where xx order by xxx) t被括号包裹的就是匿名表\",\"SELECT t.`id` AS `id`, CAST(COUNT(*) AS CHAR) AS `phone` FROM `t_sys_user` t WHERE t.`id` = '1' AND t.`id` LIKE '%123%' GROUP BY t.`id` List<SysUser> users = easyEntityQuery.queryable(SysUser.class) .where(user -> { user.id().eq(\\\"1\\\"); user.id().eq(false, \\\"1\\\");//true/false表示是否使用该条件默认true user.id().like(\\\"123\\\"); user.id().like(false, \\\"123\\\"); }) .groupBy(user->GroupKeys.TABLE1.of(user.id()))//创建group by .select(group -> new SysUserProxy()//创建user代理 .id().set(group.key1())//对当前id进行赋值 .phone().set(group.count().toStr());//对当前phone进行赋值因为phone是string类型所以goup后的count需要强转成string也就是cast ) //下面是平替写法其实是一样的 // .select(o -> { // SysUserProxy sysUserProxy = new SysUserProxy(); // sysUserProxy.id().set(o.key1()); // sysUserProxy.phone().set(o.count().toStr()); // return sysUserProxy; // }) //如果映射属性对应的column name是一样的【！！！不是属性名是属性对应的列名是一样的】 //也可以用以下写法 // .select(o -> new SysUserProxy().selectExpression(o.id(),o.name(),o.title())) //.select(SysUserVO.class)//全自动属性匹配映射 SysUserVO可以是SysUser拷贝的属性 .toList(); \",\"SELECT t1.`id` AS `value1`, t1.`phone` AS `value2`, t2.`star` AS `value3`, t2.`create_time` AS `value4` FROM (SELECT t.`id` AS `id`, CAST(COUNT(*) AS CHAR) AS `phone` FROM `t_sys_user` t WHERE t.`id` = '1' AND t.`id` LIKE '%123%' GROUP BY t.`id`) t1 LEFT JOIN `t_blog` t2 ON t2.`deleted` = false AND t1.`phone` = t2.`title` WHERE t1.`phone` LIKE '188%' ORDER BY t2.`create_time` DESC List<Draft4<String, String, Integer, LocalDateTime>> list = easyEntityQuery.queryable(SysUser.class) .where(user -> { user.id().eq(\\\"1\\\"); user.id().eq(false, \\\"1\\\");//true/false表示是否使用该条件默认true user.id().like(\\\"123\\\"); user.id().like(false, \\\"123\\\"); }) .groupBy(user -> GroupKeys.TABLE1.of(user.id()))//创建group by .select(group -> new SysUserProxy()//创建user代理 .id().set(group.key1())//对当前id进行赋值 .phone().set(group.count().toStr())//对当前phone进行赋值因为phone是string类型所以goup后的count需要强转成string也就是cast ) .leftJoin(BlogEntity.class, (s, b2) -> s.phone().eq(b2.title())) .where((s1, b2) -> s1.phone().likeMatchLeft(\\\"188\\\")) .orderBy((s1, b2) -> b2.createTime().desc()) .select((s1, b2) -> Select.DRAFT.of( s1.id(), s1.phone(), b2.star(), b2.createTime() )).toList(); \",\"//拆分后就是 SELECT t.`id` AS `id`, CAST(COUNT(*) AS CHAR) AS `phone` FROM `t_sys_user` t WHERE t.`id` = '1' AND t.`id` LIKE '%123%' GROUP BY t.`id` EntityQueryable<SysUserProxy, SysUser> selectGroup = easyEntityQuery.queryable(SysUser.class) .where(user -> { user.id().eq(\\\"1\\\"); user.id().eq(false, \\\"1\\\");//true/false表示是否使用该条件默认true user.id().like(\\\"123\\\"); user.id().like(false, \\\"123\\\"); }) .groupBy(user -> GroupKeys.TABLE1.of(user.id()))//创建group by .select(group -> new SysUserProxy()//创建user代理 .id().set(group.key1())//对当前id进行赋值 .phone().set(group.count().toStr())//对当前phone进行赋值因为phone是string类型所以goup后的count需要强转成string也就是cast ); SELECT t1.`id` AS `value1`, t1.`phone` AS `value2`, t2.`star` AS `value3`, t2.`create_time` AS `value4` FROM (SELECT t.`id` AS `id`, CAST(COUNT(*) AS CHAR) AS `phone` FROM `t_sys_user` t WHERE t.`id` = '1' AND t.`id` LIKE '%123%' GROUP BY t.`id`) t1 LEFT JOIN `t_blog` t2 ON t2.`deleted` = false AND t1.`phone` = t2.`title` WHERE t1.`phone` LIKE '188%' ORDER BY t2.`create_time` DESC List<Draft4<String, String, Integer, LocalDateTime>> list = selectGroup .leftJoin(BlogEntity.class, (s, b2) -> s.phone().eq(b2.title())) .where((s1, b2) -> s1.phone().likeMatchLeft(\\\"188\\\")) .orderBy((s1, b2) -> b2.createTime().desc()) .select((s1, b2) -> Select.DRAFT.of( s1.id(), s1.phone(), b2.star(), b2.createTime() )).toList(); \"]},\"186\":{\"h\":\"多表查询\",\"t\":[\" SELECT t.`id`, t.`name`, t.`account`, t.`depart_name`, t.`phone`, t.`create_time` FROM `t_sys_user` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = false AND t.`phone` = t1.`title` WHERE t.`depart_name` LIKE '%123%' AND t1.`star` > 1 List<SysUser> list = easyEntityQuery.queryable(SysUser.class) .leftJoin(BlogEntity.class, (s, b2) -> s.phone().eq(b2.title())) .where((s1, b2) -> { s1.departName().like(\\\"123\\\"); b2.star().gt(1); }).toList(); \",\"SELECT t.`id`, t.`name`, t.`account`, t.`depart_name`, t.`phone`, t.`create_time` FROM `t_sys_user` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = false AND t.`phone` = t1.`title` LEFT JOIN `t_topic` t2 ON t.`id` = t2.`stars` WHERE t.`depart_name` LIKE '%123%' AND t1.`star` > 1 List<SysUser> list1 = easyEntityQuery.queryable(SysUser.class) .leftJoin(BlogEntity.class, (s, b2) -> s.phone().eq(b2.title())) .leftJoin(Topic.class, (s1, b2, t3) -> s1.id().eq(t3.stars())) .where((s1, b2, t3) -> { s1.departName().like(\\\"123\\\"); b2.star().gt(1); }).toList(); \"]},\"187\":{\"h\":\"幻灯片页\"},\"188\":{\"h\":\"高级功能\",\"t\":[\"easy-query的高级功能来自于作者多年的开发经验总结,具有非常强悍的实际实践意义,可以帮你摆脱很多无意义的操作\"]},\"189\":{\"h\":\"目录\",\"t\":[\"《EasyQuery:逻辑删除》 数据的无价,软删除可以给程序带来后悔药,让用户无需关心底层通过修改delete语句为update来实现自动无感逻辑删除,支持select、update、delete\",\"《EasyQuery:全局拦截器》 支持entity对象的插入、更新前的实体拦截修改，select、update、delete的条件自定义,update的set自定义\"]},\"190\":{\"h\":\"编写的所有扩展如何添加到当前orm中\",\"t\":[\"编写的所有扩展比如逻辑删除,拦截器等,如果你是用springboot-starter构建的easy-query那么只需要在扩展上添加@Component\",\"如果你是自行构建的easy-query那么可以获取对应的QueryConfiguration然后apply扩展\"]},\"191\":{\"h\":\"自行处理\",\"t\":[\" QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyEncryptionStrategy(new DefaultAesEasyEncryptionStrategy()); configuration.applyEncryptionStrategy(new Base64EncryptionStrategy()); configuration.applyEncryptionStrategy(new MyEncryptionStrategy()); configuration.applyEncryptionStrategy(new JavaEncryptionStrategy()); configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); configuration.applyInterceptor(new MyEntityInterceptor()); configuration.applyInterceptor(new Topic1Interceptor()); configuration.applyInterceptor(new MyTenantInterceptor()); // configuration.applyShardingInitializer(new FixShardingInitializer()); configuration.applyShardingInitializer(new DataSourceAndTableShardingInitializer()); configuration.applyShardingInitializer(new TopicShardingShardingInitializer()); configuration.applyShardingInitializer(new TopicShardingTimeShardingInitializer()); configuration.applyShardingInitializer(new DataSourceShardingInitializer()); configuration.applyValueConverter(new EnumConverter()); configuration.applyValueConverter(new JsonConverter()); configuration.applyValueConverter(new EnumValueConverter()); // configuration.applyValueUpdateAtomicTrack(new IntegerNotNullValueUpdateAtomicTrack()); configuration.applyColumnValueSQLConverter(new MySQLAesEncryptColumnValueSQLConverter()); configuration.applyIncrementSQLColumnGenerator(new MyDatabaseIncrementSQLColumnGenerator()); TableRouteManager tableRouteManager = runtimeContext.getTableRouteManager(); tableRouteManager.addRoute(new TopicShardingTableRoute()); tableRouteManager.addRoute(new TopicShardingTimeTableRoute()); tableRouteManager.addRoute(new TopicShardingDataSourceTimeTableRoute()); DataSourceRouteManager dataSourceRouteManager = runtimeContext.getDataSourceRouteManager(); dataSourceRouteManager.addRoute(new TopicShardingDataSourceTimeDataSourceRoute()); dataSourceRouteManager.addRoute(new TopicShardingDataSourceRoute()); \"]},\"192\":{\"h\":\"solon\",\"t\":[\" @Configuration public class DefaultConfiguration { @Bean(name = \\\"db1\\\",typed=true) public DataSource db1DataSource(@Inject(\\\"${db1}\\\") HikariDataSource dataSource){ return dataSource; } @Bean public void db1QueryConfiguration(@Db(\\\"db1\\\") QueryConfiguration configuration){ //在这边进行apply configuration.applyEncryptionStrategy(new JavaEncryptionStrategy()); configuration.applyColumnValueSQLConverter(new MySQLAESColumnValueSQLConverter()); } } \"]},\"193\":{\"h\":\"列值原子更新(废弃❌)\",\"t\":[\"easy-query提供了原子列更新,主要是针对当前数据的库存或者金额等数据进行原子更新,需要配合track更新,无法单独使用,譬如我有一个库存冗余字段,那么在更新的时候如果是对象更新那么将会生成原子sql(可以自定义)比如update set column=column+1 where id=xxx and column>=xxx\",\"说明!!!\",\"仅entity对象更新有效,如果是表达式更新那么还是按表达式更新来处理，并且需要当前上下文开启追踪模式不然无法使用\"]},\"194\":{\"h\":\"ValueUpdateAtomicTrack\",\"t\":[\"原子更新接口,需要自行实现\"]},\"195\":{\"h\":\"系统默认实现\",\"t\":[\"默认实现\",\"默认\",\"描述\",\"DefaultValueUpdateAtomicTrack\",\"✅\",\"不处理\",\"IntegerNotValueUpdateAtomicTrack\",\"❌\",\"非null的int更新,如果旧值比新值大生成update table set column=column-x where id=xx and column>=x,如果新值比旧值大update table set column=column+x where id=xx\",\"LongNotValueUpdateAtomicTrack\",\"❌\",\"非null的int更新,如果旧值比新值大生成update table set column=column-x where id=xx and column>=x,如果新值比旧值大update table set column=column+x where id=xx\"]},\"196\":{\"h\":\"例子\",\"t\":[\"@Data @Table(\\\"t_topic_value_atomic\\\") @ToString public class TopicValueUpdateAtomicTrack { @Column(primaryKey = true) private String id; @Column(valueUpdateAtomicTrack = IntegerNotValueUpdateAtomicTrack.class) private Integer stars; private String title; private Integer topicType; private LocalDateTime createTime; } //SpringBoot 直接使用@EasyQueryTrack aop TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); // id=123 stars=99 TopicValueUpdateAtomicTrack topicValueUpdateAtomicTrack = easyQuery.queryable(TopicValueUpdateAtomicTrack.class).asTracking().whereById(\\\"123\\\").firstOrNull(); //设置98 前后变更 1 topicValueUpdateAtomicTrack.setStars(98); long l = easyQuery.updatable(topicValueUpdateAtomicTrack).executeRows(); //UPDATE `t_topic_value_atomic` SET `stars` = `stars`- ? WHERE `id` = ? AND `stars` >= ? //UPDATE `t_topic_value_atomic` SET `stars` = `stars`- 1 WHERE `id` = '123' AND `stars` >= 1 }finally { trackManager.release(); } \"]},\"197\":{\"h\":\"自定义主键\",\"t\":[\"easy-query提供了PrimaryKeyGenerator接口该接口可以由用户自行实现,具体功能就是可以自动对当前对象的主键进行赋值,比如你可以实现一个uuid的或者雪花id的 2.0.43^\"]},\"198\":{\"h\":\"PrimaryKeyGenerator\",\"t\":[\"方法\",\"参数\",\"描述\",\"getPrimaryKey\",\"无\",\"用来返回一个主键\",\"setPrimaryKey\",\"对象,key的columnMetadata\",\"用来对对象进行设置主键(默认已经实现一个通用方法)\",\"执行顺序在insert的方法调用executeRows后将先执行对象的PrimaryKeyGenerator.setPrimaryKey然后执行拦截器,所以如果您不需要可以在拦截器里面对其进行从新设置或者清空\"]},\"199\":{\"h\":\"如何使用\",\"t\":[\"当前对象必须是数据库对象@Table\",\"当前属性必须是主键@Column(primaryKet=true)\",\"当前属性不可以是生成列@Column(generateKey=true)不可以generateKey=true\",\"当前属性添加@Column(primaryKet=true,primaryKeyGenerator=UUIDPrimaryKeyGenerator.class)\",\"如果有多主键那么也是一样的用法\"]},\"200\":{\"h\":\"UUIDPrimaryKeyGenerator\",\"t\":[\"如何实现一个UUID的主键生成器\",\"@Component //如果您是springboot public class UUIDPrimaryKeyGenerator implements PrimaryKeyGenerator { @Override public Serializable getPrimaryKey() { return UUID.randomUUID().toString().replaceAll(\\\"-\\\",\\\"\\\"); } // /** // * 如果需要判断之前是否有值 // * @param entity // * @param columnMetadata // */ // @Override // public void setPrimaryKey(Object entity, ColumnMetadata columnMetadata) { // Serializable primaryKey = getPrimaryKey(); // Object oldValue = columnMetadata.getGetterCaller().apply(entity); // if(oldValue!=null) // { // columnMetadata.getSetterCaller().call(entity, primaryKey); // } // } } @Data @Table(\\\"t_test\\\") public class UUIDPrimaryKey { @Column(primaryKey = true,primaryKeyGenerator = UUIDPrimaryKeyGenerator.class) private String id; } \"]},\"201\":{\"h\":\"雪花id\",\"t\":[\"//初始化 Snowflake snowflake = IdUtil.createSnowflake(workerId,dataCenterId) @Component //如果您是springboot public class SnowflakePrimaryKeyGenerator implements PrimaryKeyGenerator { @Override public Serializable getPrimaryKey() { return String.valueOf(snowflake.nextId());//因为long类型在js中会出现精度丢失 } // /** // * 如果需要判断之前是否有值 // * @param entity // * @param columnMetadata // */ // @Override // public void setPrimaryKey(Object entity, ColumnMetadata columnMetadata) { // Serializable primaryKey = getPrimaryKey(); // Object oldValue = columnMetadata.getGetterCaller().apply(entity); // if(oldValue!=null) // { // columnMetadata.getSetterCaller().call(entity, primaryKey); // } // } } @Data @Table(\\\"t_test\\\") public class SnowflakePrimaryKey { @Column(primaryKey = true,primaryKeyGenerator = SnowflakePrimaryKeyGenerator.class) private String id; } \"]},\"202\":{\"h\":\"相关搜索\",\"t\":[\"自定义主键雪花id自定义id\"]},\"203\":{\"h\":\"Batch批处理\",\"t\":[\"easy-query如果需要使用batch功能首先需要在链接字符串添加rewriteBatchedStatements=true启用参数（mysql）,默认框架会在配置参数阈值到达后自动合并sql调用executeBatch合并,如果需要手动调用或者手动限制不调用可以通过调用batch方法\",\"mysql需要链接字符串启用批处理参数rewriteBatchedStatements=true,其他数据库自行查询相关的说明也可能不需要 addBatch、executeBatch\"]},\"204\":{\"h\":\"例如\",\"t\":[\"jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&rewriteBatchedStatements=true\",\"配置名称\",\"默认值\",\"描述\",\"insertBatchThreshold\",\"1024\",\"如果insertable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率,链接字符串需要添加rewriteBatchedStatements=true(mysql),可以通过调用insert或者update的batch方法来手动使用或者禁用\",\"updateBatchThreshold\",\"1024\",\"如果updatable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率,链接字符串需要添加rewriteBatchedStatements=true(mysql),可以通过调用insert或者update的batch方法来手动使用或者禁用\"]},\"205\":{\"h\":\"代码注意点\",\"t\":[\"说明!!!\",\"使用batch可以有效的提高插入或者更新的性能,但是会导致返回结果不正确,如果使用batch那么自行处理返回结果\",\"easyQuery.insertable(r).batch().executeRows(); ==> Preparing: INSERT INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ==> Parameters: 500(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),500(String),500(String),false(Boolean),title500(String),content500(String),http://blog.easy-query.com/500(String),500(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) ==> Parameters: 300(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),300(String),300(String),false(Boolean),title300(String),content300(String),http://blog.easy-query.com/300(String),300(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) ==> Parameters: 400(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),400(String),400(String),false(Boolean),title400(String),content400(String),http://blog.easy-query.com/400(String),400(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: -6 \"]},\"206\":{\"h\":\"原因可能\",\"t\":[\"来自网上的说法\",\"executeBatch方法会返回一个int数组\",\"int[] executeBatch() throws SQLException;\",\"数组各值可能是以下之一：\",\"大于或等于零的数字,表示命令已成功处理，并且是更新计数，给出了 数据库中受命令影响的行数执行 SUCCESS_NO_INFO ( -2)的值,表示命令为处理成功，但受影响的行数为未知 如果批量更新中的命令之一无法正确执行，此方法引发BatchUpdateException，JDBC driver可能会也可能不会继续处理剩余的命令。但是driver的行为是与特定的DBMS绑定的，要么总是继续处理命令，要么从不继续处理命令。如果驱动程序继续处理，方法将返回 EXECUTE_FAILED(-3)。 ———————————————— 版权声明：本文为CSDN博主「左林右李02」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/u011624157/article/details/110734184\"]},\"207\":{\"h\":\"相关搜索\",\"t\":[\"批量提交批量插入批量操作批处理\"]},\"208\":{\"h\":\"缓存最佳实践\",\"t\":[\"easy-query在1.9.22^推出了sql-cache包，提供了作者在多年工作中使用的缓存双删最佳实践\"]},\"209\":{\"h\":\"模式\",\"t\":[\"easy-cache提供了三种模式\",\"模式\",\"描述\",\"kv\",\"采用k-v键值对拥有最高效的性能,仅支持对象缓存id查询仅支持返回单一对象\",\"all\",\"采用k-v+index模式\",\"multi\",\"回滚事务\"]},\"210\":{\"h\":\"数据库列加密\",\"t\":[\"easy-query提供了建议的数据列加密功能,可以实现功能复杂的数据库列加密,并且可以支持模糊查询.实现方式具体请看阿里巴巴密文字段检索方案 ，这边easy-query给出了一个默认的实现,并且支持所有数据库\"]},\"211\":{\"h\":\"EncryptionStrategy\",\"t\":[\"方法\",\"参数\",\"描述\",\"encrypt\",\"对象,属性,值\",\"加密值,在插入修改查询的时候会被调用\",\"decrypt\",\"对象,属性,值\",\"解密值,在查询的时候会被解密\"]},\"212\":{\"h\":\"Encryption\",\"t\":[\"属性\",\"默认值\",\"描述\",\"strategy\",\"无\",\"加密策略实现类,使用具体那个加密策略来实现当前列的加密\",\"supportQueryLike\",\"false\",\"是否支持模糊查询,默认不支持,默认支持等于匹配,区别在于使用like或者like相关查询的时候会将入参进行相同方式加密后匹配,需要加密算法支持模糊查询\"]},\"213\":{\"h\":\"demo数据\"},\"214\":{\"h\":\"插入数据测试\",\"t\":[\"SysUserEncryption sysUserEncryption = new SysUserEncryption(); sysUserEncryption.setId(\\\"1\\\"); sysUserEncryption.setName(\\\"name1\\\"); sysUserEncryption.setPhoneNotSupportLike(\\\"12345678901\\\"); sysUserEncryption.setAddressNotSupportLike(\\\"浙江省绍兴市越城区城市广场旁边2-102\\\"); long l1 = easyQuery.insertable(sysUserEncryption).executeRows(); Assert.assertEquals(1,l1); SysUserEncryption sysUserEncryption1 = easyQuery.queryable(SysUserEncryption.class).whereById(\\\"1\\\").firstOrNull(); Assert.assertNotNull(sysUserEncryption1); Assert.assertEquals(sysUserEncryption.getId(),sysUserEncryption1.getId()); Assert.assertEquals(sysUserEncryption.getPhoneNotSupportLike(),sysUserEncryption1.getPhoneNotSupportLike()); Assert.assertEquals(sysUserEncryption.getAddressNotSupportLike(),sysUserEncryption1.getAddressNotSupportLike()); SysUserEncryption sysUserEncryption2 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.eq(SysUserEncryption::getPhoneNotSupportLike, \\\"12345678901\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption2); Assert.assertEquals(sysUserEncryption1.getId(),sysUserEncryption2.getId()); SysUserEncryption sysUserEncryption3 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getPhoneNotSupportLike, \\\"12345678901\\\")).firstOrNull(); Assert.assertNull(sysUserEncryption3); ==> Preparing: INSERT INTO t_sys_user_encryption (`id`,`name`,`phone_not_support_like`,`address_not_support_like`,`phone_support_like`,`address_support_like`) VALUES (?,?,?,?,?,?) ==> Parameters: 1(String),name1(String),MTIzNDU2Nzg5MDE=(String),5rWZ5rGf55yB57uN5YW05biC6LaK5Z+O5Yy65Z+O5biC5bm/5Zy65peB6L65Mi0xMDI=(String),null(null),null(null) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 1(String) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`phone_not_support_like` = ? LIMIT 1 ==> Parameters: MTIzNDU2Nzg5MDE=(String) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`phone_not_support_like` LIKE ? LIMIT 1 ==> Parameters: %12345678901%(String) <== Total: 0 \"]},\"215\":{\"h\":\"加密实现类支持模糊搜索高性能\",\"t\":[\"阿里巴巴密文字段检索方案\",\"这边采用阿里巴巴密文字段检索方案,来实现本次功能,实现手机地址的加密存储且高性能模糊搜索\"]},\"216\":{\"h\":\"加密方式\",\"t\":[\"AES/CBC/PKCS5Padding 加密长度,非中文单个字符占一个长度,中文一个字符占两个长度,默认非中文4个长度为一组,中文两个为一组,如果需要搜索默认需要至少4个非中文字符或者2个中文字符如下\",\"算法/模式/填充\",\"16 字节加密后数据长度\",\"不满 16 字节加密后长度\",\"本次采用\",\"AES/CBC/NoPadding\",\"16\",\"不支持\",\"❌\",\"AES/CBC/PKCS5Padding\",\"32\",\"16\",\"✅\",\"AES/CBC/ISO10126Padding\",\"32\",\"16\",\"❌\",\"AES/CFB/NoPadding\",\"16\",\"原始数据长度\",\"❌\",\"AES/CFB/PKCS5Padding\",\"32\",\"16\",\"❌\",\"AES/CFB/ISO10126Padding\",\"32\",\"16\",\"❌\",\"AES/ECB/NoPadding\",\"16\",\"不支持\",\"❌\",\"AES/ECB/PKCS5Padding\",\"32\",\"16\",\"❌\",\"AES/ECB/ISO10126Padding\",\"32\",\"16\",\"❌\",\"AES/OFB/NoPadding\",\"16\",\"原始数据长度\",\"❌\",\"AES/OFB/PKCS5Padding\",\"32\",\"16\",\"❌\",\"AES/OFB/ISO10126Padding\",\"32\",\"16\",\"❌\",\"AES/PCBC/NoPadding\",\"16\",\"不支持\",\"❌\",\"AES/PCBC/PKCS5Padding\",\"32\",\"16\",\"❌\",\"AES/PCBC/ISO10126Padding\",\"32\",\"16\",\"❌\"]},\"217\":{\"h\":\"实现加密策略\",\"t\":[\"easy-query很贴心的给各位提供了默认的加密策略抽象,您只需要将秘钥和偏移量进行填入即可AbstractUnSupportEmojiAesBase64EncryptionStrategy或AbstractSupportEmojiAesBase64EncryptionStrategy。】\",\"说明!!!\",\"AbstractUnSupportEmojiAesBase64EncryptionStrategy抽象类默认仅支持非emoji的列,比如中文数字英文特殊符号等,AbstractSupportEmojiAesBase64EncryptionStrategy支持emoji的处理,两者的区别就是相对的不支持Emoji的策略性能会稍微高一点点\"]},\"218\":{\"h\":\"AbstractUnSupportEmojiAesBase64EncryptionStrategy\",\"t\":[\"不支持emoji\"]},\"219\":{\"h\":\"AbstractSupportEmojiAesBase64EncryptionStrategy\",\"t\":[\"方法\",\"默认值\",\"描述\",\"getIv\",\"无\",\"16位向量\",\"getKey\",\"无\",\"16位秘钥\",\"encryptWordMinLength\",\"4\",\"最小加密长度\",\"chineseCharOccupancyLength\",\"2\",\"一个中文占用长度\",\"throwIfDecryptFail\",\"true\",\"遇到错误是否抛出\",\"public class MyEncryptionStrategy extends AbstractSupportEmojiAesBase64EncryptionStrategy { @Override public String getIv() { return \\\"A-16-Byte-String\\\"; } @Override public String getKey() { return \\\"1234567890abcdef\\\"; } } \",\"修改原始的对象\",\"@Data @Table(\\\"t_sys_user_encryption\\\") public class SysUserEncryption { @Column(primaryKey = true) private String id; private String name; @Encryption(strategy = Base64EncryptionStrategy.class) private String phoneNotSupportLike; @Encryption(strategy = Base64EncryptionStrategy.class) private String addressNotSupportLike; @Encryption(strategy = MyEncryptionStrategy.class,supportQueryLike = true) private String phoneSupportLike; @Encryption(strategy = MyEncryptionStrategy.class,supportQueryLike = true) private String addressSupportLike; } \"]},\"220\":{\"h\":\"测试\",\"t\":[\"SysUserEncryption sysUserEncryption = new SysUserEncryption(); sysUserEncryption.setId(\\\"2\\\"); sysUserEncryption.setName(\\\"name2\\\"); sysUserEncryption.setPhoneSupportLike(\\\"12345678901\\\"); sysUserEncryption.setAddressSupportLike(\\\"浙江省绍兴市越城区城市广场旁边2-102\\\"); long l1 = easyQuery.insertable(sysUserEncryption).executeRows(); Assert.assertEquals(1,l1); ==> Preparing: INSERT INTO t_sys_user_encryption (`id`,`name`,`phone_not_support_like`,`address_not_support_like`,`phone_support_like`,`address_support_like`) VALUES (?,?,?,?,?,?) ==> Parameters: 2(String),name2(String),null(null),null(null),PBNjuyKlEazZoRRnMUupJA==IgrQqipSFtsBJal4l1uviA==act0SMpmvTNWd/+aBXnybA==avtYLQlFEztwFOYNB0x+Cw==XORntDPVNDrdId+JLsMH4w==S+w1G858r9lawlqhSbHw9A==VRhLsnycy28X4io+sRAScA==XNGeRBsmiV4Jd+iMjzyd6w==(String),5JxqmAe3vLE3As62ds8z/Q==RfK4efiC8TpWrlW8EYOE7Q==xYgFo1HQhvsZb3aqqJEr0w==taspTHZ7faxKgLu8WiR4xg==3K4XEON1qksj0l068srXLg==kGziT8zvaq0Mr4mgC0o8ew==o/KgX28zI/vzwYP6H+yBPQ==bIV0eBlAxjvAu53mCRCJKQ==3T589p9NTva5G7yy6Tw1zA==CbmPqpgcbPXq9ZnKJ6eFOg==7TBMWW5dxwjhmnuxffO2BQ==87EZCkWnYFik+lABuLm/0g==SiaBG+vnzNx/p2/7VNtYmw==R+BfXClbpMfdtvtgNpb2Kg==2bm0wNpPthXLTTf3ePF8Ow==/RAvJwP3bdCH88opBIxHNA==YtwmFV6JyKHYTLkcp3Xxvw==(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption1 = easyQuery.queryable(SysUserEncryption.class).whereById(\\\"2\\\").firstOrNull(); Assert.assertNotNull(sysUserEncryption1); Assert.assertEquals(sysUserEncryption.getId(),sysUserEncryption1.getId()); Assert.assertEquals(sysUserEncryption.getPhoneSupportLike(),sysUserEncryption1.getPhoneSupportLike()); Assert.assertEquals(sysUserEncryption.getAddressSupportLike(),sysUserEncryption1.getAddressSupportLike()); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 2(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption2 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.eq(SysUserEncryption::getPhoneSupportLike, \\\"12345678901\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption2); Assert.assertEquals(sysUserEncryption1.getId(),sysUserEncryption2.getId()); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`phone_support_like` = ? LIMIT 1 ==> Parameters: PBNjuyKlEazZoRRnMUupJA==IgrQqipSFtsBJal4l1uviA==act0SMpmvTNWd/+aBXnybA==avtYLQlFEztwFOYNB0x+Cw==XORntDPVNDrdId+JLsMH4w==S+w1G858r9lawlqhSbHw9A==VRhLsnycy28X4io+sRAScA==XNGeRBsmiV4Jd+iMjzyd6w==(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption3 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getPhoneSupportLike, \\\"34567\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption3); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`phone_support_like` LIKE ? LIMIT 1 ==> Parameters: %act0SMpmvTNWd/+aBXnybA==avtYLQlFEztwFOYNB0x+Cw==%(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption4 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getAddressSupportLike, \\\"2-102\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption4); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: %/RAvJwP3bdCH88opBIxHNA==YtwmFV6JyKHYTLkcp3Xxvw==%(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption5 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.likeMatchRight(SysUserEncryption::getAddressSupportLike, \\\"2-102\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption5); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: %/RAvJwP3bdCH88opBIxHNA==YtwmFV6JyKHYTLkcp3Xxvw==(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption6 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.likeMatchLeft(SysUserEncryption::getAddressSupportLike, \\\"浙江省绍兴市\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption6); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: 5JxqmAe3vLE3As62ds8z/Q==RfK4efiC8TpWrlW8EYOE7Q==xYgFo1HQhvsZb3aqqJEr0w==taspTHZ7faxKgLu8WiR4xg==3K4XEON1qksj0l068srXLg==%(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption7 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getAddressSupportLike, \\\"绍兴\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption7); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: %taspTHZ7faxKgLu8WiR4xg==%(String) <== Total: 1 \",\" //中文单字符不支持查询所以是空 SysUserEncryption sysUserEncryption8 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getAddressSupportLike, \\\"绍\\\")).firstOrNull(); Assert.assertNull(sysUserEncryption8); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: %UXUfduoPhC3qV7yzGkaYHg==%(String) <== Total: 0 \",\"sysUserEncryption7.setPhoneSupportLike(\\\"13232323321\\\"); long l2 = easyQuery.updatable(sysUserEncryption7).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_encryption SET `name` = ?,`phone_not_support_like` = ?,`address_not_support_like` = ?,`phone_support_like` = ?,`address_support_like` = ? WHERE `id` = ? ==> Parameters: name2(String),null(null),null(null),7OH9gTLq8hK4vflSizrRKg==rsW+JktKi+3iIq0Xm3vSSw==/RYbVYX8k/qGMprCZslddg==rsW+JktKi+3iIq0Xm3vSSw==/RYbVYX8k/qGMprCZslddg==TncRPIKuqNopeX/GJCgjGw==UH8PuTSDSuiTj+rLVsnjOA==2EppLfMm+O7BMtPJ7xH7CA==(String),5JxqmAe3vLE3As62ds8z/Q==RfK4efiC8TpWrlW8EYOE7Q==xYgFo1HQhvsZb3aqqJEr0w==taspTHZ7faxKgLu8WiR4xg==3K4XEON1qksj0l068srXLg==kGziT8zvaq0Mr4mgC0o8ew==o/KgX28zI/vzwYP6H+yBPQ==bIV0eBlAxjvAu53mCRCJKQ==3T589p9NTva5G7yy6Tw1zA==CbmPqpgcbPXq9ZnKJ6eFOg==7TBMWW5dxwjhmnuxffO2BQ==87EZCkWnYFik+lABuLm/0g==SiaBG+vnzNx/p2/7VNtYmw==R+BfXClbpMfdtvtgNpb2Kg==2bm0wNpPthXLTTf3ePF8Ow==/RAvJwP3bdCH88opBIxHNA==YtwmFV6JyKHYTLkcp3Xxvw==(String),2(String) <== Total: 1 \",\"long l3 = easyQuery.updatable(SysUserEncryption.class).set(SysUserEncryption::getPhoneSupportLike, \\\"19876543210\\\") .where(o -> o.eq(SysUserEncryption::getId, \\\"2\\\")).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_encryption SET `phone_support_like` = ? WHERE `id` = ? ==> Parameters: 5mvI8ru5KU2gEoqUhUCR7A==MXfvDfZA1YdM7qws03g1ew==82zyfpam7R2nhH8QGEV2PA==IRTc1Xc89aXhLz6g2EMWtw==U+T8I0LMIZE62zLYLQPcHw==z21auLlv0TzO5sWM8E15Sg==o601InWNlOLFRSPiuivKLA==WlISXTG+AJUzRY1SF31+Eg==(String),2(String) <== Total: 1 \",\"当然目前算法不一定是最优的空间也不一定是最有效的,但是这边也是提供了默认的希望大家可以pr相关思路算法等,easy-query目前可以做到高性能无感的列加密存储处理\"]},\"221\":{\"h\":\"自定义数据库函数(新)\",\"t\":[\"目前框架未提供相应的数据库函数,仅提供了count,sum,min,max等\",\"SELECT t.`id` FROM `t_topic` t WHERE t.`id` = ? AND FIND_IN_SET(?,t.`id`) \",\"假如我们要实现这么一个数据库语句,那么我们应该如何实现,接下来我们将使用easy-query的sqlNativeSegment封装和sqlFunc和sqlFuncAs能力实现单列的数据库函数\"]},\"222\":{\"h\":\"FIND_IN_SET编写\"},\"223\":{\"h\":\"sqlNativeSegment封装\",\"t\":[\"//创建一个mysql的方言提供者 public interface MySQLProvider<T> { //因为是在where处所以这边获取属性的`WherePredicate`如果是lambda则获取`SQLWherePredicate` WherePredicate<T> getWherePredicate(); default MySQLProvider<T> findInSet(SQLExpression1<SQLNativePropertyExpressionContext> first, SQLExpression1<SQLNativePropertyExpressionContext> second){ getWherePredicate().sqlNativeSegment(\\\"FIND_IN_SET({0},{1})\\\",c->{ first.apply(c); second.apply(c); }); return this; } } //实现类 public class MySQLProviderImpl<T> implements MySQLProvider<T> { private final WherePredicate<T> wherePredicate; public MySQLProviderImpl(WherePredicate<T> wherePredicate){ this.wherePredicate = wherePredicate; } @Override public WherePredicate<T> getWherePredicate() { return wherePredicate; } } String sql1 = easyQueryClient.queryable(Topic.class) .where(o -> { o.eq(\\\"id\\\", \\\"1\\\"); MySQLProviderImpl<Topic> mySQLProvider = new MySQLProviderImpl<>(o); mySQLProvider.findInSet(c->c.value(\\\"1\\\"),c->c.expression(\\\"id\\\")); }) .select(String.class, o -> o.column(\\\"id\\\")).toSQL(); Assert.assertEquals(\\\"SELECT t.`id` FROM `t_topic` t WHERE t.`id` = ? AND FIND_IN_SET(?,t.`id`)\\\", sql1); //强类型表达式可以选择这种模式 public interface MySQLLambdaProvider<T> { SQLWherePredicate<T> getSQLWherePredicate(); default MySQLLambdaProvider<T> findInSet(SQLExpression1<SQLNativeLambdaExpressionContext<T>> first, SQLExpression1<SQLNativeLambdaExpressionContext<T>> second){ getSQLWherePredicate().sqlNativeSegment(\\\"FIND_IN_SET({0},{1})\\\",c->{ first.apply(c); second.apply(c); }); return this; } } //强类型实现类 public class MySQLLambdaProviderImpl<T> implements MySQLLambdaProvider<T>{ private final SQLWherePredicate<T> sqlWherePredicate; public MySQLLambdaProviderImpl(SQLWherePredicate<T> sqlWherePredicate){ this.sqlWherePredicate = sqlWherePredicate; } @Override public SQLWherePredicate<T> getSQLWherePredicate() { return sqlWherePredicate; } } String sql1 = easyQuery.queryable(Topic.class) .where(o -> { o.eq(Topic::getId, \\\"1\\\"); MySQLLambdaProviderImpl<Topic> mySQLProvider = new MySQLLambdaProviderImpl<>(o); mySQLProvider.findInSet(c->c.value(\\\"1\\\"),c->c.expression(Topic::getId)); }) .select(String.class, o -> o.column(Topic::getId)).toSQL(); Assert.assertEquals(\\\"SELECT t.`id` FROM `t_topic` t WHERE t.`id` = ? AND FIND_IN_SET(?,t.`id`)\\\", sql1); \",\"如果你不想使用封装的方法可以使用原生的sqlNativeSegment\",\" String sql1 = easyQueryClient.queryable(Topic.class) .where(o -> { o.eq(\\\"id\\\", \\\"1\\\"); o.sqlNativeSegment(\\\"FIND_IN_SET({0},{1})\\\",c->{ c.value(\\\"1\\\").expression(\\\"id\\\"); }); }) .select(String.class, o -> o.column(\\\"id\\\")).toSQL(); Assert.assertEquals(\\\"SELECT t.`id` FROM `t_topic` t WHERE t.`id` = ? AND FIND_IN_SET(?,t.`id`)\\\", sql1); \"]},\"224\":{\"h\":\"自定义数据库函数(旧)\",\"t\":[\"目前框架未提供相应的数据库函数,仅提供了count,sum,min,max等\",\"说明!!!\",\"目前不是很建议看这一章节,因为当前的函数设计只适合单个属性的处理,并且过于繁琐,所以建议使用sqlNativeSegment或者SqlFunction来实现数据库方言自定义\",\"sqlNativeSegment\",\"自定义数据库函数(新)\",\"SELECT IFNULL(t.`url`,'') AS `url` FROM `t_blog` t WHERE t.`deleted` = ? \",\"假如我们要实现这么一个数据库语句,那么我们应该如何实现,接下来我们将使用easy-query的column-func能力实现单列的数据库函数\"]},\"225\":{\"h\":\"IFNULL编写\"},\"226\":{\"h\":\"ColumnPropertyFunction\",\"t\":[\"easy-qeury 的column func接口\",\"方法\",\"参数/返回结果\",\"说明\",\"getColumnFunction\",\"参数无,返回结果为ColumnFunction接口\",\"用来获取具体的列方法\",\"getPropertyName\",\"参数无,返回结果为属性名也就是列所对应的属性\",\"用来获取针对那个属性进行方法处理\"]},\"227\":{\"h\":\"ColumnFunction\",\"t\":[\"方法\",\"参数/返回结果\",\"说明\",\"getFuncColumn\",\"参数:列名(添加方言了的),返回结果为数据库片段\",\"用来包装数据库片段\",\"getAggregationType\",\"参数无,返回结果为当前方法的聚合类型\",\"针对分表分库时有效\",\" public class IFNULLColumnFunction implements ColumnFunction { private final Object value; public IFNULLColumnFunction(Object value){ if(value==null){ throw new IllegalArgumentException(\\\"IFNULLColumnFunction value is null\\\"); } this.value = value; } @Override public String getFuncColumn(String column) { if(value instanceof String){ String valueString = value.toString(); if(EasyStringUtil.isBlank(valueString)){ return String.format(\\\"IFNULL(%s,'')\\\", column); } return String.format(\\\"IFNULL(%s,'%s')\\\", column, valueString); } return String.format(\\\"IFNULL(%s,%s)\\\", column, value.toString()); } @Override public AggregationType getAggregationType() { return AggregationType.UNKNOWN; } } //创建一个mysql的属性方法包装 public final class MyColumnPropertyFunction implements ColumnPropertyFunction { private final String propertyName; private final ColumnFunction columnFunction; public MyColumnPropertyFunction(String propertyName, ColumnFunction columnFunction){ this.propertyName = propertyName; this.columnFunction = columnFunction; } @Override public ColumnFunction getColumnFunction() { return columnFunction; } @Override public String getPropertyName() { return propertyName; } } public class SQLFunc{ public static <T, R> ColumnPropertyFunction ifNULL(Property<T, R> column) { String propertyName = EasyLambdaUtil.getPropertyName(column); return new MyColumnPropertyFunction(propertyName, new IFNULLColumnFunction(\\\"\\\")); } } Queryable<BlogEntityTest> queryable = easyQuery.queryable(BlogEntity.class) .select(BlogEntityTest.class, o -> o.columnFuncAs(SQLFunc.ifNULL(BlogEntity::getUrl), BlogEntityTest::getUrl)); String sql = queryable.toSQL(); // SELECT IFNULL(t.`url`,'') AS `url` FROM `t_blog` t WHERE t.`deleted` = ? \",\"当然您还可以随意扩展\",\"//ifnull额外参数等 public static <T, R> ColumnPropertyFunction ifNULLOrDefault(Property<T, R> column,Object value) { String propertyName = EasyLambdaUtil.getPropertyName(column); return new MyColumnPropertyFunction(propertyName, new IFNULLColumnFunction(value)); } \",\"说明!!!\",\"ColumnPropertyFunction、ColumnFunction的组合仅支持单个数据库列字段的处理,如果需要支持多个数据库字段,请看《自定义数据库片段》\"]},\"228\":{\"h\":\"数据库函数列\",\"t\":[\"easy-query提供了数据库函数列值转换,可以完美的实现java对象和数据库列的函数互相交换,比如数据库函数加密、解密、base64 编码、解码等数据库函数对\"]},\"229\":{\"h\":\"mysql加密解密\",\"t\":[\"《数据库列加密》 上一篇文章我们讲解了如何使用java代码来实现数据库列的加密解密,接下来我将使用数据库函数来实现\",\"AES_DECRYPT(from_base64(receiver_mobile)\",\"方法\",\"默认值\",\"to_base64(AES_ENCRYPT('手机号值'),'秘钥')\",\"将数据进行aes加密,然后进行base64编码\",\"AES_DECRYPT(from_base64('手机号列'),'秘钥')\",\"将数据进行base64解码,然后进行aes进行解密\"]},\"230\":{\"h\":\"ColumnValueSQLConverter\",\"t\":[\"说明!!!\",\"支持join和下多表的自动识别表别名而无需自行处理别名\",\"方法\",\"作用域\",\"说明\",\"selectColumnConvert\",\"仅作用到select投影上面\",\"用于做数据库列到java对象字段的函数处理比如 [AES_DECRYPT(from_base64(phone),'秘钥')]\",\"propertyColumnConvert\",\"当前列被当做片段时如何使用\",\"非select查询时被作为片段如何使用默认就是使用当前列\",\"valueConvert\",\"仅作用到insert,update set值,where条件值\",\"用于做java对象字段到数据库列的函数处理比如 [AES_DECRYPT(from_base64('手机号列'),'秘钥')]\",\"xuejiaming */ public interface ColumnValueSQLConverter { /** * select查询 * * @param table * @param columnMetadata * @param sqlPropertyConverter */ void selectColumnConvert(@NotNull TableAvailable table, @NotNull ColumnMetadata columnMetadata, @NotNull SQLPropertyConverter sqlPropertyConverter, @NotNull QueryRuntimeContext runtimeContext); default void propertyColumnConvert(@NotNull TableAvailable table, @NotNull ColumnMetadata columnMetadata, @NotNull SQLPropertyConverter sqlPropertyConverter, @NotNull QueryRuntimeContext runtimeContext){ sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",c->c.expression(new SimpleSQLTableOwner(table),columnMetadata.getPropertyName())); } /** * insert update entity * update set * where * * @param table * @param columnMetadata * @param sqlParameter * @param sqlPropertyConverter * @param isCompareValue 当前值是用于比较还是存储 */ void valueConvert(@NotNull TableAvailable table, @NotNull ColumnMetadata columnMetadata, @NotNull SQLParameter sqlParameter, @NotNull SQLPropertyConverter sqlPropertyConverter, @NotNull QueryRuntimeContext runtimeContext, boolean isCompareValue); } \"]},\"231\":{\"h\":\"案例\",\"t\":[\" //@Component 如果是springboot的话 public class MySQLAesEncryptColumnValueSQLConverter implements ColumnValueSQLConverter { /** * 数据加密秘钥 */ private static final String SECRET=\\\"1234567890123456\\\"; @Override public void selectColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { // Dialect dialect = runtimeContext.getQueryConfiguration().getDialect(); sqlPropertyConverter.sqlNativeSegment(\\\"AES_DECRYPT(from_base64({0}),{1})\\\",context->{ context .expression(columnMetadata.getPropertyName())//采用变量是因为可能出现join附带别名所以需要变量 .value(SECRET) .setAlias(columnMetadata.getName()); //.constValue(dialect.getQuoteName(columnMetadata.getName()));//如果这边也是用变量就会导致join下不是别名而是带具体表的列比如:t.`phone` }); } @Override public void propertyColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",c->c.expression(new SimpleSQLTableOwner(table),columnMetadata.getPropertyName())); } @Override public void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext,boolean isCompareValue) { sqlPropertyConverter.sqlNativeSegment(\\\"to_base64(AES_ENCRYPT({0},{1}))\\\",context->{ context.value(sqlParameter).value(SECRET); }); } } //非springboot或者多数据源之类的可以通过获取对应的QueryConfiguration进行添加 //QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); //QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); //configuration.applyColumnValueSQLConverter(new MySQLAesEncryptColumnValueSQLConverter()); //java对象 @Data @Table(\\\"t_sys_user_sql_encryption\\\") @ToString public class SysUserSQLEncryption { @Column(primaryKey = true) private String id; private String username; @Column(sqlConversion = MySQLAesEncryptColumnValueSQLConverter.class)//添加这个列为加密列 private String phone; private String idCard; private String address; private LocalDateTime createTime; } \"]},\"232\":{\"h\":\"新增数据\",\"t\":[\"SysUserSQLEncryption user = new SysUserSQLEncryption(); user.setId(\\\"12345\\\"); user.setUsername(\\\"username\\\"); user.setPhone(\\\"13232456789\\\"); user.setIdCard(\\\"12345678\\\"); user.setAddress(\\\"xxxxxxx\\\"); user.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(user).executeRows(); //插入语句采用手机号加密 ==> Preparing: INSERT INTO `t_sys_user_sql_encryption` (`id`,`username`,`phone`,`id_card`,`address`,`create_time`) VALUES (?,?,to_base64(AES_ENCRYPT(?,?)),?,?,?) ==> Parameters: 12345(String),username(String),13232456789(String),1234567890123456(String),12345678(String),xxxxxxx(String),2023-08-10T14:09:32.109(LocalDateTime) <== Total: 1 \"]},\"233\":{\"h\":\"查询数据\",\"t\":[\"单表\",\"SysUserSQLEncryption sysUserSQLEncryption = easyQuery.queryable(SysUserSQLEncryption.class) .whereById(\\\"12345\\\") .firstOrNull(); //查询语句采用手机号列解密 ==> Preparing: SELECT `id`,`username`,AES_DECRYPT(from_base64(`phone`),?) AS `phone`,`id_card`,`address`,`create_time` FROM `t_sys_user_sql_encryption` WHERE `id` = ? LIMIT 1 ==> Parameters: 1234567890123456(String),12345(String) <== Time Elapsed: 4(ms) <== Total: 1 SysUserSQLEncryption(id=12345, username=username, phone=13232456789, idCard=12345678, address=xxxxxxx, createTime=2023-08-10T14:10:33) \"]},\"234\":{\"h\":\"更新数据\",\"t\":[\"SysUserSQLEncryption sysUserSQLEncryption = easyQuery.queryable(SysUserSQLEncryption.class) .whereById(\\\"12345\\\") .firstOrNull(); sysUserSQLEncryption.setPhone(\\\"111123456\\\"); long l2 = easyQuery.updatable(sysUserSQLEncryption).executeRows(); ==> Preparing: UPDATE `t_sys_user_sql_encryption` SET `username` = ?,`phone` = to_base64(AES_ENCRYPT(?,?)),`id_card` = ?,`address` = ?,`create_time` = ? WHERE `id` = ? ==> Parameters: username(String),111123456(String),1234567890123456(String),12345678(String),xxxxxxx(String),2023-08-10T14:17:12(LocalDateTime),12345(String) <== Total: 1 \"]},\"235\":{\"h\":\"按列更新\",\"t\":[\" long l1 = easyQuery.updatable(SysUserSQLEncryption.class) .set(SysUserSQLEncryption::getPhone, \\\"1111234\\\") .whereById(\\\"12345\\\").executeRows(); ==> Preparing: UPDATE `t_sys_user_sql_encryption` SET `phone` = to_base64(AES_ENCRYPT(?,?)) WHERE `id` = ? ==> Parameters: 1111234(String),1234567890123456(String),12345(String) <== Total: 1 \",\"多表join查询\",\"SysUserSQLEncryption sysUserSQLEncryption1 = easyQuery.queryable(SysUserSQLEncryption.class) .leftJoin(Topic.class, (t, t1) -> t.eq(t1, SysUserSQLEncryption::getId, Topic::getId)) .where((t, t1) -> t.eq(SysUserSQLEncryption::getPhone, \\\"1111234\\\")) .select(SysUserSQLEncryption.class, (t, t1) -> t.columnAll()) .firstOrNull(); //注意这边列会自动带上具体的表名而不是简单的拼接所以在join条件下也无需关心别名 ==> Preparing: SELECT t.`id`,t.`username`,AES_DECRYPT(from_base64(t.`phone`),?) AS `phone`,t.`id_card`,t.`address`,t.`create_time` FROM `t_sys_user_sql_encryption` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` WHERE t.`phone` = to_base64(AES_ENCRYPT(?,?)) LIMIT 1 ==> Parameters: 1234567890123456(String),1111234(String),1234567890123456(String) <== Time Elapsed: 3(ms) <== Total: 1 \",\"说明!!!\",\"如果采用加密对进行处理那么默认是不支持like函数的,因为为了高性能默认easy-query采用的是对表达式条件值进行加密匹配而不是数据库列解密匹配,如果需要支持解密可以采用上一篇文章的加密方式,可以实现高性能的加密列like\"]},\"236\":{\"h\":\"计算属性\",\"t\":[\"通常我们会对用户的年龄使用一个字段来进行存储,但是大部分时候这个年龄属性应该是动态计算的而不是实时计算的,如果我们存储firstName和lastName那么用户的name字段也可以通过这种方式来实现计算\",\" public class UserAgeColumnValueSQLConverter implements ColumnValueSQLConverter { /** * 当这个值被作为select的时候如何处理 * @param table * @param columnMetadata * @param sqlPropertyConverter * @param runtimeContext */ @Override public void selectColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); SQLFunction durationDay = fx.duration(x->x.sqlFunc(fx.now()).column(table,\\\"birthday\\\"), DateTimeDurationEnum.Days); SQLFunction sqlFunction = fx.numberCalc(x -> x.sqlFunc(durationDay).value(365), NumberCalcEnum.NUMBER_DEVIDE); SQLFunction ageSQLFunction = fx.math(x -> x.sqlFunc(sqlFunction), MathMethodEnum.Ceiling); String sqlSegment = ageSQLFunction.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ ageSQLFunction.consume(context.getSQLNativeChainExpressionContext()); context.setAlias(columnMetadata.getName()); }); } /** * 当这个值被用作非查询的值的时候如何处理不出现在select里面 * @param table * @param columnMetadata * @param sqlPropertyConverter * @param runtimeContext */ @Override public void propertyColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); SQLFunction durationDay = fx.duration(x->x.sqlFunc(fx.now()).column(table,\\\"birthday\\\"), DateTimeDurationEnum.Days); SQLFunction sqlFunction = fx.numberCalc(x -> x.sqlFunc(durationDay).value(365), NumberCalcEnum.NUMBER_DEVIDE); SQLFunction ageSQLFunction = fx.math(x -> x.sqlFunc(sqlFunction), MathMethodEnum.Ceiling); String sqlSegment = ageSQLFunction.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ ageSQLFunction.consume(context.getSQLNativeChainExpressionContext()); }); } /** * 当前值作为比较值的时候比如where age=18 那么这个18应该怎么处理 * 当前这个值作为存储值的时候比如insert table (age) values(18)那么这个值如何处理 * @param table * @param columnMetadata * @param sqlParameter * @param sqlPropertyConverter * @param runtimeContext * @param isCompareValue 当前值是用于比较还是存储 */ @Override public void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext,boolean isCompareValue) { sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",context->{ context.value(sqlParameter); }); } } public class FullNameColumnValueSQLConverter implements ColumnValueSQLConverter { @Override public void selectColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); SQLFunction concat = fx.concat(\\\"firstName\\\", \\\"lastName\\\"); String sqlSegment = concat.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ concat.consume(context.getSQLNativeChainExpressionContext()); context.setAlias(columnMetadata.getName()); }); } @Override public void propertyColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); SQLFunction concat = fx.concat(\\\"firstName\\\", \\\"lastName\\\"); String sqlSegment = concat.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ concat.consume(context.getSQLNativeChainExpressionContext()); }); } @Override public void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext,boolean isCompareValue) { sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",context->{ context.value(sqlParameter); }); } } \"]},\"237\":{\"h\":\"查询\",\"t\":[\" List<UserExtra> list = easyEntityQuery.queryable(UserExtra.class) .where(u -> { u.fullName().like(\\\"123\\\"); u.fullName().in(Arrays.asList(\\\"1\\\", \\\"2\\\")); u.age().gt(12); }) .toList(); SELECT `id`, `first_name`, `last_name`, `birthday`, CONCAT(`first_name`,`last_name`) AS `full_name`, -- 全名就是first+last CEILING((timestampdiff(DAY,`birthday`,NOW()) / 365)) AS `age` -- 计算出出生日期到现在的天数除以365就是年向上取整就是虚岁 FROM `t_user_extra` WHERE CONCAT(`first_name`,`last_name`) LIKE '%123%' AND CONCAT(`first_name`,`last_name`) IN ( '1','2' ) AND CEILING((timestampdiff(DAY, `birthday`, NOW()) / 365)) > 12 List<UserExtra> list = easyEntityQuery.queryable(UserExtra.class) .where(u -> { u.id().eq(\\\"test2\\\"); u.fullName().like(\\\"悟\\\"); }).orderBy(x -> x.fullName().asc()) .toList(); SELECT `id`, `first_name`, `last_name`, `birthday`, CONCAT(`first_name`,`last_name`) AS `full_name`, CEILING((timestampdiff(DAY,`birthday`, NOW()) / 365)) AS `age` FROM `t_user_extra` WHERE `id` = 'test2' AND CONCAT(`first_name`,`last_name`) LIKE '%悟%' ORDER BY CONCAT(`first_name`,`last_name`) ASC List<UserExtra> list = easyEntityQuery.queryable(UserExtra.class) .where(u -> { u.id().eq(\\\"test3\\\"); u.fullName().like(\\\"悟\\\"); }).orderBy(x -> { x.fullName().asc(); x.age().asc(); x.fullName().asc(OrderByModeEnum.NULLS_LAST); }) .toList(); SELECT `id`, `first_name`, `last_name`, `birthday`, CONCAT(`first_name`, `last_name`) AS `full_name`, CEILING((timestampdiff(DAY, `birthday`, NOW()) / 365)) AS `age` FROM `t_user_extra` WHERE `id` = 'test3' AND CONCAT(`first_name`,`last_name`) LIKE '%悟%' ORDER BY CONCAT(`first_name`, `last_name`) ASC, CEILING((timestampdiff(DAY, `birthday`, NOW()) / 365)) ASC, CASE WHEN CONCAT(`first_name`, `last_name`) IS NULL THEN 1 ELSE 0 END ASC, CONCAT(`first_name`, `last_name`) ASC List<Draft3<Integer, String, String>> list = easyEntityQuery.queryable(UserExtra.class) .where(u -> { u.id().eq(\\\"test3\\\"); u.fullName().like(\\\"悟\\\"); }).groupBy(u -> GroupKeys.TABLE1.of(u.age(), u.fullName())) .select(group -> Select.DRAFT.of( group.key1(), group.key2(), group.groupTable().fullName().max() )).toList(); SELECT CEILING((timestampdiff(DAY, t.`birthday`, NOW()) / 365)) AS `value1`, CONCAT(t.`first_name`, t.`last_name`) AS `value2`, MAX(CONCAT(t.`first_name`, t.`last_name`)) AS `value3` FROM `t_user_extra` t WHERE t.`id` = 'test3' AND CONCAT(t.`first_name`,t.`last_name`) LIKE '%悟%' GROUP BY CEILING((timestampdiff(DAY, t.`birthday`, NOW()) / 365)), CONCAT(t.`first_name`, t.`last_name`) \"]},\"238\":{\"h\":\"插入\",\"t\":[\"UserExtra userExtra = new UserExtra(); userExtra.setId(\\\"test2\\\"); userExtra.setFirstName(\\\"孙\\\"); userExtra.setLastName(\\\"悟空\\\"); userExtra.setBirthday(LocalDateTime.of(2020, 1, 1, 0, 0)); easyEntityQuery.insertable(userExtra).executeRows(); INSERT INTO `t_user_extra` ( `id`,`first_name`,`last_name`,`birthday` ) VALUES ('test2','孙','悟空','2020-01-01 00:00') \"]},\"239\":{\"h\":\"复杂子查询\",\"t\":[\"因为有时候我们需要统计我们的子表数量可能会有对应的主表数量的聚合查询和最大值查询也可以通过这个来实现\"]},\"240\":{\"h\":\"相关博客\",\"t\":[\"《数据库列加密解密脱敏》\"]},\"241\":{\"h\":\"数据追踪\",\"t\":[\"easy-query提供了数据追踪功能,对于对象更新方法提供了数据追踪,保证对象更新时的差异更新而不是全量更新。默认需要自行开启 如果存在复杂对象通过ValueConverter转换的需要实现重写hashcode和equals\"]},\"242\":{\"h\":\"spring-boot\",\"t\":[\"如何开启数据追踪\",\"添加注解@EasyQueryTrack\",\"查询使用asTracking使当前查询结果添加到追踪上下文，或者使用easyQuery.addTracking()手动添加到当前上下文\"]},\"243\":{\"h\":\"非spring-boot环境\",\"t\":[\" TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); //todo }finally { trackManager.release(); } \",\"@EasyQueryTrack注解的本质就是TrackManager.begin\"]},\"244\":{\"h\":\"api\"},\"245\":{\"h\":\"TrackManager\",\"t\":[\"方法名\",\"参数\",\"描述\",\"begin\",\"无\",\"当前上下文开启追踪 需要和release()成对使用\",\"release\",\"无\",\"当前上下文开启追踪 需要和begin()成对使用\",\"currentThreadTracking\",\"无\",\"当前线程是否开启了追踪\",\"getCurrentTrackContext\",\"无\",\"获取当前线程追踪上下文没有这返回null\"]},\"246\":{\"h\":\"Queryable\",\"t\":[\"方法名\",\"参数\",\"描述\",\"asTracking\",\"无\",\"当前查询条件使用追踪需开启TrackManager.begin\",\"asNoTracking\",\"无\",\"当前查询条件不使用追踪查询,默认就是不使用\"]},\"247\":{\"h\":\"EasyQuery\",\"t\":[\"方法名\",\"参数\",\"描述\",\"addTracking\",\"entity\",\"添加entity到当前追踪上下文,如果当前对象不是数据库对象(无法获取数据库表名),将抛出错误,如果对象已被追踪且追踪对象并不是同一个对象也将抛错\",\"添加追踪主要用于对当前对象进行对象属性赋值前后的变更进行记录,可以动态生成updatesql语句,实现智能差异更新\"]},\"248\":{\"h\":\"demo数据\"},\"249\":{\"h\":\"新增测试数据\",\"t\":[\" SysUserTrack sysUserTrack = new SysUserTrack(); sysUserTrack.setId(\\\"1\\\"); sysUserTrack.setUsername(\\\"Username1\\\"); sysUserTrack.setPhone(\\\"13232323232\\\"); sysUserTrack.setIdCard(\\\"123456789000\\\"); sysUserTrack.setAddress(\\\"浙江省绍兴市越城区城市广场\\\"); sysUserTrack.setCreateTime(LocalDateTime.now()); long l1 = easyQuery.insertable(sysUserTrack).executeRows(); ==> Preparing: INSERT INTO t_sys_user_track (`id`,`username`,`phone`,`id_card`,`address`,`create_time`) VALUES (?,?,?,?,?,?) ==> Parameters: 1(String),Username1(String),WMHRmY6r4m7ir0KM/D4OmQ==kDIASgoxeZjK9M+Qem/HOQ==56QkLSvTa6eE9qpwjbYsRQ==kDIASgoxeZjK9M+Qem/HOQ==56QkLSvTa6eE9qpwjbYsRQ==kDIASgoxeZjK9M+Qem/HOQ==56QkLSvTa6eE9qpwjbYsRQ==kDIASgoxeZjK9M+Qem/HOQ==(String),OdaUl359SnxsbyZqMa05XA==496uK1pkxUbdvpq0A7q0uQ==PvHC30OSR7k27xKN36fp4g==+ta/N+1ivZAjSILsqeNjfA==hs33W1UJDlk1EFb0Nyhorw==biDnRYo+Cm5gy0r913fTOA==2Rp6hA8XQx2oIhTRo4ni2g==I6gg2QDr60Qx1Eq186LAGQ==9g+7mmP9u30kPOFB+Xcz+A==(String),eKgY/tc5Kw0qzXu0+uUSLg==hbIDJTImQweEbbz5EMyrHg==JI18Lhiq/kcrrVsD1fA++A==6S2NNhbFy4VM0KNPmMEXHw==A000VaxSBiODisuUDxv7Ow==d8z7fptVPIYMvhiXTVuJBA==xCHjVvd0uVW7a435+66hCQ==YQcXESYWhm+0Knr39sU2OA==SkFE84TtzzfqHWZFbfaDKw==IeaiLfgcyjbsMsCN7HvNVw==V7c/MZCC2DqXidxGrYe2RQ==n1Pxqra9C9LFh5xCY6xj6w==(String),2023-04-07T23:08:49.059(LocalDateTime) <== Total: 1 \"]},\"250\":{\"h\":\"追踪更新\",\"t\":[\"TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); SysUserTrack sysUserTrack1 = easyQuery.queryable(SysUserTrack.class).asTracking() .whereById(\\\"1\\\").firstOrNull(); boolean b = easyQuery.addTracking(sysUserTrack1); Assert.assertFalse(b); sysUserTrack1.setPhone(\\\"9876543210\\\"); long l2 = easyQuery.updatable(sysUserTrack1).executeRows(); Assert.assertEquals(1,l2); SysUserTrack sysUserTrack2 = easyQuery.queryable(SysUserTrack.class) .whereById(\\\"1\\\").firstOrNull(); Assert.assertNotNull(sysUserTrack2); Assert.assertEquals(\\\"9876543210\\\",sysUserTrack2.getPhone()); }finally { trackManager.release(); } //追踪更新查询 ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time` FROM t_sys_user_track t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 1(String) <== Total: 1, Query Use: 3(ms) //差异更新 只更新了phone字段并未对所有的字段进行更新 ==> Preparing: UPDATE t_sys_user_track SET `phone` = ? WHERE `id` = ? ==> Parameters: seCzI8LaMkjGIkSftziv9A==1eLkqpKHc0+z7SJdQatSPQ==3v3uw7ZFJo0Tpx49WSMSMQ==LtHsv2KAcRLroXaP4dZfUA==8ea6UUe6hNYz5k+VZDQzVA==Si5J530HvuEvZzZfAqnznA==VlCQ13+oM8wbOny682WILQ==(String),1(String) <== Total: 1 \"]},\"251\":{\"h\":\"开启追踪后对象属性不修改更新\",\"t\":[\"如果开启了追踪并且对象属性没有进行修改那么本次更新将不会生成sql执行数据库，因为程序认为本次没有任何需要变更的数据也就不需要更新\",\" TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); SysUserTrack sysUserTrack1 = easyQuery.queryable(SysUserTrack.class).asTracking() .whereById(id).firstOrNull(); boolean b = easyQuery.addTracking(sysUserTrack1); Assert.assertFalse(b); //因为开启了追踪但是对象数据没有发生变化,所以不生成sql不使用更新; long l2 = easyQuery.updatable(sysUserTrack1).executeRows(); Assert.assertEquals(0, l2); } finally { trackManager.release(); } ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time` FROM t_sys_user_track t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 5(String) <== Total: 1, Query Use: 6(ms) \"]},\"252\":{\"h\":\"不追踪更新\",\"t\":[\" TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); SysUserTrack sysUserTrack1 = easyQuery.queryable(SysUserTrack.class) .whereById(id).firstOrNull(); sysUserTrack1.setPhone(\\\"9876543210\\\"); long l2 = easyQuery.updatable(sysUserTrack1).executeRows(); Assert.assertEquals(1, l2); SysUserTrack sysUserTrack2 = easyQuery.queryable(SysUserTrack.class) .whereById(id).firstOrNull(); Assert.assertNotNull(sysUserTrack2); Assert.assertEquals(\\\"9876543210\\\", sysUserTrack2.getPhone()); } finally { trackManager.release(); } ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time` FROM t_sys_user_track t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 6(String) <== Total: 1, Query Use: 2(ms) //全字段更新 ==> Preparing: UPDATE t_sys_user_track SET `username` = ?,`phone` = ?,`id_card` = ?,`address` = ?,`create_time` = ? WHERE `id` = ? ==> Parameters: Username1(String),seCzI8LaMkjGIkSftziv9A==1eLkqpKHc0+z7SJdQatSPQ==3v3uw7ZFJo0Tpx49WSMSMQ==LtHsv2KAcRLroXaP4dZfUA==8ea6UUe6hNYz5k+VZDQzVA==Si5J530HvuEvZzZfAqnznA==VlCQ13+oM8wbOny682WILQ==(String),OdaUl359SnxsbyZqMa05XA==496uK1pkxUbdvpq0A7q0uQ==PvHC30OSR7k27xKN36fp4g==+ta/N+1ivZAjSILsqeNjfA==hs33W1UJDlk1EFb0Nyhorw==biDnRYo+Cm5gy0r913fTOA==2Rp6hA8XQx2oIhTRo4ni2g==I6gg2QDr60Qx1Eq186LAGQ==9g+7mmP9u30kPOFB+Xcz+A==(String),eKgY/tc5Kw0qzXu0+uUSLg==hbIDJTImQweEbbz5EMyrHg==JI18Lhiq/kcrrVsD1fA++A==6S2NNhbFy4VM0KNPmMEXHw==A000VaxSBiODisuUDxv7Ow==d8z7fptVPIYMvhiXTVuJBA==xCHjVvd0uVW7a435+66hCQ==YQcXESYWhm+0Knr39sU2OA==SkFE84TtzzfqHWZFbfaDKw==IeaiLfgcyjbsMsCN7HvNVw==V7c/MZCC2DqXidxGrYe2RQ==n1Pxqra9C9LFh5xCY6xj6w==(String),2023-04-08T09:57:08(LocalDateTime),6(String) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time` FROM t_sys_user_track t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 6(String) <== Total: 1, Query Use: 2(ms) \",\"警告\",\"！！！如果数据未被差异更新,请确认是否已经开启TrackManager.begin,spring-boot环境下直接使用@EasyQueryTrack注解,且是否使用asTracking查询或者查询后是否已经添加到当前追踪上下,如果数据量过多建议采用非tracking查询，需要更新前手动调用easyQuery.addTracking()来实现,否则每个查询对象都会添加到当前追踪上下文中\",\"！！！如果数据未被差异更新,请确认是否已经开启TrackManager.begin,spring-boot环境下直接使用@EasyQueryTrack注解,且是否使用asTracking查询或者查询后是否已经添加到当前追踪上下,如果数据量过多建议采用非tracking查询，需要更新前手动调用easyQuery.addTracking()来实现,否则每个查询对象都会添加到当前追踪上下文中\",\"！！！如果数据未被差异更新,请确认是否已经开启TrackManager.begin,spring-boot环境下直接使用@EasyQueryTrack注解,且是否使用asTracking查询或者查询后是否已经添加到当前追踪上下,如果数据量过多建议采用非tracking查询，需要更新前手动调用easyQuery.addTracking()来实现,否则每个查询对象都会添加到当前追踪上下文中\"]},\"253\":{\"h\":\"数据库函数生成列\",\"t\":[\"easy-query支持以数据库函数生成列值,比如通过自定义nextId()函数来实现插入时生成对应的id列,而不是普通的对象属性列.\"]},\"254\":{\"h\":\"自定义函数创建数据库自动生成列\",\"t\":[\"数据库对象,必须设置generatedKey为true,表示为自动生成的,如果不添加generatedSQLColumnGenerator那么将会视为自增列一样,不加入insert语句由数据库生成\",\"@Data @Table(\\\"custom_increment\\\") public class CustomIncrement { @Column(primaryKey = true,generatedKey = true, generatedSQLColumnGenerator = MyDatabaseIncrementSQLColumnGenerator.class) private String id; private String name; private String address; } \",\"自定义插入列函数\",\"public class MyDatabaseIncrementSQLColumnGenerator implements GeneratedKeySQLColumnGenerator { @Override public void configure(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { sqlPropertyConverter.sqlNativeSegment(\\\"mysqlNextId()\\\"); } } \",\"假设我定义了mysql的函数mysqlNextId自动生成主键id由mysql数据库函数来实现\",\"CustomIncrement customIncrement=new CustomIncrement(); //customIncrement.setId();//无论是否设置都会用 mysqlNextId 作为插入函数 customIncrement.setName(\\\"name\\\"); customIncrement.setAddress(\\\"address\\\"); easyQuery.insertable(customIncrement) .executeRows(); INSERT INTO `custom_increment` (`id`,`name`,`address`) VALUES (mysqlNextId(),?,?) \"]},\"255\":{\"h\":\"案例场景\",\"t\":[\"pgsql的geo数据新增或者自定义数据库函数生成列时,仅新增时调用\"]},\"256\":{\"h\":\"全局拦截器\",\"t\":[\"easy-qeury默认提供了拦截器,支持项目在工程化的时候可以批量拦截sql表达式\",\"自动填充id，自动填充创建人,自动填充创建时间,自动填充修改人,自动填充修改时间等\",\"请求租户id自动条件过滤\",\"用户权限比如领导可以看看和操作本部门和下属部门,部门只能看看和操作本部门,用户只能看和操作自己的数据\",\"比如/company/**的web请求路径将当前企业id:companyId作为条件限制只允许操作当前企业\",\"如果不知道如何使用可以查看 实战对象设计\",\"类\",\"名称\",\"描述\",\"EntityInterceptor\",\"对象拦截器\",\"用于对象插入前和修改前进行对象拦截\",\"PredicateFilterInterceptor\",\"条件拦截器\",\"用户在查询,修改,删除的时候可以通过条件拦截来动态构建添加条件如:租户id\",\"UpdateSetInterceptor\",\"更新列拦截器\",\"用户在更新update表达式的时候可以通过当前拦截器自动追加set列操作\"]},\"257\":{\"h\":\"Interceptor Api\",\"t\":[\"方法\",\"默认值/实现\",\"描述\",\"order\",\"100\",\"用于对拦截器进行顺序排序执行 越小越先执行\",\"enable\",\"true\",\"是否默认添加到表达式中前提是apply为true,true:默认添加,false:不添加可以通过ThreadLocal动态设置,或者调用useInterceptor(name)来显式使用\",\"name\",\"无\",\"拦截器名称需要自己实现,默认可以使用类名\",\"apply\",\"哪些对象允许采用当前拦截器\",\"默认可以才用是否为某个接口的实现Interface.class.isAssignableFrom(entityClass);\",\"说明!!!\",\"创建完拦截器后需要配置到QueryConfiguration,如果你是springboot并且是默认easy-query只需要添加@Component如果是solon那么可以查看配置或配置到所有数据源 如果您是自行构建的easy-query需要自行添加拦截器\",\"QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyInterceptor(new MyEntityInterceptor()); \"]},\"258\":{\"h\":\"demo数据\"},\"259\":{\"h\":\"EntityInterceptor\"},\"260\":{\"h\":\"Api\",\"t\":[\"方法\",\"默认实现\",\"描述\",\"configureInsert\",\"无\",\"配置自动插入时的值:创建时间,创建人\",\"configureUpdate\",\"无\",\"配置更新是需要修改的值:修改时间,修改人\",\"模拟当前用户租户对象\",\"public class CurrentUserHelper { private static String userId; public static void setUserId(String userId){ CurrentUserHelper.userId=userId; } public static String getUserId(){ return userId; } private static String tenantId; public static void setTenantId(String tenantId){ CurrentUserHelper.tenantId=tenantId; } public static String getTenantId(){ return tenantId; } } \",\"拦截器\",\" /** * create time 2023/4/3 21:13 * 如果是spring项目添加@Component，如果是非spring项目直接添加到QueryConfiguration.applyInterceptor * * @author xuejiaming */ public class MyEntityInterceptor implements EntityInterceptor { @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; if (topicInterceptor.getCreateTime() == null) { topicInterceptor.setCreateTime(LocalDateTime.now()); } if (topicInterceptor.getCreateBy() == null) { topicInterceptor.setCreateBy(CurrentUserHelper.getUserId()); } if (topicInterceptor.getUpdateTime() == null) { topicInterceptor.setUpdateTime(LocalDateTime.now()); } if (topicInterceptor.getUpdateBy() == null) { topicInterceptor.setUpdateBy(CurrentUserHelper.getUserId()); } } @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; topicInterceptor.setUpdateTime(LocalDateTime.now()); topicInterceptor.setUpdateBy(CurrentUserHelper.getUserId()); } @Override public String name() { return \\\"MyEntityInterceptor\\\"; } @Override public boolean apply(Class<?> entityClass) { return TopicInterceptor.class.isAssignableFrom(entityClass); } } //租户拦截器 public class MyTenantInterceptor implements EntityInterceptor,PredicateFilterInterceptor { @Override public String name() { return \\\"MyTenantInterceptor\\\"; } @Override public boolean apply(Class<?> entityClass) { return TopicInterceptor.class.isAssignableFrom(entityClass); } @Override public void configure(Class<?> entityClass, LambdaEntityExpressionBuilder lambdaEntityExpressionBuilder, WherePredicate<Object> wherePredicate) { if(CurrentUserHelper.getUserId()!=null){ wherePredicate.eq(\\\"tenantId\\\", CurrentUserHelper.getTenantId()); } } @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; if (topicInterceptor.getTenantId() == null) { topicInterceptor.setTenantId(CurrentUserHelper.getTenantId()); } } @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { } } \",\"测试代码\",\"//设置当前租户和当前用户 CurrentUserHelper.setUserId(\\\"xiaoming\\\"); CurrentUserHelper.setTenantId(\\\"abc\\\"); TopicInterceptor topicInterceptor = new TopicInterceptor(); topicInterceptor.setId(\\\"123\\\"); topicInterceptor.setTitle(\\\"123\\\"); topicInterceptor.setStars(123); long l = easyQuery.insertable(topicInterceptor).executeRows(); ==> Preparing: INSERT INTO t_topic_interceptor (`id`,`stars`,`title`,`create_time`,`create_by`,`update_time`,`update_by`,`tenant_id`) VALUES (?,?,?,?,?,?,?,?) ==> Parameters: 123(String),123(Integer),123(String),2023-04-03T21:28:32.643(LocalDateTime),xiaoming(String),2023-04-03T21:28:32.643(LocalDateTime),xiaoming(String),abc(String) <== Total: 1 TopicInterceptor topicInterceptor1 = easyQuery.queryable(TopicInterceptor.class).whereId(\\\"123\\\").firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time`,t.`create_by`,t.`update_time`,t.`update_by`,t.`tenant_id` FROM t_topic_interceptor t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Total: 1 CurrentUserHelper.setUserId(\\\"xiaoming1\\\"); long l1 = easyQuery.updatable(topicInterceptor1).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `stars` = ?,`title` = ?,`update_time` = ?,`update_by` = ? WHERE `id` = ? ==> Parameters: 123(Integer),123(String),2023-04-03T21:28:32.670(LocalDateTime),xiaoming1(String),123(String) <== Total: 1 \",\"插入的时候确定了自动填充,实际项目中可以通过接口来限制,更新的时候也会自动更新时间,但是如果是表达式更新那么还是原先的操作并不会更新\",\" long l2 = easyQuery.updatable(TopicInterceptor.class).set(TopicInterceptor::getTitle, topicInterceptor2.getTitle()) .whereId(topicInterceptor2.getId()).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `title` = ? WHERE `id` = ? ==> Parameters: 123(String),123(String) <== Total: 1 \",\"这种情况下updateBy和updateTime并不会自动添加到生成的sql里面,这个时候我们的UpdateSetInterceptor拦截就起作用了\"]},\"261\":{\"h\":\"UpdateSetInterceptor\",\"t\":[\"我们在原先的拦截器上再次实现UpdateSetInterceptor让原先的拦截器支持表达式set,当然你也可以单独创建一个拦截器,如果单独创建那么可以单独对其进行选择性启用或者禁用\"]},\"262\":{\"h\":\"Api\",\"t\":[\"方法\",\"默认实现\",\"描述\",\"configure\",\"无\",\"配置表达式更新set列自动填充\",\" /** * create time 2023/4/3 21:13 * 如果是spring项目添加@Component，如果是非spring项目直接添加到EasQueryConfiguration.applyInterceptor * * @author xuejiaming */ public class MyEntityInterceptor implements EntityInterceptor, UpdateSetInterceptor { @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; if (topicInterceptor.getCreateTime() == null) { topicInterceptor.setCreateTime(LocalDateTime.now()); } if (topicInterceptor.getCreateBy() == null) { topicInterceptor.setCreateBy(CurrentUserHelper.getUserId()); } if (topicInterceptor.getUpdateTime() == null) { topicInterceptor.setUpdateTime(LocalDateTime.now()); } if (topicInterceptor.getUpdateBy() == null) { topicInterceptor.setUpdateBy(CurrentUserHelper.getUserId()); } } @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; topicInterceptor.setUpdateTime(LocalDateTime.now()); topicInterceptor.setUpdateBy(CurrentUserHelper.getUserId()); } @Override public String name() { return \\\"MyEntityInterceptor\\\"; } @Override public boolean apply(Class<?> entityClass) { return TopicInterceptor.class.isAssignableFrom(entityClass); } @Override public void configure(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, ColumnSetter<Object> columnSetter) { String updateBy = \\\"updateBy\\\";//属性名用来动态创建lambda String updateTime = \\\"updateTime\\\";//属性名用来动态创建lambda //是否已经set了 if(!entityUpdateExpressionBuilder.getSetColumns().containsOnce(entityClass,updateBy)){ String userId = CurrentUserHelper.getUserId(); columnSetter.set(updateBy,userId); } if(!entityUpdateExpressionBuilder.getSetColumns().containsOnce(entityClass,updateTime)){ columnSetter.set(updateTime,LocalDateTime.now()); } } } \",\"测试\",\"long l2 = easyQuery.updatable(TopicInterceptor.class) //虽然我们没有在表达式中设置需要set的属性,但是因为拦截器得原因easy-qeury帮我们自动的进行了处理 .set(TopicInterceptor::getTitle, topicInterceptor2.getTitle()) .whereId(topicInterceptor2.getId()).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `title` = ?,`update_by` = ?,`update_time` = ? WHERE `id` = ? ==> Parameters: 123(String),xiaoming1(String),2023-04-03T21:56:39.426(LocalDateTime),123(String) <== Total: 1 \",\"到目前为止基本上大部分的业务需求已经可以实现了，但是如果你是有租户的或者你是需要对当前请求查询条件进行额外条件过滤添加的,那么PredicateFilterInterceptor可以帮你满足这个条件\"]},\"263\":{\"h\":\"PredicateFilterInterceptor\"},\"264\":{\"h\":\"Api\",\"t\":[\"方法\",\"默认实现\",\"描述\",\"configure\",\"无\",\"配置表达式where条件,查询,修改(对象/表达式),删除(对象/表达式)\"]},\"265\":{\"h\":\"租户模式实现\",\"t\":[\" 添加租户id\",\" 查询过滤租户id\",\" 更新添加租户id条件\",\" 删除添加租户id\",\"这边我们新建一个租户拦截器,把原先拦截器里面的自动填充租户id移动到租户拦截器里面\",\" public class MyTenantInterceptor implements EntityInterceptor,PredicateFilterInterceptor { @Override public String name() { return \\\"MyTenantInterceptor\\\"; } @Override public boolean apply(Class<?> entityClass) { return TopicInterceptor.class.isAssignableFrom(entityClass); } @Override public void configure(Class<?> entityClass, LambdaEntityExpressionBuilder lambdaEntityExpressionBuilder, WherePredicate<Object> sqlWherePredicate) { if(CurrentUserHelper.getUserId()!=null){x sqlWherePredicate.eq(\\\"tenantId\\\", CurrentUserHelper.getTenantId()); } } @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; if (topicInterceptor.getTenantId() == null) { topicInterceptor.setTenantId(CurrentUserHelper.getTenantId()); } } @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { } } \",\"测试\",\" //查询 TopicInterceptor topicInterceptor1 = easyQuery.queryable(TopicInterceptor.class).whereId(\\\"12345\\\").firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time`,t.`create_by`,t.`update_time`,t.`update_by`,t.`tenant_id` FROM t_topic_interceptor t WHERE t.`tenant_id` = ? AND t.`id` = ? LIMIT 1 ==> Parameters: abc(String),12345(String) <== Total: 1 //实体对象更新 CurrentUserHelper.setUserId(\\\"xiaoming1\\\"); long l1 = easyQuery.updatable(topicInterceptor1).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `stars` = ?,`title` = ?,`update_time` = ?,`update_by` = ? WHERE `tenant_id` = ? AND `id` = ? ==> Parameters: 12345(Integer),12345(String),2023-04-03T22:20:27.756(LocalDateTime),xiaoming1(String),abc(String),12345(String) <== Total: 1 //表达式更新 long l2 = easyQuery.updatable(TopicInterceptor.class).set(TopicInterceptor::getTitle, topicInterceptor2.getTitle()) .whereId(topicInterceptor2.getId()).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `title` = ?,`update_by` = ?,`update_time` = ? WHERE `tenant_id` = ? AND `id` = ? ==> Parameters: 12345(String),xiaoming1(String),2023-04-03T22:20:27.773(LocalDateTime),abc(String),12345(String) <== Total: 1 //表达式删除 long l3 = easyQuery.deletable(TopicInterceptor.class) .whereById(topicInterceptor2.getId()).executeRows(); ==> Preparing: DELETE FROM t_topic_interceptor WHERE `tenant_id` = ? AND `id` = ? ==> Parameters: abc(String),12345(String) <== Total: 1 //对象删除 long l4 = easyQuery.deletable(topicInterceptor2).executeRows(); ==> Preparing: DELETE FROM t_topic_interceptor WHERE `tenant_id` = ? AND `id` = ? ==> Parameters: abc(String),12345(String) <== Total: 0 \",\"所有的增删改都会添加对应的条件表达式值,可以做到表结构完美隔离租户之间的数据,并且用户使用全程无感\"]},\"266\":{\"h\":\"按需拦截\",\"t\":[\"比如我们现在有这么一个需求因为部分接口需要针对测试数据进行移除,不希望统计到程序里面所以可以针对部分情况进行按需拦截\\n可以新建一个表达式拦截器PredicateFilterInterceptor,然后默认将enable改成false需要时自行添加条件通过useInteceptor(name),或者可以通过判断当前是否是某个api接口比如startWith(\\\"/api/test\\\"),可以通过ThreadLocal来表示当前启用值\"]},\"267\":{\"h\":\"jdbc执行监听器\",\"t\":[\"该监听器用来监听jdbc的执行前后sql和参数还有异常和耗时,可以用来记录慢sql。\"]},\"268\":{\"h\":\"JdbcExecutorListener\",\"t\":[\"方法\",\"默认\",\"描述\",\"enable\",\"false\",\"表示是否使用监听器\",\"onExecuteBefore\",\"空\",\"用来记录监听前的参数信息\",\"onExecuteAfter\",\"空\",\"用来监听监听后的参数信息\"]},\"269\":{\"h\":\"JdbcExecuteBeforeArg\",\"t\":[\"执行前参数\",\"方法\",\"类型\",\"默认\",\"描述\",\"traceId\",\"String\",\"UUID.randomUUID().toString()\",\"用来连接前后执行的追踪id,可以自己重写\",\"sql\",\"String\",\"执行的sql\",\"用来记录监听前的参数信息\",\"sqlParameters\",\"List<List<SQLParameter>>\",\"Collections.emptyList()\",\"用来监听监听后的参数信息\",\"start\",\"long\",\"System.currentTimeMillis()\",\"执行当前方法的毫秒数\",\"state\",\"Map<String,Object>\",\"null\",\"用来监听监听后的参数信息\"]},\"270\":{\"h\":\"JdbcExecuteAfterArg\",\"t\":[\"执行后参数\",\"方法\",\"类型\",\"默认\",\"描述\",\"beforeArg\",\"JdbcExecuteBeforeArg\",\"null\",\"执行前的参数\",\"rows\",\"int\",\"受影响行数\",\"如果当前是查询那么这个值永远为0,因为查询是stream模式获取,无法在jdbc返回后知晓结果\",\"sqlParameters\",\"List<List<SQLParameter>>\",\"Collections.emptyList()\",\"用来监听监听后的参数信息\",\"exception\",\"Exception\",\"null\",\"执行时发生的异常\",\"end\",\"long\",\"System.currentTimeMillis()\",\"执行当前方法的毫秒数\"]},\"271\":{\"h\":\"自定义监听器\",\"t\":[\"创建一个自定义监听器监听耗时3秒以上的sql,并且发送到监控平台\",\" public class LogSlowSQLListener implements JdbcExecutorListener { @Override public boolean enable() { return true;//表示需要开启监听 } @Override public void onExecuteBefore(JdbcExecuteBeforeArg arg) { //这边可以通过setState来传递参数 // HashMap<String, Object> state = new HashMap<>(); // arg.setState(state); } @Override public void onExecuteAfter(JdbcExecuteAfterArg afterArg) { //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 JdbcExecuteBeforeArg beforeArg = afterArg.getBeforeArg(); //通过getState来获取before的参数 // Map<String, Object> state = beforeArg.getState(); //记录耗时操作 long elapsed = afterArg.getEnd() - beforeArg.getStart(); //耗时3秒以上的sql需要记录 //因为sqlParameters第一层大于1表示是批处理,批处理的时间一般是比较多的你可以选择 //不记录本次sql或者只记录sql不记录sql参数自行处理 if(elapsed>=3*1000 && beforeArg.getSqlParameters().size()<=1){ //发送http请求 String sql = beforeArg.getSql(); List<List<SQLParameter>> sqlParameters = beforeArg.getSqlParameters(); if(sqlParameters.size()==1){ String params = EasySQLUtil::sqlParameterToString(sqlParameters.get(0)) } Exception exception = afterArg.getException(); } } } \",\"替换掉系统的监听器\",\"easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setDeleteThrowError(false); }) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) //替换掉系统的默认监听行为 .replaceService(JdbcExecutorListener.class, LogSlowSQLListener.class) .build(); \",\"当然这种情况只适合无需外部参数传入的情况下,如果我们需要传递外部bean到框架内部可以直接注册\"]},\"272\":{\"h\":\"循环监听\",\"t\":[\"很多时候我们可能会将监听到的超时sql进行mq的发送然后来存入到自己的数据库,但是因为存入数据库也会触发jdbcListener所以eq贴心的给用户添加了忽略jdbcListener的功能,保证插入到数据库不会出现循环监听\",\" //查询数据移除JDBC_LISTEN行为 List<Topic> list = easyEntityQuery.queryable(Topic.class) .configure(config -> { config.getBehavior().removeBehavior(EasyBehaviorEnum.JDBC_LISTEN); }).toList(); //插入数据移除JDBC_LISTEN行为 Topic topic = new Topic(); easyEntityQuery.insertable(topic) .configure(config->{ config.getBehavior().removeBehavior(EasyBehaviorEnum.JDBC_LISTEN); }).executeRows(); //更新数据移除JDBC_LISTEN行为 Topic topic = new Topic(); easyEntityQuery.updatable(topic) .configure(config->{ config.getBehavior().removeBehavior(EasyBehaviorEnum.JDBC_LISTEN); }).executeRows(); easyEntityQuery.updatable(Topic.class) .configure(config->{ config.getBehavior().removeBehavior(EasyBehaviorEnum.JDBC_LISTEN); }) .setColumns(t -> { t.title().set(\\\"123\\\"); }) .where(t -> { t.id().eq(\\\"123\\\"); }) .executeRows(); //删除数据移除JDBC_LISTEN行为 Topic topic = new Topic(); easyEntityQuery.deletable(topic) .configure(config->{ config.getBehavior().removeBehavior(EasyBehaviorEnum.JDBC_LISTEN); }).executeRows(); easyEntityQuery.deletable(Topic.class) .configure(config->{ config.getBehavior().removeBehavior(EasyBehaviorEnum.JDBC_LISTEN); }) .where(t -> { t.id().eq(\\\"123\\\"); }) .executeRows(); \"]},\"273\":{\"h\":\"springboot为例\",\"t\":[\"假设我们有这个一个日志请求bean通过@Component注册到了springboot中\",\" @Component public class HttpLogRequest { public void send(Object request){ } } public class LogSlowSQLListener implements JdbcExecutorListener { //通过构造函数注入 private final HttpLogRequest httpLogRequest; public LogSlowSQLListener(HttpLogRequest httpLogRequest){ this.httpLogRequest = httpLogRequest; } @Override public boolean enable() { return true;//表示需要开启监听 } @Override public void onExecuteBefore(JdbcExecuteBeforeArg arg) { //这边可以通过setState来传递参数 // HashMap<String, Object> state = new HashMap<>(); // arg.setState(state); } @Override public void onExecuteAfter(JdbcExecuteAfterArg afterArg) { //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 JdbcExecuteBeforeArg beforeArg = afterArg.getBeforeArg(); //通过getState来获取before的参数 // Map<String, Object> state = beforeArg.getState(); //记录耗时操作 long elapsed = afterArg.getEnd() - beforeArg.getStart(); //耗时3秒以上的sql需要记录 //因为sqlParameters第一层大于1表示是批处理,批处理的时间一般是比较多的你可以选择 //不记录本次sql或者只记录sql不记录sql参数自行处理 if(elapsed>=3*1000 && beforeArg.getSqlParameters().size()<=1){ //发送http请求 String sql = beforeArg.getSql(); List<List<SQLParameter>> sqlParameters = beforeArg.getSqlParameters(); if(sqlParameters.size()==1){ String params = EasySQLUtil::sqlParameterToString(sqlParameters.get(0)) } Exception exception = afterArg.getException(); } } } @Component public class MyStarterConfigurer implements StarterConfigurer { @Autowired private HttpLogRequest httpLogRequest; @Override public void configure(ServiceCollection services) { services.addService(httpLogRequest);//直接注册实例到easy-query内部的依赖注入容器里面 services.addService(JdbcExecutorListener.class, LogSlowSQLListener.class); } } \",\"只要将实例对象HttpLogRequest直接注入到容器中,那么easy-query内部的所有服务都可以直接获取到HttpLogRequest，所以LogSlowSQLListener也可以获取到\"]},\"274\":{\"h\":\"solon\",\"t\":[\" @Component public class HttpLogRequest { public void send(Object request){ } } public class LogSlowSQLListener implements JdbcExecutorListener { private final HttpLogRequest httpLogRequest; public LogSlowSQLListener(HttpLogRequest httpLogRequest){ this.httpLogRequest = httpLogRequest; } @Override public boolean enable() { return true;//表示需要开启监听 } @Override public void onExecuteBefore(JdbcExecuteBeforeArg arg) { //这边可以通过setState来传递参数 // HashMap<String, Object> state = new HashMap<>(); // arg.setState(state); } @Override public void onExecuteAfter(JdbcExecuteAfterArg afterArg) { //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 JdbcExecuteBeforeArg beforeArg = afterArg.getBeforeArg(); //通过getState来获取before的参数 // Map<String, Object> state = beforeArg.getState(); //记录耗时操作 long elapsed = afterArg.getEnd() - beforeArg.getStart(); //耗时3秒以上的sql需要记录 //因为sqlParameters第一层大于1表示是批处理,批处理的时间一般是比较多的你可以选择 //不记录本次sql或者只记录sql不记录sql参数自行处理 if(elapsed>=3*1000 && beforeArg.getSqlParameters().size()<=1){ //发送http请求 String sql = beforeArg.getSql(); List<List<SQLParameter>> sqlParameters = beforeArg.getSqlParameters(); if(sqlParameters.size()==1){ String params = EasySQLUtil::sqlParameterToString(sqlParameters.get(0)) } Exception exception = afterArg.getException(); } } } \",\"solon也是一样将需要的bean注入进来，不同的是solon通过监听订阅事件注入即可\",\" public class App { public static void main(String[] args) { Solon.start(App.class,args,app->{ app.onEvent(EasyQueryBuilderConfiguration.class,e->{ HttpLogRequest httpLogRequest = app.context().getBean(HttpLogRequest.class); e.replaceService(httpLogRequest); e.replaceService(JdbcExecutorListener.class,LogSlowSQLListener.class); }); }); } } \",\"说明!!!\",\"如果solon在app处onEvent无法获取bean那么可以通过延迟获取的方式\",\" public class LogSlowSQLListener implements JdbcExecutorListener { private final ServiceProvider serviceProvider; public LogSlowSQLListener(ServiceProvider serviceProvider){ this.serviceProvider = serviceProvider; } @Override public boolean enable() { return true;//表示需要开启监听 } @Override public void onExecuteBefore(JdbcExecuteBeforeArg arg) { //这边可以通过setState来传递参数 // HashMap<String, Object> state = new HashMap<>(); // arg.setState(state); } @Override public void onExecuteAfter(JdbcExecuteAfterArg afterArg) { //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 //为了不影响性能建议采用异步线程池发送http,同步的话会影响性能 //通过serviceProvider来获取注册的bean实例 AppContext service = serviceProvider.getService(AppContext.class); HttpLogRequest httpLogRequest = service.getBean(HttpLogRequest.class); JdbcExecuteBeforeArg beforeArg = afterArg.getBeforeArg(); //通过getState来获取before的参数 // Map<String, Object> state = beforeArg.getState(); //记录耗时操作 long elapsed = afterArg.getEnd() - beforeArg.getStart(); //耗时3秒以上的sql需要记录 //因为sqlParameters第一层大于1表示是批处理,批处理的时间一般是比较多的你可以选择 //不记录本次sql或者只记录sql不记录sql参数自行处理 if(elapsed>=3*1000 && beforeArg.getSqlParameters().size()<=1){ //发送http请求 String sql = beforeArg.getSql(); List<List<SQLParameter>> sqlParameters = beforeArg.getSqlParameters(); if(sqlParameters.size()==1){ String params = EasySQLUtil::sqlParameterToString(sqlParameters.get(0)) } Exception exception = afterArg.getException(); } } } public class App { public static void main(String[] args) { Solon.start(App.class,args,app->{ app.onEvent(EasyQueryBuilderConfiguration.class,e->{ // HttpLogRequest httpLogRequest = app.context().getBean(HttpLogRequest.class); e.replaceService(app.context()); e.replaceService(JdbcExecutorListener.class,LogSlowSQLListener.class); }); }); } } \"]},\"275\":{\"h\":\"逻辑删除\",\"t\":[\"easy-query的逻辑删除可以帮助用户在select的时候过滤逻辑删除字段，update的时候也可以，delete的时候也可以转换对应的update,并且系统提供了大量的默认逻辑删除策略,并且用户也可以自定义实现更多的逻辑删除\",\"方法\",\"默认\",\"描述\",\"disableLogicDelete\",\"禁用逻辑删除\",\"不具有跨表达式的传递性也就是子查询逻辑删除独立计算\",\"enableLogicDelete\",\"启用逻辑删除\",\"不具有跨表达式的传递性也就是子查询逻辑删除独立计算\",\"useLogicDelete\",\"传入是否启用值\",\"不具有跨表达式的传递性也就是子查询逻辑删除独立计算\",\"tableLogicDelete\",\"禁用最近的一张表\",\"不具有跨表达式的传递性也就是子查询逻辑删除独立计算,会和全局disableLogicDelete、enableLogicDelete、useLogicDelete互相作用and\",\"relationLogicDelete\",\"禁用启用关联关系表\",\"不具有传递性也会和全局作用\",\"说明!!!\",\"判断顺序:都启用的情况下才会去判断是否禁用,如果全局设置禁用那么不会去判断是否启用\"]},\"276\":{\"h\":\"demo数据\"},\"277\":{\"h\":\"LogicDelete\",\"t\":[\"在对应的数据库实体上面添加注解,LogicDelete可以让整个实体以该字段作为逻辑删除字段,其中strategy表示为逻辑删除字段的枚举,除了框架默认提供的框架也支持用户自定义逻辑删除\"]},\"278\":{\"h\":\"例子\",\"t\":[\"查询\",\"List<LogicDelTopic> logicDelTopics = easyQuery.queryable(LogicDelTopic.class).toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted`,t.`create_time` FROM t_logic_del_topic t WHERE t.`deleted` = ? ==> Parameters: false(Boolean) <== Total: 100 \",\"按条件删除\",\"long l = easyQuery.deletable(LogicDelTopic.class) .whereById(\\\"11\\\") .executeRows(); ==> Preparing: UPDATE t_logic_del_topic SET `deleted` = ? WHERE `deleted` = ? AND `id` = ? ==> Parameters: true(Boolean),false(Boolean),11(String) <== Total: 1 \",\"实体对象删除\",\" LogicDelTopic logicDelTopic = easyQuery.queryable(LogicDelTopic.class) .whereId(\\\"11\\\").firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted`,t.`create_time` FROM t_logic_del_topic t WHERE t.`deleted` = ? AND t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),11(String) <== Total: 1 long l = easyQuery.deletable(logicDelTopic) .executeRows(); ==> Preparing: UPDATE t_logic_del_topic SET `deleted` = ? WHERE `deleted` = ? AND `id` = ? ==> Parameters: true(Boolean),false(Boolean),11(String) <== Total: 1 \"]},\"279\":{\"h\":\"strategy\",\"t\":[\"枚举\",\"默认\",\"描述\",\"CUSTOM\",\"❌\",\"用户自定义实现LogicDeleteStrategy或者 AbstractLogicDeleteStrategy\",\"BOOLEAN\",\"✅\",\"Boolean,boolean类型的属性true表示删除,false表示未被删除\",\"DELETE_LONG_TIMESTAMP\",\"❌\",\"Long,long类型的属性,0表示未被删除,大于0表示被删除\",\"LOCAL_DATE_TIME\",\"❌\",\"LocalDateTime.class null表示未被删除, not null表示被删除\",\"LOCAL_DATE\",\"❌\",\"LocalDate.class null表示未被删除, not null表示被删除\"]},\"280\":{\"h\":\"禁用逻辑删除\",\"t\":[\"通过添加链式方法disableLogicDelete()可以禁用当前表达式的逻辑删除\",\"//查询 List<LogicDelTopic> logicDelTopics = easyQuery.queryable(LogicDelTopic.class).disableLogicDelete().toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted`,t.`create_time` FROM t_logic_del_topic t <== Total: 100 //删除 long l = easyQuery.deletable(LogicDelTopic.class) .disableLogicDelete() .whereById(\\\"111xx\\\") .executeRows(); ==> Preparing: DELETE FROM t_logic_del_topic WHERE `id` = ? ==> Parameters: 111xx(String) <== Total: 0 //修改 long l = easyQuery.updatable(LogicDelTopic.class) .disableLogicDelete() .set(LogicDelTopic::getTitle, logicDelTopic.getTitle()) .whereId(logicDelTopic.getId()) .executeRows(); ==> Preparing: UPDATE t_logic_del_topic SET `title` = ? WHERE `id` = ? ==> Parameters: 标题0(String),0(String) <== Total: 1 \"]},\"281\":{\"h\":\"禁用部分逻辑删除\",\"t\":[\"//同一个表达式内from的表然后加join的表所以最近的一张表是join的表 //正常的sql不进行部分禁用 List<BlogEntity> list2 = easyEntityQuery.queryable(BlogEntity.class) .leftJoin(BlogEntity.class, (b, b2) -> b.id().eq(b2.id())) .where((b1, b2) -> b1.title().like(\\\"123\\\")) .toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM `t_blog` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t.`deleted` = ? AND t.`title` LIKE ? ==> Parameters: false(Boolean),false(Boolean),%123%(String) //禁用部分逻辑删除join的表禁用from的表不禁用 List<BlogEntity> list1 = easyEntityQuery.queryable(BlogEntity.class) .leftJoin(BlogEntity.class, (b, b2) -> b.id().eq(b2.id())) .tableLogicDelete(() -> false) .where((b1, b2) -> b1.title().like(\\\"123\\\")) .toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM `t_blog` t LEFT JOIN `t_blog` t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? AND t.`title` LIKE ? ==> Parameters: false(Boolean),%123%(String) \"]},\"282\":{\"h\":\"自定义逻辑删除\",\"t\":[\"很多用户可能对现有的很多系统拥有的逻辑删除都表示非常弱鸡,甚至只支持单字段的逻辑删除,easy-query提供了高级抽象可以让用户自行实现逻辑删除\"]},\"283\":{\"h\":\"自定义逻辑删除数据\"},\"284\":{\"h\":\"实现自定义逻辑删除策略\",\"t\":[\"easy-query默认提供了一个接口和一个抽象来实现逻辑删除,默认用户可以选择抽象(简单)AbstractLogicDeleteStrategy,或者接口LogicDeleteStrategy 这次我们采用抽象来实现\",\"新建一个静态帮助类来模拟当前用户因为我们这次自定义需要实现两个甚至多个字段逻辑删除处理\",\"public class CurrentUserHelper { private static String userId; public static void setUserId(String userId){ CurrentUserHelper.userId=userId; } public static String getUserId(){ return userId; } } \",\" //@Component //如果是spring //非spring或者spring且自行构建build的Qu二有RuntimeContext那么就需要调用 //configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); //其中configuration通过以下代码来获取 QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); public class MyLogicDelStrategy extends AbstractLogicDeleteStrategy { /** * 允许datetime类型的属性 */ private static final Set<Class<?>> allowTypes=new HashSet<>(Arrays.asList(LocalDateTime.class)); @Override protected SQLExpression1<WherePredicate<Object>> getPredicateFilterExpression(LogicDeleteBuilder builder,String propertyName) { //如果需要唯一索引请自行选择数据库是否支持null的唯一索引 //如果不支持可以选择小于1900年或者一个固定年份来作为被删除 return o->o.isNull(propertyName); } @Override protected SQLExpression1<ColumnSetter<Object>> getDeletedSQLExpression(LogicDeleteBuilder builder, String propertyName) { // LocalDateTime now = LocalDateTime.now(); // return o->o.set(propertyName,now); //上面的是错误用法,将now值获取后那么这个now就是个固定值而不是动态值 return o->o.set(propertyName,LocalDateTime.now()) .set(\\\"deletedUser\\\",CurrentUserHelper.getUserId()); } @Override public String getStrategy() { return \\\"MyLogicDelStrategy\\\"; } @Override public Set<Class<?>> allowedPropertyTypes() { return allowTypes; } } \",\"修改我们的实体对象\",\"@Data @Table(\\\"t_logic_del_topic_custom\\\") public class LogicDelTopicCustom { @Column(primaryKey = true) private String id; private Integer stars; private String title; //如果是自定义strategy必须是LogicDeleteStrategyEnum.CUSTOM,并且strategyName不可以为空 @LogicDelete(strategy = LogicDeleteStrategyEnum.CUSTOM,strategyName = \\\"MyLogicDelStrategy\\\") private LocalDateTime deletedAt; private String deletedUser; private LocalDateTime createTime; } \"]},\"285\":{\"h\":\"测试\",\"t\":[\"List<LogicDelTopicCustom> logicDelTopics = easyQuery.queryable(LogicDelTopicCustom.class).toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted_at`,t.`deleted_user`,t.`create_time` FROM t_logic_del_topic_custom t WHERE t.`deleted_at` IS NULL <== Total: 100 LogicDelTopicCustom logicDelTopic = easyQuery.queryable(LogicDelTopicCustom.class) .where(o->o.eq(LogicDelTopicCustom::getId,\\\"1\\\")).firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted_at`,t.`deleted_user`,t.`create_time` FROM `t_logic_del_topic_custom` t WHERE t.`deleted_at` IS NULL AND t.`id` = ? LIMIT 1 ==> Parameters: 1(String) <== Time Elapsed: 2(ms) <== Total: 1 long l = easyQuery.updatable(logicDelTopic).executeRows(); ==> Preparing: UPDATE t_logic_del_topic_custom SET `stars` = ?,`title` = ?,`deleted_user` = ?,`create_time` = ? WHERE `deleted_at` IS NULL AND `id` = ? ==> Parameters: 101(Integer),标题1(String),null(null),2023-04-02T23:09:03(LocalDateTime),1(String) <== Total: 1 //为了测试防止数据被删掉,这边采用不存在的id logicDelTopic.setId(\\\"11xx\\\"); //测试当前人员 CurrentUserHelper.setUserId(\\\"easy-query\\\"); long l = easyQuery.deletable(logicDelTopic).executeRows(); ==> Preparing: UPDATE t_logic_del_topic_custom SET `deleted_at` = ?,`deleted_user` = ? WHERE `deleted_at` IS NULL AND `id` = ? ==> Parameters: 2023-04-01T23:15:13.944(LocalDateTime),easy-query(String),11xx(String) <== Total: 0 \",\"到这里为止我们就完全实现了逻辑删除自定义并且支持更新多字段\"]},\"286\":{\"h\":\"相关搜索\",\"t\":[\"逻辑删除软删除soft deletelogic delete\"]},\"287\":{\"h\":\"数据库函数(新)\",\"t\":[\"框架默认提供了部分数据库函数,并且支持适配所有的数据库.包括常见的字符串函数和时间格式化函数,包括数学函数等\"]},\"288\":{\"h\":\"通用函数\",\"t\":[\"方法\",\"描述\",\"entity\",\"lambda\",\"property\",\"nullOrDefault\",\"如果列为null则返回参数值\",\"b.id().nullOrDefault(\\\"123\\\")\",\"b.fx().nullOrDefault(BlogEntity::getId, \\\"123\\\")\",\"b.fx().nullOrDefault(\\\"id\\\", \\\"123\\\")\",\"count\",\"统计数量返回long\",\"b.id().count()\",\"b.fx().count(BlogEntity::getId)\",\"b.fx().count(\\\"id\\\")\",\"intCount\",\"统计数量返回int\",\"b.id().intCount()\",\"b.fx().intCount(BlogEntity::getId)\",\"b.fx().intCount(\\\"id\\\")\",\"min\",\"最小值\",\"b.id().min()\",\"b.fx().min(BlogEntity::getId)\",\"b.fx().min(\\\"id\\\")\",\"max\",\"最大值\",\"b.id().max()\",\"b.fx().max(BlogEntity::getId)\",\"b.fx().max(\\\"id\\\")\"]},\"289\":{\"h\":\"字符串函数\",\"t\":[\"方法\",\"描述\",\"entity\",\"lambda\",\"property\",\"subString\",\"切割字符串,默认起始0\",\"b.id().subString(1,12)\",\"b.fx().subString(BlogEntity::getId,1,12)\",\"b.fx().subString(\\\"id\\\",1,12)\",\"concat\",\"链接多个列或者值\",\"b.expression().concat(x->x.expression(b.content()).value(\\\"123\\\").expression(b.id()))\",\"fx.concat(x -> x.column(BlogEntity::getContent).value(\\\"123\\\").column(BlogEntity::getId))\",\"fx.concat(x -> x.column(\\\"content\\\").value(\\\"123\\\").column(\\\"id\\\"))\",\"toLower\",\"转成小写\",\"b.content().toLower()\",\"b.fx().toLower(BlogEntity::getContent)\",\"b.fx().toLower(\\\"content\\\")\",\"toUpper\",\"转成大写\",\"b.content().toUpper()\",\"b.fx().toUpper(BlogEntity::getContent)\",\"b.fx().toUpper(\\\"content\\\")\",\"trim\",\"去掉前后空格\",\"b.content().trim()\",\"b.fx().trim(BlogEntity::getContent)\",\"b.fx().trim(\\\"content\\\")\",\"trimStart\",\"去掉前面空格\",\"b.content().trimStart()\",\"b.fx().trimStart(BlogEntity::getContent)\",\"b.fx().trimStart(\\\"content\\\")\",\"trimEnd\",\"去掉后面空格\",\"b.content().trimEnd()\",\"b.fx().trimEnd(BlogEntity::getContent)\",\"b.fx().trimEnd(\\\"content\\\")\",\"replace\",\"替换字符串\",\"b.content().replace(\\\"123\\\",\\\"456\\\")\",\"b.fx().replace(BlogEntity::getContent,\\\"123\\\",\\\"456\\\")\",\"b.fx().replace(\\\"content\\\",\\\"123\\\",\\\"456\\\")\",\"leftPad\",\"往左补值\",\"b.content().leftPad(2,'a')\",\"b.fx().leftPad(BlogEntity::getContent,2,'a')\",\"b.fx().leftPad(\\\"content\\\",2,'a')\",\"rightPad\",\"往右补值\",\"b.content().rightPad(2,'a')\",\"b.fx().rightPad(BlogEntity::getContent,2,'a')\",\"b.fx().rightPad(\\\"content\\\",2,'a')\",\"join\",\"字符串多列join组合返回常用语group+逗号组合\",\"b.content().join(',')\",\"b.fx().join(BlogEntity::getContent,',')\",\"b.fx().join(\\\"content\\\",',')\",\"length\",\"字符串长度\",\"b.id().length()\",\"b.fx().length(BlogEntity::getId)\",\"b.fx().length(\\\"id\\\")\",\"compareTo\",\"比较字符串大小\",\"b.content().compareTo(\\\"aaaa\\\")\",\"b.fx().stringCompareTo(BlogEntity::getContent, \\\"aaaa\\\")\",\"b.fx().stringCompareTo(\\\"content\\\", \\\"aaaa\\\")\"]},\"290\":{\"h\":\"时间函数\",\"t\":[\"方法\",\"描述\",\"format\",\"格式化日期支持java格式化\",\"plus\",\"增加时间\",\"plusMonths\",\"增加月份\",\"plusYears\",\"增加年份\",\"dayOfYear\",\"当前天数在一年中代表第几天\",\"dayOfWeek\",\"当前天数在一年中代表第几天 0-6星期日为0\",\"year\",\"返回年份\",\"month\",\"返回月份1-12\",\"day\",\"返回月份中的天数1-31\",\"hour\",\"返回小时0-23\",\"minute\",\"返回分钟0-59\",\"second\",\"返回秒数0-59\",\"duration\",\"返回间隔天/小时/.... a.duration(b,DateTimeDurationEnum.Days) a比b大多少天,如果a小于b则返回负数 两个日期a,b之间相隔多少天\",\"now\",\"当前时间\",\"utcNow\",\"当前UTC时间\"]},\"291\":{\"h\":\"案例\"},\"292\":{\"h\":\"返回列函数\",\"t\":[\" String sql1 = easyClient.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"1\\\")) .select(String.class, o -> o.sqlFunc(o.fx().ifNull(Topic::getId, \\\"1\\\"))).toSQL(); Assert.assertEquals(\\\"SELECT IFNULL(t.`id`,?) FROM `t_topic` t WHERE t.`id` = ?\\\", sql1); \"]},\"293\":{\"h\":\"条件函数\",\"t\":[\" String sql = easyQuery.queryable(Topic.class) .where(o -> o.eq(o.fx().ifNull(Topic::getId, \\\"123\\\"), o.fx().ifNull(Topic::getTitle, \\\"456\\\"))) .toSQL(); Assert.assertEquals(\\\"SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE IFNULL(`id`,?) = IFNULL(`title`,?)\\\", sql); String sql = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"1\\\") ) .orderByDesc(o -> o.column(Topic::getCreateTime)) .select(Topic.class, o -> o.sqlFuncAs(o.fx().dateTimeFormat(Topic::getCreateTime, \\\"yyyy-MM-dd\\\"), Topic::getTitle)).toSQL(); Assert.assertEquals(\\\"SELECT DATE_FORMAT(t.`create_time`,'%Y-%m-%d') AS `title` FROM `t_topic` t WHERE t.`id` = ? ORDER BY t.`create_time` DESC\\\", sql); \"]},\"294\":{\"h\":\"数据库函数\",\"t\":[\"框架默认提供了部分数据库函数,并且支持适配所有的数据库.\",\"方法\",\"描述\",\"ifNull\",\"如果列为null则返回默认值\",\"abs\",\"绝对值\",\"round\",\"四舍五入\",\"dateTimeFormat\",\"时间格式格式化 格式化参数为语言java的格式化\",\"dateTimeSQLFormat\",\"时间格式格式化 格式化参数为语言数据库的格式化\",\"concat\",\"多列以字符串形式相加\",\"now\",\"当前时间\",\"utcNow\",\"当前UTC时间\"]},\"295\":{\"h\":\"返回列函数\",\"t\":[\" String sql1 = easyClient.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"1\\\")) .select(String.class, o -> o.sqlFunc(o.fx().nullOrDefault(Topic::getId, \\\"1\\\"))).toSQL(); Assert.assertEquals(\\\"SELECT IFNULL(t.`id`,?) FROM `t_topic` t WHERE t.`id` = ?\\\", sql1); \"]},\"296\":{\"h\":\"条件函数\",\"t\":[\" String sql = easyQuery.queryable(Topic.class) .where(o -> o.eq(o.fx().nullOrDefault(Topic::getId, \\\"123\\\"), o.fx().nullOrDefault(Topic::getTitle, \\\"456\\\"))) .toSQL(); Assert.assertEquals(\\\"SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE IFNULL(`id`,?) = IFNULL(`title`,?)\\\", sql); String sql = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"1\\\") ) .orderByDesc(o -> o.column(Topic::getCreateTime)) .select(Topic.class, o -> o.sqlFuncAs(o.fx().dateTimeFormat(Topic::getCreateTime, \\\"yyyy-MM-dd\\\"), Topic::getTitle)).toSQL(); Assert.assertEquals(\\\"SELECT DATE_FORMAT(t.`create_time`,'%Y-%m-%d') AS `title` FROM `t_topic` t WHERE t.`id` = ? ORDER BY t.`create_time` DESC\\\", sql); \"]},\"297\":{\"h\":\"自定义TypeHandler\"},\"298\":{\"h\":\"JdbcTypeHandlerManager\",\"t\":[\"方法\",\"描述\",\"appendHandler\",\"参数1:指定需要处理的类型,参数2:具体的处理typeHandler,参数3:是否需要替换掉原先的如果原先的存在的话\",\"getHandler\",\"根据类型获取对应的typeHandler处理器\",\"getHandlerByHandlerClass\",\"根据TypeHandler类型获取对应的typeHandler处理器\"]},\"299\":{\"h\":\"JdbcTypeHandler\",\"t\":[\"方法\",\"描述\",\"getValue\",\"获取对应的结果\",\"setParameter\",\"设置jdbc参数\"]},\"300\":{\"h\":\"如何添加\",\"t\":[\"首先创建自己的JdbcTypeHandler\",\"启动时进行替换\",\" JdbcTypeHandlerManager jdbcTypeHandlerManager = easyQuery.getRuntimeContext().getJdbcTypeHandlerManager(); jdbcTypeHandlerManager.appendHandler(CustomPropertyType.class,CustomPropertyTypeHandler,true); \"]},\"301\":{\"h\":\"Java对象数据库值转换\",\"t\":[\"easy-query默认提供了数据库值对象转换功能,可以实现数据库对象属性枚举转换的功能或者对象string转json对象的功能\",\"注意: 如果需要支持差异更新需要实现重写hashcode和equalsEnum除外\",\"这边提供两种解决方案\",\"如果你希望数据库对象和数据库类型一致,但是还希望用枚举转换的或者其他属性转换的\",\"数据库对象属性本身就是枚举或者对象的\"]},\"302\":{\"h\":\"api\",\"t\":[\"接口\",\"功能\",\"ValueConverter\",\"将数据库和对象值进行互相转换的接口\",\"EnumValueAutoConverter\",\"支持枚举类型全局作用到没有添加ValueConverter注解的属性上(只要对应的apply方法返回true),使用这个接口无需添加Column(conversion=xxxx.class)\",\"<TProperty>\",\"对象属性类型\",\"<TProvider>\",\"数据库对应的java类型\",\"方法\",\"功能\",\"serialize\",\"将实体对象转成数据库值\",\"deserialize\",\"将数据库的值转成对象值\"]},\"303\":{\"h\":\"springboot\",\"t\":[\"@Component将对应的ValueConverter注入即可\"]},\"304\":{\"h\":\"控制台\",\"t\":[\"QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyValueConverter(new JsonConverter()); \"]},\"305\":{\"h\":\"枚举值\",\"t\":[\"数据库对象很多时候我们可能希望将枚举值设计为java枚举对象而不是integer,所以这边先用枚举来做一个测试\"]},\"306\":{\"h\":\"数据库对象属性枚举值\",\"t\":[\"//枚举接口 public interface IEnum<TEnum extends IEnum<TEnum>> { Integer getCode(); TEnum valueOf(Integer enumValue); } //获取枚举值 public class EnumDeserializer { public static <T extends IEnum<T>> T deserialize(Class<T> enumClass, Integer integer) { T[] enumConstants = enumClass.getEnumConstants(); if(enumConstants.length>0){ return enumConstants[0].valueOf(integer); } throw new IllegalArgumentException(\\\"Invalid integer value for enum: \\\" + integer); } } //枚举转换器 public class EnumConverter implements ValueConverter<IEnum<?>,Number> { @Override public Number serialize(IEnum<?> iEnum, ColumnMetadata columnMetadata) { if(iEnum=null){ return null; } return iEnum.getCode(); } @Override public IEnum<?> deserialize(Number code, ColumnMetadata columnMetadata) { if(code=null){ return null; } return EnumDeserializer.deserialize(EasyObjectUtil.typeCast(columnMetadata.getPropertyType()),code.intValue()); } } //如果你希望当前枚举转换配置到全局可以使用 EnumValueAutoConverter //EnumValueAutoConverter第一个泛型参数 不可以是具体枚举类型除非整个系统就一个枚举类型 public class EnumConverter implements EnumValueAutoConverter<IEnum<?>,Number> { @Override public Number serialize(IEnum<?> iEnum, ColumnMetadata columnMetadata) { if(iEnum == null){ return null; } return iEnum.getCode(); } @Override public IEnum<?> deserialize(Number code, ColumnMetadata columnMetadata) { if(code == null){ return null; } return EnumDeserializer.deserialize(EasyObjectUtil.typeCast(columnMetadata.getPropertyType()),code.intValue()); } @Override public boolean apply(Class<?> entityClass, Class<IEnum<?>> propertyType) { return IEnum.class.isAssignableFrom(propertyType); //true表示如果对应的属性没有添加注解或者没有指定ValueConverter,并且是枚举Enum<?>,那么会进入当前方法如果返回true那么会默认将当前转换作用到属性上 //return true; //true表示如果对应的属性没有添加注解或者没有指定ValueConverter,并且是枚举Enum<?>,那么会进入当前方法如果返回true那么会默认将当前转换作用到属性上 } } //数据库枚举 public enum TopicTypeEnum implements IEnum<TopicTypeEnum> { STUDENT(1), TEACHER(3), CLASSER(9); private final Integer code; TopicTypeEnum(Integer code){ this.code = code; } @Override public Integer getCode() { return code; } @Override public TopicTypeEnum valueOf(Integer enumValue) { switch (enumValue){ case 1:return TopicTypeEnum.STUDENT; case 3:return TopicTypeEnum.TEACHER; case 9:return TopicTypeEnum.CLASSER; } throw new UnsupportedOperationException(); } } //数据库插入对象 @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicTypeTest1 { @Column(primaryKey = true) private String id; private Integer stars; private String title; @Column(conversion = EnumConverter.class) private TopicTypeEnum topicType; private LocalDateTime createTime; } TopicTypeTest1 topicType1 = new TopicTypeTest1(); topicType1.setId(\\\"123\\\"); topicType1.setStars(123); topicType1.setTitle(\\\"title123\\\"); topicType1.setTopicType(TopicTypeEnum.CLASSER); topicType1.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType1).executeRows(); ==> Preparing: INSERT INTO `t_topic_type` (`id`,`stars`,`title`,`topic_type`,`create_time`) VALUES (?,?,?,?,?) ==> Parameters: 123(String),123(Integer),title123(String),9(Integer),2023-05-23T22:12:12.703(LocalDateTime) <== Total: 1 TopicTypeTest1 topicTypeVO = easyQuery.queryable(TopicTypeTest1.class) .whereById(\\\"123\\\") .firstOrNull(); System.out.println(topicTypeVO); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Time Elapsed: 4(ms) <== Total: 1 TopicTypeTest1(id=123, stars=123, title=title123, topicType=CLASSER, createTime=2023-05-23T22:13:32) \"]},\"307\":{\"h\":\"数据库对象属性integer值\",\"t\":[\"有些用户喜欢数据库对象是和数据库列类型一一对应的,那么可以采用Integer属性，对应的VO或者BO等对象上采用枚举也是可以的\",\" @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicType { @Column(primaryKey = true) private String id; private Integer stars; private String title; private Integer topicType; private LocalDateTime createTime; } //VO对象 @Data @ToString public class TopicTypeVO { private String id; private Integer stars; private String title; @Column(value = \\\"topic_type\\\",conversion = EnumConverter.class) private TopicTypeEnum topicType1; private LocalDateTime createTime; } TopicTypeVO topicTypeVO = easyQuery.queryable(TopicType.class) .whereById(\\\"123\\\") .select(TopicTypeVO.class) .firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Time Elapsed: 3(ms) <== Total: 1 TopicTypeVO(id=123, stars=123, title=title123, topicType1=TEACHER, createTime=2023-05-23T22:16:45) \"]},\"308\":{\"h\":\"注解模式\",\"t\":[\"//注解 @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.FIELD, ElementType.ANNOTATION_TYPE}) public @interface EnumValue { } //静态方法 //性能问题自行处理 相对没有接口模式性能高 public class EnumValueDeserializer { private static final Map<String, Field> ENUM_TYPES = new ConcurrentHashMap<>(); public static <T extends Enum<T>> Object serialize(Enum<T> enumValue) { if (enumValue == null) { return null; } Optional<Field> codeOptional = getEnumValueField(enumValue.getClass()); if (codeOptional.isPresent()) { Field filed = codeOptional.get(); filed.setAccessible(true); try { return filed.get(enumValue); } catch (IllegalAccessException e) { throw new RuntimeException(e); } } throw new IllegalArgumentException(\\\"Invalid integer value for enum: \\\" + enumValue + \\\",from :\\\" + EasyClassUtil.getInstanceSimpleName(enumValue)); } public static <T extends Enum<T>> T deserialize(Class<T> enumClass, Integer code) { if (code == null) { return null; } Optional<Field> codeOptional = getEnumValueField(enumClass); if (codeOptional.isPresent()) { Field filed = codeOptional.get(); T[] enumConstants = enumClass.getEnumConstants(); for (T enumConstant : enumConstants) { filed.setAccessible(true); try { if (Objects.equals(code, filed.get(enumConstant))) { return enumConstant; } } catch (IllegalAccessException e) { throw new RuntimeException(e); } } } throw new IllegalArgumentException(\\\"Invalid integer value for enum: \\\" + code + \\\",from :\\\" + EasyClassUtil.getSimpleName(enumClass)); } public static <T extends Enum<T>> Optional<Field> getEnumValueField(Class<T> enumClass) { if (enumClass != null && enumClass.isEnum()) { String className = enumClass.getName(); Field s = EasyMapUtil.computeIfAbsent(ENUM_TYPES, className, key -> { Collection<Field> allFields = EasyClassUtil.getAllFields(enumClass); Optional<Field> optional = allFields.stream() // 过滤包含注解@EnumValue的字段 .filter(field ->field.isAnnotationPresent(EnumValue.class)) .findFirst(); return optional.orElse(null); }); return Optional.ofNullable(s); } return Optional.empty(); } } //转换器 public class EnumValueConverter implements ValueConverter<Enum<?>,Number> { @Override public Number serialize(Enum<?> enumValue, ColumnMetadata columnMetadata) { if(enumValue == null){ return null; } return (Number) EnumValueDeserializer.serialize(enumValue); } @Override public Enum<?> deserialize(Number code, ColumnMetadata columnMetadata) { if(code == null){ return null; } return EnumValueDeserializer.deserialize(EasyObjectUtil.typeCast(columnMetadata.getPropertyType()),code.intValue()); } } public enum TopicTypeEnum { STUDENT(1), TEACHER(3), CLASSER(9); @EnumValue private final Integer code; TopicTypeEnum(Integer code){ this.code = code; } @Override public Integer getCode() { return code; } } @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicTypeTest2 { @Column(primaryKey = true) private String id; private Integer stars; private String title; @Column(value = \\\"topic_type\\\",conversion = EnumValueConverter.class) private TopicTypeEnum topicType; private LocalDateTime createTime; } TopicTypeTest2 topicType2 = new TopicTypeTest2(); topicType2.setId(\\\"123\\\"); topicType2.setStars(123); topicType2.setTitle(\\\"title123\\\"); topicType2.setTopicType(TopicTypeEnum.CLASSER); topicType2.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType2).executeRows(); ==> Preparing: INSERT INTO `t_topic_type` (`id`,`stars`,`title`,`topic_type`,`create_time`) VALUES (?,?,?,?,?) ==> Parameters: 123(String),123(Integer),title123(String),9(Integer),2023-05-23T22:12:12.703(LocalDateTime) <== Total: 1 TopicTypeTest2 topicTypeVO = easyQuery.queryable(TopicTypeTest2.class) .whereById(\\\"123\\\") .firstOrNull(); System.out.println(topicTypeVO); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Time Elapsed: 4(ms) <== Total: 1 TopicTypeTest2(id=123, stars=123, title=title123, topicType=CLASSER, createTime=2023-05-23T22:13:32) \"]},\"309\":{\"h\":\"json对象\",\"t\":[\"注意\",\"因为update会使用track追踪模式更新所以这边json对象必须要重写equals和hashcode\",\"首先我们引入fastjson2\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>2.0.26</version> </dependency> \",\" public class JsonConverter implements ValueConverter<Object, String> { @Override public String serialize(Object o, ColumnMetadata columnMetadata) { if(o==null){ return null; } return JSON.toJSONString(o, JSONWriter.Feature.WriteMapNullValue, JSONWriter.Feature.WriteNullListAsEmpty, JSONWriter.Feature.WriteNullStringAsEmpty); } @Override public Object deserialize(String s, ColumnMetadata columnMetadata) { if(EasyStringUtil.isBlank(s)){ return null; } //采用复杂类型支持对象json和array集合 ComplexPropType complexType = columnMetadata.getComplexPropType(); return JSON.parseObject(s, complexType.complexType()); } } @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicTypeJson { @Column(primaryKey = true) private String id; private Integer stars; @Column(conversion = JsonConverter.class) private TopicTypeJsonValue title; private Integer topicType; private LocalDateTime createTime; } @Data @EqualsAndHashCode public class TopicTypeJsonValue { private String name; private Integer age; } TopicTypeJson topicType1 = new TopicTypeJson(); topicType1.setId(\\\"1231\\\"); topicType1.setStars(123); TopicTypeJsonValue topicTypeJsonValue = new TopicTypeJsonValue(); topicTypeJsonValue.setName(\\\"123\\\"); topicTypeJsonValue.setAge(456); topicType1.setTitle(topicTypeJsonValue);//直接插入对象实体 topicType1.setTopicType(TopicTypeEnum.CLASSER.getCode()); topicType1.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType1).executeRows(); ==> Preparing: INSERT INTO `t_topic_type` (`id`,`stars`,`title`,`topic_type`,`create_time`) VALUES (?,?,?,?,?) ==> Parameters: 1231(String),123(Integer),{\\\"age\\\":456,\\\"name\\\":\\\"123\\\"}(String),9(Integer),2023-05-23T22:40:18.698(LocalDateTime) <== Total: 1 TopicTypeJson topicTypeVO = easyQuery.queryable(TopicTypeJson.class) .whereById(\\\"1231\\\") .firstOrNull(); System.out.println(topicTypeVO); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 1231(String) <== Time Elapsed: 2(ms) <== Total: 1 TopicTypeJson(id=1231, stars=123, title=TopicTypeJsonValue(name=123, age=456), topicType=9, createTime=2023-05-23T22:40:19) \",\"这样我们就实现了对应的值类型转换和枚举的转换\"]},\"310\":{\"h\":\"集合类型的json支持\",\"t\":[\"@Data @Table(\\\"t_topic_type_array\\\") @ToString public class TopicTypeArrayJson { @Column(primaryKey = true) private String id; private Integer stars; @Column(conversion = JsonConverter.class) private TopicTypeJsonValue title; @Column(conversion = JsonConverter.class, complexPropType = TopicTypeTitle2ComplexType.class) private List<TopicTypeJsonValue> title2; private Integer topicType; private LocalDateTime createTime; } //实现接口ComplexPropType返回对应的复杂类型type public class TopicTypeTitle2ComplexType extends TypeReference<List<TopicTypeJsonValue>> implements ComplexPropType { @Override public Type complexType() { return this.getType(); } } 如果不想使用`TopicTypeTitle2ComplexType`额外定义一个类可以在json对象上直接定义 @Data @EqualsAndHashCode public class TopicTypeJsonValue implements ComplexPropType { private String name; private Integer age; @Override public Type complexType() { return myType(new TypeReference<List<TopicTypeJsonValue>>() { }); } private <T> Type myType(TypeReference<T> typeReference) { return typeReference.getType(); } } 然后实体对象定义为 @Data @Table(\\\"t_topic_type_array\\\") @ToString public class TopicTypeArrayJson { @Column(primaryKey = true) private String id; private Integer stars; @Column(conversion = JsonConverter.class) private TopicTypeJsonValue title; @Column(conversion = JsonConverter.class, complexPropType = TopicTypeJsonValue.class)//修改为TopicTypeJsonValue.class private List<TopicTypeJsonValue> title2; private Integer topicType; private LocalDateTime createTime; } TopicTypeArrayJson topicType1 = new TopicTypeArrayJson(); topicType1.setId(id); topicType1.setStars(123); TopicTypeJsonValue topicTypeJsonValue = new TopicTypeJsonValue(); topicTypeJsonValue.setName(\\\"123\\\"); topicTypeJsonValue.setAge(456); topicType1.setTitle(topicTypeJsonValue); ArrayList<TopicTypeJsonValue> topicTypeJsonValues = new ArrayList<>(); { TopicTypeJsonValue topicTypeJsonValue1 = new TopicTypeJsonValue(); topicTypeJsonValue1.setName(\\\"1234\\\"); topicTypeJsonValue1.setAge(4565); topicTypeJsonValues.add(topicTypeJsonValue1); } { TopicTypeJsonValue topicTypeJsonValue1 = new TopicTypeJsonValue(); topicTypeJsonValue1.setName(\\\"12345\\\"); topicTypeJsonValue1.setAge(45655); topicTypeJsonValues.add(topicTypeJsonValue1); } topicType1.setTitle2(topicTypeJsonValues); topicType1.setTopicType(TopicTypeEnum.CLASSER.getCode()); topicType1.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType1).executeRows(); ==> Preparing: INSERT INTO `t_topic_type_array` (`id`,`stars`,`title`,`title2`,`topic_type`,`create_time`) VALUES (?,?,?,?,?,?) ==> Parameters: 1231(String),123(Integer),{\\\"age\\\":456,\\\"name\\\":\\\"123\\\"}(String),[{\\\"age\\\":4565,\\\"name\\\":\\\"1234\\\"},{\\\"age\\\":45655,\\\"name\\\":\\\"12345\\\"}](String),9(Integer),2023-10-04T22:37:32.049(LocalDateTime) <== Total: 1 \"]},\"311\":{\"h\":\"值类型对象\",\"t\":[\"easy-query在1.7.3^版本支持value-object值类型对象,用于描述数据库对象的聚合列,譬如\",\" @Table(\\\"my_company\\\") @Data public class Company { @Column(primaryKey = true) private String id; /** * 企业名称 */ private String name; /** * 企业所属省份 */ private String province; /** * 企业所属市区 */ private String city; /** * 企业所属区域 */ private String area; /** * 企业营业执照编号 */ private String licenseNo; /** * 企业营业执照到期时间 */ private LocalDateTime licenseDeadline; /** * 企业营业执照图片 */ private String licenseImage; /** * 企业营业执照经营内容 */ private String licenseContent; } \",\"使用值类型后可以改写为\",\"@Table(\\\"my_company\\\") @Data @ToString public class ValueCompany { @Column(primaryKey = true) private String id; /** * 企业名称 */ private String name; /** * 企业地址信息 */ @ValueObject private ValueCompanyAddress address; /** * 企业营业执照信息 */ @ValueObject private ValueCompanyLicense license; } @Data @EqualsAndHashCode @ToString public class ValueCompanyAddress { /** * 企业所属省份 */ private String province; /** * 企业所属市区 */ private String city; /** * 企业所属区域 */ private String area; } @Data @EqualsAndHashCode @ToString public class ValueCompanyLicense { /** * 企业营业执照编号 */ private String licenseNo; /** * 企业营业执照到期时间 */ private LocalDateTime licenseDeadline; @ValueObject private ValueCompanyLicenseExtra extra;//支持ValueObject嵌套 } @Data @EqualsAndHashCode @ToString public class ValueCompanyLicenseExtra { /** * 企业营业执照图片 */ private String licenseImage; /** * 企业营业执照经营内容 */ private String licenseContent; } \",\"对于大对象属性聚合有着更好的属性表示而不是一股脑儿的展开平铺对象的设计\",\"-- 数据库搅拌 create table my_company ( id varchar(32) not null comment '主键ID'primary key, name varchar(32) null comment '名称', province varchar(32) null comment '省', city varchar(32) null comment '市', area varchar(32) null comment '区', license_no varchar(32) null comment '企业营业执照编号', license_deadline datetime null comment '企业营业执照到期时间', license_image varchar(128) null comment '企业营业执照图片', license_content varchar(256) null comment '企业营业执照经营内容' )comment '公司表'; \",\"注意点及说明!!!\",\"属性模式已经原生支持,通过属性.属性来访问和使用,其中proxy已适配完成,java的lambda版本需要自行实现,kotlin也需要自行实现\"]},\"312\":{\"h\":\"java版本实现\",\"t\":[\"因为java默认不支持lambda表达式的多级获取所以需要使用asm字节码技术自行实现\"]},\"313\":{\"h\":\"替换系统默认lambda表达式解析\",\"t\":[\"需要添加依赖asm的\",\" <!--选择自己合适的版本即可--> <dependency> <groupId>org.ow2.asm</groupId> <artifactId>asm</artifactId> <version>9.6</version> </dependency> \",\"//lambda的类访问器 public class ExpressionClassVisitor extends ClassVisitor { private final StringBuilder _methodBody; private final String _method; private final String _methodDesc; public ExpressionClassVisitor(StringBuilder methodBody,SerializedDescriptor serializedDescriptor) { super(Opcodes.ASM9); this._methodBody = methodBody; this._method = serializedDescriptor.getImplMethodName(); this._methodDesc = serializedDescriptor.getImplMethodSignature(); } @Override public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) { if (!_method.equals(name) || !_methodDesc.equals(desc)) return null; return new ExpressionMethodVisitor(_methodBody); } @Override public String toString() { return _methodBody.toString(); } } //lambda方法访问器 public class ExpressionMethodVisitor extends MethodVisitor { private final StringBuilder _methodBody; public ExpressionMethodVisitor(StringBuilder methodBody) { super(Opcodes.ASM9); this._methodBody=methodBody; } @Override public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) { if(opcode==Opcodes.INVOKEVIRTUAL){ String attr = null; if (name.startsWith(\\\"get\\\")) { attr = name.substring(3); } else { attr = name.substring(2); } _methodBody.append(\\\".\\\").append(EasyStringUtil.toLowerCaseFirstOne(attr)); } } @Override public void visitEnd() { _methodBody.deleteCharAt(0); } } //lambda解析器自定义 public class MyLambdaParser implements LambdaParser { private static final Cache<SerializedDescriptor, String> lambdaCache = new DefaultMemoryCache<>(); @Override public <T> String getPropertyName(Property<T, ?> property) { if (property == null) { return null; } try { Method declaredMethod = property.getClass().getDeclaredMethod(\\\"writeReplace\\\"); declaredMethod.setAccessible(Boolean.TRUE); SerializedLambda serializedLambda = (SerializedLambda) declaredMethod.invoke(property); //Class.method.method.... if (serializedLambda.getImplMethodKind() == MethodHandleInfo.REF_invokeStatic) { return getPropertyNameByInvokeStatic(property.getClass().getClassLoader(), serializedLambda); } //Class::method return getPropertyNameByInvokeVirtual(serializedLambda); } catch (ReflectiveOperationException e) { throw new RuntimeException(e); } } private static String getPropertyNameByInvokeStatic(ClassLoader classLoader, SerializedLambda serializedLambda) { SerializedDescriptor serializedDescriptor = new SerializedDescriptor(serializedLambda); String propertyName = lambdaCache.get(serializedDescriptor); if (propertyName != null) { return propertyName; } String className = serializedLambda.getImplClass(); String classFilePath = classFilePath(className); StringBuilder methodBody = new StringBuilder(); ExpressionClassVisitor expressionClassVisitor = new ExpressionClassVisitor(methodBody, serializedDescriptor); try (InputStream classStream = getResourceAsStream(classLoader, classFilePath)) { ClassReader reader = new ClassReader(classStream); reader.accept(expressionClassVisitor, ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES); String fullPropertyName = methodBody.toString(); return lambdaCache.computeIfAbsent(serializedDescriptor, key -> { return fullPropertyName; }); } catch (IOException e) { throw new RuntimeException(\\\"error parsing class file \\\" + classFilePath, e); } } private static InputStream getResourceAsStream(ClassLoader classLoader, String path) throws FileNotFoundException { InputStream stream = classLoader.getResourceAsStream(path); if (stream == null) throw new FileNotFoundException(path); return stream; } private static String classFilePath(String className) { return className.replace('.', '/') + \\\".class\\\"; } private static String getPropertyNameByInvokeVirtual(SerializedLambda serializedLambda){ String method = serializedLambda.getImplMethodName(); String attr = null; if (method.startsWith(\\\"get\\\")) { attr = method.substring(3); } else { attr = method.substring(2); } return EasyStringUtil.toLowerCaseFirstOne(attr); } } //使用前替换掉默认的解析器 EasyLambdaUtil.replaceParser(new MyLambdaParser()); \"]},\"314\":{\"h\":\"新增\",\"t\":[\"ValueCompany company = new ValueCompany(); company.setId(\\\"my1\\\"); company.setName(\\\"myCompany1\\\"); ValueCompanyAddress valueCompanyAddress = new ValueCompanyAddress(); valueCompanyAddress.setProvince(\\\"province1\\\"); valueCompanyAddress.setCity(\\\"city1\\\"); valueCompanyAddress.setArea(\\\"area1\\\"); company.setAddress(valueCompanyAddress); ValueCompanyLicense valueCompanyLicense = new ValueCompanyLicense(); valueCompanyLicense.setLicenseNo(\\\"license1\\\"); valueCompanyLicense.setLicenseDeadline(LocalDateTime.of(2023,1,1,0,0)); ValueCompanyLicenseExtra valueCompanyLicenseExtra = new ValueCompanyLicenseExtra(); valueCompanyLicenseExtra.setLicenseImage(\\\"www.baidu.com\\\"); valueCompanyLicenseExtra.setLicenseContent(\\\"it编程\\\"); valueCompanyLicense.setExtra(valueCompanyLicenseExtra); company.setLicense(valueCompanyLicense); long l = easyQueryClient.insertable(company).executeRows(); ==> Preparing: INSERT INTO `my_company` (`id`,`name`,`province`,`city`,`area`,`license_no`,`license_deadline`,`license_image`,`license_content`) VALUES (?,?,?,?,?,?,?,?,?) ==> Parameters: my1(String),myCompany1(String),province1(String),city1(String),area1(String),license1(String),2023-01-01T00:00(LocalDateTime),www.baidu.com(String),it编程(String) <== Total: 1 \"]},\"315\":{\"h\":\"查询\",\"t\":[\"//属性模式 List<ValueCompany> province1 = easyQueryClient.queryable(ValueCompany.class) .where(o -> o.eq(\\\"address.province\\\", \\\"province1\\\")) .toList(); [ValueCompany(id=my1, name=myCompany1, address=ValueCompanyAddress(province=province1, city=city1, area=area1), license=ValueCompanyLicense(licenseNo=license1, licenseDeadline=2023-01-01T00:00, extra=ValueCompanyLicenseExtra(licenseImage=www.baidu.com, licenseContent=it编程)))] ==> Preparing: SELECT `id`,`name`,`province`,`city`,`area`,`license_no`,`license_deadline`,`license_image`,`license_content` FROM `my_company` WHERE `province` = ? ==> Parameters: province1(String) <== Time Elapsed: 2(ms) <== Total: 1 //lambda模式 List<ValueCompany> province11 = easyQuery.queryable(ValueCompany.class) .where(o -> o.eq(x -> x.getAddress().getProvince(), \\\"province1\\\")) .toList(); ==> Preparing: SELECT `id`,`name`,`province`,`city`,`area`,`license_no`,`license_deadline`,`license_image`,`license_content` FROM `my_company` WHERE `province` = ? ==> Parameters: province1(String) <== Time Elapsed: 2(ms) <== Total: 1 //不查询营业执照额外信息 List<ValueCompany> province2 = easyQueryClient.queryable(ValueCompany.class) .where(o -> o.eq(\\\"address.province\\\", \\\"province1\\\")) .select(o->o.columnAll().columnIgnore(\\\"license.extra\\\")) .toList(); ==> Preparing: SELECT `id`,`name`,`province`,`city`,`area`,`license_no`,`license_deadline` FROM `my_company` WHERE `province` = ? ==> Parameters: province1(String) <== Time Elapsed: 2(ms) <== Total: 1 [ValueCompany(id=my1, name=myCompany1, address=ValueCompanyAddress(province=province1, city=city1, area=area1), license=ValueCompanyLicense(licenseNo=license1, licenseDeadline=2023-01-01T00:00, extra=null))] List<ValueCompany> province22 = easyQuery.queryable(ValueCompany.class) .where(o -> o.eq(x -> x.getAddress().getProvince(), \\\"province1\\\")) .select(o->o.columnAll().columnIgnore(x->x.getLicense().getExtra())) .toList(); ==> Preparing: SELECT `id`,`name`,`province`,`city`,`area`,`license_no`,`license_deadline` FROM `my_company` WHERE `province` = ? ==> Parameters: province1(String) <== Time Elapsed: 2(ms) <== Total: 1 [ValueCompany(id=my1, name=myCompany1, address=ValueCompanyAddress(province=province1, city=city1, area=area1), license=ValueCompanyLicense(licenseNo=license1, licenseDeadline=2023-01-01T00:00, extra=null))] //仅查询地址和营业执照编号 List<ValueCompany> province4 = easyQueryClient.queryable(ValueCompany.class) .where(o -> o.eq(\\\"address.province\\\", \\\"province1\\\")) .select(o->o.column(\\\"address\\\").column(\\\"license.licenseNo\\\")) .toList(); ==> Preparing: SELECT `province`,`city`,`area`,`license_no` FROM `my_company` WHERE `province` = ? ==> Parameters: province1(String) <== Time Elapsed: 2(ms) <== Total: 1 [ValueCompany(id=null, name=null, address=ValueCompanyAddress(province=province1, city=city1, area=area1), license=ValueCompanyLicense(licenseNo=license1, licenseDeadline=null, extra=null))] List<ValueCompany> province44 = easyQuery.queryable(ValueCompany.class) .where(o -> o.eq(x -> x.getAddress().getProvince(), \\\"province1\\\")) .select(o->o.column(ValueCompany::getAddress).column(x->x.getLicense().getLicenseNo())) .toList(); ==> Preparing: SELECT `province`,`city`,`area`,`license_no` FROM `my_company` WHERE `province` = ? ==> Parameters: province1(String) <== Time Elapsed: 2(ms) <== Total: 1 [ValueCompany(id=null, name=null, address=ValueCompanyAddress(province=province1, city=city1, area=area1), license=ValueCompanyLicense(licenseNo=license1, licenseDeadline=null, extra=null))] \"]},\"316\":{\"h\":\"更新\",\"t\":[\"//追踪更新进修改营业执照内容 TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); easyQuery.addTracking(company); company.getLicense().getExtra().setLicenseContent(\\\"it++++1\\\"); easyQuery.updatable(company).executeRows(); } finally { trackManager.release(); } ==> Preparing: UPDATE `my_company` SET `license_content` = ? WHERE `id` = ? ==> Parameters: it++++1(String),my1(String) <== Total: 1 //直接更新 easyQuery.updatable(company).executeRows(); ==> Preparing: UPDATE `my_company` SET `name` = ?,`province` = ?,`city` = ?,`area` = ?,`license_no` = ?,`license_deadline` = ?,`license_image` = ?,`license_content` = ? WHERE `id` = ? ==> Parameters: myCompany1(String),province1(String),city1(String),area1(String),license1(String),2023-01-01T00:00(LocalDateTime),www.baidu.com(String),it编程(String),my1(String) <== Total: 1 \"]},\"317\":{\"h\":\"相关搜索\",\"t\":[\"@Embedded@Embeddable值类型值对象\"]},\"318\":{\"h\":\"乐观锁版本号\",\"t\":[\"easy-query提供了自动版本号功能，可以保证在高并发下数据一致性更新的问题。\"]},\"319\":{\"h\":\"相关配置\",\"t\":[\"noVersionError默认为true当对象有Version字段并且更新修改不存在version字段将会报错,可以通过noVersionError或者noVersionIgnore来配置\"]},\"320\":{\"h\":\"demo数据\"},\"321\":{\"h\":\"Api\"},\"322\":{\"h\":\"EasyVersionStrategy\",\"t\":[\"方法名\",\"参数\",\"描述\",\"nextVersion\",\"当前版本信息和对应的属性和对象信息\",\"返回更新后的版本信息\",\"默认实现系统提供\",\"VersionIntStrategy列对象为int,next version为当前version+1\",\"VersionLongStrategy列对象为long,next version为当前version+1\",\"VersionUUIDStrategy列对象为string,next version为当UUID.randomUUID().toString().replaceAll(\\\"-\\\",\\\"\\\")\",\"VersionTimestampStrategy列对象为long,next version为当System.currentTimeMillis() (不推荐)\"]},\"323\":{\"h\":\"测试数据\",\"t\":[\"添加测试数据\",\" //插入 SysUserVersionLong sysUserVersionLong = new SysUserVersionLong(); sysUserVersionLong.setId(id); sysUserVersionLong.setCreateTime(LocalDateTime.now()); sysUserVersionLong.setVersion(1L); sysUserVersionLong.setUsername(\\\"username\\\"+id); sysUserVersionLong.setPhone(\\\"13232323232\\\"); sysUserVersionLong.setIdCard(\\\"0000000000\\\"); sysUserVersionLong.setAddress(\\\"浙江省绍兴市越城区城市广场\\\"); long l = easyQuery.insertable(sysUserVersionLong).executeRows(); Assert.assertEquals(1,l); ==> Preparing: INSERT INTO t_sys_user_version (`id`,`username`,`phone`,`id_card`,`address`,`create_time`,`version`) VALUES (?,?,?,?,?,?,?) ==> Parameters: 1(String),username1(String),13232323232(String),0000000000(String),浙江省绍兴市越城区城市广场(String),2023-04-08T13:49:10.037(LocalDateTime),1(Long) <== Total: 1 //查询 SysUserVersionLong sysUserVersionLong1 = easyQuery.queryable(SysUserVersionLong.class) .whereById(id).firstOrNull(); Assert.assertNotNull(sysUserVersionLong1); ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time`,t.`version` FROM t_sys_user_version t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 1(String) <== Total: 1, Query Use: 3(ms) \"]},\"324\":{\"h\":\"实体更新\",\"t\":[\"long l2 = easyQuery.updatable(sysUserVersionLong1).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version SET `username` = ?,`phone` = ?,`id_card` = ?,`address` = ?,`create_time` = ?,`version` = ? WHERE `version` = ? AND `id` = ? ==> Parameters: username1(String),13232323232(String),0000000000(String),浙江省绍兴市越城区城市广场(String),2023-04-08T13:49:10(LocalDateTime),2(Long),1(Long),1(String) <== Total: 1 \"]},\"325\":{\"h\":\"表达式更新\",\"t\":[\"表达式删除必须要添加withVersion否则将不会使用行版本更新,并且如果配置或者没有配置noVersionError(默认true)将会报错,可以通过noVersionIgnore来忽略\",\"//whereById主键更新 long l2 = easyQuery.updatable(SysUserVersionLong.class) .set(SysUserVersionLong::getPhone, \\\"123\\\") .whereById(id) .noVersionIgnore() .executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version SET `phone` = ? WHERE `id` = ? ==> Parameters: 123(String),2(String) <== Total: 1 //where表达式更新 long l3 = easyQuery.updatable(SysUserVersionLong.class) .noVersionIgnore() .set(SysUserVersionLong::getPhone, \\\"123\\\") .where(o->o.eq(SysUserVersionLong::getId,id)) .executeRows(); Assert.assertEquals(1,l3); ==> Preparing: UPDATE t_sys_user_version SET `phone` = ? WHERE `id` = ? ==> Parameters: 123(String),2(String) <== Total: 1 //表达式更新只需要添加withVersion那么就可以针对当前version进行版本控制 long l4 = easyQuery.updatable(SysUserVersionLong.class) .set(SysUserVersionLong::getPhone, \\\"123\\\") .withVersion(1L) .where(o->o.eq(SysUserVersionLong::getId,id)) .executeRows(); Assert.assertEquals(1,l4); ==> Preparing: UPDATE t_sys_user_version SET `phone` = ?,`version` = ? WHERE `version` = ? AND `id` = ? ==> Parameters: 123(String),2(Long),1(Long),2(String) <== Total: 1 \"]},\"326\":{\"h\":\"逻辑删除加版本号\",\"t\":[\"逻辑删除情况下删除数据将会对数据列进行行版本追加,并且where条件也会追加版本号，如果禁用逻辑删,那么行版本的追加只会纯在与where条件的追加,并且如果配置或者没有配置noVersionError(默认true)将会报错,可以通过noVersionIgnore来忽略\"]},\"327\":{\"h\":\"实体对象删除\",\"t\":[\"//插入 SysUserVersionLongLogicDel sysUserVersionLongLogicDel = new SysUserVersionLongLogicDel(); sysUserVersionLongLogicDel.setId(id); sysUserVersionLongLogicDel.setCreateTime(LocalDateTime.now()); sysUserVersionLongLogicDel.setVersion(1L); sysUserVersionLongLogicDel.setUsername(\\\"username\\\"+id); sysUserVersionLongLogicDel.setPhone(\\\"13232323232\\\"); sysUserVersionLongLogicDel.setIdCard(\\\"0000000000\\\"); sysUserVersionLongLogicDel.setAddress(\\\"浙江省绍兴市越城区城市广场\\\"); sysUserVersionLongLogicDel.setDeleted(false); long l = easyQuery.insertable(sysUserVersionLongLogicDel).executeRows(); Assert.assertEquals(1,l); ==> Preparing: INSERT INTO t_sys_user_version_del (`id`,`username`,`phone`,`id_card`,`address`,`create_time`,`version`,`deleted`) VALUES (?,?,?,?,?,?,?,?) ==> Parameters: 4(String),username4(String),13232323232(String),0000000000(String),浙江省绍兴市越城区城市广场(String),2023-04-08T14:01:58.315(LocalDateTime),1(Long),false(Boolean) <== Total: 1 //逻辑删除 long l2 = easyQuery.deletable(sysUserVersionLongLogicDel).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version_del SET `deleted` = ?,`version` = ? WHERE `deleted` = ? AND `version` = ? AND `id` = ? ==> Parameters: true(Boolean),2(Long),false(Boolean),1(Long),4(String) <== Total: 1 \"]},\"328\":{\"h\":\"表达式删除\",\"t\":[\"表达式删除必须要添加withVersion否则将不会使用行版本删除\",\"SysUserVersionLongLogicDel sysUserVersionLongLogicDel = new SysUserVersionLongLogicDel(); sysUserVersionLongLogicDel.setId(id); sysUserVersionLongLogicDel.setCreateTime(LocalDateTime.now()); sysUserVersionLongLogicDel.setVersion(1L); sysUserVersionLongLogicDel.setUsername(\\\"username\\\"+id); sysUserVersionLongLogicDel.setPhone(\\\"13232323232\\\"); sysUserVersionLongLogicDel.setIdCard(\\\"0000000000\\\"); sysUserVersionLongLogicDel.setAddress(\\\"浙江省绍兴市越城区城市广场\\\"); sysUserVersionLongLogicDel.setDeleted(false); long l = easyQuery.insertable(sysUserVersionLongLogicDel).executeRows(); Assert.assertEquals(1,l); ==> Preparing: INSERT INTO t_sys_user_version_del (`id`,`username`,`phone`,`id_card`,`address`,`create_time`,`version`,`deleted`) VALUES (?,?,?,?,?,?,?,?) ==> Parameters: 5(String),username5(String),13232323232(String),0000000000(String),浙江省绍兴市越城区城市广场(String),2023-04-08T14:04:11.275(LocalDateTime),1(Long),false(Boolean) <== Total: 1 long l2 = easyQuery.deletable(SysUserVersionLongLogicDel.class) .withVersion(1L) .whereById(id).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version_del SET `deleted` = ?,`version` = ? WHERE `deleted` = ? AND `version` = ? AND `id` = ? ==> Parameters: true(Boolean),2(Long),false(Boolean),1(Long),5(String) <== Total: 1 long l2 = easyQuery.deletable(SysUserVersionLongLogicDel.class) .noVersionIgnore() .whereById(id).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version_del SET `deleted` = ? WHERE `deleted` = ? AND `id` = ? ==> Parameters: true(Boolean),2(Long),false(Boolean),1(Long),5(String) <== Total: 1 \"]},\"329\":{\"h\":\"Bar feature\"},\"330\":{\"h\":\"Introduction\",\"t\":[\"We support bar feature, ...\"]},\"331\":{\"h\":\"Details\",\"t\":[\"baz\",\"...\"]},\"332\":{\"h\":\"Baz\",\"t\":[\"Feature details here.\"]},\"333\":{\"h\":\"指引\",\"t\":[\"本章节我们提供easy-query的基本使用信息\",\"《目录》\",\"《性能比较》 以mybatis-flex的性能比较模板增加额外10000次获取来判断反序列化性能\",\"《使用代理模式》 使用代理模式api更加人性化编写orm\",\"《新增》 新增演示\",\"《修改》 修改演示\",\"《删除》 删除演示\",\"《事务》easy-query默认提供了自带事务处理机制,使用更加人性化\"]},\"334\":{\"h\":\"api使用 ❗️❗️❗️\",\"t\":[\"注意点及说明!!!\",\"下面所有方法包括where、select、groupBy、orderBy、having都是相同原理,支持单参数时为主表,全参数时为一一对应的表,注意表达式应该以select作为整个表达式的终结方法,相当于select之后就是对之前的表达式进行匿名表处理,select * from (select id,name from user) t 如果提前select相当于是进行了一次匿名表,最后的终结方法收集器比如toList、firstOrNull、count等会自动判断是否需要select，如果需要会对当前表达式的主表进行select(o->o.columnAll())操作 不建议select返回双括号初始化譬如new HelpProvinceProxy(){{......}}可能会造成内存泄露\"]},\"335\":{\"h\":\"api说明\",\"t\":[\"简单的查询编写顺序\",\"注意点及说明!!!\",\"其中6和7可以互相调换,如果先select后order那么将会对匿名表进行排序,如果先order后select那么会先排序后生成匿名表但是因为匿名表后续没有操作所以会展开\",\"我们以这个简单的例子为例可以看到我们应该编写的顺序是select在最后\",\"easyEntityQuery.queryable(HelpProvince.class) .where(o -> o.id().eq(\\\"1\\\")) .orderBy(o -> o.id().asc()) .select(o -> new HelpProvinceProxy() .id().set(o.id()) .name().set(o.name()) ) //本质就是如下写法 不建议使用双括号的初始化可能会造成内存泄露 // .select(o->{ // HelpProvinceProxy province= new HelpProvinceProxy(); // province.id().set(o.id()); // province.name().set(o.name()); // return province; // }) //.select(o->o.FETCHER.id().name().fetchProxy())//如果返回结果一样可以用fetcher .toList(); \",\"复杂的查询顺序\",\"easyEntityQuery.queryable(HelpProvince.class) //1 .where(o->o.id().eq(\\\"1\\\")) //2 .orderBy(o->o.id().asc()) //3 .select(o->new HelpProvinceProxy()//4 .id().set(o.id()) .name().set(o.name()) ) //.select(o->o.FETCHER.id().name().fetchProxy())//如果返回结果一样可以用fetcher .where(o->o.id().eq(\\\"1\\\")) // 5 .select(o->new HelpProvinceProxy() .id().set(o.id())//6 ) .toList(); \",\"注意点及说明!!!\",\"select一般都是最后写的,在你没有写表的时候只能用 * 来代替,先写表确定,然后写条件写排序写分组等确定了之后写选择的select的列不写就是主表的*如果在写where就对前面的表进行括号进行匿名表处理以此类推\"]},\"336\":{\"h\":\"分解表达式\"},\"337\":{\"h\":\"1\",\"t\":[\"表达式:easyEntityQuery.queryable(HelpProvince.class) sql:select * from help_province \"]},\"338\":{\"h\":\"2\",\"t\":[\"表达式:easyEntityQuery.queryable(HelpProvince.class).where(o->o.id().eq(\\\"1\\\")) sql:select * from help_province where id='1' \"]},\"339\":{\"h\":\"3\",\"t\":[\"表达式:easyEntityQuery.queryable(HelpProvince.class).where(o->o.id().eq(\\\"1\\\")).orderBy(o->o.id().asc()) sql:select * from help_province where id='1' order by id asc \"]},\"340\":{\"h\":\"4\",\"t\":[\"表达式: easyEntityQuery.queryable(HelpProvince.class) .where(o -> o.id().eq(\\\"1\\\")) .orderBy(o -> o.id().asc()) .select(o -> new HelpProvinceProxy() .id().set(o.id()) .name().set(o.name()) ) sql:select id,name from help_province where id='1' order by id asc \",\"以select方法作为终结方法结束本次sql链式,后续的操作就是将select和之前的表达式转成匿名sql类似select * from (select * from help_province) t，其中fetcher是select的简化操作不支持返回VO，当且仅当返回结果为自身时用于快速选择列\"]},\"341\":{\"h\":\"5\",\"t\":[\"表达式:easyEntityQuery.queryable(HelpProvince.class) .where(o->o.id().eq(\\\"1\\\")) .orderBy(o->o.id().asc()) .select(o->new HelpProvinceProxy() .id().set(o.id()) .name().set(o.name()) )//转成匿名表sql .where(o->o.id().eq(\\\"1\\\")) sql:select * from (select id,name from help_province where id='1' order by id asc) t where t.id='1' \"]},\"342\":{\"h\":\"6\",\"t\":[\"表达式:easyEntityQuery.queryable(HelpProvince.class) .where(o->o.id().eq(\\\"1\\\")) .orderBy(o->o.id().asc()) .select(o->new HelpProvinceProxy() .id().set(o.id()) .name().set(o.name()) )//转成匿名表sql .where(o->o.id().eq(\\\"1\\\")) .select(o->new HelpProvinceProxy() .id().set(o.id()) ) sql:select id from (select id,name from help_province where id='1' order by id asc) t where t.id='1' \",\"链式说明!!!\",\"select之前的所有操作比如多个where,多个orderby都是对之前的追加,limit是替换前面的操作多次limit获取最后一次 在entityQuery下groupBy不支持连续调用两个groupBy之间必须存在一个select指定要查询的结果才可以,其他api下多次调用行为也是追加\"]},\"343\":{\"h\":\"单表api使用\"},\"344\":{\"h\":\"多表查询api\",\"t\":[\"链式说明!!!\",\"leftJoin第二个lambda入参参数个数和join使用的表个数一样,入参参数顺序就是from和join的表\",\"在entityQuery下groupBy不支持连续调用两个groupBy之间必须存在一个select指定要查询的结果才可以,其他api下多次调用行为也是追加\"]},\"345\":{\"h\":\"多表返回表达式\"},\"346\":{\"h\":\"多表自定义结果api\"},\"347\":{\"h\":\"默认行为配置\"},\"348\":{\"h\":\"默认行为\",\"t\":[\"方法\",\"默认值\",\"描述\",\"select\",\"queryLargeColumn:true\",\"默认查询返回@Column(large=true) 不建议在实体对象上使用因为会导致update的时候有可能null会被更新掉,当然可以设置忽略更新@UpdateIgnore除非手动指定更新也是可以的\",\"insert\",\"SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS\",\"默认生成语句不包含null列 0.8.14+有效\",\"update\",\"SQLExecuteStrategyEnum.ALL_COLUMNS\",\"默认更新所有列包括null和非null\",\"delete\",\"allowDeleteStatement:false\",\"默认执行物理删除会报错\",\"insertBatchThreshold\",\"512\",\"如果insertable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率\",\"updateBatchThreshold\",\"512\",\"如果updatable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率\"]},\"349\":{\"h\":\"配置\"},\"350\":{\"h\":\"select\",\"t\":[\"queryLargeColumn表示是否查询出对应的表示为@Column(large=true)的字段,默认true表示查询,如果设置为false则需要手动指定对应列,可以通过调用api接口queryLargeColumn(boolean)传入对应的值来表示是否查询,建议和@UpdateIgnore如果你需要不返回的话,不然有可能导致更新策略为AllColumn的时候把这个字段更新为null,当然因为easy-query支持VO查询所以只需要查询结果中没有这个字段或者@ColumnIgnore\",\"@Data @Table(\\\"query_large_column_test\\\") public class QueryLargeColumnTestEntity { private String id; private String name; @Column(large = true) private String content; } //默认会被查询 String sql = easyQuery.queryable(QueryLargeColumnTestEntity.class).toSQL(); //SELECT `id`,`name`,`content` FROM `query_large_column_test` //设置不查询 String sql = easyQuery.queryable(QueryLargeColumnTestEntity.class).queryLargeColumn(false).toSQL(); //SELECT `id`,`name` FROM `query_large_column_test` \"]},\"351\":{\"h\":\"insert\",\"t\":[\"insertStrategy表示sql的执行策略,insert命令默认采用SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS就是说默认生成的sql如果对象属性为null就不生成insert列。\",\"QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).executeRows(); //默认not null列插入所以只会生成一列 ==> Preparing: INSERT INTO `query_large_column_test` (`id`) VALUES (?) ==> Parameters: 123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ALL_COLUMNS).executeRows(); //所有列都插入 ==> Preparing: INSERT INTO `query_large_column_test` (`id`,`name`,`content`) VALUES (?,?,?) ==> Parameters: 123(String),null(null),null(null) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NULL_COLUMNS).executeRows(); //只插入null列 ==> Preparing: INSERT INTO `query_large_column_test` (`name`,`content`) VALUES (?,?) ==> Parameters: null(null),null(null) \"]},\"352\":{\"h\":\"update\",\"t\":[\"updateStrategy表示sql的执行策略,update命令默认采用SQLExecuteStrategyEnum.ALL_COLUMNS就是说默认生成的sql无论对象是否是null属性都会进行更新。\",\" QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).executeRows(); //默认更新所有列 ==> Preparing: UPDATE `query_large_column_test` SET `name` = ?,`content` = ? WHERE `id` = ? ==> Parameters: null(null),null(null),123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS).executeRows(); //将不会生成sql因为只有一个主键没有其他任何需要update的列 QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); queryLargeColumnTestEntity.setName(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS).executeRows(); //更新not null列 ==> Preparing: UPDATE `query_large_column_test` SET `name` = ? WHERE `id` = ? ==> Parameters: 123(String),123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); queryLargeColumnTestEntity.setName(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NULL_COLUMNS).executeRows(); //更新null列 ==> Preparing: UPDATE `query_large_column_test` SET `content` = ? WHERE `id` = ? ==> Parameters: null(null),123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); queryLargeColumnTestEntity.setName(\\\"123\\\"); queryLargeColumnTestEntity.setContent(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NULL_COLUMNS).executeRows(); //因为没有null列所以不会生成sql返回受影响行数也是0 \"]},\"353\":{\"h\":\"delete\",\"t\":[\"deleteThrowError是easy-query防止数据被删除的默认设置,默认为true,表示不允许删除数据,可以采用逻辑删除来处理数据的删除。可以通过api接口来实现物理删除\",\" QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.deletable(queryLargeColumnTestEntity).executeRows(); //抛错错误 can't execute delete statement QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.deletable(queryLargeColumnTestEntity).allowDeleteStatement(true).executeRows(); //允许删除命令 ==> Preparing: DELETE FROM `query_large_column_test` WHERE `id` = ? ==> Parameters: 123(String) \"]},\"354\":{\"h\":\"删除\",\"t\":[\"EasyQuery提供了内置物理删除和逻辑删除,默认EasyQuery不支持delete命令 需要开启允许或者使用delete语句的时候允许。\",\"创建EasyQuery配置项的时候可以通过构造函数开启允许删除，默认不允许调用删除功能\",\"数据库建表脚本\",\"create table t_topic ( id varchar(32) not null comment '主键ID'primary key, stars int not null comment '点赞数', title varchar(50) null comment '标题', create_time datetime not null comment '创建时间' )comment '主题表'; \",\"java实体对象\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } \"]},\"355\":{\"h\":\"1.表达式删除\",\"t\":[\"表达式主键删除\",\"long l = easyQuery.deletable(Topic.class) .whereById(\\\"999\\\") .executeRows(); \",\"==> Preparing: DELETE FROM t_topic WHERE `id` = ? ==> Parameters: 999(String) <== Total: 1 \",\"表达式删除\",\"==> Preparing: DELETE FROM t_topic WHERE `title` = ? ==> Parameters: title998(String) <== Total: 1 \"]},\"356\":{\"h\":\"2.实体删除\",\"t\":[\"Topic topic = easyQuery.queryable(Topic.class).whereId(\\\"997\\\").firstNotNull(\\\"未找到当前主题数据\\\"); //Topic topic=new Topic(); //topic.setId(\\\"997\\\"); long l = easyQuery.deletable(topic).executeRows(); \",\"==> Preparing: DELETE FROM t_topic WHERE `id` = ? ==> Parameters: 997(String) <== Total: 1 \",\"当当前方法或者配置不允许删除命令的时候程序将会抛出对应的异常EasyQueryInvalidOperationException\",\" long l = easyQuery.deletable(Topic.class).whereById(\\\"999\\\").allowDeleteStatement(false).executeRows(); \",\"当前对象如果支持软删除那么在生成对应命令的时候会生成UPDATE语句来实现软删除，对于是否允许删除命令将不会生效，因为允许删除命令仅对当前sql生成为DELETE语句才会生效判断\"]},\"357\":{\"h\":\"3.强制物理删除\",\"t\":[\"逻辑删除\",\"物理删除\"]},\"358\":{\"h\":\"新增\",\"t\":[\"EasyQuery提供了单条插入和批量插入数据的方法,可以返回数据库执行插入后的受影响行数。\",\"数据库建表脚本\",\"create table t_topic ( id varchar(32) not null comment '主键ID'primary key, stars int not null comment '点赞数', title varchar(50) not null comment '标题', create_time datetime not null comment '创建时间' )comment '主题表'; \",\"java实体对象\",\"@Data @Table(\\\"t_topic\\\") @EntityFileProxy public class Topic implements ProxyEntityAvailable<Topic , TopicProxy>{ @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } List<Topic> topics = new ArrayList<>(); for (int i = 0; i < 10; i++) { Topic topic = new Topic(); topic.setId(String.valueOf(i)); topic.setStars(i+100); topic.setTitle(\\\"标题\\\"+i); topic.setCreateTime(LocalDateTime.now().plusDays(i)); topics.add(topic); } \"]},\"359\":{\"h\":\"1.单条插入\",\"t\":[\"插入sql：INSERT INTO t_topic (`id`,`stars`,`title`,`create_time`) VALUES (?,?,?,?) ==> Preparing: INSERT INTO t_topic (`id`,`stars`,`title`,`create_time`) VALUES (?,?,?,?) ==> Parameters: 0(String),100(Integer),标题0(String),2023-03-16T21:34:13.287(LocalDateTime) <== Total: 1 \",\"如果当前数据表为自增id那么会回填对应的数据到id主键里面使用executeRows(true)\"]},\"360\":{\"h\":\"2.多条插入\",\"t\":[\"批量插入需要jdbc链接字符串开启&allowMultiQueries=true&rewriteBatchedStatements=true开启后性能将会大幅提升,并且默认需要使InsertStrategy用ALL_COULMNS策略,不然还是单条执行,当然可以使用batch或者到了插入批处理阈值也是可以的\",\"==> Preparing: INSERT INTO t_topic (`id`,`stars`,`title`,`create_time`) VALUES (?,?,?,?) ==> Parameters: 0(String),100(Integer),标题0(String),2023-03-16T21:38:22.114(LocalDateTime) ==> Parameters: 1(String),101(Integer),标题1(String),2023-03-17T21:38:22.114(LocalDateTime) ==> Parameters: 2(String),102(Integer),标题2(String),2023-03-18T21:38:22.114(LocalDateTime) ==> Parameters: 3(String),103(Integer),标题3(String),2023-03-19T21:38:22.114(LocalDateTime) ==> Parameters: 4(String),104(Integer),标题4(String),2023-03-20T21:38:22.114(LocalDateTime) ==> Parameters: 5(String),105(Integer),标题5(String),2023-03-21T21:38:22.114(LocalDateTime) ==> Parameters: 6(String),106(Integer),标题6(String),2023-03-22T21:38:22.114(LocalDateTime) ==> Parameters: 7(String),107(Integer),标题7(String),2023-03-23T21:38:22.114(LocalDateTime) ==> Parameters: 8(String),108(Integer),标题8(String),2023-03-24T21:38:22.114(LocalDateTime) ==> Parameters: 9(String),109(Integer),标题9(String),2023-03-25T21:38:22.114(LocalDateTime) <== Total: 10 \"]},\"361\":{\"h\":\"3.链式添加\",\"t\":[\"==> Preparing: INSERT INTO t_topic (`id`,`stars`,`title`,`create_time`) VALUES (?,?,?,?) ==> Parameters: 0(String),100(Integer),标题0(String),2023-03-16T21:42:12.542(LocalDateTime) ==> Parameters: 1(String),101(Integer),标题1(String),2023-03-17T21:42:12.542(LocalDateTime) <== Total: 2 \"]},\"362\":{\"h\":\"4.自增主键回填\",\"t\":[\"很多时候我们设置id自增那么需要在插入的时候回填对应的主键自增信息所以easy-query也提供了该功能,并且很方便的使用\",\"@Data @Table(\\\"t_topic_auto\\\") @EntityFileProxy public class TopicAuto implements ProxyEntityAvailable<TopicAuto , TopicAutoProxy>{ @Column(primaryKey = true,generatedKey = true)//设置主键为自增 private Integer id; private Integer stars; private String title; private LocalDateTime createTime; } TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.now().plusDays(99)); Assert.assertNull(topicAuto.getId()); long l = easyQuery.insertable(topicAuto).executeRows(true); Assert.assertEquals(1,l); Assert.assertNotNull(topicAuto.getId()); \",\"==> Preparing: INSERT INTO `t_topic_auto` (`stars`,`title`,`create_time`) VALUES (?,?,?) ==> Parameters: 999(Integer),title999(String),2023-08-31T16:36:06.552(LocalDateTime) <== Total: 1 \"]},\"363\":{\"h\":\"5.策略新增\",\"t\":[\"insertStrategy表示sql的执行策略,insert命令默认采用SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS就是说默认生成的sql如果对象属性为null就不生成insert列。\",\"QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).executeRows(); //默认not null列插入所以只会生成一列 ==> Preparing: INSERT INTO `query_large_column_test` (`id`) VALUES (?) ==> Parameters: 123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ALL_COLUMNS).executeRows(); //所有列都插入 ==> Preparing: INSERT INTO `query_large_column_test` (`id`,`name`,`content`) VALUES (?,?,?) ==> Parameters: 123(String),null(null),null(null) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NULL_COLUMNS).executeRows(); //只插入null列 ==> Preparing: INSERT INTO `query_large_column_test` (`name`,`content`) VALUES (?,?) ==> Parameters: null(null),null(null) \"]},\"364\":{\"h\":\"6.MySQL方言\",\"t\":[\"说明!!!\",\"EntityQuery新版本请跳转 InsertOrUpdate\"]},\"365\":{\"h\":\"onDuplicateKeyIgnore\",\"t\":[\"插入时如果主键或者唯一索引存在就忽略插入\",\"String indexStr = \\\"200\\\"; BlogEntity blog = new BlogEntity(); blog.setId(indexStr); blog.setCreateBy(indexStr); blog.setCreateTime(begin.plusDays(1)); blog.setUpdateBy(indexStr); blog.setUpdateTime(begin.plusDays(1)); blog.setTitle(\\\"title\\\" + indexStr); blog.setContent(\\\"content\\\" + indexStr); blog.setUrl(\\\"http://blog.easy-query.com/\\\" + indexStr); blog.setStar(1); blog.setScore(new BigDecimal(\\\"1.2\\\")); blog.setStatus(1); blog.setOrder(new BigDecimal(\\\"1.2\\\").multiply(BigDecimal.valueOf(1))); blog.setIsTop(false); blog.setTop(false); blog.setDeleted(false); easyQuery.insertable(blog) .onDuplicateKeyIgnore() .executeRows(); ==> Preparing: INSERT IGNORE INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ==> Parameters: 200(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),200(String),200(String),false(Boolean),title200(String),content200(String),http://blog.easy-query.com/200(String),1(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: 0 \"]},\"366\":{\"h\":\"onDuplicateKeyUpdate\",\"t\":[\"支持指定set列\",\"String indexStr = \\\"200\\\"; BlogEntity blog = new BlogEntity(); blog.setId(indexStr); blog.setCreateBy(indexStr); blog.setCreateTime(begin.plusDays(1)); blog.setUpdateBy(indexStr); blog.setUpdateTime(begin.plusDays(1)); blog.setTitle(\\\"title\\\" + indexStr); blog.setContent(\\\"content\\\" + indexStr); blog.setUrl(\\\"http://blog.easy-query.com/\\\" + indexStr); blog.setStar(1); blog.setScore(new BigDecimal(\\\"1.2\\\")); blog.setStatus(1); blog.setOrder(new BigDecimal(\\\"1.2\\\").multiply(BigDecimal.valueOf(1))); blog.setIsTop(false); blog.setTop(false); blog.setDeleted(false); easyQuery.insertable(blog) .onDuplicateKeyUpdate() .executeRows();//插入成功返回1 ==> Preparing: INSERT INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `create_time` = VALUES(`create_time`), `update_time` = VALUES(`update_time`), `create_by` = VALUES(`create_by`), `update_by` = VALUES(`update_by`), `deleted` = VALUES(`deleted`), `title` = VALUES(`title`), `content` = VALUES(`content`), `url` = VALUES(`url`), `star` = VALUES(`star`), `score` = VALUES(`score`), `status` = VALUES(`status`), `order` = VALUES(`order`), `is_top` = VALUES(`is_top`), `top` = VALUES(`top`) ==> Parameters: 200(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),200(String),200(String),false(Boolean),title200(String),content200(String),http://blog.easy-query.com/200(String),1(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: 1 //如果存在一样的key或者唯一约束那么insert就变成update,并且update只更新star和content两个字段 easyQuery.insertable(blog) .onDuplicateKeyUpdate(t->t.column(BlogEntity::getStar).column(BlogEntity::getContent)) .executeRows();//没有需要修改的所以返回1 easyEntityQuery.insertable(blog) .onDuplicateKeyUpdate(t->t.FETCHER.star().content()) .executeRows();//没有需要修改的所以返回1 ==> Preparing: INSERT INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `star` = VALUES(`star`), `content` = VALUES(`content`) ==> Parameters: 200(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),200(String),200(String),false(Boolean),title200(String),content200(String),http://blog.easy-query.com/200(String),1(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: 1 blog.setContent(\\\"xxx\\\"); easyQuery.insertable(blog) .onDuplicateKeyUpdate(t->t.column(BlogEntity::getStar).column(BlogEntity::getContent)) .executeRows();//因为content不一样所以返回行数2 ==> Preparing: INSERT INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `star` = VALUES(`star`), `content` = VALUES(`content`) ==> Parameters: 200(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),200(String),200(String),false(Boolean),title200(String),xxx(String),http://blog.easy-query.com/200(String),1(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: 2 \"]},\"367\":{\"h\":\"7.PgSQL方言\",\"t\":[\"说明!!!\",\"EntityQuery新版本请跳转 InsertOrUpdate\"]},\"368\":{\"h\":\"onConflictDoNothing\",\"t\":[\"TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.now().plusDays(99)); easyQuery.insertable(topicAuto).onConflictDoNothing().executeRows(); //INSERT INTO \\\"t_topic_auto\\\" (\\\"stars\\\",\\\"title\\\",\\\"create_time\\\") VALUES (?,?,?) ON CONFLICT DO NOTHING \"]},\"369\":{\"h\":\"onConflictDoUpdate\",\"t\":[\"支持指定约束列,和set列\",\"TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.now().plusDays(99)); Assert.assertNull(topicAuto.getId()); easyQuery.insertable(topicAuto) .onConflictDoUpdate(TopicAuto::getTitle,t->t.column(TopicAuto::getStars).column(TopicAuto::getCreateTime)) .executeRows(); easyEntityQuery.insertable(topicAuto) .onConflictDoUpdate(t->t.title(),t->t.FETCHER.star().createTime()) .executeRows(); //如果需要设定多约束值 //INSERT INTO \\\"t_topic_auto\\\" (\\\"stars\\\",\\\"title\\\",\\\"create_time\\\") VALUES (?,?,?) ON CONFLICT (\\\"title\\\") DO UPDATE SET \\\"stars\\\" = EXCLUDED.\\\"stars\\\", \\\"create_time\\\" = EXCLUDED.\\\"create_time\\\" easyEntityQuery.insertable(topicAuto) .onConflictDoUpdate(t->t.FETCHER.id().title(),t->t.FETCHER.star().createTime()) .executeRows(); //INSERT INTO \\\"t_topic_auto\\\" (\\\"stars\\\",\\\"title\\\",\\\"create_time\\\") VALUES (?,?,?) ON CONFLICT (\\\"id\\\",\\\"title\\\") DO UPDATE SET \\\"stars\\\" = EXCLUDED.\\\"stars\\\", \\\"create_time\\\" = EXCLUDED.\\\"create_time\\\" \"]},\"370\":{\"h\":\"Map插入\",\"t\":[\"easy-query还支持Map结构的数据插入支持,其中map的key表示数据库对应的列名,并且不需要添加asTable来指定操作的数据库表名\",\"Map<String, Object> stringObjectHashMap = new LinkedHashMap<>(); stringObjectHashMap.put(\\\"id\\\",123); stringObjectHashMap.put(\\\"name\\\",\\\"小明\\\"); stringObjectHashMap.put(\\\"name1\\\",\\\"小明\\\"); stringObjectHashMap.put(\\\"name2\\\",null); easyQuery.mapInsertable(stringObjectHashMap) .asTable(\\\"sys_table\\\") .setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS) .executeRows(); INSERT INTO `sys_table` (`id`,`name`,`name1`) VALUES (?,?,?) \"]},\"371\":{\"h\":\"新增或者更新\",\"t\":[\"并不是简单的查询判断是否存在,如果不存在就更新,存在就更新或者忽略,而是实现了数据库对应的方言实现数据库自身的功能,如果要使用此功能建议升级到1.10.41+\"]},\"372\":{\"h\":\"支持的db\",\"t\":[\"数据库名称\",\"包名\",\"是否支持\",\"MySQL\",\"sql-mysql\",\"✅\",\"PostgresSQL\",\"sql-pgsql\",\"✅\",\"SqlServer\",\"sql-mssql\",\"✅\",\"H2\",\"sql-h2\",\"✅\",\"达梦dameng\",\"sql-dameng\",\"✅\",\"人大金仓KingbaseES\",\"sql-kingbase-es\",\"✅\",\"Oracle\",\"sql-oracle\",\"✅\",\"SQLite\",\"sql-sqlite\",\"✅\"]},\"373\":{\"h\":\"onConflictThen\",\"t\":[\"第一个参数表示要更新的列,如果传入null则表示存在就忽略\",\"第二个参数表示指定存在的约束判断支持多列(mysql不支持指定所以设置了也无效)\"]},\"374\":{\"h\":\"存在就忽略不更新\",\"t\":[\"TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.of(2020,1,1,1,1)); Assert.assertNull(topicAuto.getId()); long l = defaultEasyEntityQuery.insertable(topicAuto) .onConflictThen(null) .executeRows(); MERGE INTO \\\"t_topic_auto\\\" t1 USING (SELECT ? AS \\\"stars\\\",? AS \\\"title\\\",? AS \\\"create_time\\\" FROM DUAL ) t2 ON (t1.\\\"id\\\" = t2.\\\"id\\\") WHEN NOT MATCHED THEN INSERT (\\\"stars\\\",\\\"title\\\",\\\"create_time\\\") VALUES (t2.\\\"stars\\\",t2.\\\"title\\\",t2.\\\"create_time\\\") \"]},\"375\":{\"h\":\"指定存在的条件\",\"t\":[\"TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.of(2020,1,1,1,1)); Assert.assertNull(topicAuto.getId()); long l = defaultEasyEntityQuery.insertable(topicAuto) .onConflictThen(null,o->o.FETCHER.stars().id()) .executeRows(); MERGE INTO \\\"t_topic_auto\\\" t1 USING (SELECT ? AS \\\"title\\\",? AS \\\"create_time\\\" FROM DUAL ) t2 ON (t1.\\\"stars\\\" = t2.\\\"stars\\\" AND t1.\\\"id\\\" = t2.\\\"id\\\") WHEN NOT MATCHED THEN INSERT (\\\"title\\\",\\\"create_time\\\") VALUES (t2.\\\"title\\\",t2.\\\"create_time\\\") \"]},\"376\":{\"h\":\"存在就更新\",\"t\":[\"//存在就更新stars和title TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.of(2020,1,1,1,1)); Assert.assertNull(topicAuto.getId()); long l = defaultEasyEntityQuery.insertable(topicAuto) .onConflictThen(o -> o.FETCHER.stars().title()) .executeRows(); MERGE INTO \\\"t_topic_auto\\\" t1 USING (SELECT ? AS \\\"stars\\\",? AS \\\"title\\\",? AS \\\"create_time\\\" FROM DUAL ) t2 ON (t1.\\\"id\\\" = t2.\\\"id\\\") WHEN MATCHED THEN UPDATE SET t1.\\\"stars\\\" = t2.\\\"stars\\\",t1.\\\"title\\\" = t2.\\\"title\\\" WHEN NOT MATCHED THEN INSERT (\\\"stars\\\",\\\"title\\\",\\\"create_time\\\") VALUES (t2.\\\"stars\\\",t2.\\\"title\\\",t2.\\\"create_time\\\") \"]},\"377\":{\"h\":\"存在就更新\",\"t\":[\"//存在就更新stars和title TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.of(2020,1,1,1,1)); Assert.assertNull(topicAuto.getId()); long l = defaultEasyEntityQuery.insertable(topicAuto) .onConflictThen(o -> o.FETCHER.stars().title()) .executeRows(); MERGE INTO \\\"t_topic_auto\\\" t1 USING (SELECT ? AS \\\"stars\\\",? AS \\\"title\\\",? AS \\\"create_time\\\" FROM DUAL ) t2 ON (t1.\\\"id\\\" = t2.\\\"id\\\") WHEN MATCHED THEN UPDATE SET t1.\\\"stars\\\" = t2.\\\"stars\\\",t1.\\\"title\\\" = t2.\\\"title\\\" WHEN NOT MATCHED THEN INSERT (\\\"stars\\\",\\\"title\\\",\\\"create_time\\\") VALUES (t2.\\\"stars\\\",t2.\\\"title\\\",t2.\\\"create_time\\\") //存在就更新所有列除了主键和指定约束键 TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.of(2020,1,1,1,1)); Assert.assertNull(topicAuto.getId()); long l = defaultEasyEntityQuery.insertable(topicAuto) .onConflictThen(o -> o.FETCHER.allFields()) .executeRows(); MERGE INTO \\\"t_topic_auto\\\" t1 USING (SELECT ? AS \\\"stars\\\",? AS \\\"title\\\",? AS \\\"create_time\\\" FROM DUAL ) t2 ON (t1.\\\"id\\\" = t2.\\\"id\\\") WHEN MATCHED THEN UPDATE SET t1.\\\"stars\\\" = t2.\\\"stars\\\",t1.\\\"title\\\" = t2.\\\"title\\\",t1.\\\"create_time\\\" = t2.\\\"create_time\\\" WHEN NOT MATCHED THEN INSERT (\\\"stars\\\",\\\"title\\\",\\\"create_time\\\") VALUES (t2.\\\"stars\\\",t2.\\\"title\\\",t2.\\\"create_time\\\") \"]},\"378\":{\"h\":\"相关搜索\",\"t\":[\"存在更新存在忽略MERGE INTOonDuplicateKeyIgnoreonDuplicateKeyUpdateonConflictDoNothingonConflictDoUpdate\"]},\"379\":{\"h\":\"性能说明\",\"t\":[\"easy-query本身没有benchmark的测试,都是依托于网上orm的性能测试后加入其中,orm的性能主要有3部分组成\",\"toSQL就是表达式到字符串SQL的过程消耗的时间\",\"jdbc,这个所有orm都是一样的\",\"toBean就是ResultSet到Bean对象的过程消耗的时间\"]},\"380\":{\"h\":\"结论\",\"t\":[\"结论!!!\",\"easy-query的toSQL性能中规中矩,在所有orm中偏中上并不是天花板\",\"easy-query的toBean性能在orm中算是比较出色优秀的\",\"以下所有测试来自于BeetlSQL\"]},\"381\":{\"h\":\"toSQL性能附带双列toBean\"},\"382\":{\"h\":\"toBean数据库表20列\"},\"383\":{\"h\":\"性能比较\",\"t\":[\"当前性能比较代码来自Mybatis-Flex,原本是Mybatis-Flex和Mybaits-Plus的「性能」对比，再他们的基础上删除了json的typehandler,增加了自己的测试代码， 并且增加了获取1w条记录的性能测试。\",\"直接放结论:目前各项指标easy-query和Mybatis-Flex相近甚至更快,再获取1W条记录的情况下更是遥遥领先与另外两个框架。\",\"本文只阐述了「性能」方面的对比。\"]},\"384\":{\"h\":\"测试方法\",\"t\":[\"使用 h2 数据库，在初始化的时候分别为easy-query和 mybatis-flex 和 mybatis-plus 创建三个不同的数据库， 但是完全一样的数据结构、数据内容和数据量（每个库 2w 条数据）。\",\"开始之前先进行预热，之后通过打印时间戳的方式进行对比，谁消耗的时间越少，则性能越高（每次测试 10 轮）。\",\"测试源码：https://github.com/xuejmnet/easy-query-benchmark\",\"测试说明\",\"在以下的所有测试中，有可能因为每个人的电脑性能不同，测试的结果会有所不同。\"]},\"385\":{\"h\":\"测试单条数据查询\",\"t\":[\"Mybatis-Flex 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.where(FLEX_ACCOUNT.ID.ge(100) .or(FLEX_ACCOUNT.USER_NAME.eq(\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)))); mapper.selectOneByQuery(queryWrapper); \",\"EasyQuery 的代码如下：\",\"easyQuery.queryable(EasyQueryAccount.class) .where(o->o.ge(EasyQueryAccount::getId,100) .or() .eq(EasyQueryAccount::getUserName,\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000))) .firstOrNull(); \",\"Mybatis-Plus 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.ge(\\\"id\\\", 100); queryWrapper.or(); queryWrapper.eq(\\\"user_name\\\", \\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)); queryWrapper.last(\\\"limit 1\\\"); mapper.selectOne(queryWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexSelectOne:47 >>>>>>>testEasySelectOne:41 >>>>>>>testPlusSelectOneWithLambda:351 >>>>>>>testPlusSelectOne:331 --------------- >>>>>>>testFlexSelectOne:39 >>>>>>>testEasySelectOne:34 >>>>>>>testPlusSelectOneWithLambda:323 >>>>>>>testPlusSelectOne:354 --------------- >>>>>>>testFlexSelectOne:44 >>>>>>>testEasySelectOne:37 >>>>>>>testPlusSelectOneWithLambda:321 >>>>>>>testPlusSelectOne:302 --------------- >>>>>>>testFlexSelectOne:39 >>>>>>>testEasySelectOne:31 >>>>>>>testPlusSelectOneWithLambda:291 >>>>>>>testPlusSelectOne:278 --------------- >>>>>>>testFlexSelectOne:34 >>>>>>>testEasySelectOne:30 >>>>>>>testPlusSelectOneWithLambda:298 >>>>>>>testPlusSelectOne:288 --------------- >>>>>>>testFlexSelectOne:34 >>>>>>>testEasySelectOne:32 >>>>>>>testPlusSelectOneWithLambda:294 >>>>>>>testPlusSelectOne:323 --------------- >>>>>>>testFlexSelectOne:33 >>>>>>>testEasySelectOne:28 >>>>>>>testPlusSelectOneWithLambda:281 >>>>>>>testPlusSelectOne:272 --------------- >>>>>>>testFlexSelectOne:33 >>>>>>>testEasySelectOne:25 >>>>>>>testPlusSelectOneWithLambda:270 >>>>>>>testPlusSelectOne:256 --------------- >>>>>>>testFlexSelectOne:27 >>>>>>>testEasySelectOne:29 >>>>>>>testPlusSelectOneWithLambda:268 >>>>>>>testPlusSelectOne:255 --------------- >>>>>>>testFlexSelectOne:28 >>>>>>>testEasySelectOne:29 >>>>>>>testPlusSelectOneWithLambda:257 >>>>>>>testPlusSelectOne:266 \",\"测试结论\",\"easy-query和Mybatis-Flex 的查询单条数据的速度相当，大概是 Mybatis-Plus 的 5 ~ 10+ 倍。因为是查询单条数据所以可以近似理解为表达式生成sql的能力差距大概是5-10倍\"]},\"386\":{\"h\":\"测试列表(List)数据查询\",\"t\":[\"要求返回的数据为 10 条数据。\",\"Mybatis-Flex 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.where(FLEX_ACCOUNT.ID.ge(100).or(FLEX_ACCOUNT.USER_NAME .eq(\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)))) .limit(10); mapper.selectListByQuery(queryWrapper); \",\"easy-query 的代码如下：\",\" easyQuery.queryable(EasyQueryAccount.class) .where(o->o.ge(EasyQueryAccount::getId,100) .or() .eq(EasyQueryAccount::getUserName,\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000))) .limit(10).toList(); \",\"Mybatis-Plus 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.ge(\\\"id\\\", 100); queryWrapper.or(); queryWrapper.eq(\\\"user_name\\\", \\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)); queryWrapper.last(\\\"limit 10\\\"); mapper.selectList(queryWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexSelectTop10:40 >>>>>>>testEasySelectTop10:37 >>>>>>>testPlusSelectTop10WithLambda:259 >>>>>>>testPlusSelectTop10:245 --------------- >>>>>>>testFlexSelectTop10:39 >>>>>>>testEasySelectTop10:33 >>>>>>>testPlusSelectTop10WithLambda:256 >>>>>>>testPlusSelectTop10:245 --------------- >>>>>>>testFlexSelectTop10:39 >>>>>>>testEasySelectTop10:34 >>>>>>>testPlusSelectTop10WithLambda:249 >>>>>>>testPlusSelectTop10:238 --------------- >>>>>>>testFlexSelectTop10:39 >>>>>>>testEasySelectTop10:32 >>>>>>>testPlusSelectTop10WithLambda:248 >>>>>>>testPlusSelectTop10:238 --------------- >>>>>>>testFlexSelectTop10:38 >>>>>>>testEasySelectTop10:32 >>>>>>>testPlusSelectTop10WithLambda:249 >>>>>>>testPlusSelectTop10:237 --------------- >>>>>>>testFlexSelectTop10:40 >>>>>>>testEasySelectTop10:29 >>>>>>>testPlusSelectTop10WithLambda:243 >>>>>>>testPlusSelectTop10:243 --------------- >>>>>>>testFlexSelectTop10:37 >>>>>>>testEasySelectTop10:29 >>>>>>>testPlusSelectTop10WithLambda:247 >>>>>>>testPlusSelectTop10:244 --------------- >>>>>>>testFlexSelectTop10:36 >>>>>>>testEasySelectTop10:29 >>>>>>>testPlusSelectTop10WithLambda:248 >>>>>>>testPlusSelectTop10:244 --------------- >>>>>>>testFlexSelectTop10:35 >>>>>>>testEasySelectTop10:27 >>>>>>>testPlusSelectTop10WithLambda:245 >>>>>>>testPlusSelectTop10:245 --------------- >>>>>>>testFlexSelectTop10:34 >>>>>>>testEasySelectTop10:25 >>>>>>>testPlusSelectTop10WithLambda:247 >>>>>>>testPlusSelectTop10:239 \",\"测试结论\",\"本次查询10条的情况下可以看到easy-query已经略微快于Mybatis-Flex,依然是 Mybatis-Plus 的 5 ~ 10+ 倍\"]},\"387\":{\"h\":\"测试列表(List1W)数据查询\",\"t\":[\"要求返回的数据为 10000 条数据。\",\"Mybatis-Flex 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.where(FLEX_ACCOUNT.ID.ge(100).or(FLEX_ACCOUNT.USER_NAME .eq(\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)))) .limit(10000); mapper.selectListByQuery(queryWrapper); \",\"easy-query 的代码如下：\",\" easyQuery.queryable(EasyQueryAccount.class) .where(o->o.ge(EasyQueryAccount::getId,100) .or() .eq(EasyQueryAccount::getUserName,\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000))) .limit(10000).toList(); \",\"Mybatis-Plus 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.ge(\\\"id\\\", 100); queryWrapper.or(); queryWrapper.eq(\\\"user_name\\\", \\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)); queryWrapper.last(\\\"limit 10000\\\"); mapper.selectList(queryWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexSelectTop10000:12812 >>>>>>>testEasySelectTop10000:3981 >>>>>>>testPlusSelectTop10000WithLambda:7821 >>>>>>>testPlusSelectTop10000:7807 --------------- >>>>>>>testFlexSelectTop10000:12806 >>>>>>>testEasySelectTop10000:3965 >>>>>>>testPlusSelectTop10000WithLambda:7794 >>>>>>>testPlusSelectTop10000:7798 --------------- >>>>>>>testFlexSelectTop10000:12759 >>>>>>>testEasySelectTop10000:3977 >>>>>>>testPlusSelectTop10000WithLambda:7851 >>>>>>>testPlusSelectTop10000:7780 --------------- >>>>>>>testFlexSelectTop10000:12779 >>>>>>>testEasySelectTop10000:3964 >>>>>>>testPlusSelectTop10000WithLambda:7803 >>>>>>>testPlusSelectTop10000:7805 --------------- >>>>>>>testFlexSelectTop10000:12969 >>>>>>>testEasySelectTop10000:3984 >>>>>>>testPlusSelectTop10000WithLambda:7856 >>>>>>>testPlusSelectTop10000:7780 --------------- >>>>>>>testFlexSelectTop10000:12743 >>>>>>>testEasySelectTop10000:3974 >>>>>>>testPlusSelectTop10000WithLambda:7784 >>>>>>>testPlusSelectTop10000:7772 --------------- >>>>>>>testFlexSelectTop10000:12662 >>>>>>>testEasySelectTop10000:3969 >>>>>>>testPlusSelectTop10000WithLambda:7776 >>>>>>>testPlusSelectTop10000:7745 --------------- >>>>>>>testFlexSelectTop10000:12721 >>>>>>>testEasySelectTop10000:3985 >>>>>>>testPlusSelectTop10000WithLambda:7790 >>>>>>>testPlusSelectTop10000:7755 --------------- >>>>>>>testFlexSelectTop10000:12731 >>>>>>>testEasySelectTop10000:3953 >>>>>>>testPlusSelectTop10000WithLambda:7762 >>>>>>>testPlusSelectTop10000:7751 --------------- >>>>>>>testFlexSelectTop10000:12728 >>>>>>>testEasySelectTop10000:3975 >>>>>>>testPlusSelectTop10000WithLambda:7759 >>>>>>>testPlusSelectTop10000:7771 \",\"测试结论\",\"本次查询10000条的情况下可以看到easy-query已经完全快于Mybatis-Flex大概是其3倍,是 Mybatis-Plus 的2 倍,本次结果可以得出Mybatis-Flex的优点是快速生成sql,但是在jdbc到bean对象的转换是相对低效的\"]},\"388\":{\"h\":\"分页查询\",\"t\":[\"Mybatis-Flex 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper() .where(FLEX_ACCOUNT.ID.ge(100)); mapper.paginate(page, pageSize, 20000, queryWrapper); \",\"easy-query 的代码如下：\",\" easyQuery.queryable(EasyQueryAccount.class) .where(o-> o.ge(EasyQueryAccount::getId,100)) .toPageResult(page,pageSize,20000); \",\"Mybatis-Plus 的代码如下：\",\"LambdaQueryWrapper<PlusAccount> queryWrapper = new LambdaQueryWrapper<>(); queryWrapper.ge(PlusAccount::getId, 100); queryWrapper.eq(PlusAccount::getEmail, \\\"michael@gmail.com\\\"); Page<PlusAccount> p = Page.of(page, pageSize, 20000, false); mapper.selectPage(p, queryWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexPaginate:41 >>>>>>>testEasyPaginate:21 >>>>>>>testPlusPaginate:246 --------------- >>>>>>>testFlexPaginate:39 >>>>>>>testEasyPaginate:20 >>>>>>>testPlusPaginate:243 --------------- >>>>>>>testFlexPaginate:35 >>>>>>>testEasyPaginate:20 >>>>>>>testPlusPaginate:239 --------------- >>>>>>>testFlexPaginate:33 >>>>>>>testEasyPaginate:19 >>>>>>>testPlusPaginate:236 --------------- >>>>>>>testFlexPaginate:32 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:234 --------------- >>>>>>>testFlexPaginate:32 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:235 --------------- >>>>>>>testFlexPaginate:31 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:238 --------------- >>>>>>>testFlexPaginate:31 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:233 --------------- >>>>>>>testFlexPaginate:32 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:232 --------------- >>>>>>>testFlexPaginate:31 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:232 \",\"测试结论\",\"分页查询速度 easy-query快于Mybatis-Flex 远快于 Mybatis-Plus ，大概是 Mybatis-Plus 的 5~10 倍左右。\"]},\"389\":{\"h\":\"数据更新\",\"t\":[\"Mybatis-Flex 的代码如下：\",\"FlexAccount flexAccount = new FlexAccount(); flexAccount.setUserName(\\\"testInsert\\\" + i); flexAccount.setNickname(\\\"testInsert\\\" + i); QueryWrapper queryWrapper = QueryWrapper.create() .where(FLEX_ACCOUNT.ID.ge(9200)) .and(FLEX_ACCOUNT.ID.le(9300)) .and(FLEX_ACCOUNT.USER_NAME.like(\\\"admin\\\")) .and(FLEX_ACCOUNT.NICKNAME.like(\\\"admin\\\")); mapper.updateByQuery(flexAccount, queryWrapper); \",\"easy-query 的代码如下：\",\"easyQuery.updatable(EasyQueryAccount.class) .set(EasyQueryAccount::getUserName,\\\"testInsert\\\" + i) .set(EasyQueryAccount::getNickname,\\\"testInsert\\\" + i) .where(o->o.ge(EasyQueryAccount::getId,9000).le(EasyQueryAccount::getId,9100) .like(EasyQueryAccount::getUserName,\\\"admin\\\") .like(EasyQueryAccount::getNickname,\\\"admin\\\")) .executeRows(); \",\"Mybatis-Plus 的代码如下：\",\"PlusAccount plusAccount = new PlusAccount(); plusAccount.setUserName(\\\"testInsert\\\" + i); plusAccount.setNickname(\\\"testInsert\\\" + i); LambdaUpdateWrapper<PlusAccount> updateWrapper = new LambdaUpdateWrapper<>(); updateWrapper.ge(PlusAccount::getId, 9000); updateWrapper.le(PlusAccount::getId, 9100); updateWrapper.like(PlusAccount::getUserName, \\\"admin\\\"); updateWrapper.like(PlusAccount::getNickname, \\\"admin\\\"); mapper.update(plusAccount, lambdaUpdateWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexUpdate:38 >>>>>>>testEasyUpdate:30 >>>>>>>testPlusUpdate:196 --------------- >>>>>>>testFlexUpdate:29 >>>>>>>testEasyUpdate:24 >>>>>>>testPlusUpdate:183 --------------- >>>>>>>testFlexUpdate:27 >>>>>>>testEasyUpdate:22 >>>>>>>testPlusUpdate:187 --------------- >>>>>>>testFlexUpdate:27 >>>>>>>testEasyUpdate:21 >>>>>>>testPlusUpdate:180 --------------- >>>>>>>testFlexUpdate:25 >>>>>>>testEasyUpdate:20 >>>>>>>testPlusUpdate:187 --------------- >>>>>>>testFlexUpdate:24 >>>>>>>testEasyUpdate:20 >>>>>>>testPlusUpdate:183 --------------- >>>>>>>testFlexUpdate:27 >>>>>>>testEasyUpdate:20 >>>>>>>testPlusUpdate:180 --------------- >>>>>>>testFlexUpdate:23 >>>>>>>testEasyUpdate:21 >>>>>>>testPlusUpdate:176 --------------- >>>>>>>testFlexUpdate:24 >>>>>>>testEasyUpdate:19 >>>>>>>testPlusUpdate:179 --------------- >>>>>>>testFlexUpdate:21 >>>>>>>testEasyUpdate:23 >>>>>>>testPlusUpdate:177 \",\"测试结论\",\"数据更新速度easy-query快于Mybatis-Flex 远快于 Mybatis-Plus，大概是 Mybatis-Plus 的 5~10+ 倍。\"]},\"390\":{\"h\":\"更多的测试\",\"t\":[\"想进一步进行更多测试的同学，可以到 https://github.com/xuejmnet/easy-query-benchmark\\n下载源码后，添加其他方面的测试。\"]},\"391\":{\"h\":\"使用代理模式\",\"t\":[\"easy-query提供了多种api接口方便用户调用,其中代理模式的使用上面更加符合人性化,如果您是c#开发人员那么肯定这种模式相对的会更加适合您的开发理念\",\"加群配合插件可以快速生成apt代理类无需每次都要build\"]},\"392\":{\"h\":\"🔔交流QQ群\"},\"393\":{\"h\":\"EasyQuery官方QQ群: 170029046\"},\"394\":{\"h\":\"psvm下\"},\"395\":{\"h\":\"安装依赖\",\"t\":[\"easy-query.version版本建议大于1.7.5+\",\" <!-- easy-query mysql语法 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> <!-- apt生成代理类 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 代理api --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.17</version> </dependency> <!-- 连接池 --> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <!-- lombok 快速get set 可选 --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> \",\"说明!!!\",\"如果您的项目是多模块,请在对应模块需要生成代理对象的类处都添加sql-processor\"]},\"396\":{\"h\":\"新建java类\",\"t\":[\"@Data @Table(\\\"t_topic\\\") @EntityProxy //必须添加这个注解 public class Topic { @Column(primaryKey = true) private String id; private String name; private Integer no; @UpdateIgnore private LocalDateTime createTime; } \",\"说明!!!\",\"idea 工具栏点击build => build project进行生成\",\"会在target包下的xgenerated-sources下生成TopicProxy.java类\",\"如果idea无法智能提示那么就刷新一下maven\"]},\"397\":{\"h\":\"初始化代码\",\"t\":[\" public class Main { public static void main(String[] args) { //设置日志打印为控制台 LogFactory.useStdOutLogging(); //初始化连接池 HikariDataSource dataSource = new HikariDataSource(); dataSource.setJdbcUrl(\\\"jdbc:mysql://127.0.0.1:3306/console-demo?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\"); dataSource.setUsername(\\\"root\\\"); dataSource.setPassword(\\\"root\\\"); dataSource.setDriverClassName(\\\"com.mysql.cj.jdbc.Driver\\\"); dataSource.setMaximumPoolSize(20); //初始化属性模式 EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setDeleteThrowError(true);//设置不允许物理删除 op.setPrintSql(true);//设置以log.info模式打印执行sql信息 }) .replaceService(NameConversion.class, UnderlinedNameConversion.class)//替换框架内部的属性和列转换模式改为大写转下划线 .useDatabaseConfigure(new MySQLDatabaseConfiguration())//设置方言语法等为mysql的 .build(); //创建代理模式api查询 EasyProxyQuery easyProxyQuery = new DefaultEasyProxyQuery(easyQueryClient); //第一种写法 List<Topic> topics = easyProxyQuery.queryable(TopicProxy.createTable()) .where(o -> o.eq(o.t().id(), \\\"123\\\").like(o.t().name(), \\\"您好\\\")) .orderByAsc(o -> o.columns(o.t().createTime(), o.t().id())) .select(o -> o.columns(o.t().no(), o.t().id(), o.t().name())) .toList(); //第二种写法提取表变量 TopicProxy table = TopicProxy.createTable(); List<Topic> topics = easyProxyQuery.queryable(table) .where(o -> o.eq(table.id(), \\\"123\\\").like(table.name(), \\\"您好\\\"))//表达式内部直接用表变量 .orderByAsc(o -> o.columns(table.createTime(), table.id())) .select(o -> o.columns(table.no(), o.t().id(), table.name())) .toList(); //join写法 更加直观 TopicTestProxy table = TopicTestProxy.createTable(); TopicAutoProxy table1 = TopicAutoProxy.createTable(); List<Topic> list = easyProxyQuery .queryable(table) .leftJoin(table1, o -> o.eq(table.id(), table1.title())) .where(o -> o.eq(table.id(), \\\"123\\\") .or().eq(table1.title(), \\\"111\\\")) .orderByAsc(o -> o.column(table1.id())) .select(s -> s.columns(table1.id(), table1.createTime()).column(table.title())) .toList(); } } \",\"==> Preparing: SELECT `no`,`id`,`name` FROM `t_topic` WHERE `id` = ? AND `name` LIKE ? ORDER BY `create_time` ASC,`id` ASC ==> Parameters: 123(String),%您好%(String) <== Time Elapsed: 17(ms) <== Total: 0 -- join写法 ==> Preparing: SELECT t1.`id`,t1.`create_time`,t.`title` FROM `t_topic` t LEFT JOIN `t_topic_auto` t1 ON t.`id` = t1.`title` WHERE (t.`id` = ? OR t1.`title` = ?) ORDER BY t1.`id` ASC ==> Parameters: 123(String),111(String) <== Time Elapsed: 52(ms) <== Total: 0 \",\"说明!!!\",\"在代理模式下面查询相关方法入参都只有一个,比如入参为o那么对应的表就是o.t(),o.t1(),o.t2()....o.t9()分别对应上下文10张表,也可以讲queryable,join需要的表进行参数提取,作为局部变量来使用\"]},\"398\":{\"h\":\"快速预览🔥\",\"t\":[\"本章节是为了方便没有经验的用户进行快速预览使用和场景说明\"]},\"399\":{\"h\":\"查询对象\",\"t\":[\"firstOrNull、firstNotNull、singleOrNull、singleNotNull分别是对查询结果进行第一条数据的返回\",\"方法\",\"默认值\",\"描述\",\"firstOrNull\",\"null\",\"查询返回第一条数据,如果没有结果返回null,默认会对sql添加limit 1或者top 1之类的的限制,部分场景可能会对索引有相关影响\",\"firstNotNull\",\"-\",\"查询返回第一条数据,如果没有结果将会抛错EasyQueryFirstOrNotNullException,默认会对sql添加limit 1或者top 1之类的的限制,部分场景可能会对索引有相关影响\",\"singleOrNull\",\"null\",\"查询返回第一条数据,如果没有结果返回null,如果本次查询结果数据条数大于1条那么将会抛错EasyQuerySingleMoreElementException,和first的区别是不会添加limit 1或者top 1\",\"singleNotNull\",\"-\",\"查询返回第一条数据,如果没有结果将会抛错EasyQuerySingleOrNotNullException,如果本次查询结果数据条数大于1条那么将会抛错EasyQuerySingleMoreElementException,和first的区别是不会添加limit 1或者top 1\",\"toList对查询结果进行多条数据返回\",\"方法\",\"默认值\",\"描述\",\"toList\",\"new ArrayList\",\"查询返回符合条件的所有数据,并且以ArrayList集合进行返回,如果没有符合条件的结果将返回空的ArrayList而不是null\",\"toPageResult对查询结果进行分页查询\",\"方法\",\"默认值\",\"描述\",\"toPageResult\",\"new DefaultPageResult\",\"查询返回符合条件的分页结果,如果没有符合条件的结果将返回默认分页对象而不是null\",\"toStreamResult对查询结果进行迭代器模式返回,符合超大数量级的数据获取\",\"方法\",\"默认值\",\"描述\",\"toStreamResult\",\"new DefaultJdbcStreamResultSet\",\"查询返回符合条件的可迭代结果集,支持获取Iterable接口也支持foreach,使用时需要配合try finally来关闭资源\"]},\"400\":{\"h\":\"测试数据\",\"t\":[\"@Data @Table(\\\"t_topic\\\") @EntityFileProxy public class Topic implements ProxyEntityAvailable<Topic , TopicProxy>{ @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } \"]},\"401\":{\"h\":\"查询第一条数据\",\"t\":[\"查询第一条数据没有的情况下返回null\",\"查询第一条数据且仅存在至多一条数据,没有的情况下返回null\"]},\"402\":{\"h\":\"查询第一条数据且不为null\",\"t\":[\"查询第一条数据且仅存在至多一条数据,没有的情况下返回null\",\"默认异常替换成业务异常\",\"notnull异常!!!\",\"框架默认针对NotNull返回的错误类型可能并不是你所希望得我们可以通过重写接口实现自己的自定义异常，接口AssertExceptionFactory.class默认实现类DefaultAssertExceptionFactory.class查看替换框架行为\"]},\"403\":{\"h\":\"查询多条数据\",\"t\":[\"查询第一条数据没有的情况下返回new ArrayList<>(0)实例的接口List<T>\",\"说明!!!\",\"single和first获取单条数据 toList获取多条数据,大部分情况下终结方法就是这两个\"]},\"404\":{\"h\":\"自定义列\",\"t\":[\"返回当前对象自定义列\"]},\"405\":{\"h\":\"创建匿名表\"},\"406\":{\"h\":\"分片默认行为配置\"},\"407\":{\"h\":\"默认行为\",\"t\":[\"方法\",\"默认值\",\"描述\",\"connectionMode\",\"ConnectionModeEnum.SYSTEM_AUTO\",\"系统自动选择有内存严格和连接数严格,内存严格表示会多开连接数，连接数严格会选择少开连接数在内存归并\",\"maxShardingQueryLimit\",\"5\",\"当出现跨分片聚合也就是通过表达式无法精确到具体路由或筛选后路由大于1那么会开启最多多少个线程为一组进行查询聚合,默认是5。注意这个值的设置不可以大于数据库连接池数量\",\"executorMaximumPoolSize\",\"0\",\"当值为0时分片聚合采用无界队列Executors.newCachedThreadPool,如果自定义必须大于maxShardingQueryLimit*分库数量，执行线程数 如果为0那么采用无界线程池Executors.newCachedThreadPool,如果是大于0采用长度为executorQueueSize的有界队列,核心线程数采用executorCorePoolSize并且需要比 executorCorePoolSize值大\",\"executorCorePoolSize\",\"当前环境线程数且最小为:4\",\"当且仅当executorMaximumPoolSize>0生效\",\"executorQueueSize\",\"1024\",\"当且仅当executorMaximumPoolSize>0生效 分片聚合执行线程队列\",\"throwIfRouteNotMatch\",\"true\",\"当查询没有路由匹配的时候查询是否报错,true:表示报错,false:表示返回默认值\",\"shardingExecuteTimeoutMillis\",\"30000(ms)\",\"分片聚合超时时间默认30秒\",\"maxShardingRouteCount\",\"128\",\"当出现条件分片大于多少时报错默认128,就是比如select where update where delete where路由到过多的表就会报错,entity操作比如update对象，insert，delete对象不会判断这个条件\",\"defaultDataSourceName\",\"ds0\",\"默认分库数据源名称,分表设置与否无关紧要\",\"defaultDataSourceMergePoolSize\",\"0\",\"默认数据源的数据源连接池大小分表有效,一般设置为最少最少 >= maxShardingQueryLimit，当小于maxShardingQueryLimit后启动会抛出警告，建议和实际数据库连接池大小一致或者比实际稍小,用于防止获取链接死锁程序假死,假设线程池为3并且不设置当前值,那么如果有3个线程a,b,c分别需要聚合2个分片,那么如果线程a,b,c都拿到1个线程的情况下想要拿到下一个链接需要其中一个释放,那么就会导致死锁要分别等到其他线程超时,默认DataSource.getConnection没有设置超时时间所以需要自己定义,如果程序不涉及同DataSource分配聚合那么那么就不需要设置该值,如果需要聚合的情况下并且存在外部orm或者getconnection那么可能导致无法正确反应超时可以适当将该值降低\",\"multiConnWaitTimeoutMillis\",\"5000(ms)\",\"默认5秒分表聚合多链接获取分表插入更新删除同理多个线程间等待获取时间单位毫秒(ms),用于分片聚合查询时一次性获取多个数据库connection但是因为连接池有限所以多个聚合线程间会等待防止死锁，比如连接池2个链接,本次查询需要2个链接聚合有两个线程,a线程已经获取了一个connection,b线程也获取一个,那么a线程想要获取下一个就必须等待b线程释放，b线程想要获取下一个也需要a线程释放或者等到DataSource.getConnection()超时\",\"warningBusy\",\"true\",\"当获取链接时间大于multiConnWaitTimeoutMillis*0.8并且没有超时那么会log.warn打印警告信息\"]},\"408\":{\"h\":\"事务\"},\"409\":{\"h\":\"手动事务\",\"t\":[\"easy-query默认提供手动开启事务的功能,并且在springboot下可以跨非代理方法生效,唯一限制就是当前线程内的\"]},\"410\":{\"h\":\"api\",\"t\":[\"方法\",\"默认值\",\"描述\",\"beginTransaction\",\"null\",\"参数表示数据库隔离级别,默认采用datasource的可以自定义 Connection.TRANSACTION_READ_UNCOMMITTED,Connection.TRANSACTION_READ_COMMITTED,Connection.TRANSACTION_REPEATABLE_READ,* Connection.TRANSACTION_SERIALIZABLE.\",\"Transaction.commit\",\"提交事务\",\"Transaction.rollback\",\"回滚事务\",\"registerListener(TransactionListener transactionBehavior)\",\"设置当前事务的执行行为,包括提交前提交后等处理\",\"close\",\"关闭事务,如果事务未提交则自动调用回滚\"]},\"411\":{\"h\":\"如何开启\",\"t\":[\"springboot如果当前方法没有添加@Transactional注解,内部调用this.method()的非代理对象方法调用事务,哪怕this.method()有注解@Transactional也会让事务失效,有时候你可能需要这个方法那么可以在springboot中通过beginTransaction来开启事务,默认不支持和springboot的嵌套事务,不可以在@Transactional内开启easy-query的事务\",\" public void test(){ try(Transaction transaction = easyQuery.beginTransaction()){ TestUserMysql0 testUserMysql1 = new TestUserMysql0(); testUserMysql1.setId(\\\"123321123321xxx\\\"); testUserMysql1.setAge(1); testUserMysql1.setName(\\\"xxx\\\"); easyQuery.insertable(testUserMysql1).executeRows(); test1(); if(true){ throw new RuntimeException(\\\"错误了\\\"); } transaction.commit(); } } public void test1(){ TestUserMysql0 testUserMysql1 = new TestUserMysql0(); testUserMysql1.setId(\\\"123321123321xxx1\\\"); testUserMysql1.setAge(1); testUserMysql1.setName(\\\"xxx\\\"); easyQuery.insertable(testUserMysql1).executeRows(); } \"]},\"412\":{\"h\":\"修改\",\"t\":[\"EasyQuery提供了单条修改、批量修改和表达式修改数据的方法,可以返回数据库执行修改后的受影响行数。\",\"数据库建表脚本\",\"create table t_topic ( id varchar(32) not null comment '主键ID'primary key, stars int not null comment '点赞数', title varchar(50) null comment '标题', create_time datetime not null comment '创建时间' )comment '主题表'; \",\"java实体对象\",\"@Data @Table(\\\"t_topic\\\") @EntityFileProxy public class Topic implements ProxyEntityAvailable<Topic , TopicProxy> { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } \"]},\"413\":{\"h\":\"0.对象主键更新\"},\"414\":{\"h\":\"1.更新指定列\",\"t\":[\"支持多次set,多次set表示set拼接\"]},\"415\":{\"h\":\"2.表列自更新\"},\"416\":{\"h\":\"3.表列原子更新\"},\"417\":{\"h\":\"3.差异更新\",\"t\":[\"说明!!!\",\"差异更新可以自动监听被追踪的对象,并且生成差异更新语句,而不是无脑的对对象进行全字段更新,使用时需要开启当前追踪环境并且对查询出来的结果进行追踪后续即可监听到变更列实现差异化update语句\",\"正常情况下如果用户想使用差异更新,那么需要对查询采用asTracking来让返回结果被追踪,或者调用easyQuery.addTracking来让需要更新的对象被追踪\",\"如果希望默认是追踪的可以设置启动配置defaultTrack为true那么只需要开始上下文环境即可\",\"错误的用法!!!\",\"开启上下文追踪但是没有将查询结果对象附加到当前上下文,所以框架无法追踪对象变更无法有效生成差异更新\",\"当全局配置default-track未配置或者配置为false时以下不使用asTracking的查询结果不会被追踪所有视为错误用法,但是如果default-track设置为了true那么以下用法查询的数据会被追踪被视为正确的用法\",\"==> Preparing: UPDATE t_topic SET `stars` = ?,`title` = ?,`create_time` = ? WHERE `id` = ? ==> Parameters: 107(Integer),test12364(String),2023-03-27T22:05:23(LocalDateTime),7(String) <== Total: 1 \",\"正确的用法!!!\",\"要注意是否开启了追踪spring-boot下用@EasyQueryTrack注解即可开启\",\"是否将当前对象添加到了追踪上下文 查询添加asTracking或者 手动将查询出来的对象进行easyQuery.addTracking(Object entity)\",\"全局配置default-track设置为true那么查询不需要加asTracking,否则需要手动加asTracking才能对查询出来的结果进行追踪,如果不需要追踪可以使用asNoTracking\",\"==> Preparing: UPDATE t_topic SET `title` = ? WHERE `id` = ? ==> Parameters: test1239(String),7(String) <== Total: 1 \",\"清晰的看到差异更新只会更新需要更新的列\",\"追踪注意点及说明!!!\",\"原因是正确的写法在开启追踪后查询使用了.asTracking()那么会让所有的结果集全部被追踪(如果查询数据量有几万或者几十万那么性能肯定会有影响)，被追踪的返回结果对象必须要满足是数据库实体才可以，如果附加实体的时候发现当前上下文已经有被追踪的实体，那么直接放弃当前查询出来的结果，直接使用被追踪的数据作为当前对象，如果需要更新的列一个都没有，那么easy-query将不会生成update的sql语句并且返回0行，因为没有数据需要被修改\",\"选择性追踪 我们可能会有这样的需求这边需要查询出几百上万条数据，但是追踪更新只会涉及到1-2条，如果整个查询采用.asTracking()那么性能会相对低下，所以提供了额外的追踪方法\",\" TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try{ trackManager.begin(); Topic topic = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"7\\\")).firstNotNull(\\\"未找到对应的数据\\\"); easyQuery.addTracking(topic); String newTitle = \\\"test123\\\" + new Random().nextInt(100); topic.setTitle(newTitle); long l = easyQuery.updatable(topic).executeRows(); }finally { trackManager.release(); } \",\"==> Preparing: UPDATE t_topic SET `title` = ? WHERE `id` = ? ==> Parameters: test12398(String),7(String) <== Total: 1 \",\"通过对查询数据采用非追踪查询后续再修改数据前将其进行添加到追踪里面可以保证更新也是差异更新\",\"可能会有小伙伴认为这种做法太复杂了有没有建议的方法，这边easy-query已经给大家针对spring-boot的项目进行了aop的封装， 如果是springboot的小伙伴只需要在更新方法外部加上aop注解即可@EasyQueryTrack\",\"@GetMapping(\\\"/sayHello\\\") @EasyQueryTrack public Object sayHello() { TestUserMysql0 testUserMysql = easyQuery.queryable(TestUserMysql0.class) .asTracking()//如果不添加那么不会追踪数据 .firstOrNull(); return testUserMysql; } \"]},\"418\":{\"h\":\"4.指定列更新或条件\",\"t\":[\"在对象更新的情况下可以选择对应的列进行set或者进行where\",\" ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 15(String) <== Time Elapsed: 3(ms) <== Total: 1 ==> Preparing: UPDATE `t_topic` SET `create_time` = ? WHERE `stars` = ? ==> Parameters: 2023-06-08T10:48:05(LocalDateTime),115(Integer) <== Total: 1 \"]},\"419\":{\"h\":\"5.策略更新\",\"t\":[\"只更新null列到数据库\",\" Topic topic = easyQuery.queryable(Topic.class) .whereId(\\\"9\\\").firstOrNull(); long l1 = easyQuery.updatable(topic) .setSQLStrategy(UpdateStrategyEnum.ONLY_NULL_COLUMNS) .executeRows(); \",\"==> Preparing: UPDATE t_topic SET `title` = ? WHERE `id` = ? ==> Parameters: null(null),9(String) <== Total: 1 \",\"只更新非null列到数据库\",\" Topic topic = easyQuery.queryable(Topic.class) .whereId(\\\"10\\\").firstOrNull(); long l1 = easyQuery.updatable(topic) .setSQLStrategy(UpdateStrategyEnum.ONLY_NOT_NULL_COLUMNS) .executeRows(); \",\"==> Preparing: UPDATE t_topic SET `stars` = ?,`create_time` = ? WHERE `id` = ? ==> Parameters: 110(Integer),2023-03-30T23:12:06(LocalDateTime),10(String) <== Total: 1 \"]},\"420\":{\"h\":\"Map更新\",\"t\":[\"easy-query还支持Map结构的数据更新支持,其中map的key表示数据库对应的列名,并且不需要添加asTable来指定操作的数据库表名\",\"HashMap<String, Object> stringObjectHashMap = new HashMap<>(); stringObjectHashMap.put(\\\"id\\\",\\\"123\\\"); stringObjectHashMap.put(\\\"name\\\",\\\"123\\\"); stringObjectHashMap.put(\\\"name1\\\",null); easyQuery.mapUpdatable(stringObjectHashMap) .asTable(\\\"my_table\\\") .setSQLStrategy(SQLExecuteStrategyEnum.ALL_COLUMNS) .whereColumns(\\\"id\\\") .executeRows(); UPDATE `my_table` SET `name` = ?,`name1` = ? WHERE `id` = ? \"]},\"421\":{\"h\":\"6.更新自定义sql\"},\"422\":{\"h\":\"7.注意\",\"t\":[\"更新优先级顺序\",\"手动指定更新 > 手动指定策略 > 自动追踪 > 全局配置策略\",\"手动指定更新 eq.update(Topic.class).setColumns().where().executeRows()\",\"手动指定策略 eq.update(topics).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NULL_COLUMNS).executeRows()\",\"自动追踪 track\",\"全局配置策略 全局配置的更新策略\"]},\"423\":{\"h\":\"指引\",\"t\":[\"本章节我们提供easy-query的基础配置信息\",\"《目录》\",\"《包依赖关系》 描述easy-query架构依赖关系方便确认使用哪些包\",\"《配置java》 如何配置java\",\"《配置kotlin》 如何配置使用kotlin\",\"《配置参数选项》 针对默认配置参数进行说明\",\"《日志配置》 如何自定义配置日志接口信息\",\"《对象值转换》 如果您对枚举转成数据库对象或者json转成数据库对象的自定义列处理可以通过值对象转换来实现\"]},\"424\":{\"h\":\"注解说明\"},\"425\":{\"h\":\"Table\",\"t\":[\"描述对象对应数据库表名,vo对象不需要,非数据库对象不需要\",\"属性\",\"默认值\",\"描述\",\"value\",\"\\\"\\\"\",\"数据库表名为空表示 nameConversion.convert(class.getSimpleName) 可以再运行时修改\",\"schema\",\"\\\"\\\"\",\"数据库schema 可以在运行时修改,默认jdbc连接串的database\",\"ignoreProperties\",\"{}\",\"需要忽略的属性,一般用于继承父类需要忽略父类的属性\",\"shardingInitializer\",\"UnShardingInitializer.class\",\"分片初始化器,当且仅当对象是分片对象是用来初始化分片对象,也可以不添加后续手动添加\",\" @Data @Table(\\\"t_topic\\\") public class Topic { //..... } \"]},\"426\":{\"h\":\"Column\",\"t\":[\"描述属性对应的列名\",\"属性\",\"默认值\",\"描述\",\"value\",\"\\\"\\\"\",\"对应数据库表的列名,默认空为nameConversion.convert(属性名)\",\"primaryKey\",\"false\",\"表示是否是主键,如果是那么在update对象delete对象将会以这个字段为id\",\"increment(弃用)\",\"false\",\"是否是自增列,如果是true,那么在insertable().executeRows(true)后获取自增id后将会填充到里面\",\"generatedKey\",\"false\",\"是否是自增列,如果是true,那么在insertable().executeRows(true)后获取自增id后将会填充到里面\",\"large\",\"false\",\"用来描述当前列是否是大列,如果是可以通过默认配置或者运行时指定是否需要查询出该列\",\"conversion\",\"DefaultValueConverter.class\",\"值转换器,默认表示不转换,可以自定义枚举或者json等\",\"valueUpdateAtomicTrack\",\"DefaultValueUpdateAtomicTrack.class\",\"原子更新,默认表示无原子更新\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; @Column(\\\"title1\\\") private String title; private LocalDateTime createTime; } \"]},\"427\":{\"h\":\"ColumnIgnore\",\"t\":[\"添加这个注解的属性将会被直接忽略映射到数据库\"]},\"428\":{\"h\":\"InsertIgnore\",\"t\":[\"添加这个注解的属性将不会再插入时被赋值\"]},\"429\":{\"h\":\"UpdateIgnore\",\"t\":[\"添加这个注解的属性将不会再更新时被更新除非手动指定,比如创建时间、创建人、逻辑删除字段,large column,如果当前字段标记update ignore那么如果是非track更新那么将会直接忽略,如果属性updateSetInTrackDiff = true那么在track下更新那么还是有效的\",\"说明!!!\",\"large column添加UpdateIgnore是为了保证大字段被查询出来后如果进行entity全字段更新那么因为title没有被查询所以更新的时候就会把null更新掉(默认更新策略就是全字段),所以这边采用更新忽略,如果需要可以用表达式忽略 [当然您也可以选择更新策略为非null更新]\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; @Column(large=true) @UpdateIgnore //大字段字段不需要update时更新 防止全字段更新把原字段改为null private String title; @UpdateIgnore //创建时间字段不需要update时更新 private LocalDateTime createTime; @LogicDelete(strategy = LogicDeleteStrategyEnum.BOOLEAN) @UpdateIgnore //逻辑删除字段不需要update时更新 private Boolean deleted; } \"]},\"430\":{\"h\":\"LogicDelete\",\"t\":[\"逻辑删除,表示当前字段对应到数据库是逻辑删除表示,select将会过滤,update也会过滤,delete数据将会被改写为update\",\"属性\",\"默认值\",\"描述\",\"value\",\"BOOLEAN\",\"逻辑删除策略,默认true表示删除,false表示不删除\",\"strategyName\",\"\\\"\\\"\",\"当逻辑删除为自定义逻辑删除时\",\"BOOLEAN false表示未被删除\",\"DELETE_LONG_TIMESTAMP 0表示未被删除\",\"LOCAL_DATE_TIME null表示未被删除\",\"LOCAL_DATE null表示未被删除\",\"CUSTOM 用户自定义\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; @Column(large=true) @UpdateIgnore //大字段字段不需要update时更新 防止全字段更新把原字段改为null private String title; @UpdateIgnore //创建时间字段不需要update时更新 private LocalDateTime createTime; @LogicDelete(strategy = LogicDeleteStrategyEnum.BOOLEAN) @UpdateIgnore //逻辑删除字段不需要update时更新 private Boolean deleted; } \"]},\"431\":{\"h\":\"Version\",\"t\":[\"乐观锁也就是版本号\",\"属性\",\"默认值\",\"描述\",\"value\",\"-\",\"自行定义版本号策略\"]},\"432\":{\"h\":\"默认乐观锁版本号策略\",\"t\":[\"VersionIntStrategy\",\"VersionLongStrategy\",\"VersionTimestampStrategy (不推荐)\",\"VersionUUIDStrategy\"]},\"433\":{\"h\":\"VersionIntStrategy\",\"t\":[\"//这边使用的是Version=2也可以使用version+1但是其实是一样的因为where后面限定了version=1\",\"update table set version=2 where id=xxx and version=1 \"]},\"434\":{\"h\":\"VersionLongStrategy\",\"t\":[\"//这边使用的是Version=2也可以使用version+1但是其实是一样的因为where后面限定了version=1\",\"update table set version=2 where id=xxx and version=1 \"]},\"435\":{\"h\":\"VersionUUIDStrategy\",\"t\":[\"update table set version=xxxxxxasd where id=xxx and version=xxxxasdasd \"]},\"436\":{\"h\":\"Encryption\",\"t\":[\"列加密,支持自定义数据加密存储,并且支持在数据库层面进行like搜索处理,拥有非常高的性能,并不是利用数据库加解密函数\"]},\"437\":{\"h\":\"EncryptionStrategy\",\"t\":[\"用来处理如何加密解密数据策略,可以自定义实现\",\"默认实现有一个aes+base64的AbstractAesBase64EncryptionStrategy抽象类,用户需要返回16位的向量和秘钥\"]},\"438\":{\"h\":\"supportQueryLike\",\"t\":[\"用来表示是否需要支持like搜索,如果true那么就会在入参参数中对其进行分段加密\"]},\"439\":{\"h\":\"Navigate\",\"t\":[\"导航属性 用在数据库对象和返回结果上面用于处理一对一，一对多，多对一，多对多\"]},\"440\":{\"h\":\"ShardingDataSourceKey\",\"t\":[\"用来标识当前对象的数据库分库键是哪个\"]},\"441\":{\"h\":\"ShardingExtraDataSourceKey\",\"t\":[\"用来标识当前对象是数据库分库额外分库键是哪个\"]},\"442\":{\"h\":\"ShardingTableKey\",\"t\":[\"用来标识当前对象的数据库分表键是哪个\"]},\"443\":{\"h\":\"ShardingExtraTableKey\",\"t\":[\"用来标识当前对象的数据库分表额外键是哪个\"]},\"444\":{\"h\":\"EasyWhereCondition\",\"t\":[\"默认的动态条件对象查询条件,可以自行替换自定义注解来实现动态条件\"]},\"445\":{\"h\":\"EasyQueryTrack\",\"t\":[\"默认的追踪上下文注解也可以自定义,用于方法之上\"]},\"446\":{\"h\":\"EntityProxy\",\"t\":[\"生成代理对象,添加到实体和dto之上用来自动生成apt代理类,生成的文件存在于target目录下,clean后需要重新build\"]},\"447\":{\"h\":\"EntityFileProxy\",\"t\":[\"同EntityProxy但是生成的文件存在源码中\"]},\"448\":{\"h\":\"ProxyProperty\",\"t\":[\"用来防止生成的apt属性和系统自带的重复,可以再属性上定义别名\"]},\"449\":{\"h\":\"api模式❗️❗️❗️\"},\"450\":{\"h\":\"五种模式\",\"t\":[\"easy-query提供了五种模式的api查询\",\"对象模式\",\"属性模式\",\"代理模式\",\"lambda模式\",\"lambda表达式树模式（新）\",\"api\",\"开发方便性\",\"可维护性\",\"性能\",\"缺点\",\"对象\",\"非常好配合插件几乎无敌流畅\",\"易维护\",\"非常好\",\"配合插件能非常流畅,使用apt来生成除了build也很流畅\",\"属性\",\"一般主要没有智能提示\",\"难维护\",\"非常好\",\"难维护,重构无法找到属性对应的引用\",\"代理\",\"好,配合插件非常好,拥有完善的智能提示,书写非常方便\",\"易维护\",\"非常好\",\"重构无法通过对象的属性对应的引用,需要额外通过代理对象找引用(插件可以解决)\",\"lambda\",\"非常好无需插件配合就有完善的智能提示,书写一般Class::Method\",\"易维护\",\"较好\",\"解析表达式性能会稍稍低于属性模式和代理模式,需要将lambda转成属性\",\"lambda表达式树（新）\",\"使用纯lambda表达式，可与宇宙最强orm efcore匹敌\",\"易维护\",\"较好\",\"暂不支持分库分表注解\"]},\"451\":{\"h\":\"单表查询\"},\"452\":{\"h\":\"proxy模式\",\"t\":[\"因为proxy涉及到apt代理对象的自动生成和插件的整合,所以这边单独进行文档编写说来演示如何使用proxy编写易于表达维护的orm语法\"]},\"453\":{\"h\":\"依赖安装\",\"t\":[\"如果你只需要使用代理模式那么在可以自行安装依赖或者使用整合包比如springboot下的starter或者solon下的plugin,下面仅展示控制台程序下使用的依赖\",\"<properties> <easy-query.version>latest-version</easy-query.version> </properties> <!-- 提供了代理模式支持apt模式以非lambda形式的强类型sql语法 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 提供了apt自动生成代理对象 如果您使用entityQuery查询并且采用@EntityFileProxy那么这个依赖可以省略--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 这边以mysql为例 其实不需要添加下面的包也可以运行,指示默认的个别数据库行为语句没办法生成 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> \",\"说明!!!\",\"如果您的项目是多模块,请在对应模块需要生成代理对象的类处都添加sql-processor,对应的模块是指当前模块有@EntityProxy注解\"]},\"454\":{\"h\":\"lambda表达式树模式\",\"t\":[\"lambda表达式树模式无需进行额外的构建，同时也不需要来自apt生成的代理类的支持，只需要在正确配置后进行打包后即可食用\"]},\"455\":{\"h\":\"依赖安装\",\"t\":[\"在你需要的模块下引入sql-api-lambda依赖后写好配置即可（只需要普通的maven打包即可，不用构建，再说一遍，不用构建！）\",\"<project> <properties> <easy-query.version>latest-version</easy-query.version> </properties> <dependencies> <!-- 你的其他依赖包 --> <!-- sql-api-lambda依赖 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-lambda</artifactId> <version>${easy-query.version}</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>${你的版本}</version> <configuration> <!--必要参数，用于注册编译器插件--> <compilerArgs> <arg>-Xplugin:ExpressionTree</arg> </compilerArgs> <annotationProcessorPaths> <!--必要参数，用于注册编译器插件--> <path> <groupId>com.easy-query</groupId> <artifactId>sql-api-lambda</artifactId> <version>${project.version}</version> </path> <!-- 你的其他注解处理器 --> <!-- 假设你还引入了lombok--> <!-- <path>--> <!-- <groupId>org.projectlombok</groupId>--> <!-- <artifactId>lombok</artifactId>--> <!-- <version>1.18.24</version>--> <!-- </path>--> </annotationProcessorPaths> </configuration> </plugin> </plugins> </build> </project> \"]},\"456\":{\"h\":\"基础配置Java\",\"t\":[\"如果您是《Spring Boot》程序那么请直接点击跳转\",\"如果您是《Solon》程序那么请直接点击跳转\"]},\"457\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"458\":{\"h\":\"api接口选型\",\"t\":[\"目前easy-query支持四种api接口方式：字符串属性,lambda属性,代理属性,对象查询四种api接口调用,且可以互相调用\"]},\"459\":{\"h\":\"使用示例\",\"t\":[\"语义上面来讲代理模式最好,更符合sql语法\"]},\"460\":{\"h\":\"非spring-boot初始化\",\"t\":[\"说明!!!\",\"使用代理模式的话非springboot环境必须要安装sql-api-proxy和sql-processor,springboot环境starter已经包含了\",\" <properties> <easy-query.version>latest-version</easy-query.version> </properties> <!-- 提供了代理模式支持apt模式以非lambda形式的强类型sql语法 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 提供了apt自动生成代理对象 如果使用EntityFileProxy使用插件那么可以不引入这个包--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 提供了以java语法强类型,如果不引用也可以使用只是无法使用lambda表达式来表示属性只能用字符串 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api4j</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 纯lambda表达式模式 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-lambda</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 这边以mysql为例 其实不需要添加下面的包也可以运行,指示默认的个别数据库行为语句没办法生成 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> \",\"//非强类型api EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDataSource(dataSource) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); //强类型api EasyQuery easyQuery = new DefaultEasyQuery(easyQueryClient); //强类型api EasyProxyuery easyProxyQuery = new DefaultEasyProxyQuery(easyQueryClient); //使用新版本api对象查询 EasyEntityQuery easyEntityQuery = new DefaultEasyEntityQuery(easyQueryClient); //最新最热 EasyLambdaQueryClient easyLambdaQueryClient = new EasyLambdaQueryClient(easyQueryClient, MethodHandles.lookup()); \"]},\"461\":{\"h\":\"基础配置Kotlin\"},\"462\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"463\":{\"h\":\"spring-boot工程\",\"t\":[\"<properties> <easy-query.version>latest-version</easy-query.version> </properties> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-kt-springboot-starter</artifactId> <version>${easy-query.version}</version> </dependency> \"]},\"464\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"465\":{\"h\":\"spring-boot初始化\",\"t\":[\"<properties> <easy-query.version>latest-version</easy-query.version> </properties> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-kt-springboot-starter</artifactId> <version>${easy-query.version}</version> </dependency> \",\"#配置文件 easy-query: enable: true database: mysql name-conversion: underlined #如果执行物理删除delete语句将会报错 如果改为false,后续可以通过allowDeleteStatment来允许 delete-throw: true #打印sql显示(需要框架默认有日志以 log.info打印) print-sql: true #sqlNativeSegment输入和格式化无需处理单引号会自动处理为双单引号 keep-native-style: true \",\" //依赖注入 @Autowired private EasyQueryClient easyQueryClient;//通过字符串属性方式来实现查询 //推荐 @Autowired private EasyKtQuery easyKtQuery;//对EasyQueryClient的增强通过lambda方式实现查询(推荐) //推荐 @Autowired private EasyProxyQuery easyProxyQuery;//对EasyQueryClient的增强通过apt代理模式实现强类型(推荐) \"]},\"466\":{\"h\":\"非spring-boot初始化\",\"t\":[\"说明!!!\",\"使用代理模式的话非springboot环境必须要安装sql-api-proxy和sql-processor,springboot环境starter已经包含了\",\" <properties> <easy-query.version>latest-version</easy-query.version> </properties> <!-- 提供了代理模式支持apt模式以非lambda形式的强类型sql语法 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 提供了apt自动生成代理对象 如果使用EntityFileProxy使用插件那么可以不引入这个包--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 提供了以kotlin语法强类型,如果不引用也可以使用只是无法使用lambda表达式来表示属性只能用字符串 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api4kt</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 这边以mysql为例 其实不需要添加下面的包也可以运行,指示默认的个别数据库行为语句没办法生成 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> \",\"//非强类型api EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDataSource(dataSource) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); //强类型api EasyKtQuery easyKtQuery = new DefaultEasyKtQuery(easyQueryClient); //强类型api EasyProxyuery easyProxyQuery = new DefaultEasyProxyQuery(easyQueryClient); //使用新版本api对象查询 EntityQuery entityQuery = new DefaultEntityQuery(easyQueryClient); \"]},\"467\":{\"h\":\"配置参数选项(重要)❗️❗️❗️\",\"t\":[\"在使用前希望用户可以首先查看一遍可选择配置项,有利于了解如何进行优化\"]},\"468\":{\"h\":\"默认配置项\",\"t\":[\"配置名称\",\"默认值\",\"描述\",\"database\",\"DatabaseEnum.MYSQL\",\"默认使用mysql语法如果你的数据库默认支持mysql语法且easy-query暂未提供对应数据库的语法方言,那么可以直接用mysql的语法和方言\",\"deleteThrow\",\"true\",\"easy-query为了针对数据安全进行了默认的不允许物理删除,并不是不可以执行delete操作而是不可以在执行delete后生成delete语句,建议使用逻辑删除来规避。比如delete from t_user where uid=1 在使用逻辑删除后会变成update t_user set deleted=1 where uid=1使用逻辑删除框架默认实现该功能,用户还是一样使用deletable方法来调用执行\",\"nameConversion\",\"underlined\",\"目前有两个选择当然用户也可以自行实现接口NameConversion,目前可选default、underlined、upper_underlined、lower_camel_case、upper_camel_case,启用default表示默认的对象和数据库映射关系为属性名如属性名userAge那么对应数据库也是userAge列名,underlined表示采用下划线userAge将对应数据库user_age列,当然全局设置了后面也可以在@Column上进行手动指定对应的列名\",\"insertStrategy\",\"ONLY_NOT_NULL_COLUMNS\",\"insert命名默认采用非null列插入,如果一张表存在id和name那么当name为null列时生成的sql将不会指定name列比如insert into t_user (id) values(?)如果name列不是null,那么生成的sql将是insert into t_user (id,name) values(?,?)，因为默认为非null列插入所以执行的sql是单条单条执行,并不会合并批处理,相对性能会稍微低一点,当然也可以在执行时手动更改执行策略为SQLExecuteStrategyEnum.ALL_COLUMNS那么将会进行executeBatch\",\"updateStrategy\",\"ALL_COLUMNS\",\"默认update命令生成的语句将是对整个对象的所有列进行更新,不会判断是否为null,默认这种情况下会将多个对象进行合并执行batch而不是单条执行\",\"insertBatchThreshold\",\"1024\",\"如果insertable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率,链接字符串需要添加rewriteBatchedStatements=true(mysql),可以通过调用insert或者update的batch方法来手动使用或者禁用,比如大于等于3,不要问为什么不默认batch因为batch部分jdbc驱动或者数据库不会返回正确的受影响行数\",\"updateBatchThreshold\",\"1024\",\"如果updatable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率,链接字符串需要添加rewriteBatchedStatements=true(mysql),可以通过调用insert或者update的batch方法来手动使用或者禁用,比如大于等于3,不要问为什么不默认batch因为batch部分jdbc驱动或者数据库不会返回正确的受影响行数\",\"logClass\",\"-\",\"spring-boot下默认是com.easy.query.sql.starter.logging.Slf4jImpl实现如果你是非spring-boot可以自行实现或者使用控制台日志LogFactory.useStdOutLogging()\",\"queryLargeColumn\",\"true\",\"默认依然查询被标记为@Column下large的列，如果需要不查询建议在设置为large的前提下将对应列设置为@UpdateIgnore并且updateSetInTrackDiff = true防止在全列更新后导致未查询结果也被更新为null\",\"printSql\",\"true\",\"是否打印执行sql,这个和log不一样,因为考虑到有时候可能需要查看sql而不是将log输出,所以如歌设置为true,那么执行的sql和执行的结果将会以log.info()被记录到日志里面,如果您没有设置log那么一样看不到对应的执行sql\",\"defaultTrack\",\"false\",\"默认是否使用追踪模式,如果为true那么只需要开启当前上下文追踪,或者SpringBoot下使用@EasyQueryTrack那么默认就会调用asTracking()\",\"relationGroupSize\",\"512\",\"include的关联查询单次查询最多支持的关联id,如果超出将会分为两个语句执行,比如大于等于1\",\"noVersionError\",\"true\",\"当对象存在版本号并且是表达式更新的那么如果不添加版本号withVersion将会报错,必须要设置对应的版本号,如果不希望报错可以通过ignoreVersion来忽略\",\"keepNativeStyle\",\"false\",\"false:表示默认行为,sqlNativeSegment中如果纯在参数行为,那么默认单引号字符串模板需要改成双单引号,因为底层format采用的是MessageFormat.如果配置为true,那么默认将单引号改为双单引号,用户输入的表达式将会和执行的一致,当然可以在调用时调用keepStyle或者将单引号改为双单引号来处理\",\"warningColumnMiss\",\"true\",\"当jdbc的resultSet对应的coluName无法映射到entity属性上时将会以log.warning进行日志输出，true:表示警告.false:表示不警告\",\"sqlParameterPrint\",\"DEFAULT\",\"sql参数打印可选MYBATIS模式多一个逗号后的空格\",\"mapToBeanStrict\",\"true\",\"jdbc结果集映射到bean是否使用属性严格模式\",\"defaultSchema\",\"null\",\"当entity的schema为空时切defaultSchema不为空时采用defaultSchema\"]},\"469\":{\"h\":\"分表分库特有配置\",\"t\":[\"配置名称\",\"默认值\",\"描述\",\"connectionMode\",\"SYSTEM_AUTO\",\"默认框架将链接分片的链接模式改为自动,框架会自动处理,无需用户指定,当然链接模式用户也可以自行指定,1.MEMORY_STRICTLY内存严格模式,就是说如果存在跨表或者跨库查询那么本次查询将会严格控制内存,尽可能的一次性查询所有的表,那么针对单个库如果查询所有表每个表都需要一个connection所以可能会单次查询耗尽链接池的链接甚至不够,所以一般会和下面的配置参数maxShardingQueryLimit配合作为限制,2.CONNECTION_STRICTLY连接数限制,就是还是以maxShardingQueryLimit作为最大链接数尽可能少的使用连接数去执行跨分片的查询归并,主要是影响分片后的聚合模式,是采用流失聚合还是内存聚合，一般用户无需设置。\",\"maxShardingQueryLimit❗️\",\"5\",\"假设单次查询涉及到跨13张表查询,因为查询未带分片键,所以本次查询会将13张同数据库下的表进行分组以没5张为一组分成3组最后一组为3张表,当前查询会一次性获取5个链接这5个链接会通过defaultDataSourceMergePoolSize参数进行限制，然后再本次查询完成后归还到DataSource连接池中,这个参数不可以设置的比DataSource的pool-size大,否则可能会导致程序假死,因为连接池为20如果单次查询需要21那么会一直等待直到超时也获取不到21个\",\"defaultDataSourceMergePoolSize❗️\",\"0\",\"如果你的所有表中有分片表那么一定要设置这个值,且必须设置小于等于DataSource的连接池大小,假设连接池大小为100,那么这个值可以设置60,70，80甚至100,但是不可以比连接池大,且必须大于等于maxShardingQueryLimit,如果连接池100当前值设置为10,那么意味着所有线程只有10个连接池内的链接可以被用来进行分片聚合查询(每个数据源10个)\",\"multiConnWaitTimeoutMillis\",\"5000\",\"默认针对分片链接获取大于1的操作进行defaultDataSourceMergePoolSize总数的扣减,比如上述100个连接池分片设置为10个,那么如果有3个线程都需要5个分片聚合那么肯定有一个线程无法获取到那么就会等到默认5秒,如果超过这个时间还是无法获取前两个还未查询完成,那么将会抛错\",\"warningBusy\",\"true\",\"在分片聚合的时候因为需要单次获取多个链接,还是上述案例假设第三个线程获取到了5个链接但是获取的时间超过了multiConnWaitTimeoutMillis时间的80%那么框架将会打印获取链接是繁忙的,您可能需要重新调整defaultDataSourceMergePoolSize这个值和调整连接池大小\",\"maxShardingRouteCount\",\"128\",\"当出现条件分片大于多少时报错默认128,就是比如select where update where delete where路由到过多的表就会报错,涉及entity操作比如update对象，insert，delete对象不会判断这个条件\",\"defaultDataSourceName\",\"ds0\",\"默认分库数据源名称,如果你不需要分库那么可以不用去设置该值\",\"shardingExecuteTimeoutMillis\",\"60000\",\"分片聚合超时时间默认60秒单位(ms),包括增删改查\",\"throwIfRouteNotMatch\",\"true\",\"当查询没有匹配到路由是否选择报错,默认是如果不选择保存则返回默认值,譬如按时间分片,开始分片表为2020年1月那么如果你查下2019年或者查询未来的时间那么框架内部还没有这个时间所以本次查询获取到的路由为空,您可以选择不报错返回默认值,比如toList那么就是空集合,count就是0等等\",\"executorMaximumPoolSize\",\"0\",\"分片聚合最大线程数,默认为0将使用Executors.newCachedThreadPool线程池,如果需要设置或者自定义请设置为最小maxShardingQueryLimit*分片数目,设置值后将使用有界队列线程池\",\"executorCorePoolSize\",\"Math.min(processors, 4)\",\"仅executorMaximumPoolSize>0时生效,其中processors是Runtime.getRuntime().availableProcessors()\",\"executorQueueSize\",\"1024\",\"仅executorMaximumPoolSize>0时生效，线程池有界队列大小\",\"startTimeJob\",\"false\",\"当使用系统默认的按时间分片时设置这个配置为true那么框架会在内存中添加对应的系统表,原理就是开启一个定时任务线程去执行\",\"shardingFetchSize\",\"1000\",\"在分片下默认拉取大小设置\"]},\"470\":{\"h\":\"spring-boot\",\"t\":[\"通过配置文件可以直接配置上述选项\",\" easy-query: enable: true name-conversion: underlined database: mysql #如果执行物理删除delete语句将会报错 如果改为false,后续可以通过allowDeleteStatment来允许 delete-throw: true #打印sql显示(需要框架默认有日志以 log.info打印) print-sql: true #sqlNativeSegment输入和格式化无需处理单引号会自动处理为双单引号 keep-native-style: true ...... \"]},\"471\":{\"h\":\"非spring-boot\",\"t\":[\" EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setDeleteThrowError(true);//设置不允许物理删除 op.setPrintSql(true);//设置以log.info模式打印执行sql信息 ......//此处用于配置系统默认配置选项 }) .replaceService(NameConversion.class, UnderlinedNameConversion.class)//替换框架内部的属性和列转换模式改为大写转下划线 .useDatabaseConfigure(new MySQLDatabaseConfiguration())//设置方言语法等为mysql的 .build(); \"]},\"472\":{\"h\":\"国产框架Solon配置\"},\"473\":{\"h\":\"国产框架Solon配置\",\"t\":[\"easy-query在^1.2.6正式支持Solon适配国产框架的orm部分。\"]},\"474\":{\"h\":\"什么是Solon\",\"t\":[\"SolonJava 新的生态型应用开发框架：更快、更小、更简单。\",\"启动快 5 ～ 10 倍；qps 高 2～ 3 倍；运行时内存节省 1/3 ~ 1/2；打包可以缩到 1/2 ~ 1/10；同时支持 jdk8, jdk11, jdk17, jdk20, graalvm native image。\"]},\"475\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"476\":{\"h\":\"快速开始\"},\"477\":{\"h\":\"新建java maven项目\"},\"478\":{\"h\":\"添加项目依赖\",\"t\":[\"<dependency> <groupId>com.easy-query</groupId> <artifactId>sql-solon-plugin</artifactId> <version>latest-version</version> <scope>compile</scope> </dependency> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.31</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.18</version> </dependency> <dependency> <groupId>org.noear</groupId> <artifactId>solon-web</artifactId> <version>2.4.0</version> </dependency> \"]},\"479\":{\"h\":\"新建DataSource注入\",\"t\":[\"@Configuration public class WebConfiguration { @Bean(name = \\\"db1\\\",typed=true) public DataSource db1DataSource(@Inject(\\\"${db1}\\\") HikariDataSource dataSource){ return dataSource; } } \"]},\"480\":{\"h\":\"新增控制器\",\"t\":[\" @Controller @Mapping(\\\"/test\\\") public class TestController { @Mapping(value = \\\"/hello\\\",method = MethodType.GET) public String hello(){ return \\\"Hello World\\\"; } } \"]},\"481\":{\"h\":\"Solon启动\",\"t\":[\"# 添加配置文件 db1: jdbcUrl: jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root driver-class-name: com.mysql.cj.jdbc.Driver # 记录器级别的配置示例 solon.logging.logger: \\\"root\\\": #默认记录器配置 level: TRACE \\\"com.zaxxer.hikari\\\": level: WARN \",\"public class Main { public static void main(String[] args) { Solon.start(Main.class,args,(app)->{ app.cfg().loadAdd(\\\"application.yml\\\"); }); } } //输入url http://localhost:8080/test/hello //返回Hello World \"]},\"482\":{\"h\":\"easy-query查询\",\"t\":[\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } @Controller @Mapping(\\\"/test\\\") public class TestController { /** * 注意必须是配置多数据源的其中一个 */ @Db(\\\"db1\\\") private EasyQuery easyQuery; @Mapping(value = \\\"/hello\\\",method = MethodType.GET) public String hello(){ return \\\"Hello World\\\"; } @Mapping(value = \\\"/queryTopic\\\",method = MethodType.GET) public Object queryTopic(){ return easyQuery.queryable(Topic.class) .where(o->o.ge(Topic::getStars,2)) .toList(); } } ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `stars` >= ? ==> Parameters: 2(Integer) <== Time Elapsed: 17(ms) <== Total: 101 \"]},\"483\":{\"h\":\"Solon配置easy-query个性化\",\"t\":[\"# 添加配置文件 db1: jdbcUrl: jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root driver-class-name: com.mysql.cj.jdbc.Driver easy-query: # 配置自定义日志 # log-class: ... db1: # 支持mysql pgsql h2 mssql dameng mssql_row_number kingbase_es等其余数据库在适配中 database: mysql # 支持underlined default lower_camel_case upper_camel_case upper_underlined name-conversion: underlined # 物理删除时抛出异常 不包括手写sql的情况 delete-throw: true # 插入列策略 all_columns only_not_null_columns only_null_columns insert-strategy: only_not_null_columns # 更新列策略 all_columns only_not_null_columns only_null_columns update-strategy: all_columns # 大字段依旧查询 如果不查询建议设置为updateIgnore防止update allcolumn将其改为null query-large-column: true # 更新删除无版本号报错 no-version-error: true # 分片链接模式 system_auto memory_strictly connection_strictly # connection-mode: ... # max-sharding-query-limit: ... # executor-maximum-pool-size: ... # executor-core-pool-size: ... # throw-if-route-not-match: ... # sharding-execute-timeout-millis: ... # max-sharding-route-count: ... # executor-queue-size: ... # default-data-source-name: ... # default-data-source-merge-pool-size: ... # multi-conn-wait-timeout-millis: ... # warning-busy: ... # insert-batch-threshold: ... # update-batch-threshold: ... # print-sql: ... # start-time-job: ... # default-track: ... # relation-group-size: ... # keep-native-style: ... # warning-column-miss: ... # sharding-fetchS-size: ... # 记录器级别的配置示例 配置了print-sql没有配置对应的log也不会打印 solon.logging.logger: \\\"root\\\": #默认记录器配置 level: TRACE \\\"com.zaxxer.hikari\\\": level: WARN \"]},\"484\":{\"h\":\"额外配置\"},\"485\":{\"h\":\"逻辑删除\",\"t\":[\" public class MyLogicDelStrategy extends AbstractLogicDeleteStrategy { /** * 允许datetime类型的属性 */ private final Set<Class<?>> allowTypes=new HashSet<>(Arrays.asList(LocalDateTime.class)); @Override protected SQLExpression1<WherePredicate<Object>> getPredicateFilterExpression(LogicDeleteBuilder builder, String propertyName) { return o->o.isNull(propertyName); } @Override protected SQLExpression1<ColumnSetter<Object>> getDeletedSQLExpression(LogicDeleteBuilder builder, String propertyName) { // LocalDateTime now = LocalDateTime.now(); // return o->o.set(propertyName,now); //上面的是错误用法,将now值获取后那么这个now就是个固定值而不是动态值 return o->o.set(propertyName, LocalDateTime.now()); } @Override public String getStrategy() { return \\\"MyLogicDelStrategy\\\"; } @Override public Set<Class<?>> allowedPropertyTypes() { return allowTypes; } } @Configuration public class DemoConfiguration { @Bean(name = \\\"db1\\\",typed=true) public DataSource db1DataSource(@Inject(\\\"${db1}\\\") HikariDataSource dataSource){ return dataSource; } @Bean public void db1QueryConfiguration(@Db(\\\"db1\\\") QueryConfiguration configuration){ configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); // configuration.applyEncryptionStrategy(...); // configuration.applyInterceptor(...); // configuration.applyShardingInitializer(...); // configuration.applyValueConverter(...); // configuration.applyValueUpdateAtomicTrack(...); } } \"]},\"486\":{\"h\":\"Solon所有配置\",\"t\":[\"针对单个数据源进行配置,如果需要影响到所有数据源看下面的影响到所有数据源\",\"@Configuration public class DemoConfiguration { @Bean(name = \\\"db1\\\",typed=true) public DataSource db1DataSource(@Inject(\\\"${db1}\\\") HikariDataSource dataSource){ return dataSource; } // /** // * 配置额外插件,比如自定义逻辑删除,加密策略,拦截器,分片初始化器,值转换,原子追踪更新 // * @param configuration // */ // @Bean // public void db1QueryConfiguration(@Db(\\\"db1\\\") QueryConfiguration configuration){ // configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); // configuration.applyEncryptionStrategy(...); // configuration.applyInterceptor(...); // configuration.applyShardingInitializer(...); // configuration.applyValueConverter(...); // configuration.applyValueUpdateAtomicTrack(...); // } // /** // * 添加分表或者分库的路由,分库数据源 // * @param runtimeContext // */ // @Bean // public void db1QueryRuntimeContext(@Db(\\\"db1\\\") QueryRuntimeContext runtimeContext){ // TableRouteManager tableRouteManager = runtimeContext.getTableRouteManager(); // DataSourceRouteManager dataSourceRouteManager = runtimeContext.getDataSourceRouteManager(); // tableRouteManager.addRoute(...); // dataSourceRouteManager.addRoute(...); // // DataSourceManager dataSourceManager = runtimeContext.getDataSourceManager(); // // dataSourceManager.addDataSource(key, dataSource, poolSize); // } } \"]},\"487\":{\"h\":\"配置影响到所有的数据源\",\"t\":[\"public class App { public static void main(String[] args) { Solon.start(App.class,args,app->{ app.onEvent(EasyQueryBuilderConfiguration.class,e->{ //如果需要区分数据源可以通过e.getName()来区分 e.replaceServiceFactory(QueryConfiguration.class, s->{ QueryConfiguration queryConfiguration = new QueryConfiguration(s.getService(EasyQueryOption.class) ,s.getService(Dialect.class) ,s.getService(NameConversion.class) ,s.getService(EasyTimeJobManager.class) ); // queryConfiguration.applyInterceptor(); // queryConfiguration.applyLogicDeleteStrategy(); // queryConfiguration.applyValueConverter(); return queryConfiguration; }); }); }); } } \"]},\"488\":{\"h\":\"SpringBoot配置\"},\"489\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"490\":{\"h\":\"spring-boot工程\",\"t\":[\"<properties> <easy-query.version>latest-version</easy-query.version> </properties> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-springboot-starter</artifactId> <version>${easy-query.version}</version> </dependency> \",\"#配置文件 easy-query: #是否启动默认true enable: true #支持的数据库 database: mysql #对象属性和数据库列名的转换器 name-conversion: underlined #当执行物理删除是否报错,true表示报错,false表示不报错,默认true,如果配置为true,可以通过allowDeleteStament来实现允许 delete-throw: true #是否打印sql 默认true 需要配置log信息才可以 默认实现sl4jimpl print-sql: true #sqlNativeSegment输入和格式化无需处理单引号会自动处理为双单引号 keep-native-style: true \",\"//依赖注入 @Autowired private EasyEntityQuery easyEntityQuery;//(强力推荐🔥🔥🔥) @Autowired private EasyQueryClient easyQueryClient;//通过字符串属性方式来实现查询 @Autowired private EasyQuery easyQuery;//对EasyQueryClient的增强通过lambda方式实现查询(推荐) @Autowired private EasyProxyQuery easyProxyQuery;//建议转EasyEntityQuery \"]},\"491\":{\"h\":\"springboot多数据源\",\"t\":[\"因为easy-query默认仅支持单数据源如果需要支持多数据源可以通过手动构建EasyQuery的Bean实例\",\" @Bean(\\\"ds2\\\") public EasyQuery easyQuery(DataSource dataSource) { EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .replaceService(DataSourceUnitFactory.class, SpringDataSourceUnitFactory.class)//springboot下必须用来支持事务 .replaceService(ConnectionManager.class, SpringConnectionManager.class)//springboot下必须用来支持事务 .replaceService(NameConversion.class, new UnderlinedNameConversion()) .optionConfigure(builder -> { builder.setDeleteThrowError(easyQueryProperties.getDeleteThrow()); builder.setInsertStrategy(easyQueryProperties.getInsertStrategy()); builder.setUpdateStrategy(easyQueryProperties.getUpdateStrategy()); builder.setMaxShardingQueryLimit(easyQueryProperties.getMaxShardingQueryLimit()); builder.setExecutorMaximumPoolSize(easyQueryProperties.getExecutorMaximumPoolSize()); builder.setExecutorCorePoolSize(easyQueryProperties.getExecutorCorePoolSize()); builder.setThrowIfRouteNotMatch(easyQueryProperties.isThrowIfRouteNotMatch()); builder.setShardingExecuteTimeoutMillis(easyQueryProperties.getShardingExecuteTimeoutMillis()); builder.setQueryLargeColumn(easyQueryProperties.isQueryLargeColumn()); builder.setMaxShardingRouteCount(easyQueryProperties.getMaxShardingRouteCount()); builder.setExecutorQueueSize(easyQueryProperties.getExecutorQueueSize()); builder.setDefaultDataSourceName(easyQueryProperties.getDefaultDataSourceName()); builder.setDefaultDataSourceMergePoolSize(easyQueryProperties.getDefaultDataSourceMergePoolSize()); builder.setMultiConnWaitTimeoutMillis(easyQueryProperties.getMultiConnWaitTimeoutMillis()); builder.setWarningBusy(easyQueryProperties.isWarningBusy()); builder.setInsertBatchThreshold(easyQueryProperties.getInsertBatchThreshold()); builder.setUpdateBatchThreshold(easyQueryProperties.getUpdateBatchThreshold()); builder.setPrintSql(easyQueryProperties.isPrintSql()); builder.setStartTimeJob(easyQueryProperties.isStartTimeJob()); builder.setDefaultTrack(easyQueryProperties.isDefaultTrack()); builder.setRelationGroupSize(easyQueryProperties.getRelationGroupSize()); builder.setNoVersionError(easyQueryProperties.isNoVersionError()); }) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); // QueryConfiguration queryConfiguration = easyQueryClient.getRuntimeContext().getQueryConfiguration(); // configuration.applyEncryptionStrategy(new DefaultAesEasyEncryptionStrategy()); // configuration.applyEncryptionStrategy(new Base64EncryptionStrategy()); // configuration.applyEncryptionStrategy(new MyEncryptionStrategy()); // configuration.applyEncryptionStrategy(new JavaEncryptionStrategy()); // configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); // configuration.applyInterceptor(new MyEntityInterceptor()); // configuration.applyInterceptor(new Topic1Interceptor()); // configuration.applyInterceptor(new MyTenantInterceptor()); // // configuration.applyShardingInitializer(new FixShardingInitializer()); // configuration.applyShardingInitializer(new DataSourceAndTableShardingInitializer()); // configuration.applyShardingInitializer(new TopicShardingShardingInitializer()); // configuration.applyShardingInitializer(new TopicShardingTimeShardingInitializer()); // configuration.applyShardingInitializer(new DataSourceShardingInitializer()); // configuration.applyValueConverter(new EnumConverter()); // configuration.applyValueConverter(new JsonConverter()); // configuration.applyValueUpdateAtomicTrack(new IntegerNotValueUpdateAtomicTrack()); // configuration.applyColumnValueSQLConverter(new MySQLAesEncryptColumnValueSQLConverter()); // configuration.applyGeneratedKeySQLColumnGenerator(new MyDatabaseIncrementSQLColumnGenerator()); return new EasyQuery(easyQueryClient); } \"]},\"492\":{\"h\":\"SpringBoot 启动报错\",\"t\":[\"注意\",\"因为默认添加了track的aop如果启动报错那么就添加一下aop\",\"java.lang.IllegalStateException: Unable to load cache item at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:79) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:419) ~[spring-core-5.3.29.jar:5.3.29] \",\"主要原因是\",\"缺少aop依赖\",\"aop组件版本不对\",\"解决办法添加对应的依赖\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> \"]},\"493\":{\"h\":\"多数据源\",\"t\":[\"默认仅支持单个数据源的处理\",\"用户也可以自行构建其他数据库或者其他数据源的easy-query\",\"注意点及说明!!!\",\"注意自行构建的数据源如果DataSource不是被spring接管的Bean那么事务将不会生效\",\" @Configuration public class MyConfiguration { @Bean(\\\"myeq\\\") public EasyQuery easyQuery1(DataSource dataSource){//数据源是你要的即可 EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .replaceService(DataSourceUnitFactory.class, SpringDataSourceUnitFactory.class)//支持spring事务 .replaceService(ConnectionManager.class, SpringConnectionManager.class)//支持spring事务 .replaceService(NameConversion.class, UnderlinedNameConversion.class) .optionConfigure(builder -> { //配置和springboot的配置一样 builder.setDeleteThrowError(easyQueryProperties.getDeleteThrow()); builder.setInsertStrategy(easyQueryProperties.getInsertStrategy()); builder.setUpdateStrategy(easyQueryProperties.getUpdateStrategy()); builder.setMaxShardingQueryLimit(easyQueryProperties.getMaxShardingQueryLimit()); builder.setExecutorMaximumPoolSize(easyQueryProperties.getExecutorMaximumPoolSize()); builder.setExecutorCorePoolSize(easyQueryProperties.getExecutorCorePoolSize()); builder.setThrowIfRouteNotMatch(easyQueryProperties.isThrowIfRouteNotMatch()); builder.setShardingExecuteTimeoutMillis(easyQueryProperties.getShardingExecuteTimeoutMillis()); builder.setQueryLargeColumn(easyQueryProperties.isQueryLargeColumn()); builder.setMaxShardingRouteCount(easyQueryProperties.getMaxShardingRouteCount()); builder.setExecutorQueueSize(easyQueryProperties.getExecutorQueueSize()); builder.setDefaultDataSourceName(easyQueryProperties.getDefaultDataSourceName()); builder.setDefaultDataSourceMergePoolSize(easyQueryProperties.getDefaultDataSourceMergePoolSize()); builder.setMultiConnWaitTimeoutMillis(easyQueryProperties.getMultiConnWaitTimeoutMillis()); builder.setWarningBusy(easyQueryProperties.isWarningBusy()); builder.setInsertBatchThreshold(easyQueryProperties.getInsertBatchThreshold()); builder.setUpdateBatchThreshold(easyQueryProperties.getUpdateBatchThreshold()); builder.setPrintSql(easyQueryProperties.isPrintSql()); builder.setStartTimeJob(easyQueryProperties.isStartTimeJob()); builder.setDefaultTrack(easyQueryProperties.isDefaultTrack()); builder.setRelationGroupSize(easyQueryProperties.getRelationGroupSize()); builder.setNoVersionError(easyQueryProperties.isNoVersionError()); }) .useDatabaseConfigure(new OracleDatabaseConfiguration()) .build(); return new DefaultEasyQuery(easyQueryClient); } } \",\"说明!!!\",\"创建完拦截器后需要配置到QueryConfiguration,如果你是springboot并且是默认easy-query只需要添加@Component如果是solon那么可以查看配置或配置到所有数据源 如果您是自行构建的easy-query需要自行添加拦截器\",\"QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyEncryptionStrategy(new DefaultAesEasyEncryptionStrategy()); configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); configuration.applyInterceptor(new MyEntityInterceptor()); configuration.applyShardingInitializer(new DataSourceAndTableShardingInitializer()); configuration.applyValueConverter(new EnumConverter()); configuration.applyColumnValueSQLConverter(new MySQLAesEncryptColumnValueSQLConverter()); configuration.applyGeneratedKeySQLColumnGenerator(new MyDatabaseIncrementSQLColumnGenerator()); TableRouteManager tableRouteManager = runtimeContext.getTableRouteManager(); tableRouteManager.addRoute(new TopicShardingTableRoute()); DataSourceRouteManager dataSourceRouteManager = runtimeContext.getDataSourceRouteManager(); dataSourceRouteManager.addRoute(new TopicShardingDataSourceTimeDataSourceRoute()); \",\"Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'easyQueryInitializeOption' defined in class path resource [com/easy/query/sql/starter/EasyQueryStarterAutoConfiguration.class]: Unsatisfied dependency expressed through method 'easyQueryInitializeOption' parameter 1; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'java.util.Map<java.lang.String, com.easy.query.core.basic.extension.version.VersionStrategy>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {} \",\"可能是springboot版本太低导致没有的依赖不是以空map返回而是报错\",\"建议重写bean\",\"// @Bean // @ConditionalOnMissingBean // public EasyQueryInitializeOption easyQueryInitializeOption(Map<String, Interceptor> interceptorMap, // Map<String, VersionStrategy> versionStrategyMap, // Map<String, LogicDeleteStrategy> logicDeleteStrategyMap, // Map<String, ShardingInitializer> shardingInitializerMap, // Map<String, EncryptionStrategy> encryptionStrategyMap, // Map<String, ValueConverter<?, ?>> valueConverterMap, // Map<String, TableRoute<?>> tableRouteMap, // Map<String, DataSourceRoute<?>> dataSourceRouteMap, // Map<String, ValueUpdateAtomicTrack<?>> valueUpdateAtomicTrackMap, // Map<String, JdbcTypeHandler> jdbcTypeHandlerMap, // Map<String, ColumnValueSQLConverter> columnValueSQLConverterMap, // Map<String, IncrementSQLColumnGenerator> incrementSQLColumnGeneratorMap // ) { // return new EasyQueryInitializeOption(interceptorMap, // versionStrategyMap, // logicDeleteStrategyMap, // shardingInitializerMap, // encryptionStrategyMap, // valueConverterMap, // tableRouteMap, // dataSourceRouteMap, // valueUpdateAtomicTrackMap, // jdbcTypeHandlerMap, // columnValueSQLConverterMap, // incrementSQLColumnGeneratorMap); // } @Bean @Primary public EasyQueryInitializeOption easyQueryInitializeOption(Map<String, Interceptor> interceptorMap ) { return new EasyQueryInitializeOption(interceptorMap, versionStrategyMap, Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap()); } \",\"有些用户喜欢拥有非常强的强迫症,这边给出如何自行处理实现类starter,无依赖引入easy-query\"]},\"494\":{\"h\":\"创建springboot应用\",\"t\":[\"下载地址 https://start.spring.io/\"]},\"495\":{\"h\":\"添加依赖\"},\"496\":{\"h\":\"属性模式\",\"t\":[\" <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-core</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 自己选择对应的驱动--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.31</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> \"]},\"497\":{\"h\":\"代理模式\",\"t\":[\" <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-core</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 代理模式--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 自己选择对应的驱动--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 用来生成代理对象--> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.31</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies> \"]},\"498\":{\"h\":\"添加配置\",\"t\":[\"首先我们如果需要支持springboot的事务需要再easy-query的springboot-strater处拷贝三个源码文件\",\" public class SpringConnectionManager extends DefaultConnectionManager { public SpringConnectionManager(EasyQueryDataSource easyDataSource, EasyConnectionFactory easyConnectionFactory, EasyDataSourceConnectionFactory easyDataSourceConnectionFactory) { super(easyDataSource, easyConnectionFactory, easyDataSourceConnectionFactory); } @Override public boolean currentThreadInTransaction() { return TransactionSynchronizationManager.isActualTransactionActive() || isOpenTransaction(); } @Override public void closeEasyConnection(EasyConnection easyConnection) { if(easyConnection==null){ return; } //当前没开事务,但是easy query手动开启了 if (!TransactionSynchronizationManager.isActualTransactionActive()) { if (super.isOpenTransaction()) { return; } } else { if (super.isOpenTransaction()) { throw new EasyQueryException(\\\"repeat transaction can't closed connection\\\"); } } DataSourceWrapper dataSourceUnit = easyDataSource.getDataSourceNotNull(easyConnection.getDataSourceName(), ConnectionStrategyEnum.ShareConnection); DataSourceUtils.releaseConnection(easyConnection.getConnection(), dataSourceUnit.getDataSourceUnit().getDataSource()); } } public class SpringDataSourceUnit extends DefaultDataSourceUnit { public SpringDataSourceUnit(String dataSourceName, DataSource dataSource, int mergePoolSize, boolean warningBusy) { super(dataSourceName,dataSource,mergePoolSize,warningBusy); } @Override protected Connection getConnection() throws SQLException { return DataSourceUtils.getConnection(dataSource); } } public class SpringDataSourceUnitFactory implements DataSourceUnitFactory { private final EasyQueryOption easyQueryOption; public SpringDataSourceUnitFactory(EasyQueryOption easyQueryOption){ this.easyQueryOption = easyQueryOption; } @Override public DataSourceUnit createDataSourceUnit(String dataSourceName, DataSource dataSource, int mergePoolSize) { return new SpringDataSourceUnit(dataSourceName,dataSource,mergePoolSize,easyQueryOption.isWarningBusy()); } } \"]},\"499\":{\"h\":\"注入bean\",\"t\":[\" @Configuration public class EasyQueryConfiguration { @Bean(\\\"oracleDataSource\\\") public DataSource oracleDataSource(){ return DataSourceBuilder.create() .url(\\\"jdbc:h2:mem:testdb\\\") .driverClassName(\\\"org.h2.Driver\\\") .username(\\\"sa\\\") .password(\\\"password\\\") .build(); } @Bean(\\\"orcale\\\")//使用的时候通过注入指定名称即可 public EasyQueryClient easyQueryClient(@Qualifier(\\\"oracleDataSource\\\") DataSource dataSource){ EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .replaceService(DataSourceUnitFactory.class, SpringDataSourceUnitFactory.class) .replaceService(NameConversion.class, UnderlinedNameConversion.class) .replaceService(ConnectionManager.class, SpringConnectionManager.class) .optionConfigure(builder -> { // builder.setDeleteThrowError(easyQueryProperties.getDeleteThrow()); // builder.setInsertStrategy(easyQueryProperties.getInsertStrategy()); // builder.setUpdateStrategy(easyQueryProperties.getUpdateStrategy()); // builder.setMaxShardingQueryLimit(easyQueryProperties.getMaxShardingQueryLimit()); // builder.setExecutorMaximumPoolSize(easyQueryProperties.getExecutorMaximumPoolSize()); // builder.setExecutorCorePoolSize(easyQueryProperties.getExecutorCorePoolSize()); // builder.setThrowIfRouteNotMatch(easyQueryProperties.isThrowIfRouteNotMatch()); // builder.setShardingExecuteTimeoutMillis(easyQueryProperties.getShardingExecuteTimeoutMillis()); // builder.setQueryLargeColumn(easyQueryProperties.isQueryLargeColumn()); // builder.setMaxShardingRouteCount(easyQueryProperties.getMaxShardingRouteCount()); // builder.setExecutorQueueSize(easyQueryProperties.getExecutorQueueSize()); // builder.setDefaultDataSourceName(easyQueryProperties.getDefaultDataSourceName()); // builder.setDefaultDataSourceMergePoolSize(easyQueryProperties.getDefaultDataSourceMergePoolSize()); // builder.setMultiConnWaitTimeoutMillis(easyQueryProperties.getMultiConnWaitTimeoutMillis()); // builder.setWarningBusy(easyQueryProperties.isWarningBusy()); // builder.setInsertBatchThreshold(easyQueryProperties.getInsertBatchThreshold()); // builder.setUpdateBatchThreshold(easyQueryProperties.getUpdateBatchThreshold()); // builder.setPrintSql(easyQueryProperties.isPrintSql()); // builder.setStartTimeJob(easyQueryProperties.isStartTimeJob()); // builder.setDefaultTrack(easyQueryProperties.isDefaultTrack()); // builder.setRelationGroupSize(easyQueryProperties.getRelationGroupSize()); // builder.setKeepNativeStyle(easyQueryProperties.isKeepNativeStyle()); // builder.setNoVersionError(easyQueryProperties.isNoVersionError()); // builder.setReverseOffsetThreshold(easyQueryProperties.getReverseOffsetThreshold()); }) .useDatabaseConfigure(new OracleDatabaseConfiguration()) .build(); return easyQueryClient; } @Bean public EasyEntityQuery easyEntityQuery(EasyQueryClient easyQueryClient){ return new DefaultEasyEntityQuery(easyQueryClient); } } \"]},\"500\":{\"h\":\"添加配置文件\",\"t\":[\"server: port: 8080 spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/easy-sharding-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root \"]},\"501\":{\"h\":\"添加控制器\",\"t\":[\" @RestController @RequestMapping(\\\"/my\\\") public class MyController { @Autowired private EasyEntityQuery easyEntityQuery; @GetMapping(\\\"/test\\\") public Object test() { return \\\"hello world\\\"; } } \"]},\"502\":{\"h\":\"包依赖关系\"},\"503\":{\"h\":\"easy-trans扩展\",\"t\":[\"easy-query提供了很多丰富的功能,但是有些功能可以通过其他框架来实现,本章节就提供了一个解决方案,通过easy-query+easy-trans来实现数据字典的自动获取\",\"demo地址\",\"注意\",\"easy-trans.is-enable-global=true,默认toPageResult是final的结果,如果需要支持可以通过自行实现EasyPageResultProvider或者Pager<TEntity,TPageResult>接口,包括其他返回结果需要注意返回的对象不可以是final之类的\",\"注意点及说明!!!\",\"如果集成后不行请注意是否开启全局翻译 配置文件easy-trans.is-enable-global=true\"]},\"504\":{\"h\":\"新建一个springboot项目\",\"t\":[\"添加easy-trans依赖\",\"<dependency> <groupId>com.fhs-opensource</groupId> <artifactId>easy-trans-spring-boot-starter</artifactId> <version>2.2.7</version> </dependency> <dependency> <groupId>com.fhs-opensource</groupId> <artifactId>easy-trans-service</artifactId> <version>2.2.7</version> </dependency> \",\"所有的依赖是\",\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!--druid依赖--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.15</version> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.31</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-springboot-starter</artifactId> <version>${easy-query.version}</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.18</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>com.fhs-opensource</groupId> <artifactId>easy-trans-spring-boot-starter</artifactId> <version>2.2.7</version> </dependency> <dependency> <groupId>com.fhs-opensource</groupId> <artifactId>easy-trans-service</artifactId> <version>2.2.7</version> </dependency> </dependencies> \"]},\"505\":{\"h\":\"配置bean\",\"t\":[\"因为easy-trans的限制(静态方法)所以这边需要添加一个特殊的注解来标识主键\",\"@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.FIELD}) public @interface Id4Trans { } \",\"添加驱动\",\"@Slf4j public class EasyQueryTransDiver implements SimpleTransService.SimpleTransDiver { private EasyQueryClient easyQueryClient; public EasyQueryTransDiver(EasyQueryClient easyQueryClient){ this.easyQueryClient = easyQueryClient; } @Override public List<? extends VO> findByIds(List<? extends Serializable> ids, Class<? extends VO> targetClass, String uniqueField, Set<String> targetFields) { return easyQueryClient.queryable(targetClass) .whereByIds(ids) .select(o->{ Selector selector = o.getSelector(); for (String targetField : targetFields) { selector.column(o.getTable(),targetField); } }) .toList(); } @Override public VO findById(Serializable id, Class<? extends VO> targetClass, String uniqueField, Set<String> targetFields) { VO vo = easyQueryClient.queryable(targetClass) .whereById(id) .select(o -> { Selector selector = o.getSelector(); for (String targetField : targetFields) { selector.column(o.getTable(), targetField); } }) .firstOrNull(); if(vo==null){ log.error(targetClass + \\\" 根据id:\\\" + id + \\\"没有查询到数据\\\"); } return vo; } @Override public List<? extends VO> findByIds(List<? extends Serializable> ids, Class<? extends VO> targetClass, String uniqueField) { return easyQueryClient.queryable(targetClass) .whereByIds(ids) .toList(); } @Override public VO findById(Serializable id, Class<? extends VO> targetClass, String uniqueField) { VO vo = easyQueryClient.queryable(targetClass) .whereById(id).firstOrNull(); if(vo==null){ log.error(targetClass + \\\" 根据id:\\\" + id + \\\"没有查询到数据\\\"); } return vo; } } \",\"添加配置文件\",\"@Slf4j @Configuration public class EasyTransEasyQueryConfig implements InitializingBean { @Autowired private EasyQueryClient easyQueryClient; @Bean public EasyQueryTransDiver easyQueryTransDiver() { EasyQueryTransDiver result = new EasyQueryTransDiver(easyQueryClient); return result; } @Override public void afterPropertiesSet() throws Exception { ReflectUtils.ID_ANNO.add(Id4Trans.class); } } \",\"到这边位我们已经适配好了\"]},\"506\":{\"h\":\"数据库脚本\",\"t\":[\"CREATE DATABASE IF NOT EXISTS easy_trans_demo CHARACTER SET 'utf8mb4'; USE easy_trans_demo; create table help_code ( code varchar(32) not null comment 'code'primary key, type int not null comment '类型', name varchar(50) not null comment '中文值' )comment '字典表'; insert into help_code values('1',1,'男'); insert into help_code values('2',1,'女'); insert into help_code values('3',2,'管理员'); insert into help_code values('4',2,'普通用户'); create table sys_user ( id varchar(32) not null comment 'id'primary key, name varchar(50) not null comment '姓名', sex varchar(50) not null comment '性别', type varchar(50) not null comment '用户类型' )comment '用户表'; insert into sys_user values('1','小明','2','3'); insert into sys_user values('2','小刚','1','4'); \"]},\"507\":{\"h\":\"创建对象\",\"t\":[\" @Table(\\\"help_code\\\") @Data public class HelpCode { @Id4Trans @Column(primaryKey = true) private String code; private Integer type; private String name; } @Table(\\\"sys_user\\\") @Data public class SysUser implements TransPojo { @Id4Trans @Column(primaryKey = true) private String id; private String name; @Trans(type = TransType.DICTIONARY,key = \\\"1\\\",ref = \\\"sexName\\\")//1就是help_code的type=1 private String sex; @ColumnIgnore private String sexName; @Trans(type = TransType.DICTIONARY,key = \\\"2\\\",ref = \\\"typeName\\\")//2就是help_code的type=2 private String type; @ColumnIgnore private String typeName; } \"]},\"508\":{\"h\":\"添加翻译缓存服务\",\"t\":[\"@Component public class EasyTransRunner implements ApplicationRunner { @Autowired //注入字典翻译服务 private DictionaryTransService dictionaryTransService; @Autowired private EasyQuery easyQuery; @Override public void run(ApplicationArguments args) throws Exception { List<HelpCode> list = easyQuery.queryable(HelpCode.class) .toList(); Map<Integer, List<HelpCode>> collect = list.stream().collect(groupingBy(o -> o.getType())); for (Map.Entry<Integer, List<HelpCode>> integerListEntry : collect.entrySet()) { HashMap<String, String> transMap = new HashMap<>(); for (HelpCode helpCode : integerListEntry.getValue()) { transMap.put(helpCode.getCode(),helpCode.getName()); } dictionaryTransService.refreshCache(integerListEntry.getKey().toString(),transMap); } } } \"]},\"509\":{\"h\":\"测试添加控制器\",\"t\":[\" @RestController @RequestMapping(\\\"/my\\\") @RequiredArgsConstructor(onConstructor_ = @Autowired) public class MyController { private final EasyEntityQuery easyEntityQuery; @GetMapping(\\\"/query\\\") public Object query() { List<SysUser> list = easyEntityQuery.queryable(SysUser.class) .toList(); return list; } } \",\"输出\",\"[{\\\"id\\\":\\\"1\\\",\\\"name\\\":\\\"小明\\\",\\\"sex\\\":\\\"2\\\",\\\"sexName\\\":\\\"女\\\",\\\"type\\\":\\\"3\\\",\\\"typeName\\\":\\\"管理员\\\"},{\\\"id\\\":\\\"2\\\",\\\"name\\\":\\\"小刚\\\",\\\"sex\\\":\\\"1\\\",\\\"sexName\\\":\\\"男\\\",\\\"type\\\":\\\"4\\\",\\\"typeName\\\":\\\"普通用户\\\"}] \"]},\"510\":{\"h\":\"自定义异常\",\"t\":[\"框架对于firstNotNull和singleNotNull抛出了系统自定义级别的异常,用户可以通过重写AssertExceptionFactory来实现抛出的异常是用户自定义的\",\" public interface AssertExceptionFactory { //当调用firstNotNull结果为null时抛出的异常 @NotNull <T> RuntimeException createFirstNotNullException(Query<T> query, String msg, String code); //当调用singleNotNull结果为null时抛出的异常 @NotNull <T> RuntimeException createSingleNotNullException(Query<T> query,String msg, String code); //当调用singleNotNull或者singleOrNull结果为大于1个时抛出的异常 @NotNull <T> RuntimeException createSingleMoreElementException(Query<T> query); } \"]},\"511\":{\"h\":\"kotlin代理模式\",\"t\":[\"easy-query的代理模式通过apt生成动态代码执行数据库操作,并且框架提供了自动apt编译插件修改entity数据库对象无需build也会自动修改对应的apt文件,进首页qq群后或者后续等待作者发布....\"]},\"512\":{\"h\":\"新建项目\"},\"513\":{\"h\":\"添加依赖\",\"t\":[\" <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>1.4.24</version> </dependency> \"]},\"514\":{\"h\":\"添加kapt设置\",\"t\":[\"将下面的代码插入到plugins下的plugin下的executions\",\"<execution> <id>kapt</id> <goals> <goal>kapt</goal> </goals> <configuration> <annotationProcessorPaths> <path> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>1.4.24</version> </path> </annotationProcessorPaths> </configuration> </execution> \"]},\"515\":{\"h\":\"新增数据库对象\",\"t\":[\"data class\",\" @Table(\\\"t_topic\\\") @EntityProxy class Topic{ @Column(primaryKey = true) var id:String?=null; var stars:Int?=null; var stars2:Int?=null; var stars3:Int?=null; var stars4:Int?=null; var stars6:Int?=null; } \"]},\"516\":{\"h\":\"编译\",\"t\":[\" 生成代码 \"]},\"517\":{\"h\":\"运行\",\"t\":[\"import com.easy.query.api.proxy.client.DefaultEasyProxyQuery import com.easy.query.core.bootstrapper.EasyQueryBootstrapper import com.easy.query.core.logging.LogFactory import com.easy.query.mysql.config.MySQLDatabaseConfiguration import com.zaxxer.hikari.HikariDataSource import entity.proxy.TopicProxy fun main(args: Array<String>) { println(\\\"Hello World!\\\") var hikariDataSource = HikariDataSource() hikariDataSource.jdbcUrl = \\\"jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\"; hikariDataSource.username = \\\"root\\\"; hikariDataSource.password = \\\"root\\\"; hikariDataSource.driverClassName = \\\"com.mysql.cj.jdbc.Driver\\\"; hikariDataSource.maximumPoolSize = 20; LogFactory.useStdOutLogging(); var easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(hikariDataSource) .useDatabaseConfigure(MySQLDatabaseConfiguration()) .build() //如果实现了ProxyEntityAvailable(可用插件生成则可以使用EasyEntityQuery,本质和EasyProxyQuery一样) var easyProxyQuery = DefaultEasyProxyQuery(easyQueryClient) var topic = TopicProxy.createTable() var toList2 = easyProxyQuery.queryable(topic) .where { it.eq(topic.id(), \\\"1\\\") .eq(topic.stars3(), 1) } .toList() } Connected to the target VM, address: '127.0.0.1:58734', transport: 'socket' Hello World! Program arguments: SLF4J: Failed to load class \\\"org.slf4j.impl.StaticLoggerBinder\\\". SLF4J: Defaulting to no-operation (NOP) logger implementation SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. Logging initialized using 'class com.easy.query.core.logging.stdout.StdOutImpl' adapter. ==> Preparing: SELECT `id`,`stars`,`stars2`,`stars3`,`stars4`,`stars6` FROM `t_topic` WHERE `id` = ? AND `stars3` = ? ==> Parameters: 1(String),1(Integer) SELECT `id`,`stars`,`stars2`,`stars3`,`stars4`,`stars6` FROM `t_topic` WHERE `id` = ? AND `stars3` = ? java.sql.SQLSyntaxErrorException: Unknown column 'stars2' in 'field list' \",\"运行只要有对应的sql打印就说明已经ok\",\"注意点及说明!!!\",\"如果无法提示有对应的TopicProxy那么请刷新下maven\"]},\"518\":{\"h\":\"错误\",\"t\":[\"注意点及说明!!!\",\"如果出现错误类文件具有错误的版本 55.0, 应为 52.0请修改项目jdk和pom的一致\"]},\"519\":{\"h\":\"完整的pom\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <artifactId>untitled2</artifactId> <groupId>com.xjm</groupId> <version>1.0-SNAPSHOT</version> <packaging>jar</packaging> <name>consoleApp</name> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <kotlin.code.style>official</kotlin.code.style> <kotlin.compiler.jvmTarget>11</kotlin.compiler.jvmTarget> </properties> <repositories> <repository> <id>mavenCentral</id> <url>https://repo1.maven.org/maven2/</url> </repository> </repositories> <build> <sourceDirectory>src/main/kotlin</sourceDirectory> <testSourceDirectory>src/test/kotlin</testSourceDirectory> <plugins> <plugin> <groupId>org.jetbrains.kotlin</groupId> <artifactId>kotlin-maven-plugin</artifactId> <version>1.8.0</version> <executions> <execution> <id>kapt</id> <goals> <goal>kapt</goal> </goals> <configuration> <annotationProcessorPaths> <path> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>1.4.24</version> </path> </annotationProcessorPaths> </configuration> </execution> <execution> <id>compile</id> <phase>compile</phase> <goals> <goal>compile</goal> </goals> </execution> <execution> <id>test-compile</id> <phase>test-compile</phase> <goals> <goal>test-compile</goal> </goals> </execution> </executions> </plugin> <plugin> <artifactId>maven-surefire-plugin</artifactId> <version>2.22.2</version> </plugin> <plugin> <artifactId>maven-failsafe-plugin</artifactId> <version>2.22.2</version> </plugin> <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>exec-maven-plugin</artifactId> <version>1.6.0</version> <configuration> <mainClass>MainKt</mainClass> </configuration> </plugin> </plugins> </build> <dependencies> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>org.jetbrains.kotlin</groupId> <artifactId>kotlin-test-junit5</artifactId> <version>1.8.0</version> <scope>test</scope> </dependency> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.8.2</version> <scope>test</scope> </dependency> <dependency> <groupId>org.jetbrains.kotlin</groupId> <artifactId>kotlin-stdlib-jdk8</artifactId> <version>1.8.0</version> </dependency> </dependencies> </project> \"]},\"520\":{\"h\":\"日志配置\",\"t\":[\"easy-query默认适配slf4j日志接口,如果您有自定义日志接口可以通过自行实现\"]},\"521\":{\"h\":\"springboot\",\"t\":[\" //新建一个日志打印的实现继承com.easy.query.core.logging.Log public class MySysOutLogImpl implements Log { /** * 必须要实现一个构造函数,传入单个字符串string参数 * @param clazz */ public MySysOutLogImpl(String clazz){ } @Override public boolean isDebugEnabled() { return true; } @Override public boolean isTraceEnabled() { return true; } @Override public void error(String s, Throwable e) { System.out.println(\\\"----开始----\\\"); System.err.println(s); e.printStackTrace(System.err); System.out.println(\\\"----结束----\\\"); } @Override public void error(String s) { System.out.println(\\\"----开始----\\\"); System.err.println(s); System.out.println(\\\"----结束----\\\"); } @Override public void debug(String s) { System.out.println(\\\"----开始----\\\"); System.out.println(s); System.out.println(\\\"----结束----\\\"); } @Override public void trace(String s) { System.out.println(\\\"----开始----\\\"); System.out.println(s); System.out.println(\\\"----结束----\\\"); } @Override public void warn(String s) { System.out.println(\\\"----开始----\\\"); System.out.println(s); System.out.println(\\\"----结束----\\\"); } } \",\" ----开始---- ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`id` = ? LIMIT 1 ----结束---- ----开始---- ==> Parameters: true(Boolean),123(String) ----结束---- ----开始---- <== Time Elapsed: 12(ms) ----结束---- ----开始---- <== Total: 0 ----结束---- \"]},\"522\":{\"h\":\"多数据源处理\",\"t\":[\"本章节针对springboot进行如何多数据源,动态多数据源进行封装处理。框架内部本身不想对该处理进行过多的封装尽可能保证需要多数据源的用户自行处理而不是提供默认的这边提供一个思路\",\"添加默认多数据源接口\",\"本章节源码\",\" /** * create time 2024/3/13 15:21 * 如果当前没有指定数据源则返回默认数据源 * * @author xuejiaming */ public interface EasyMultiEntityQuery extends EasyEntityQuery { /** * 设置当前上下文线程使用哪个数据源 * @param dataSource */ void setCurrent(String dataSource); /** * 返回一个存在的数据源没有就报错 * @param dataSource * @return */ EasyEntityQuery getByDataSource(String dataSource); /** * 执行指定数据源的方法并且返回结果 * @param dataSource * @param dataSourceFunction * @return * @param <TResult> */ <TResult> TResult executeScope(String dataSource, Function<EasyEntityQuery,TResult> dataSourceFunction); /** * 清楚当前上下文数据源 */ void clear(); } \",\"实现接口\",\" public class DefaultEasyMultiEntityQuery implements EasyMultiEntityQuery { private final Map<String, EasyEntityQuery> multi = new ConcurrentHashMap<>(); private final ThreadLocal<String> currentDataSource = ThreadLocal.withInitial(() -> null); private final EasyEntityQuery easyEntityQuery; public DefaultEasyMultiEntityQuery(EasyEntityQuery easyEntityQuery,Map<String,EasyEntityQuery> extraEasyEntityQueryMap) { this.easyEntityQuery = easyEntityQuery; multi.putAll(extraEasyEntityQueryMap); } @Override public void setCurrent(String dataSource) { currentDataSource.set(dataSource); } @Override public EasyEntityQuery getByDataSource(String dataSource) { EasyEntityQuery entityQuery = multi.get(dataSource); Objects.requireNonNull(entityQuery, \\\"entityQuery is null\\\"); return entityQuery; } @Override public <TResult> TResult executeScope(String dataSource, Function<EasyEntityQuery, TResult> dataSourceFunction) { EasyEntityQuery entityQuery = multi.get(dataSource); Objects.requireNonNull(entityQuery, \\\"entityQuery is null\\\"); return dataSourceFunction.apply(entityQuery); } @Override public void clear() { currentDataSource.remove(); } private EasyEntityQuery tryGetEntityQuery(){ String ds = currentDataSource.get(); if(ds==null){ return easyEntityQuery; } EasyEntityQuery entityQuery = multi.get(ds); Objects.requireNonNull(entityQuery, \\\"entityQuery is null\\\"); return entityQuery; } @Override public EasyQueryClient getEasyQueryClient() { return tryGetEntityQuery().getEasyQueryClient(); } @Override public QueryRuntimeContext getRuntimeContext() { return tryGetEntityQuery().getRuntimeContext(); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> EntityQueryable<TProxy, T> queryable(Class<T> entityClass) { return tryGetEntityQuery().queryable(entityClass); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> EntityQueryable<TProxy, T> queryable(String sql, Class<T> entityClass) { return tryGetEntityQuery().queryable(entityClass); } @Override public Transaction beginTransaction(Integer isolationLevel) { return tryGetEntityQuery().beginTransaction(isolationLevel); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> EntityInsertable<TProxy, T> insertable(T entity) { return tryGetEntityQuery().insertable(entity); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> EntityInsertable<TProxy, T> insertable(Collection<T> entities) { return tryGetEntityQuery().insertable(entities); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> ExpressionUpdatable<TProxy, T> updatable(Class<T> entityClass) { return tryGetEntityQuery().updatable(entityClass); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> EntityUpdatable<TProxy, T> updatable(T entity) { return tryGetEntityQuery().updatable(entity); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> EntityUpdatable<TProxy, T> updatable(Collection<T> entities) { return tryGetEntityQuery().updatable(entities); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> EntityDeletable<TProxy, T> deletable(T entity) { return tryGetEntityQuery().deletable(entity); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> EntityDeletable<TProxy, T> deletable(Collection<T> entities) { return tryGetEntityQuery().deletable(entities); } @Override public <TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T, TProxy>> ExpressionDeletable<TProxy, T> deletable(Class<T> entityClass) { return tryGetEntityQuery().deletable(entityClass); } @Override public boolean addTracking(Object entity) { return tryGetEntityQuery().addTracking(entity); } @Override public boolean removeTracking(Object entity) { return tryGetEntityQuery().removeTracking(entity); } @Override public EntityState getTrackEntityStateNotNull(Object entity) { return tryGetEntityQuery().getTrackEntityStateNotNull(entity); } } \"]},\"523\":{\"h\":\"创建配置\",\"t\":[\" @Configuration public class MultiDataSourceConfiguration { @Bean public EasyMultiEntityQuery easyMultiEntityQuery(EasyEntityQuery easyEntityQuery, @Qualifier(\\\"ds2\\\") EasyEntityQuery easyEntityQuery2){ HashMap<String, EasyEntityQuery> extra = new HashMap<>(); extra.put(\\\"ds2\\\",easyEntityQuery2); return new DefaultEasyMultiEntityQuery(easyEntityQuery,extra); } /** * 不是spring接管的datasource那么事务将不会生效 * @return */ @Bean(\\\"xxx\\\") public DataSource dataSource2(){ return DataSourceBuilder.create().driverClassName(\\\"\\\") .url(\\\"\\\") .username(\\\"\\\") .password(\\\"\\\").build(); } @Bean(\\\"ds2\\\") public EasyEntityQuery easyQuery(/*注入您自己的多数据源datasource*/@Qualifier(\\\"xxx\\\")DataSource dataSource) { EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .replaceService(DataSourceUnitFactory.class, SpringDataSourceUnitFactory.class)//springboot下必须用来支持事务 .replaceService(ConnectionManager.class, SpringConnectionManager.class)//springboot下必须用来支持事务 .replaceService(NameConversion.class, new UnderlinedNameConversion()) .optionConfigure(builder -> { builder.setPrintSql(true); builder.setKeepNativeStyle(true); }) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); // QueryConfiguration queryConfiguration = easyQueryClient.getRuntimeContext().getQueryConfiguration(); // configuration.applyEncryptionStrategy(new DefaultAesEasyEncryptionStrategy()); // configuration.applyEncryptionStrategy(new Base64EncryptionStrategy()); // configuration.applyEncryptionStrategy(new MyEncryptionStrategy()); // configuration.applyEncryptionStrategy(new JavaEncryptionStrategy()); // configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); // configuration.applyInterceptor(new MyEntityInterceptor()); // configuration.applyInterceptor(new Topic1Interceptor()); // configuration.applyInterceptor(new MyTenantInterceptor()); // // configuration.applyShardingInitializer(new FixShardingInitializer()); // configuration.applyShardingInitializer(new DataSourceAndTableShardingInitializer()); // configuration.applyShardingInitializer(new TopicShardingShardingInitializer()); // configuration.applyShardingInitializer(new TopicShardingTimeShardingInitializer()); // configuration.applyShardingInitializer(new DataSourceShardingInitializer()); // configuration.applyValueConverter(new EnumConverter()); // configuration.applyValueConverter(new JsonConverter()); // configuration.applyValueUpdateAtomicTrack(new IntegerNotValueUpdateAtomicTrack()); // configuration.applyColumnValueSQLConverter(new MySQLAesEncryptColumnValueSQLConverter()); // configuration.applyGeneratedKeySQLColumnGenerator(new MyDatabaseIncrementSQLColumnGenerator()); return new DefaultEasyEntityQuery(easyQueryClient); } } \"]},\"524\":{\"h\":\"注解动态处理\",\"t\":[\" @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited public @interface DynamicDataSource { /** * 动态数据源 * @return */ String value() default \\\"\\\"; } \"]},\"525\":{\"h\":\"aop配置\",\"t\":[\" @Slf4j @Aspect @Configuration public class DynamicDataSourceAspectConfiguration { @Autowired private EasyMultiEntityQuery easyMultiEntityQuery; @Around(\\\"execution(public * *(..)) && @annotation(com.test.mutlidatasource.aop.DynamicDataSource)\\\") public Object interceptorTenantScope(ProceedingJoinPoint pjp) throws Throwable { MethodSignature signature = (MethodSignature) pjp.getSignature(); Method method = signature.getMethod(); DynamicDataSource dynamicDataSource = method.getAnnotation(DynamicDataSource.class); //通过反射拿到注解对象 try { //如果需要动态设置可以通过springEL来实现 if(EasyStringUtil.isNotBlank(dynamicDataSource.value())){ easyMultiEntityQuery.setCurrent(dynamicDataSource.value()); } return pjp.proceed(); }finally { easyMultiEntityQuery.clear(); } } } \"]},\"526\":{\"h\":\"使用\",\"t\":[\"//我的请求体 @Data public class MyRequest { private String ds; } @RestController @RequestMapping(\\\"/my\\\") @RequiredArgsConstructor(onConstructor_ = @Autowired) public class MyController { private final EasyMultiEntityQuery easyMultiEntityQuery; @RequestMapping(\\\"/test\\\") @DynamicDataSource(\\\"ds2\\\") public Object test(){ return easyMultiEntityQuery.queryable(Topic.class).toList(); } @RequestMapping(\\\"/test1\\\") @DynamicDataSource public Object test1(){ return easyMultiEntityQuery.queryable(Topic.class).toList(); } // @RequestMapping(\\\"/test2\\\") // @DynamicDataSource(\\\"#request.ds\\\")//需要springEL自行实现 // public Object test2(@RequestBody MyRequest request){ // return easyMultiEntityQuery.queryable(Topic.class).toList(); // } @RequestMapping(\\\"/test3\\\") public Object test3(){ List<Topic> ds2 = easyMultiEntityQuery.executeScope(\\\"ds2\\\", eq -> { return eq.queryable(Topic.class).toList(); }); return ds2; } @RequestMapping(\\\"/test4\\\") public Object test4(){ try { easyMultiEntityQuery.setCurrent(\\\"ds2\\\"); return easyMultiEntityQuery.queryable(Topic.class).toList(); }finally { easyMultiEntityQuery.clear(); } } } \"]},\"527\":{\"h\":\"解放生产力🔥🔥🔥\",\"t\":[\"为了解放生产力我推荐您使用EasyEntityQuery的apt模式无论是原生apt还是file proxy都可以让你的代码编写有一个质的飞跃和提升,或许我们做的还不够好但是您的使用体验和反馈会让整个生态繁荣\"]},\"528\":{\"h\":\"解决痛点一\",\"t\":[\"我们都知道easy-query无论在哪个模式下都需要编写lambda,lambda的编写是复杂的是最麻烦的,便捷轻量的easy-query配合x->{}或者((a,b,c)->)的变量名命名是痛苦的 所以我们在easy-query:1.9.34^版本并且插件0.0.25^后推出了变量名功能\"]},\"529\":{\"h\":\"EasyAlias\",\"t\":[\"为插件赋能添加别名用于lambda\",\"添加别名用于lambda的参数入参名称\",\"直接使用where、select等支持代码直接生成lambda的箭头符合如果带有_code_block并且会生成对应的{}大括号一对\",\"join处理\",\"注意点及说明!!!\",\"如果您没有配置@EasyAlias那么可以在Tools->QuickTipSetting设置\"]},\"530\":{\"h\":\"QuickTipSetting\",\"t\":[\"为没有添加@EasyAlias的对象添加lambda入参别名\",\"填写说明\",\"o,t1:t2,t1:t2:t3先按逗号分割,然后按冒号分割,分割结果按逗号分组,如果每组数量和lambda数量一致则使用这边的参数,如果配置了@EasyAlias对应的那个还是用@EasyAlias 比如查询单表没有配置@EasyAlias但是全局配置了o,t1:t2,t1:t2:t3,那么入参一个就会生成queryable(Topic.class).where(o->) 如果参数不匹配则会按照每个对象的对象名称获取大写字母组成缩写,但是如果大写字母就一个则采用类名小写模式,比如queryable(Topic.class).where(t->)\",\" /** * 将对象类型转成lambda入参短名称 * @param str Topic || SysUser * @param index 在第几个参数位 * @param total 总共有几个参数 * @return */ public static String lambdaShortName(String str,int index,int total) { char[] chars = str.toCharArray(); if(chars.length==0){ return \\\"t\\\"; } for (int i = 0; i < chars.length; i++) { if (Character.isUpperCase(chars[i])) { String parameter = String.valueOf(chars[i]).toLowerCase(); if(total>1){ return parameter+(index+1); } return parameter; } } return str.toLowerCase(); } \"]},\"531\":{\"h\":\"智能提示\",\"t\":[\"select,where,where_code_block,orderBy,orderBy_code_block,groupBy,having,having_code_block,on,on_code_block 前面几个都是直接.使用即可\",\"只有join比较特殊,join需要编写完.leftJoin(Toplic.class, on )在第一个join表写完后逗号后面空格填写on那么就会有对应的只能提示来填充lambda参数\"]},\"532\":{\"h\":\"默认错误消息\",\"t\":[\"EasyAssertMessage注解实现默认错误消息\",\"@EasyAssertMessage(\\\"未找到主题信息\\\") @EasyAlias(\\\"topic\\\") public class Topic{ //...... } //默认错误 // select 1 from topic where id=? easyEntityQuery.queryable(Topic.class).whereById(\\\"id\\\").required()//抛错 未找到主题信息 // select id,name,age.... from topic where id=? easyEntityQuery.queryable(Topic.class).findNotNull(\\\"id\\\")//抛错 未找到主题信息 // select id,name,age.... from topic where id=? limit 1 easyEntityQuery.queryable(Topic.class).whereById(\\\"id\\\").firstNotNull()//抛错 未找到主题信息 // select id,name,age.... from topic where id=? 附加断言仅一条 easyEntityQuery.queryable(Topic.class).whereById(\\\"id\\\").singleNotNull()//抛错 未找到主题信息 //手动错误 // select 1 from topic where id=? easyEntityQuery.queryable(Topic.class).whereById(\\\"id\\\").required(\\\"自定义错误\\\")//抛错 自定义错误 // select id,name,age.... from topic where id=? easyEntityQuery.queryable(Topic.class).findNotNull(\\\"id\\\",\\\"自定义错误\\\")//抛错 自定义错误 // select id,name,age.... from topic where id=? limit 1 easyEntityQuery.queryable(Topic.class).whereById(\\\"id\\\").firstNotNull(\\\"自定义错误\\\")//抛错 自定义错误 // select id,name,age.... from topic where id=? 附加断言仅一条 easyEntityQuery.queryable(Topic.class).whereById(\\\"id\\\").singleNotNull(\\\"自定义错误\\\")//抛错 自定义错误 \"]},\"533\":{\"h\":\"看不懂大于小于记不住\",\"t\":[\"easy-query插件贴心的为大家提供了大于等于小于等于不等于等一系列快捷方式\",\"支持EasyQueryClient、EasyQuery、EasyKtQuery、EasyEntityQuery\",\"注意点及说明!!!\",\"如果您不是EasyEntityQuery那么写法就是where(o->o>)直接在参数后面进行大于,大于等于,小于,小于等于.....\"]},\"534\":{\"h\":\"插件助手\",\"t\":[\"工欲善其事必先利其器,一款好用的助手插件可以帮助我们节省大量的时间去编写处理重复性劳动\"]},\"535\":{\"h\":\"选择合适的版本\",\"t\":[\"插件版本\",\"easy-query版本\",\"更新内容\",\"0.0.16\",\"1.8.4+\",\"entityQuery支持函数区分,SQLColumn生成分成更细的column\",\"0.0.15\",\"1.8.2+\",\"支持带属性SQLColumn\",\"支持的idea版本\",\"IntelliJ IDEA Ultimate 2023.3.2Compatible\",\"IntelliJ IDEA Ultimate 2023.2.5Compatible\",\"IntelliJ IDEA Ultimate 2023.1.5Compatible\",\"IntelliJ IDEA Ultimate 2022.3.3Compatible\",\"IntelliJ IDEA Ultimate 2022.2.5Compatible\",\"不支持以下版本如果需要支持可以加qq群联系群主\",\"IntelliJ IDEA Ultimate 2022.1.4Compatible\",\"IntelliJ IDEA Ultimate 2021.3.3Compatible\",\"IntelliJ IDEA Ultimate 2021.2.4Compatible\",\"IntelliJ IDEA Ultimate 2021.1.3Compatible\",\"IntelliJ IDEA Ultimate 2020.3.4Compatible\",\"因为插件内部附带com.intellij.database这个包所以社区版本的idea无法安装,如果不需要代码生成工具那么可以进群和联系群主会编译去除该插件的版本\"]},\"536\":{\"h\":\"🔔交流QQ群\"},\"537\":{\"h\":\"EasyQuery官方QQ群: 170029046\"},\"538\":{\"h\":\"版本升级\",\"t\":[\"如果你是@EntityProxy那么只需要升级对应的框架版本和插件版本然后重新clean即可,如果你是@EntityFileProxy那么升级完框架和插件版本后需要重新调用插件的AutoCompile让生成的代理文件重新生成一遍\"]},\"539\":{\"h\":\"下载\",\"t\":[\"从idea的插件市场下载插件\"]},\"540\":{\"h\":\"插件功能介绍\",\"t\":[\"自动apt文件编译 如果你是proxy模式那么这个插件可以帮助你快速实现apt的proxy类 快捷键shift+p\",\"sql日志批量生成无占位可直接运行的sql 快捷键shift+m\",\"根据表生成对应的实体（自定义模板导出导入）\",\"注意点及说明!!!\",\"数据库格式化只是简单的把参数拼接到sql中这样就可以直接运行，但是因为参数的复杂程度可能导致sql拼接不正确，所以这边不能太依赖这个插件尤其是参数中存在括号参数等会被误认为是参数从而导致拼接错误,轻易实际为准,sql预览这个只是锦上添花并不能作为实际的参考\"]},\"541\":{\"h\":\"Entity对象生成\"},\"542\":{\"h\":\"apt自动生成\"},\"543\":{\"h\":\"EntityQuery\"},\"544\":{\"h\":\"替换框架行为❗️❗️❗️\",\"t\":[\"easy-query默认内部提供了一个简易的依赖注入容器,非常轻量且仅支持构造函数注入,不支持循环依赖,但是提供了非常完善的替换框架内部行为的方式,用户可以替换掉框架内部的所有接口,完全可以自行自定义实现，\"]},\"545\":{\"h\":\"可以被替换的接口\",\"t\":[\"框架内部使用了大量的依赖注入,并且使用接口依赖模式开发,所以很轻松可以替换掉,那么我们可以替换掉哪一些呢\",\"说明!!!\",\"具体代码以最新版源码为准,您如果发现有不一样的也可以提交pr来帮我们修复文档\",\" private void defaultConfiguration() { replaceService(EasyQueryDataSource.class, DefaultEasyQueryDataSource.class) .replaceService(Dialect.class, DefaultDialect.class) .replaceService(NameConversion.class, UnderlinedNameConversion.class) .replaceService(QueryConfiguration.class) .replaceService(EntityMetadataManager.class, DefaultEntityMetadataManager.class) .replaceService(SQLExpressionInvokeFactory.class, DefaultSQLExpressionInvokeFactory.class) .replaceService(ExpressionBuilderFactory.class, DefaultEasyExpressionBuilderFactory.class) .replaceService(SQLClientApiFactory.class, DefaultSQLClientApiFactory.class) .replaceService(TrackManager.class, DefaultTrackManager.class) .replaceService(EasyPageResultProvider.class, DefaultEasyPageResultProvider.class) .replaceService(EasyPrepareParser.class, DefaultEasyPrepareParser.class) .replaceService(ConnectionManager.class, DefaultConnectionManager.class) .replaceService(DataSourceRouteManager.class, DefaultDataSourceRouteManager.class) .replaceService(DataSourceRouter.class, ShardingDataSourceRouter.class) .replaceService(DataSourceRouteEngine.class, DefaultDataSourceRouteEngine.class) .replaceService(TableRouteManager.class, DefaultTableRouteManager.class) .replaceService(TableRouter.class, ShardingTableRouter.class) .replaceService(TableRouteEngine.class, DefaultTableRouteEngine.class) .replaceService(RouteContextFactory.class, DefaultRouteContextFactory.class) .replaceService(RewriteContextFactory.class, DefaultRewriteContextFactory.class) .replaceService(ExecutionContextFactory.class, DefaultExecutionContextFactory.class) .replaceService(EntityExpressionExecutor.class, DefaultEntityExpressionExecutor.class) // .replaceService(EntityExpressionExecutor.class, ShardingEntityExpressionExecutor.class) .replaceService(ShardingExecutorService.class, DefaultEasyShardingExecutorService.class) .replaceService(ExpressionFactory.class, DefaultEasyExpressionFactory.class) .replaceService(ShardingComparer.class, JavaLanguageShardingComparer.class) .replaceService(JdbcTypeHandlerManager.class, EasyJdbcTypeHandlerManager.class) .replaceService(QueryRuntimeContext.class, DefaultEasyQueryRuntimeContext.class) .replaceService(EasyDataSourceConnectionFactory.class, DefaultEasyDataSourceConnectionFactory.class) .replaceService(EasyConnectionFactory.class, DefaultEasyConnectionFactory.class) .replaceService(DataSourceManager.class, DefaultDataSourceManager.class) .replaceService(ShardingQueryCountManager.class, DefaultShardingQueryCountManager.class) .replaceService(ColumnFunctionFactory.class, DefaultColumnFunctionFactory.class) .replaceService(RouteDescriptorFactory.class, DefaultRouteDescriptorFactor.class) .replaceService(DataSourceUnitFactory.class, DefaultDataSourceUnitFactory.class) .replaceService(SQLSegmentFactory.class, DefaultSQLSegmentFactory.class) .replaceService(EasyTimeJobManager.class, DefaultEasyTimeJobManager.class) .replaceService(IncludeProcessorFactory.class, EasyIncludeProcessorFactory.class) .replaceService(IncludeParserEngine.class, DefaultIncludeParserEngine.class) .replaceService(WhereObjectQueryExecutor.class, DefaultWhereObjectQueryExecutor.class) .replaceService(ObjectSortQueryExecutor.class, DefaultObjectSortQueryExecutor.class) .replaceService(JdbcExecutorListener.class, EmptyJdbcExecutorListener.class) .replaceService(AssertExceptionFactory.class, DefaultAssertExceptionFactory.class) .replaceService(SQLParameterPrintFormat.class, DefaultSQLParameterPrintFormat.class) .replaceService(SQLFunc.class, SQLFuncImpl.class) .replaceService(EasyQueryClient.class, DefaultEasyQueryClient.class); } \"]},\"546\":{\"h\":\"自定义NameConversion\",\"t\":[\"这边以NameConversion作为例子来演示我们如何替换掉默认的框架行为\"]},\"547\":{\"h\":\"springboot环境\",\"t\":[\"默认springboot-starter框架实现了一个空的StarterConfigurer，所以我们可以通过@Primary来实现替换\",\"//新建一个类来实现接口NameConversion public class MyNameConversion implements NameConversion { @Override public String convert(String name) { return \\\"[\\\"+name+\\\"]\\\"; } } //实现一个启动配置 public class MyStarterConfigurer implements StarterConfigurer { @Override public void configure(ServiceCollection services) { //addService如果不存在就添加存在就替换 services.addService(NameConversion.class, MyNameConversion.class); } } @Configuration public class MyConfiguration { @Bean(\\\"MyStarterConfigurer\\\") @Primary public StarterConfigurer starterConfigurer(){ return new MyStarterConfigurer(); } } \"]},\"548\":{\"h\":\"非springboot环境\",\"t\":[\"通过默认的bootstrapper的方法replaceService来实现替换\",\"//新建一个类来实现接口NameConversion public class MyNameConversion implements NameConversion { @Override public String convert(String name) { return \\\"[\\\"+name+\\\"]\\\"; } } EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setDeleteThrowError(true);//设置不允许物理删除 op.setPrintSql(true);//设置以log.info模式打印执行sql信息 ......//此处用于配置系统默认配置选项 }) .useDatabaseConfigure(new MySQLDatabaseConfiguration())//设置方言语法等为mysql的 .replaceService(NameConversion.class, MyNameConversion.class)//放在最后面可以替换掉前面所有方法 .build(); \"]},\"549\":{\"h\":\"solon环境替换默认行为\",\"t\":[\"public class App { public static void main(String[] args) { Solon.start(App.class,args,app->{ app.onEvent(EasyQueryBuilderConfiguration.class,e->{ e.replaceService(originalSerivce.class,replaceService.class); }); }); } } \"]},\"550\":{\"h\":\"Foo feature\"},\"551\":{\"h\":\"Introduction\",\"t\":[\"We support foo feature, ...\"]},\"552\":{\"h\":\"Details\",\"t\":[\"ray\",\"...\"]},\"553\":{\"h\":\"Ray\",\"t\":[\"Feature details here.\"]},\"554\":{\"h\":\"计算属性目录\",\"t\":[\"什么叫做计算属性,计算属性就是非简单的包装类型或者基本类型，比如： 估顾名思义这个属性是通过转换函数或者计算得出的属性\",\"json属性private UserExtra userExtra;用来描述数据库存储的字符串或者json类型,映射到java的对象上,支持筛选,返回排序等\",\"集合属性private List<UserLabels> userLabels;用来描述数据库存储的字符串或者json类型,映射到java的集合上,支持筛选,返回排序等\",\"枚举属性private UserStatusEnum userStatus;用来描述数据库存储的字符串或者数字类型,映射到java的枚举属性,支持筛选,返回排序等\",\"增强属性private String idCard;写入数据库时会自动添加base64编码读取会自动进行解码,支持筛选,返回排序等\",\"简单计算属性:复合属性private String fullName;他是有firstName和lastName组合，再比如年龄,他是由当前时间和生日的相减生成的动态值,支持筛选,返回排序等\",\"状态计算属性:比如您有一张证书表,证书表存在证书过期时间,那么证书有个动态的隐藏属性叫做状态,证书是否过期可以通过这个状态来实现\",\"复杂计算属性:由子表或者额外表数据构成,比如private Integer StudentSize;加入班级和用户是一对多,那么这个属性用来描述班级下有多少学生人数,支持筛选排序返回\",\"函数自增属性:该属性可以做到数据由数据库生成比如数据库函数存在mysqlNextId()或者gis中由数据库生成的函数那么适用于改方法仅插入时生效\"]},\"555\":{\"h\":\"跨表计算属性\"},\"556\":{\"h\":\"跨表计算属性\",\"t\":[\"列如用户和证书属于一对多,当查询用户时需要返回用户的证书数那么可以通过跨表计算属性来实现,班级和班级所在的学生人数 总之跨表计算属性是由当前对的一个或者多个以上的数据或者跨表数据通过一定的函数进行组合来实现一个动态不存在数据库中的属性,并且改属性支持筛选排序筛选和分组等操作\",\" @Table(\\\"school_class\\\") @Data @ToString @EntityFileProxy public class SchoolClassAggregateProp implements ProxyEntityAvailable<SchoolClassAggregateProp, SchoolClassAggregatePropProxy> { @Column(primaryKey = true)//主键 private String id; private String name; //一对多 一个班级多个学生 @Navigate(value = RelationTypeEnum.OneToMany, targetProperty = \\\"classId\\\") private List<SchoolStudent> schoolStudents; @Column(sqlConversion = StudentSizeColumnValueSQLConverter.class,autoSelect = false) @InsertIgnore @UpdateIgnore private Long studentSize; } \",\"//学生数量复杂计算属性 public class StudentSizeColumnValueSQLConverter implements ColumnValueSQLConverter { @Override public boolean isRealColumn() { return false; } @Override public boolean isMergeSubQuery() { return true; } @Override public void selectColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLClientApiFactory sqlClientApiFactory = runtimeContext.getSQLClientApiFactory(); ClientQueryable<SchoolStudent> queryable = sqlClientApiFactory.createQueryable(SchoolStudent.class, runtimeContext); ClientQueryable<Long> studentSizeQuery = queryable.where(t -> t.eq(new SimpleEntitySQLTableOwner<>(table), \\\"classId\\\", \\\"id\\\")) .select(Long.class,s -> s.columnCount(\\\"id\\\")); sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",context->{ context.expression(studentSizeQuery); context.setAlias(columnMetadata.getName()); }); } @Override public void propertyColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLClientApiFactory sqlClientApiFactory = runtimeContext.getSQLClientApiFactory(); ClientQueryable<SchoolStudent> queryable = sqlClientApiFactory.createQueryable(SchoolStudent.class, runtimeContext); ClientQueryable<Long> studentSizeQuery = queryable.where(t -> t.eq(new SimpleEntitySQLTableOwner<>(table), \\\"classId\\\", \\\"id\\\")) .select(Long.class,s -> s.columnCount(\\\"id\\\")); sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",context->{ context.expression(studentSizeQuery); }); } @Override public void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext, boolean isCompareValue) { sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",context->{ context.value(sqlParameter); }); } } \"]},\"557\":{\"h\":\"查询\",\"t\":[\"//因为添加了autoSelect=false所以默认不查询聚合列 List<SchoolClassAggregateProp> list = easyEntityQuery.queryable(SchoolClassAggregateProp.class).toList(); SELECT t.`id`,t.`name` FROM `school_class` t //查询allFields任然不会查询必须要手动指定查询 List<SchoolClassAggregateProp> list = easyEntityQuery.queryable(SchoolClassAggregateProp.class).select(s -> s.FETCHER.allFields().fetchProxy()).toList(); SELECT t.`id`,t.`name` FROM `school_class` t //手动指定查询那么将会查询出来 List<SchoolClassAggregateProp> list = easyEntityQuery.queryable(SchoolClassAggregateProp.class).select(s -> s.FETCHER.allFields().studentSize().fetchProxy()).toList(); SELECT t.`id`,t.`name`,(SELECT COUNT(t2.`id`) AS `id` FROM `school_student` t2 WHERE t2.`class_id` = t.`id`) AS `student_size` FROM `school_class` t //新建VO @Data @ToString public class SchoolClassAggregatePropVO { @Column(primaryKey = true)//主键 private String id; private String name; private Long studentSize; } List<SchoolClassAggregatePropVO> list = easyEntityQuery.queryable(SchoolClassAggregateProp.class). select(SchoolClassAggregatePropVO.class).toList(); SELECT t.`id`,t.`name`,(SELECT COUNT(t2.`id`) AS `id` FROM `school_student` t2 WHERE t2.`class_id` = t.`id`) AS `student_size` FROM `school_class` t List<SchoolClassAggregatePropVO> list = easyEntityQuery.queryable(SchoolClassAggregateProp.class) .where(s -> s.studentSize().gt(100L)). select(SchoolClassAggregatePropVO.class).toList(); -- 第1条sql数据 SELECT t.`id`, t.`name`, (SELECT COUNT(t2.`id`) AS `id` FROM `school_student` t2 WHERE t2.`class_id` = t.`id`) AS `student_size` FROM `school_class` t WHERE ( SELECT COUNT(t4.`id`) AS `id` FROM `school_student` t4 WHERE t4.`class_id` = t.`id` ) > 100 \"]},\"558\":{\"h\":\"集合属性\",\"t\":[\"easy-query默认提供了数据库值对象转换功能,可以实现数据库对象属性枚举转换的功能或者对象string转json对象的功能\",\"注意: 如果需要支持差异更新需要实现重写hashcode和equalsEnum除外\",\"这边提供两种解决方案\",\"如果你希望数据库对象和数据库类型一致,但是还希望用枚举转换的或者其他属性转换的\",\"数据库对象属性本身就是枚举或者对象的\"]},\"559\":{\"h\":\"api\",\"t\":[\"接口\",\"功能\",\"ValueConverter\",\"将数据库和对象值进行互相转换的接口\",\"<TProperty>\",\"对象属性类型\",\"<TProvider>\",\"数据库对应的java类型\",\"方法\",\"功能\",\"serialize\",\"将实体对象转成数据库值\",\"deserialize\",\"将数据库的值转成对象值\"]},\"560\":{\"h\":\"springboot\",\"t\":[\"@Component将对应的ValueConverter注入即可\"]},\"561\":{\"h\":\"控制台\",\"t\":[\"QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyValueConverter(new JsonConverter()); \"]},\"562\":{\"h\":\"集合类型的json支持\",\"t\":[\"@Data @Table(\\\"t_topic_type_array\\\") @ToString public class TopicTypeArrayJson { @Column(primaryKey = true) private String id; private Integer stars; @Column(conversion = JsonConverter.class) private TopicTypeJsonValue title; @Column(conversion = JsonConverter.class, complexPropType = TopicTypeTitle2ComplexType.class) private List<TopicTypeJsonValue> title2; private Integer topicType; private LocalDateTime createTime; } //实现接口ComplexPropType返回对应的复杂类型type public class TopicTypeTitle2ComplexType extends TypeReference<List<TopicTypeJsonValue>> implements ComplexPropType { @Override public Type complexType() { return this.getType(); } } 如果不想使用`TopicTypeTitle2ComplexType`额外定义一个类可以在json对象上直接定义 @Data @EqualsAndHashCode public class TopicTypeJsonValue implements ComplexPropType { private String name; private Integer age; @Override public Type complexType() { return myType(new TypeReference<List<TopicTypeJsonValue>>() { }); } private <T> Type myType(TypeReference<T> typeReference) { return typeReference.getType(); } } 然后实体对象定义为 @Data @Table(\\\"t_topic_type_array\\\") @ToString public class TopicTypeArrayJson { @Column(primaryKey = true) private String id; private Integer stars; @Column(conversion = JsonConverter.class) private TopicTypeJsonValue title; @Column(conversion = JsonConverter.class, complexPropType = TopicTypeJsonValue.class)//修改为TopicTypeJsonValue.class private List<TopicTypeJsonValue> title2; private Integer topicType; private LocalDateTime createTime; } TopicTypeArrayJson topicType1 = new TopicTypeArrayJson(); topicType1.setId(id); topicType1.setStars(123); TopicTypeJsonValue topicTypeJsonValue = new TopicTypeJsonValue(); topicTypeJsonValue.setName(\\\"123\\\"); topicTypeJsonValue.setAge(456); topicType1.setTitle(topicTypeJsonValue); ArrayList<TopicTypeJsonValue> topicTypeJsonValues = new ArrayList<>(); { TopicTypeJsonValue topicTypeJsonValue1 = new TopicTypeJsonValue(); topicTypeJsonValue1.setName(\\\"1234\\\"); topicTypeJsonValue1.setAge(4565); topicTypeJsonValues.add(topicTypeJsonValue1); } { TopicTypeJsonValue topicTypeJsonValue1 = new TopicTypeJsonValue(); topicTypeJsonValue1.setName(\\\"12345\\\"); topicTypeJsonValue1.setAge(45655); topicTypeJsonValues.add(topicTypeJsonValue1); } topicType1.setTitle2(topicTypeJsonValues); topicType1.setTopicType(TopicTypeEnum.CLASSER.getCode()); topicType1.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType1).executeRows(); ==> Preparing: INSERT INTO `t_topic_type_array` (`id`,`stars`,`title`,`title2`,`topic_type`,`create_time`) VALUES (?,?,?,?,?,?) ==> Parameters: 1231(String),123(Integer),{\\\"age\\\":456,\\\"name\\\":\\\"123\\\"}(String),[{\\\"age\\\":4565,\\\"name\\\":\\\"1234\\\"},{\\\"age\\\":45655,\\\"name\\\":\\\"12345\\\"}](String),9(Integer),2023-10-04T22:37:32.049(LocalDateTime) <== Total: 1 \"]},\"563\":{\"h\":\"复合计算属性\"},\"564\":{\"h\":\"复合计算属性\",\"t\":[\"通常我们会对用户的年龄使用一个字段来进行存储,但是大部分时候这个年龄属性应该是动态计算的而不是实时计算的,如果我们存储firstName和lastName那么用户的name字段也可以通过这种方式来实现计算, 总之复合计算属性是由当前对的一个或者多个以上的数据通过一定的函数进行组合来实现一个动态不存在数据库中的属性,并且改属性支持筛选排序筛选和分组等操作\",\" public class UserAgeColumnValueSQLConverter implements ColumnValueSQLConverter { @Override public boolean isRealColumn() { return false; } @Override public boolean isMergeSubQuery() { return false; } /** * 当这个值被作为select的时候如何处理 * @param table * @param columnMetadata * @param sqlPropertyConverter * @param runtimeContext */ @Override public void selectColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); SQLFunction durationDay = fx.duration(x->x.sqlFunc(fx.now()).column(table,\\\"birthday\\\"), DateTimeDurationEnum.Days); SQLFunction sqlFunction = fx.numberCalc(x -> x.sqlFunc(durationDay).value(365), NumberCalcEnum.NUMBER_DEVIDE); SQLFunction ageSQLFunction = fx.math(x -> x.sqlFunc(sqlFunction), MathMethodEnum.Ceiling); String sqlSegment = ageSQLFunction.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ ageSQLFunction.consume(context.getSQLNativeChainExpressionContext()); context.setAlias(columnMetadata.getName()); }); } /** * 当这个值被用作非查询的值的时候如何处理不出现在select里面 * @param table * @param columnMetadata * @param sqlPropertyConverter * @param runtimeContext */ @Override public void propertyColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); SQLFunction durationDay = fx.duration(x->x.sqlFunc(fx.now()).column(table,\\\"birthday\\\"), DateTimeDurationEnum.Days); SQLFunction sqlFunction = fx.numberCalc(x -> x.sqlFunc(durationDay).value(365), NumberCalcEnum.NUMBER_DEVIDE); SQLFunction ageSQLFunction = fx.math(x -> x.sqlFunc(sqlFunction), MathMethodEnum.Ceiling); String sqlSegment = ageSQLFunction.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ ageSQLFunction.consume(context.getSQLNativeChainExpressionContext()); }); } /** * 当前值作为比较值的时候比如where age=18 那么这个18应该怎么处理 * 当前这个值作为存储值的时候比如insert table (age) values(18)那么这个值如何处理 * @param table * @param columnMetadata * @param sqlParameter * @param sqlPropertyConverter * @param runtimeContext * @param isCompareValue 当前值是用于比较还是存储 */ @Override public void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext,boolean isCompareValue) { sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",context->{ context.value(sqlParameter); }); } } public class FullNameColumnValueSQLConverter implements ColumnValueSQLConverter { @Override public void selectColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); SQLFunction concat = fx.concat(\\\"firstName\\\", \\\"lastName\\\"); String sqlSegment = concat.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ concat.consume(context.getSQLNativeChainExpressionContext()); context.setAlias(columnMetadata.getName()); }); } @Override public void propertyColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); SQLFunction concat = fx.concat(\\\"firstName\\\", \\\"lastName\\\"); String sqlSegment = concat.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ concat.consume(context.getSQLNativeChainExpressionContext()); }); } @Override public void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext,boolean isCompareValue) { sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",context->{ context.value(sqlParameter); }); } } \"]},\"565\":{\"h\":\"查询\",\"t\":[\" List<UserExtra> list = easyEntityQuery.queryable(UserExtra.class) .where(u -> { u.fullName().like(\\\"123\\\"); u.fullName().in(Arrays.asList(\\\"1\\\", \\\"2\\\")); u.age().gt(12); }) .toList(); SELECT `id`, `first_name`, `last_name`, `birthday`, CONCAT(`first_name`,`last_name`) AS `full_name`, -- 全名就是first+last CEILING((timestampdiff(DAY,`birthday`,NOW()) / 365)) AS `age` -- 计算出出生日期到现在的天数除以365就是年向上取整就是虚岁 FROM `t_user_extra` WHERE CONCAT(`first_name`,`last_name`) LIKE '%123%' AND CONCAT(`first_name`,`last_name`) IN ( '1','2' ) AND CEILING((timestampdiff(DAY, `birthday`, NOW()) / 365)) > 12 List<UserExtra> list = easyEntityQuery.queryable(UserExtra.class) .where(u -> { u.id().eq(\\\"test2\\\"); u.fullName().like(\\\"悟\\\"); }).orderBy(x -> x.fullName().asc()) .toList(); SELECT `id`, `first_name`, `last_name`, `birthday`, CONCAT(`first_name`,`last_name`) AS `full_name`, CEILING((timestampdiff(DAY,`birthday`, NOW()) / 365)) AS `age` FROM `t_user_extra` WHERE `id` = 'test2' AND CONCAT(`first_name`,`last_name`) LIKE '%悟%' ORDER BY CONCAT(`first_name`,`last_name`) ASC List<UserExtra> list = easyEntityQuery.queryable(UserExtra.class) .where(u -> { u.id().eq(\\\"test3\\\"); u.fullName().like(\\\"悟\\\"); }).orderBy(x -> { x.fullName().asc(); x.age().asc(); x.fullName().asc(OrderByModeEnum.NULLS_LAST); }) .toList(); SELECT `id`, `first_name`, `last_name`, `birthday`, CONCAT(`first_name`, `last_name`) AS `full_name`, CEILING((timestampdiff(DAY, `birthday`, NOW()) / 365)) AS `age` FROM `t_user_extra` WHERE `id` = 'test3' AND CONCAT(`first_name`,`last_name`) LIKE '%悟%' ORDER BY CONCAT(`first_name`, `last_name`) ASC, CEILING((timestampdiff(DAY, `birthday`, NOW()) / 365)) ASC, CASE WHEN CONCAT(`first_name`, `last_name`) IS NULL THEN 1 ELSE 0 END ASC, CONCAT(`first_name`, `last_name`) ASC List<Draft3<Integer, String, String>> list = easyEntityQuery.queryable(UserExtra.class) .where(u -> { u.id().eq(\\\"test3\\\"); u.fullName().like(\\\"悟\\\"); }).groupBy(u -> GroupKeys.TABLE1.of(u.age(), u.fullName())) .select(group -> Select.DRAFT.of( group.key1(), group.key2(), group.groupTable().fullName().max() )).toList(); SELECT CEILING((timestampdiff(DAY, t.`birthday`, NOW()) / 365)) AS `value1`, CONCAT(t.`first_name`, t.`last_name`) AS `value2`, MAX(CONCAT(t.`first_name`, t.`last_name`)) AS `value3` FROM `t_user_extra` t WHERE t.`id` = 'test3' AND CONCAT(t.`first_name`,t.`last_name`) LIKE '%悟%' GROUP BY CEILING((timestampdiff(DAY, t.`birthday`, NOW()) / 365)), CONCAT(t.`first_name`, t.`last_name`) \"]},\"566\":{\"h\":\"插入\",\"t\":[\"UserExtra userExtra = new UserExtra(); userExtra.setId(\\\"test2\\\"); userExtra.setFirstName(\\\"孙\\\"); userExtra.setLastName(\\\"悟空\\\"); userExtra.setBirthday(LocalDateTime.of(2020, 1, 1, 0, 0)); easyEntityQuery.insertable(userExtra).executeRows(); INSERT INTO `t_user_extra` ( `id`,`first_name`,`last_name`,`birthday` ) VALUES ('test2','孙','悟空','2020-01-01 00:00') \"]},\"567\":{\"h\":\"枚举属性\",\"t\":[\"easy-query默认提供了数据库值对象转换功能,可以实现数据库对象属性枚举转换的功能或者对象string转json对象的功能\",\"注意: 如果需要支持差异更新需要实现重写hashcode和equalsEnum除外\",\"这边提供两种解决方案\",\"如果你希望数据库对象和数据库类型一致,但是还希望用枚举转换的或者其他属性转换的\",\"数据库对象属性本身就是枚举或者对象的\"]},\"568\":{\"h\":\"api\",\"t\":[\"接口\",\"功能\",\"EnumValueAutoConverter\",\"支持枚举类型全局作用到没有添加ValueConverter注解的属性上(只要对应的apply方法返回true),使用这个接口无需添加Column(conversion=xxxx.class)\",\"<TProperty>\",\"对象属性类型\",\"<TProvider>\",\"数据库对应的java类型\",\"方法\",\"功能\",\"serialize\",\"将实体对象转成数据库值\",\"deserialize\",\"将数据库的值转成对象值\"]},\"569\":{\"h\":\"springboot\",\"t\":[\"@Component将对应的ValueConverter注入即可\"]},\"570\":{\"h\":\"控制台\",\"t\":[\"QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyValueConverter(new EnumConverter()); \"]},\"571\":{\"h\":\"枚举值\",\"t\":[\"数据库对象很多时候我们可能希望将枚举值设计为java枚举对象而不是integer,所以这边先用枚举来做一个测试\"]},\"572\":{\"h\":\"数据库对象属性枚举值\",\"t\":[\"//枚举接口 public interface IEnum<TEnum extends IEnum<TEnum>> { Integer getCode(); TEnum valueOf(Integer enumValue); } //获取枚举值 public class EnumDeserializer { public static <T extends IEnum<T>> T deserialize(Class<T> enumClass, Integer integer) { T[] enumConstants = enumClass.getEnumConstants(); if(enumConstants.length>0){ return enumConstants[0].valueOf(integer); } throw new IllegalArgumentException(\\\"Invalid integer value for enum: \\\" + integer); } } //枚举转换器 public class EnumConverter implements ValueConverter<IEnum<?>,Number> { @Override public Number serialize(IEnum<?> iEnum, ColumnMetadata columnMetadata) { if(iEnum=null){ return null; } return iEnum.getCode(); } @Override public IEnum<?> deserialize(Number code, ColumnMetadata columnMetadata) { if(code=null){ return null; } return EnumDeserializer.deserialize(EasyObjectUtil.typeCast(columnMetadata.getPropertyType()),code.intValue()); } } //如果你希望当前枚举转换配置到全局可以使用 EnumValueAutoConverter //EnumValueAutoConverter第一个泛型参数 不可以是具体枚举类型除非整个系统就一个枚举类型 public class EnumConverter implements EnumValueAutoConverter<IEnum<?>,Number> { @Override public Number serialize(IEnum<?> iEnum, ColumnMetadata columnMetadata) { if(iEnum == null){ return null; } return iEnum.getCode(); } @Override public IEnum<?> deserialize(Number code, ColumnMetadata columnMetadata) { if(code == null){ return null; } return EnumDeserializer.deserialize(EasyObjectUtil.typeCast(columnMetadata.getPropertyType()),code.intValue()); } @Override public boolean apply(Class<?> entityClass, Class<IEnum<?>> propertyType) { return IEnum.class.isAssignableFrom(propertyType); //true表示如果对应的属性没有添加注解或者没有指定ValueConverter,并且是枚举Enum<?>,那么会进入当前方法如果返回true那么会默认将当前转换作用到属性上 //return true; //true表示如果对应的属性没有添加注解或者没有指定ValueConverter,并且是枚举Enum<?>,那么会进入当前方法如果返回true那么会默认将当前转换作用到属性上 } } //数据库枚举 public enum TopicTypeEnum implements IEnum<TopicTypeEnum> { STUDENT(1), TEACHER(3), CLASSER(9); private final Integer code; TopicTypeEnum(Integer code){ this.code = code; } @Override public Integer getCode() { return code; } @Override public TopicTypeEnum valueOf(Integer enumValue) { switch (enumValue){ case 1:return TopicTypeEnum.STUDENT; case 3:return TopicTypeEnum.TEACHER; case 9:return TopicTypeEnum.CLASSER; } throw new UnsupportedOperationException(); } } //数据库插入对象 @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicTypeTest1 { @Column(primaryKey = true) private String id; private Integer stars; private String title; @Column(conversion = EnumConverter.class) private TopicTypeEnum topicType; private LocalDateTime createTime; } TopicTypeTest1 topicType1 = new TopicTypeTest1(); topicType1.setId(\\\"123\\\"); topicType1.setStars(123); topicType1.setTitle(\\\"title123\\\"); topicType1.setTopicType(TopicTypeEnum.CLASSER); topicType1.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType1).executeRows(); ==> Preparing: INSERT INTO `t_topic_type` (`id`,`stars`,`title`,`topic_type`,`create_time`) VALUES (?,?,?,?,?) ==> Parameters: 123(String),123(Integer),title123(String),9(Integer),2023-05-23T22:12:12.703(LocalDateTime) <== Total: 1 TopicTypeTest1 topicTypeVO = easyQuery.queryable(TopicTypeTest1.class) .whereById(\\\"123\\\") .firstOrNull(); System.out.println(topicTypeVO); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Time Elapsed: 4(ms) <== Total: 1 TopicTypeTest1(id=123, stars=123, title=title123, topicType=CLASSER, createTime=2023-05-23T22:13:32) \"]},\"573\":{\"h\":\"数据库对象属性integer值\",\"t\":[\"有些用户喜欢数据库对象是和数据库列类型一一对应的,那么可以采用Integer属性，对应的VO或者BO等对象上采用枚举也是可以的\",\" @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicType { @Column(primaryKey = true) private String id; private Integer stars; private String title; private Integer topicType; private LocalDateTime createTime; } //VO对象 @Data @ToString public class TopicTypeVO { private String id; private Integer stars; private String title; @Column(value = \\\"topic_type\\\",conversion = EnumConverter.class) private TopicTypeEnum topicType1; private LocalDateTime createTime; } TopicTypeVO topicTypeVO = easyQuery.queryable(TopicType.class) .whereById(\\\"123\\\") .select(TopicTypeVO.class) .firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Time Elapsed: 3(ms) <== Total: 1 TopicTypeVO(id=123, stars=123, title=title123, topicType1=TEACHER, createTime=2023-05-23T22:16:45) \"]},\"574\":{\"h\":\"注解模式\",\"t\":[\"//注解 @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.FIELD, ElementType.ANNOTATION_TYPE}) public @interface EnumValue { } //静态方法 //性能问题自行处理 相对没有接口模式性能高 public class EnumValueDeserializer { private static final Map<String, Field> ENUM_TYPES = new ConcurrentHashMap<>(); public static <T extends Enum<T>> Object serialize(Enum<T> enumValue) { if (enumValue == null) { return null; } Optional<Field> codeOptional = getEnumValueField(enumValue.getClass()); if (codeOptional.isPresent()) { Field filed = codeOptional.get(); filed.setAccessible(true); try { return filed.get(enumValue); } catch (IllegalAccessException e) { throw new RuntimeException(e); } } throw new IllegalArgumentException(\\\"Invalid integer value for enum: \\\" + enumValue + \\\",from :\\\" + EasyClassUtil.getInstanceSimpleName(enumValue)); } public static <T extends Enum<T>> T deserialize(Class<T> enumClass, Integer code) { if (code == null) { return null; } Optional<Field> codeOptional = getEnumValueField(enumClass); if (codeOptional.isPresent()) { Field filed = codeOptional.get(); T[] enumConstants = enumClass.getEnumConstants(); for (T enumConstant : enumConstants) { filed.setAccessible(true); try { if (Objects.equals(code, filed.get(enumConstant))) { return enumConstant; } } catch (IllegalAccessException e) { throw new RuntimeException(e); } } } throw new IllegalArgumentException(\\\"Invalid integer value for enum: \\\" + code + \\\",from :\\\" + EasyClassUtil.getSimpleName(enumClass)); } public static <T extends Enum<T>> Optional<Field> getEnumValueField(Class<T> enumClass) { if (enumClass != null && enumClass.isEnum()) { String className = enumClass.getName(); Field s = EasyMapUtil.computeIfAbsent(ENUM_TYPES, className, key -> { Collection<Field> allFields = EasyClassUtil.getAllFields(enumClass); Optional<Field> optional = allFields.stream() // 过滤包含注解@EnumValue的字段 .filter(field ->field.isAnnotationPresent(EnumValue.class)) .findFirst(); return optional.orElse(null); }); return Optional.ofNullable(s); } return Optional.empty(); } } //转换器 public class EnumValueConverter implements ValueConverter<Enum<?>,Number> { @Override public Number serialize(Enum<?> enumValue, ColumnMetadata columnMetadata) { if(enumValue == null){ return null; } return (Number) EnumValueDeserializer.serialize(enumValue); } @Override public Enum<?> deserialize(Number code, ColumnMetadata columnMetadata) { if(code == null){ return null; } return EnumValueDeserializer.deserialize(EasyObjectUtil.typeCast(columnMetadata.getPropertyType()),code.intValue()); } } public enum TopicTypeEnum { STUDENT(1), TEACHER(3), CLASSER(9); @EnumValue private final Integer code; TopicTypeEnum(Integer code){ this.code = code; } @Override public Integer getCode() { return code; } } @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicTypeTest2 { @Column(primaryKey = true) private String id; private Integer stars; private String title; @Column(value = \\\"topic_type\\\",conversion = EnumValueConverter.class) private TopicTypeEnum topicType; private LocalDateTime createTime; } TopicTypeTest2 topicType2 = new TopicTypeTest2(); topicType2.setId(\\\"123\\\"); topicType2.setStars(123); topicType2.setTitle(\\\"title123\\\"); topicType2.setTopicType(TopicTypeEnum.CLASSER); topicType2.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType2).executeRows(); ==> Preparing: INSERT INTO `t_topic_type` (`id`,`stars`,`title`,`topic_type`,`create_time`) VALUES (?,?,?,?,?) ==> Parameters: 123(String),123(Integer),title123(String),9(Integer),2023-05-23T22:12:12.703(LocalDateTime) <== Total: 1 TopicTypeTest2 topicTypeVO = easyQuery.queryable(TopicTypeTest2.class) .whereById(\\\"123\\\") .firstOrNull(); System.out.println(topicTypeVO); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Time Elapsed: 4(ms) <== Total: 1 TopicTypeTest2(id=123, stars=123, title=title123, topicType=CLASSER, createTime=2023-05-23T22:13:32) \"]},\"575\":{\"h\":\"json属性\",\"t\":[\"easy-query默认提供了数据库值对象转换功能,可以实现数据库对象属性枚举转换的功能或者对象string转json对象的功能\",\"注意: 如果需要支持差异更新需要实现重写hashcode和equalsEnum除外\",\"这边提供两种解决方案\",\"如果你希望数据库对象和数据库类型一致,但是还希望用枚举转换的或者其他属性转换的\",\"数据库对象属性本身就是枚举或者对象的\"]},\"576\":{\"h\":\"api\",\"t\":[\"接口\",\"功能\",\"ValueConverter\",\"将数据库和对象值进行互相转换的接口\",\"<TProperty>\",\"对象属性类型\",\"<TProvider>\",\"数据库对应的java类型\",\"方法\",\"功能\",\"serialize\",\"将实体对象转成数据库值\",\"deserialize\",\"将数据库的值转成对象值\"]},\"577\":{\"h\":\"springboot\",\"t\":[\"@Component将对应的ValueConverter注入即可\"]},\"578\":{\"h\":\"控制台\",\"t\":[\"QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyValueConverter(new JsonConverter());//为自己实现的转换器 \"]},\"579\":{\"h\":\"json对象\",\"t\":[\"注意\",\"因为update会使用track追踪模式更新所以这边json对象必须要重写equals和hashcode\",\"首先我们引入fastjson2\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>2.0.26</version> </dependency> \",\" public class JsonConverter implements ValueConverter<Object, String> { @Override public String serialize(Object o, ColumnMetadata columnMetadata) { if(o==null){ return null; } return JSON.toJSONString(o, JSONWriter.Feature.WriteMapNullValue, JSONWriter.Feature.WriteNullListAsEmpty, JSONWriter.Feature.WriteNullStringAsEmpty); } @Override public Object deserialize(String s, ColumnMetadata columnMetadata) { if(EasyStringUtil.isBlank(s)){ return null; } //采用复杂类型支持对象json和array集合 ComplexPropType complexType = columnMetadata.getComplexPropType(); return JSON.parseObject(s, complexType.complexType()); } } @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicTypeJson { @Column(primaryKey = true) private String id; private Integer stars; @Column(conversion = JsonConverter.class) private TopicTypeJsonValue title; private Integer topicType; private LocalDateTime createTime; } @Data @EqualsAndHashCode public class TopicTypeJsonValue { private String name; private Integer age; } TopicTypeJson topicType1 = new TopicTypeJson(); topicType1.setId(\\\"1231\\\"); topicType1.setStars(123); TopicTypeJsonValue topicTypeJsonValue = new TopicTypeJsonValue(); topicTypeJsonValue.setName(\\\"123\\\"); topicTypeJsonValue.setAge(456); topicType1.setTitle(topicTypeJsonValue);//直接插入对象实体 topicType1.setTopicType(TopicTypeEnum.CLASSER.getCode()); topicType1.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType1).executeRows(); ==> Preparing: INSERT INTO `t_topic_type` (`id`,`stars`,`title`,`topic_type`,`create_time`) VALUES (?,?,?,?,?) ==> Parameters: 1231(String),123(Integer),{\\\"age\\\":456,\\\"name\\\":\\\"123\\\"}(String),9(Integer),2023-05-23T22:40:18.698(LocalDateTime) <== Total: 1 TopicTypeJson topicTypeVO = easyQuery.queryable(TopicTypeJson.class) .whereById(\\\"1231\\\") .firstOrNull(); System.out.println(topicTypeVO); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 1231(String) <== Time Elapsed: 2(ms) <== Total: 1 TopicTypeJson(id=1231, stars=123, title=TopicTypeJsonValue(name=123, age=456), topicType=9, createTime=2023-05-23T22:40:19) \",\"这样我们就实现了对应的值类型转换和枚举的转换\"]},\"580\":{\"h\":\"函数自增属性\",\"t\":[\"easy-query支持以数据库函数生成列值,比如通过自定义nextId()函数来实现插入时生成对应的id列,而不是普通的对象属性列.\"]},\"581\":{\"h\":\"自定义函数创建数据库自动生成列\",\"t\":[\"数据库对象,必须设置generatedKey为true,表示为自动生成的,如果不添加generatedSQLColumnGenerator那么将会视为自增列一样,不加入insert语句由数据库生成\",\"@Data @Table(\\\"custom_increment\\\") public class CustomIncrement { @Column(primaryKey = true,generatedKey = true, generatedSQLColumnGenerator = MyDatabaseIncrementSQLColumnGenerator.class) private String id; private String name; private String address; } \",\"自定义插入列函数\",\"public class MyDatabaseIncrementSQLColumnGenerator implements GeneratedKeySQLColumnGenerator { @Override public void configure(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { sqlPropertyConverter.sqlNativeSegment(\\\"mysqlNextId()\\\"); } } \",\"假设我定义了mysql的函数mysqlNextId自动生成主键id由mysql数据库函数来实现\",\"CustomIncrement customIncrement=new CustomIncrement(); //customIncrement.setId();//无论是否设置都会用 mysqlNextId 作为插入函数 customIncrement.setName(\\\"name\\\"); customIncrement.setAddress(\\\"address\\\"); easyQuery.insertable(customIncrement) .executeRows(); INSERT INTO `custom_increment` (`id`,`name`,`address`) VALUES (mysqlNextId(),?,?) \"]},\"582\":{\"h\":\"案例场景\",\"t\":[\"pgsql的geo数据新增或者自定义数据库函数生成列时,仅新增时调用\"]},\"583\":{\"h\":\"增强属性\",\"t\":[\"easy-query提供了数据库函数列值转换,可以完美的实现java对象和数据库列的函数互相交换,比如数据库函数加密、解密、base64 编码、解码等数据库函数对\"]},\"584\":{\"h\":\"mysql加密解密\",\"t\":[\"《数据库列加密》 这一篇文章我们讲解了如何使用java代码来实现数据库列的加密解密,接下来我将使用数据库函数来实现\",\"AES_DECRYPT(from_base64(receiver_mobile)\",\"方法\",\"默认值\",\"to_base64(AES_ENCRYPT('手机号值'),'秘钥')\",\"将数据进行aes加密,然后进行base64编码\",\"AES_DECRYPT(from_base64('手机号列'),'秘钥')\",\"将数据进行base64解码,然后进行aes进行解密\"]},\"585\":{\"h\":\"ColumnValueSQLConverter\",\"t\":[\"说明!!!\",\"支持join和下多表的自动识别表别名而无需自行处理别名\",\"方法\",\"作用域\",\"说明\",\"isRealColumn\",\"初始化判断是否是数据库存在的列\",\"如果当前是真实咧那么在当前表达式里面可以使用当前属性否则不可以\",\"isMergeSubQuery\",\"初始化判断是否是和其他数据表有交互\",\"作用于生成的sql是否会有别名\",\"selectColumnConvert\",\"仅作用到select投影上面\",\"用于做数据库列到java对象字段的函数处理比如 [AES_DECRYPT(from_base64(phone),'秘钥')]\",\"propertyColumnConvert\",\"当前列被当做片段时如何使用\",\"非select查询时被作为片段如何使用默认就是使用当前列\",\"valueConvert\",\"仅作用到insert,update set值,where条件值\",\"用于做java对象字段到数据库列的函数处理比如 [AES_DECRYPT(from_base64('手机号列'),'秘钥')]\",\" public interface ColumnValueSQLConverter { boolean isRealColumn(); /** * 是否是合并子查询 * @return */ boolean isMergeSubQuery(); /** * select查询 * * @param table * @param columnMetadata * @param sqlPropertyConverter */ void selectColumnConvert(@NotNull TableAvailable table, @NotNull ColumnMetadata columnMetadata, @NotNull SQLPropertyConverter sqlPropertyConverter, @NotNull QueryRuntimeContext runtimeContext); default void propertyColumnConvert(@NotNull TableAvailable table, @NotNull ColumnMetadata columnMetadata, @NotNull SQLPropertyConverter sqlPropertyConverter, @NotNull QueryRuntimeContext runtimeContext){ sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",c->c.expression(new SimpleSQLTableOwner(table),columnMetadata.getPropertyName())); } /** * insert update entity * update set * where * * @param table * @param columnMetadata * @param sqlParameter * @param sqlPropertyConverter * @param isCompareValue 当前值是用于比较还是存储 */ void valueConvert(@NotNull TableAvailable table, @NotNull ColumnMetadata columnMetadata, @NotNull SQLParameter sqlParameter, @NotNull SQLPropertyConverter sqlPropertyConverter, @NotNull QueryRuntimeContext runtimeContext, boolean isCompareValue); } \"]},\"586\":{\"h\":\"案例\",\"t\":[\" //@Component 如果是springboot的话 public class MySQLAesEncryptColumnValueSQLConverter implements ColumnValueSQLConverter { @Override public boolean isRealColumn() { return true; } @Override public boolean isMergeSubQuery() { return false; } /** * 数据加密秘钥 */ private static final String SECRET=\\\"1234567890123456\\\"; @Override public void selectColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { // Dialect dialect = runtimeContext.getQueryConfiguration().getDialect(); sqlPropertyConverter.sqlNativeSegment(\\\"AES_DECRYPT(from_base64({0}),{1})\\\",context->{ context .expression(columnMetadata.getPropertyName())//采用变量是因为可能出现join附带别名所以需要变量 .value(SECRET) .setAlias(columnMetadata.getName()); //.constValue(dialect.getQuoteName(columnMetadata.getName()));//如果这边也是用变量就会导致join下不是别名而是带具体表的列比如:t.`phone` }); } @Override public void propertyColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",c->c.expression(new SimpleSQLTableOwner(table),columnMetadata.getPropertyName())); } @Override public void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext,boolean isCompareValue) { sqlPropertyConverter.sqlNativeSegment(\\\"to_base64(AES_ENCRYPT({0},{1}))\\\",context->{ context.value(sqlParameter).value(SECRET); }); } } //非springboot或者多数据源之类的可以通过获取对应的QueryConfiguration进行添加 //QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); //QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); //configuration.applyColumnValueSQLConverter(new MySQLAesEncryptColumnValueSQLConverter()); //java对象 @Data @Table(\\\"t_sys_user_sql_encryption\\\") @ToString public class SysUserSQLEncryption { @Column(primaryKey = true) private String id; private String username; @Column(sqlConversion = MySQLAesEncryptColumnValueSQLConverter.class)//添加这个列为加密列 private String phone; private String idCard; private String address; private LocalDateTime createTime; } \"]},\"587\":{\"h\":\"新增数据\",\"t\":[\"SysUserSQLEncryption user = new SysUserSQLEncryption(); user.setId(\\\"12345\\\"); user.setUsername(\\\"username\\\"); user.setPhone(\\\"13232456789\\\"); user.setIdCard(\\\"12345678\\\"); user.setAddress(\\\"xxxxxxx\\\"); user.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(user).executeRows(); //插入语句采用手机号加密 ==> Preparing: INSERT INTO `t_sys_user_sql_encryption` (`id`,`username`,`phone`,`id_card`,`address`,`create_time`) VALUES (?,?,to_base64(AES_ENCRYPT(?,?)),?,?,?) ==> Parameters: 12345(String),username(String),13232456789(String),1234567890123456(String),12345678(String),xxxxxxx(String),2023-08-10T14:09:32.109(LocalDateTime) <== Total: 1 \"]},\"588\":{\"h\":\"查询数据\",\"t\":[\"单表\",\"SysUserSQLEncryption sysUserSQLEncryption = easyQuery.queryable(SysUserSQLEncryption.class) .whereById(\\\"12345\\\") .firstOrNull(); //查询语句采用手机号列解密 ==> Preparing: SELECT `id`,`username`,AES_DECRYPT(from_base64(`phone`),?) AS `phone`,`id_card`,`address`,`create_time` FROM `t_sys_user_sql_encryption` WHERE `id` = ? LIMIT 1 ==> Parameters: 1234567890123456(String),12345(String) <== Time Elapsed: 4(ms) <== Total: 1 SysUserSQLEncryption(id=12345, username=username, phone=13232456789, idCard=12345678, address=xxxxxxx, createTime=2023-08-10T14:10:33) \"]},\"589\":{\"h\":\"更新数据\",\"t\":[\"SysUserSQLEncryption sysUserSQLEncryption = easyQuery.queryable(SysUserSQLEncryption.class) .whereById(\\\"12345\\\") .firstOrNull(); sysUserSQLEncryption.setPhone(\\\"111123456\\\"); long l2 = easyQuery.updatable(sysUserSQLEncryption).executeRows(); ==> Preparing: UPDATE `t_sys_user_sql_encryption` SET `username` = ?,`phone` = to_base64(AES_ENCRYPT(?,?)),`id_card` = ?,`address` = ?,`create_time` = ? WHERE `id` = ? ==> Parameters: username(String),111123456(String),1234567890123456(String),12345678(String),xxxxxxx(String),2023-08-10T14:17:12(LocalDateTime),12345(String) <== Total: 1 \"]},\"590\":{\"h\":\"按列更新\",\"t\":[\" long l1 = easyQuery.updatable(SysUserSQLEncryption.class) .set(SysUserSQLEncryption::getPhone, \\\"1111234\\\") .whereById(\\\"12345\\\").executeRows(); ==> Preparing: UPDATE `t_sys_user_sql_encryption` SET `phone` = to_base64(AES_ENCRYPT(?,?)) WHERE `id` = ? ==> Parameters: 1111234(String),1234567890123456(String),12345(String) <== Total: 1 \",\"多表join查询\",\"SysUserSQLEncryption sysUserSQLEncryption1 = easyQuery.queryable(SysUserSQLEncryption.class) .leftJoin(Topic.class, (t, t1) -> t.eq(t1, SysUserSQLEncryption::getId, Topic::getId)) .where((t, t1) -> t.eq(SysUserSQLEncryption::getPhone, \\\"1111234\\\")) .select(SysUserSQLEncryption.class, (t, t1) -> t.columnAll()) .firstOrNull(); //注意这边列会自动带上具体的表名而不是简单的拼接所以在join条件下也无需关心别名 ==> Preparing: SELECT t.`id`,t.`username`,AES_DECRYPT(from_base64(t.`phone`),?) AS `phone`,t.`id_card`,t.`address`,t.`create_time` FROM `t_sys_user_sql_encryption` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` WHERE t.`phone` = to_base64(AES_ENCRYPT(?,?)) LIMIT 1 ==> Parameters: 1234567890123456(String),1111234(String),1234567890123456(String) <== Time Elapsed: 3(ms) <== Total: 1 \",\"说明!!!\",\"如果采用加密对进行处理那么默认是不支持like函数的,因为为了高性能默认easy-query采用的是对表达式条件值进行加密匹配而不是数据库列解密匹配,如果需要支持解密可以采用上一篇文章的加密方式,可以实现高性能的加密列like\"]},\"591\":{\"h\":\"相关博客\",\"t\":[\"《数据库列加密解密脱敏》\"]},\"592\":{\"h\":\"状态计算属性\",\"t\":[\"比如您有一张证书表,证书表存在证书过期时间,那么证书有个动态的隐藏属性叫做状态,证书是否过期可以通过这个状态来实现\",\"临期、过期、未过期\",\" @Table(\\\"t_certificate\\\") @Data @EntityProxy public class Certificate implements ProxyEntityAvailable<Certificate , CertificateProxy> { @Column(primaryKey = true) private String id; /** * 证书名称 */ private String name; /** * 创建时间 */ private LocalDateTime createTime; /** * 过期时间 */ private String invalidTime; @Column(sqlConversion = CertStatusColumnValueSQLConverter.class) //因为不是真实列所以不需要插入 @InsertIgnore //因为不是真实列所以不需要修改 @UpdateIgnore private CertStatusEnum status; } @Getter public enum CertStatusEnum implements IEnum<CertStatusEnum> { NORMAL(1,\\\"正常\\\"), WILL_INVALID(2,\\\"临期\\\"), INVALID(3,\\\"过期\\\"); private final Integer code; private final String name; CertStatusEnum(Integer code,String name){ this.code = code; this.name = name; } @Override public CertStatusEnum valueOf(Integer enumValue) { switch (enumValue){ case 1:return NORMAL; case 2:return WILL_INVALID; case 3:return INVALID; } throw new UnsupportedOperationException(); } } //证书状态值 @Component//非springboot自行注册比如solon public class CertStatusColumnValueSQLConverter implements ColumnValueSQLConverter { @Override public boolean isRealColumn() { //他不是一个真实存在的列所以返回false return false; } @Override public boolean isMergeSubQuery() { //期间没有用到别的数据库所以是false return false; } @Override public void selectColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); //计算出两者天数差值 前面是大的时间后面是小的时间 SQLFunction durationDay = fx.duration(x->x.column(table,\\\"invalidTime\\\").sqlFunc(fx.now()), DateTimeDurationEnum.Days); //计算出来的时间如果大于30天表示是正常的,大于等于0表示临期的小于0表示过期的 SQLFunction sqlFunction = fx.anySQLFunction(\\\"(CASE WHEN {0}>30 THEN 1 WHEN {0}>=0 THEN 2 ELSE 3 END)\\\", c -> { c.sqlFunc(durationDay); }); String sqlSegment = sqlFunction.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ sqlFunction.consume(context.getSQLNativeChainExpressionContext()); context.setAlias(columnMetadata.getName());//因为是返回所以需要设置别名 }); } @Override public void propertyColumnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { SQLFunc fx = runtimeContext.fx(); SQLFunction durationDay = fx.duration(x->x.column(table,\\\"invalidTime\\\").sqlFunc(fx.now()), DateTimeDurationEnum.Days); SQLFunction sqlFunction = fx.anySQLFunction(\\\"(CASE WHEN {0}>30 THEN 1 WHEN {0}>=0 THEN 2 ELSE 3 END)\\\", c -> { c.sqlFunc(durationDay); }); String sqlSegment = sqlFunction.sqlSegment(table); sqlPropertyConverter.sqlNativeSegment(sqlSegment,context->{ sqlFunction.consume(context.getSQLNativeChainExpressionContext()); //当做属性用所以不需要别名 }); } @Override public void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext, boolean isCompareValue) { //因为不做插入和修改所以这个status属性被用作条件比较的时候条件值还是原先的值 sqlPropertyConverter.sqlNativeSegment(\\\"{0}\\\",context->{ context.value(sqlParameter); }); } } //注册计算属性 QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyColumnValueSQLConverter(new CertStatusColumnValueSQLConverter()); \"]},\"593\":{\"h\":\"查询\",\"t\":[\"List<Certificate> list = easyEntityQuery.queryable(Certificate.class) .toList(); SELECT `id`, `name`, `create_time`, `invalid_time`, (CASE WHEN timestampdiff(DAY, NOW(), `invalid_time`)>30 THEN 1 WHEN timestampdiff(DAY, NOW(), `invalid_time`)>=0 THEN 2 ELSE 3 END) AS `status` FROM `t_certificate` \"]},\"594\":{\"h\":\"筛选\",\"t\":[\" List<Certificate> list = easyEntityQuery.queryable(Certificate.class) .where(c -> c.status().eq(CertStatusEnum.NORMAL)) .toList(); SELECT `id`, `name`, `create_time`, `invalid_time`, (CASE WHEN timestampdiff(DAY, NOW(), `invalid_time`)>30 THEN 1 WHEN timestampdiff(DAY, NOW(), `invalid_time`)>=0 THEN 2 ELSE 3 END) AS `status` FROM `t_certificate` WHERE ( CASE WHEN timestampdiff(DAY, NOW(), `invalid_time`)>30 THEN 1 WHEN timestampdiff(DAY, NOW(), `invalid_time`)>=0 THEN 2 ELSE 3 END ) = 1 \"]},\"595\":{\"h\":\"排序\",\"t\":[\" List<Certificate> list = easyEntityQuery.queryable(Certificate.class) .where(c -> c.status().eq(CertStatusEnum.NORMAL)) .orderBy(c -> c.status().asc()) .toList(); -- 第1条sql数据 SELECT `id`, `name`, `create_time`, `invalid_time`, (CASE WHEN timestampdiff(DAY, NOW(), `invalid_time`)>30 THEN 1 WHEN timestampdiff(DAY, NOW(), `invalid_time`)>=0 THEN 2 ELSE 3 END) AS `status` FROM `t_certificate` WHERE ( CASE WHEN timestampdiff(DAY, NOW(), `invalid_time`)>30 THEN 1 WHEN timestampdiff(DAY, NOW(), `invalid_time`)>=0 THEN 2 ELSE 3 END ) = 1 ORDER BY (CASE WHEN timestampdiff(DAY, NOW(), `invalid_time`)>30 THEN 1 WHEN timestampdiff(DAY, NOW(), `invalid_time`)>=0 THEN 2 ELSE 3 END) ASC \"]},\"596\":{\"h\":\"查询\",\"t\":[\"easy-query在java的静态语言特性下，参考众多C# ORM(efcore,freesql,sqlsugar...),和java ORM(mybatis-plus,beetlsql...)实现了支持单表多表，复杂，嵌套的sql表达式，并且拥有强类型语法提示，可以帮助不想写sql的用户，有洁癖的用户多一个选择.\"]},\"597\":{\"h\":\"单表查询\"},\"598\":{\"h\":\"多表\"},\"599\":{\"h\":\"嵌套多表\"},\"600\":{\"h\":\"自定义VO返回结果\",\"t\":[\" @Data public class BlogEntityTest2 { /** * 标题 */ private String title; /** * 内容 */ private String content; /** * 博客链接 */ @Column(\\\"my_url\\\") private String url; /** * 点赞数 */ private Integer star; /** * 发布时间 */ private LocalDateTime publishTime; /** * 评分 */ private BigDecimal score; /** * 状态 */ private Integer status; /** * 排序 */ private BigDecimal order; /** * 是否置顶 */ private Boolean isTop; /** * 是否置顶 */ private Boolean top; } \"]},\"601\":{\"h\":\"API\",\"t\":[\"方法\",\"参数\",\"返回\",\"描述\",\"streamBy\",\"Function<Stream<T>,TR> fetcher\",\"任意stream的终结方法\",\"使用java方式只需要迭代一次返回符合stream的结果\",\"toSql\",\"string\",\"返回当前表达式即将执行的sql语句\",\"any\",\"boolean\",\"返回当前表达式是在数据库中是否存在匹配项,存在至少一条返回true,无法匹配任意一条在返回false\",\"required\",\"void\",\"返回当前表达式是在数据库中是否存在匹配项,存在至少一条,无法匹配任意一条抛错\",\"all\",\"lambda\",\"boolean\",\"返回当前表达式是在数据库中是否所有的都匹配,参数为符合条件的表达式\",\"count\",\"long\",\"返回当前表达式在数据库中命中的条数有多少,没有匹配数返回0\",\"firstOrNull\",\"TEntity\",\"返回当前表达式在数据库中命中的第一条,如果没命中就返回null\",\"toList\",\"List<TEntity>\",\"返回当前表达式在数据库中命中的所有结果,如果没有结果则返回空集合\",\"where\",\"lambda\",\"this\",\"对当前表达式进行条件追加\",\"limit\",\"1.offset,2.rows\",\"this\",\"对当前表达式进行查询结果返回和偏移进行限制，offset表示跳过多少条，limit表示获取多少条\",\"orderBy\",\"lambda\",\"this\",\"对当前表达式进行查询结果进行排序\",\"sumBigDecimalOrDefault\",\"lambda,默认值\",\"BigDecimal\",\"用于对lambda列进行求和,返回结果BigDecimal防止结果溢出\",\"sumOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行求和\",\"maxOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行最大值查询\",\"minOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行最小值查询\",\"avgOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行平均值值查询\",\"lenOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行长度查询\",\"whereById\",\"object 主键\",\"this\",\"添加单主键条件\",\"whereObject\",\"object 查询对象\",\"this\",\"添加对象查询条件\",\"groupBy\",\"lambda\",\"this\",\"查询分组\",\"having\",\"lambda\",\"this\",\"查询对分组结果进行筛选\",\"orderByDynamic\",\"EasyDynamicOrderByConfiguration\",\"this\",\"添加查询动态排序\",\"distinct\",\"this\",\"对查询结果进行去重\",\"toPageResult\",\"long,long\",\"PageResult\",\"对结果进行先count，然后limit+toList查询结果并且封装成PageResult返回\",\"toShardingPageResult\",\"long,long,sequenceCountLine\",\"PageResult\",\"支持高性能分片下的分页查询,如果第三个参数为null那么和toPageResult行为一致\",\"leftJoin\",\"lambda\",\"this\",\"左链接\",\"rightJoin\",\"lambda\",\"this\",\"右链接\",\"innerJoin\",\"lambda\",\"this\",\"内链接\",\"disableLogicDelete\",\"this\",\"本次查询不启用逻辑删除\",\"enableLogicDelete\",\"this\",\"本次查询启用逻辑删除\",\"noInterceptor\",\"this\",\"本次查询不使用拦截器\",\"noInterceptor\",\"name\",\"this\",\"不使用指定name的拦截器\",\"useInterceptor\",\"this\",\"本次查询使用拦截器\",\"useInterceptor\",\"name\",\"this\",\"使用指定name的拦截器\",\"asTracking\",\"this\",\"本次查询使用追踪，需要开启追踪后才有效\",\"asNoTracking\",\"this\",\"本次查询不使用追踪,默认就是不使用追踪\",\"asTable\",\"tableName\",\"this\",\"指定本次查询最近的表的表名,如果最近的表是匿名表则设置表别名alias\",\"asTable\",\"lambda\",\"this\",\"指定本次查询最近的表的表名,如果最近的表是匿名表则设置表别名alias,表达式入参为现有表名返回设置的表名\",\"union\",\"queryable\",\"this\",\"union 查询\",\"unionAll\",\"queryable\",\"this\",\"union all查询\"]},\"602\":{\"h\":\"匿名类型查询\",\"t\":[\"lambda表达式树模式\",\"lambda表达式树模式的用户请看后面的select\"]},\"603\":{\"h\":\"背景\",\"t\":[\"如果一个orm没有匿名对象那么在返回自定义列的时候就需要新建一个VO来接受,不然返回整个对象会导致下层方法无法得知哪个属性没有被查询,所以匿名对象的存在非常有意义\"]},\"604\":{\"h\":\"场景\",\"t\":[\"需要统计返回id+count+sum之类的结果用于中间业务处理\",\"//查询基础表信息 //查询聚合id group获取count+sum //返回结果 \",\"在如上的业务代码中因为需要有id+group+count+sum所以我们不得不去定义一个中间对象来处理,再比如多级查询需要对结果进行匿名处理后在筛选,比如我要对topic进行查询聚合然后结果再去join基本配置表获取信息\"]},\"605\":{\"h\":\"draft\",\"t\":[\"匿名对象需要返回select+Select.DRAFT.of(...)你可以简单理解为一种草稿类型,也可以理解为tuple类型\"]},\"606\":{\"h\":\"案例一\",\"t\":[\"List<Draft2<String, Long>> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().like(\\\"123\\\"); o.createTime().ge(LocalDateTime.of(2022, 2, 1, 3, 4)); }) .groupBy(o -> GroupKeys.TABLE1.of(o.id())) .select(o -> Select.DRAFT.of( o.key1(), o.count() )) .toList(); \",\" -- 第1条sql数据 SELECT t.`id` AS `value1`, COUNT(*) AS `value2` FROM `t_topic` t WHERE t.`title` LIKE '%123%' AND t.`create_time` >= '2022-02-01 03:04' GROUP BY t.`id` \"]},\"607\":{\"h\":\"案例二\",\"t\":[\"多层嵌套匿名表sql\",\" List<Draft2<String, String>> list = easyEntityQuery.queryable(Topic.class).limit(100) .select(o -> Select.DRAFT.of(o.id(), o.stars())) .leftJoin(BlogEntity.class, (t, t1) -> t.value1().eq(t1.id())) .select((a, b) -> Select.DRAFT.of(a.value1(), b.url())) .innerJoin(BlogEntity.class, (t, t1) -> t.value2().eq(t1.id())) .select((a, b) -> Select.DRAFT.of(a.value1(), b.url())).toList(); \",\" -- 第1条sql数据 SELECT t3.`value1` AS `value1`, t4.`url` AS `value2` FROM (SELECT t1.`value1` AS `value1`, t2.`url` AS `value2` FROM (SELECT t.`id` AS `value1`, t.`stars` AS `value2` FROM `t_topic` t LIMIT 100) t1 -- select(o -> Select.DRAFT.of(o.id(), o.stars())) LEFT JOIN `t_blog` t2 ON t2.`deleted` = false AND t1.`value1` = t2.`id` ) t3 -- select((a, b) -> Select.DRAFT.of(a.value1(), b.url())) INNER JOIN `t_blog` t4 ON t4.`deleted` = false AND t3.`value2` = t4.`id` -- select((a, b) -> Select.DRAFT.of(a.value1(), b.url())) \"]},\"608\":{\"h\":\"注意\",\"t\":[\"draft草稿类型需要提供具体类型不然则已jdbc.resultSet.getObject来处理获取列可以通过setPropertyType来确定\",\" List<Draft3<String, LocalDateTime, String>> list = easyEntityQuery .queryable(BlogEntity.class) .select(t -> Select.DRAFT.of(t.id(), t.createTime(), t.sql(\\\"1\\\").setPropertyType(String.class)//因为t.sql返回的是自定义sql片段无法知晓具体类型所以通过setPropertyType(String.class)来确定 )) .toList(); \",\"修正类型,此处count默认返回long类型但是star可接受类型为integer所以可以通过setPropertyType(Integer.class)来修正当然也可以用o.intCount()函数\",\"List<BlogEntity> list = easyEntityQuery.queryable(BlogEntity.class) .where(o -> o.id().eq(\\\"123\\\" )) .groupBy(o -> GroupKeys.TABLE1.of(o.id())) .having(o -> { o.count().ne(1); o.sum(o.group().star()).ge(10); }) .select(o -> new BlogEntityProxy().adapter(r->{ r.id().set(o.key1()); r.star().set(o.count(o.group().id()).setPropertyType(Integer.class)); r.title().set(o.max(o.group().id())); })).toList(); \"]},\"609\":{\"h\":\"基本类型查询\",\"t\":[\"easy-query提供了针对基本类型的查询功能,如果您只需要返回基本类型那么不需要额外定义复杂的对象,并且支持map等数据结构\"]},\"610\":{\"h\":\"String\"},\"611\":{\"h\":\"Integer\"},\"612\":{\"h\":\"Map\",\"t\":[\"返回结果为Map<String,Object> ,默认Key忽略大小写(Locale.ENGLISH)\"]},\"613\":{\"h\":\"支持的类型\",\"t\":[\"类型\",\"是否支持\",\"String\",\"✅\",\"BigDecimal\",\"✅\",\"Boolean\",\"✅\",\"Byte[]\",\"✅\",\"Byte\",\"✅\",\"Double\",\"✅\",\"Float\",\"✅\",\"Integer\",\"✅\",\"LocalDate\",\"✅\",\"LocalDateTime\",\"✅\",\"LocalTime\",\"✅\",\"Long\",\"✅\",\"Map\",\"✅\",\"Short\",\"✅\",\"java.sql.Date\",\"✅\",\"Time\",\"✅\",\"Timestamp\",\"✅\",\"java.util.Date\",\"✅\"]},\"614\":{\"h\":\"CaseWhen\",\"t\":[\"easy-query可以自定义实现case when,其中框架默认提供多种实现\",\"方法\",\"描述\",\"用法\",\"SQLClientFunc\",\"支持EasyQueryClient表达式api\",\"SQLClientFunc.caseWhenBuilder(t).caseWhen(f -> f.eq(\\\"title\\\", \\\"123\\\"), \\\"111\\\").caseWhen(f -> f.eq(\\\"title\\\", \\\"456\\\"), \\\"222\\\").elseEnd(\\\"2223\\\")\",\"SQL4JFunc\",\"支持EasyQuery表达式api\",\"SQL4JFunc.caseWhenBuilder(o).caseWhen(f -> f.eq(Topic::getTitle, \\\"123\\\"), \\\"111\\\").caseWhen(f -> f.eq(Topic::getTitle, \\\"456\\\"), \\\"222\\\").elseEnd(\\\"2223\\\")\",\"SQL4KtFunc\",\"支持EasyKtQuery表达式api\",\"SQL4KtFunc.caseWhenBuilder(selector).caseWhen(f -> f.eq(t.title(), \\\"123\\\"), \\\"111\\\").caseWhen(f -> f.eq(t.title(), \\\"456\\\"), \\\"222\\\").elseEnd(\\\"2223\\\")\",\"SQLProxyFunc\",\"支持EasyProxyQuery表达式api\",\"SQLProxyFunc.caseWhenBuilder(selector).caseWhen(f -> f.eq(t.title(), \\\"123\\\"), \\\"111\\\").caseWhen(f -> f.eq(t.title(), \\\"456\\\"), \\\"222\\\").elseEnd(\\\"2223\\\")\"]},\"615\":{\"h\":\"简单查询\",\"t\":[\"//proxy代理模式 TopicProxy table = TopicProxy.createTable(); List<Topic> list = easyProxyQuery.queryable(table) .where(filter -> filter.like(table.title(), \\\"someTitle\\\")) .select(TopicProxy.createTable(), selector -> selector .sqlSegmentAs( SQLProxyFunc.caseWhenBuilder(selector) .caseWhen(f -> f.eq(table.title(), \\\"123\\\"), \\\"111\\\") .caseWhen(f -> f.eq(table.title(), \\\"456\\\"), \\\"222\\\") .elseEnd(\\\"222\\\") , TopicProxy::title) .column(table.id()) ).toList(); ==> Preparing: SELECT CASE WHEN t.`title` = ? THEN ? WHEN t.`title` = ? THEN ? ELSE ? END AS `title`,t.`id` FROM `t_topic` t WHERE t.`title` LIKE ? ==> Parameters: 123(String),111(String),456(String),222(String),222(String),%someTitle%(String) <== Time Elapsed: 3(ms) <== Total: 0 //lambda强类型模式 List<Topic> list = easyQuery.queryable(Topic.class) .where(t -> t.like(Topic::getTitle, \\\"someTitle\\\")) .select(Topic.class, t -> t .sqlSegmentAs( SQL4JFunc.caseWhenBuilder(t) .caseWhen(f -> f.eq(Topic::getTitle, \\\"123\\\"), \\\"111\\\") .caseWhen(f -> f.eq(Topic::getTitle, \\\"456\\\"), \\\"222\\\") .elseEnd(\\\"222\\\") , Topic::getTitle) .column(Topic::getId) ).toList(); ==> Preparing: SELECT CASE WHEN t.`title` = ? THEN ? WHEN t.`title` = ? THEN ? ELSE ? END AS `title`,t.`id` FROM `t_topic` t WHERE t.`title` LIKE ? ==> Parameters: 123(String),111(String),456(String),222(String),222(String),%someTitle%(String) <== Time Elapsed: 3(ms) <== Total: 0 //property属性模式 List<Topic> list = easyQueryClient.queryable(Topic.class) .where(t -> t.like(\\\"title\\\", \\\"someTitle\\\")) .select(Topic.class, t -> t .sqlSegmentAs( SQLClientFunc.caseWhenBuilder(t) .caseWhen(f -> f.eq(\\\"title\\\", \\\"123\\\"), \\\"111\\\") .caseWhen(f -> f.eq(\\\"title\\\", \\\"456\\\"), \\\"222\\\") .elseEnd(\\\"222\\\") , \\\"title\\\") .column(\\\"id\\\") ).toList(); ==> Preparing: SELECT CASE WHEN t.`title` = ? THEN ? WHEN t.`title` = ? THEN ? ELSE ? END AS `title`,t.`id` FROM `t_topic` t WHERE t.`title` LIKE ? ==> Parameters: 123(String),111(String),456(String),222(String),222(String),%someTitle%(String) <== Time Elapsed: 2(ms) <== Total: 0 \"]},\"616\":{\"h\":\"多条件CaseWhen\",\"t\":[\"有时候我们的case when需要实现多个条件而不是单一条件\",\"List<Topic> list = easyQuery.queryable(Topic.class) .innerJoin(BlogEntity.class,(t,t1)->t.eq(t1,Topic::getId,BlogEntity::getId)) .where(t -> t.like(Topic::getTitle, \\\"someTitle\\\")) .select(Topic.class, (t,t1) -> t .sqlSegmentAs( SQL4JFunc.caseWhenBuilder(t,t1) .caseWhen((f,f1) -> f.eq(Topic::getTitle, \\\"123\\\").then(f1).le(BlogEntity::getStar,100), \\\"111\\\") .caseWhen((f,f1) -> f.eq(Topic::getTitle, \\\"456\\\").then(f1).ge(BlogEntity::getStar,200), \\\"222\\\") .elseEnd(\\\"222\\\") , Topic::getTitle) .column(Topic::getId) ).toList(); ==> Preparing: SELECT CASE WHEN t.`title` = ? AND t1.`star` <= ? THEN ? WHEN t.`title` = ? AND t1.`star` >= ? THEN ? ELSE ? END AS `title`,t.`id` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t.`title` LIKE ? ==> Parameters: 123(String),100(Integer),111(String),456(String),200(Integer),222(String),222(String),false(Boolean),%someTitle%(String) <== Time Elapsed: 10(ms) <== Total: 0 \"]},\"617\":{\"h\":\"动态排序\",\"t\":[\"easy-query针对api请求支持对象的动态排序功能,可以实现列表title的排序并且支持多级排序\"]},\"618\":{\"h\":\"ObjectSort\",\"t\":[\"实现动态排序接口\",\"方法\",\"默认值\",\"说明\",\"dynamicMode\",\"DynamicModeEnum.STRICT\",\"策略默认,严格模式下所有属性必须在对象属性里面不然会报错,如果是忽略模式那么就是忽略该属性\",\"useStrictMode\",\"true\",\"是否为严格模式\",\"configure\",\"-\",\"配置动态排序\"]},\"619\":{\"h\":\"ObjectSortBuilder\",\"t\":[\"实现动态排序配置器\",\"方法\",\"参数\",\"说明\",\"allowed\",\"排序属性\",\"允许那些属性可以排序,如果调用一次后,那么后续所有的属性必须在allowed里面\",\"notAllowed\",\"不允许排序属性\",\"不允许排序的属性,哪怕传递了也不会生效不会报错\",\"orderBy\",\"排序属性、是否正序、哪张表默认(0)\",\"排序属性表示按这个属性排序,是否正序表示排序是否使用ASC,默认表是0开始,join一张表就有两张表,如果严格模式,tableIndex不在上下文表中那么将会抛错\"]},\"620\":{\"h\":\"单字段动态排序\",\"t\":[\"首先我们实现ObjectSort接口的方法,传入builder对象排序属性和是否正序即可\",\"@Data public class BlogSortRequest implements ObjectSort { //需要排序的属性 private String sort; //是否正序 private Boolean asc; @Override public void configure(ObjectSortBuilder builder) { if(EasyStringUtil.isNotBlank(sort)&&asc!=null){ builder.orderBy(sort,asc); } } } BlogSortRequest blogSortRequest = new BlogSortRequest(); blogSortRequest.setSort(\\\"title\\\"); blogSortRequest.setAsc(true); String sql = easyQuery.queryable(BlogEntity.class) .orderByObject(blogSortRequest) .select(o->o.column(BlogEntity::getId).column(BlogEntity::getTitle) .column(BlogEntity::getContent)) .toSQL(); // SELECT `id`,`title`,`content` FROM `t_blog` WHERE `deleted` = ? ORDER BY `title` ASC \"]},\"621\":{\"h\":\"多字段组合动态排序\",\"t\":[\"请求对象中有一个集合,集合内部是一个每个属性采用何种排序方法\",\" @Data public class BlogSortMultiRequest implements ObjectSort { //需要排序的属性集合 private List<SortConfig> orders=new ArrayList<>(); @Override public void configure(ObjectSortBuilder builder) { for (SortConfig order : orders) { builder.orderBy(order.getProperty(),order.getAsc()); } } @Data public static class SortConfig{ //需要排序的字段 private String property; //是否正序 private Boolean asc; } } BlogSortMultiRequest blogSortRequest = new BlogSortMultiRequest(); BlogSortMultiRequest.SortConfig sortConfig = new BlogSortMultiRequest.SortConfig(); sortConfig.setProperty(\\\"title\\\"); sortConfig.setAsc(true); blogSortRequest.getOrders().add(sortConfig); BlogSortMultiRequest.SortConfig sortConfig1 = new BlogSortMultiRequest.SortConfig(); sortConfig1.setProperty(\\\"star\\\"); sortConfig1.setAsc(false); blogSortRequest.getOrders().add(sortConfig1); String sql = easyQuery.queryable(BlogEntity.class) .orderByObject(blogSortRequest) .select(o->o.column(BlogEntity::getId).column(BlogEntity::getTitle) .column(BlogEntity::getContent)) .toSQL(); // SELECT `id`,`title`,`content` FROM `t_blog` WHERE `deleted` = ? ORDER BY `title` ASC,`star` DESC \"]},\"622\":{\"h\":\"join动态排序\",\"t\":[\" @Data public class BlogSortJoinRequest implements ObjectSort { private List<SortConfig> orders=new ArrayList<>(); @Override public void configure(ObjectSortBuilder builder) { for (SortConfig order : orders) { //如果采用 createTime 排序那么就使用第二张表 int tableIndex = Objects.equals(order.getProperty(), \\\"createTime\\\") ? 1 : 0; builder.orderBy(order.getProperty(),order.getAsc(),tableIndex); } } @Data public static class SortConfig{ private String property; private Boolean asc; } } BlogSortJoinRequest blogSortRequest = new BlogSortJoinRequest(); BlogSortJoinRequest.SortConfig sortConfig = new BlogSortJoinRequest.SortConfig(); sortConfig.setProperty(\\\"title\\\"); sortConfig.setAsc(true); blogSortRequest.getOrders().add(sortConfig); BlogSortJoinRequest.SortConfig sortConfig1 = new BlogSortJoinRequest.SortConfig(); sortConfig1.setProperty(\\\"createTime\\\"); sortConfig1.setAsc(false); blogSortRequest.getOrders().add(sortConfig1); String sql = easyQuery.queryable(BlogEntity.class) .innerJoin(Topic.class,(t,t1)->t.eq(t1,BlogEntity::getId, Topic::getId)) .orderByObject(blogSortRequest) .select(o->o.column(BlogEntity::getId).column(BlogEntity::getTitle) .column(BlogEntity::getContent)) .toSQL(); // SELECT t.`id`,t.`title`,t.`content` FROM `t_blog` t INNER JOIN `t_topic` t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? ORDER BY t.`title` ASC,t1.`create_time` DESC \"]},\"623\":{\"h\":\"UISort\",\"t\":[\"如果你不想为每个查询定义专门的排序类可以添加通用自行实现\",\" public class UISort implements ObjectSort { private final Map<String, Boolean> sort; public UISort(Map<String,Boolean> sort){ this.sort = sort; } @Override public void configure(ObjectSortBuilder builder) { for (Map.Entry<String, Boolean> s : sort.entrySet()) { //自行判断key和value是否为null 因为是包装类型可能会出现npe // key为需要排序的属性,value表示需要排序是不是asc builder.orderBy(s.getKey(),s.getValue()); } } } \",\"排序交互全是属性所以完全可以避免sql注入的bug\",\"HashMap<String, Boolean> id = new HashMap<>(); id.put(\\\"id\\\", true);//id正序 id.put(\\\"title\\\", false);//标题倒序 String sql = easyQuery.queryable(BlogEntity.class) .orderByObject(new UISort(id)) .toSQL(); Assert.assertEquals(\\\"SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? ORDER BY `id` ASC,`title` DESC\\\",sql); HashMap<String, Boolean> id = new HashMap<>(); id.put(\\\"id1\\\", true);//id1属性不在BlogEntity里面所以会进行报错 id.put(\\\"title\\\", false); try { String sql = easyQuery.queryable(BlogEntity.class) .orderByObject(new UISort(id)) .toSQL(); }catch (EasyQueryOrderByInvalidOperationException exception){ Assert.assertEquals(\\\"id1\\\",exception.getPropertyName()); Assert.assertEquals(\\\"BlogEntity not found [id1] in entity class\\\",exception.getMessage()); } \"]},\"624\":{\"h\":\"动态表名\",\"t\":[\"easy-query针对分表对象目前已经支持了动态表名的处理,但是后续会将这一部分全部简化掉让用户无感。\"]},\"625\":{\"h\":\"api\",\"t\":[\"方法\",\"参数\",\"返回\",\"描述\",\"asTable(String tableName)\",\"String\",\"this\",\"设置最近表名名称\",\"asTable(Function<String,String> tableNameAs)\",\"Function<String,String>\",\"this\",\"设置最近表名名称\",\"asTable(String tableName)将当前表达式最近的一张表的表名修改成tableName,如果当前最近的表是正常的数据库表名,那么直接将表名改写,如果当前最近的表是匿名表比如嵌套queryable的表那么将alias改成对应的表名\",\"asTable(Function<String,String> tableNameAs)将当前表达式最近的一张表的表名修改成tableNameAs返回的表名,如果当前最近的表是正常的数据库表名,那么直接将表名改写,如果当前最近的表是匿名表比如嵌套queryable的表那么将alias改成对应的表名\",\"asTable(Function<String,String> tableNameAs)其中对应的参数是一个lambda表达式入参为现有表名,返回参数为最终确定的表名内部可以通过复杂计算甚至远程rpc调用都可以\"]},\"626\":{\"h\":\"案例\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.queryable(BlogEntity.class) .asTable(a -> \\\"aa_bb_cc\\\") .where(o -> o.eq(BlogEntity::getId, \\\"123\\\")).toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM aa_bb_cc t WHERE t.`deleted` = ? AND t.`id` = ? ==> Parameters: false(Boolean),123(String) <== Total: 0 List<BlogEntity> blogEntities = easyQuery.queryable(BlogEntity.class) .asTable(a->{ if(\\\"t_blog\\\".equals(a)){ return \\\"aa_bb_cc1\\\"; } return \\\"xxx\\\"; }) .where(o -> o.eq(BlogEntity::getId, \\\"123\\\")).toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM aa_bb_cc1 t WHERE t.`deleted` = ? AND t.`id` = ? ==> Parameters: false(Boolean),123(String) <== Total: 0 List<BlogEntity> x_t_blog = easyQuery .queryable(Topic.class) .asTable(o -> \\\"t_topic_123\\\") .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .asTable(\\\"x_t_blog\\\") .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle).then(t).eq(Topic::getId, \\\"3\\\")) .select(BlogEntity.class, (t, t1) -> t1.columnAll()).toList(); ==> Preparing: SELECT t1.`id`,t1.`create_time`,t1.`update_time`,t1.`create_by`,t1.`update_by`,t1.`deleted`,t1.`title`,t1.`content`,t1.`url`,t1.`star`,t1.`publish_time`,t1.`score`,t1.`status`,t1.`order`,t1.`is_top`,t1.`top` FROM t_topic_123 t INNER JOIN x_t_blog t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL AND t.`id` = ? ==> Parameters: false(Boolean),3(String) <== Total: 0 \"]},\"627\":{\"h\":\"动态条件\",\"t\":[\"通过springboot上传json对象实现条件查询,目前有两种解决方案,一个是动态条件来构建where,一个是通过object对象来实现动态查询\"]},\"628\":{\"h\":\"默认配置项\",\"t\":[\"模式\",\"优点\",\"缺点\",\"动态条件\",\"可以实现任意复杂条件构建\",\"对于大部分业务场景过于复杂\",\"对象查询\",\"可以快速实现基于dto的条件查询\",\"条件仅支持and,且属性名需要一致,不一致需要手动映射为一致\"]},\"629\":{\"h\":\"查询对象\",\"t\":[\" @Data public class BlogQuery1Request { /** * 标题 */ private String title; /** * 内容 */ private String content; /** * 点赞数 */ private Integer star; /** * 发布时间 */ private LocalDateTime publishTimeBegin; private LocalDateTime publishTimeEnd; /** * 评分 */ private BigDecimal score; /** * 状态 */ private Integer status; /** * 排序 */ private BigDecimal order; /** * 是否置顶 */ private Boolean isTop; private List<Integer> statusList=new ArrayList<>(); private List<Integer> statusNotList=new ArrayList<>(); } \"]},\"630\":{\"h\":\"动态条件\"},\"631\":{\"h\":\"条件接受\",\"t\":[\"1.4.31^以上版本支持ValueFilter 条件接收器,Queryable默认行为AnyValueFilter.DEFAULT所有的条件都接受,框架提供了一个可选NotNullOrEmptyValueFilter.DEFAULT当传入的条件参数值非null且字符串的情况下非空那么才会增加到条件里面,仅where条件生效。并且只有左侧是属性而非属性函数时才会生效如果左侧为函数那么将不会生效\",\"用户也可以自定义实现接口\",\"public interface ValueFilter { boolean accept(TableAvailable table, String property, Object value); } public class AnyValueFilter implements ValueFilter { public static final ValueFilter DEFAULT=new AnyValueFilter(); private AnyValueFilter(){ } @Override public boolean accept(TableAvailable table, String property, Object value) { return true; } } public class NotNullOrEmptyValueFilter implements ValueFilter { public static final ValueFilter DEFAULT=new NotNullOrEmptyValueFilter(); @Override public boolean accept(TableAvailable table, String property, Object value) { if(value==null){ return false; } if(value instanceof String){ return EasyStringUtil.isNotBlank((String) value); } return true; } } \",\" BlogQuery1Request query = new BlogQuery1Request(); query.setOrder(BigDecimal.valueOf(1)); query.setContent(\\\"标题\\\"); query.setPublishTimeBegin(LocalDateTime.now()); query.setPublishTimeEnd(LocalDateTime.now()); query.setStatusList(Arrays.asList(1,2)); List<BlogEntity> result = easyEntityQuery.queryable(BlogEntity.class) .filterConfigure(NotNullOrEmptyValueFilter.DEFAULT)//设置非null字符串非空 后续的where才会添加到条件中 .where(o -> { //当query.getContext不为空是添加查询条件 content like query.getContext o.content().like(query.getContent()); //当query.getOrder不为null是添加查询条件 content = query.getContext o.order().eq(query.getOrder()); //当query.getPublishTimeBegin()不为null添加左闭区间,右侧同理 publishTimeBegin <= publishTime <= publishTimeEnd o.publishTime().rangeClosed(query.getPublishTimeBegin(), query.getPublishTimeEnd()); //添加in条件 o.status().in(query.getStatusList()); }).toList(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `content` LIKE ? AND `order` = ? AND `publish_time` >= ? AND `publish_time` <= ? AND `status` IN (?,?) ==> Parameters: false(Boolean),%标题%(String),1(BigDecimal),2023-07-14T22:05:24.971(LocalDateTime),2023-07-14T22:05:24.971(LocalDateTime),1(Integer),2(Integer) <== Time Elapsed: 5(ms) <== Total: 0 BlogQuery1Request query = new BlogQuery1Request(); query.setContent(\\\"标题\\\"); query.setPublishTimeBegin(LocalDateTime.now()); query.setPublishTimeEnd(LocalDateTime.now()); query.setStatusList(Arrays.asList(1,2)); List<BlogEntity> result = easyQuery.queryable(BlogEntity.class) .filterConfigure(NotNullOrEmptyValueFilter.DEFAULT)//设置非null字符串非空 后续的where才会添加到条件中 .where(o -> { //当query.getContext不为空是添加查询条件 content like query.getContext o.content().like(query.getContent()); //当query.getOrder不为null是添加查询条件 content = query.getContext o.order().eq(query.getOrder());//不生效 //当query.getPublishTimeBegin()不为null添加左闭区间,右侧同理 publishTimeBegin <= publishTime <= publishTimeEnd o.publishTime().rangeClosed(query.getPublishTimeBegin(), query.getPublishTimeEnd()); //添加in条件 o.status().in(query.getStatusList()); }).toList(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `content` LIKE ? AND `publish_time` >= ? AND `publish_time` <= ? AND `status` IN (?,?) ==> Parameters: false(Boolean),%标题%(String),1(BigDecimal),2023-07-14T22:05:24.971(LocalDateTime),2023-07-14T22:05:24.971(LocalDateTime),1(Integer),2(Integer) <== Time Elapsed: 5(ms) <== Total: 0 \",\" String toSql = easyQuery .queryable(Topic.class) .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .leftJoin(BlogEntity.class, (t,t1, t2) -> t.eq(t2, Topic::getId, BlogEntity::getId)) .leftJoin(BlogEntity.class, (t, t1, t2, t3) -> t.eq(t3, Topic::getId, BlogEntity::getId)) .filterConfigure(NotNullOrEmptyValueFilter.DEFAULT)//设置非null字符串非空 后续的where才会添加到条件中 .where(o -> o.eq(Topic::getId, \\\"\\\")) //.filterConfigure(AnyValueFilter.DEFAULT)//恢复如果后面没有自定义where那么不需要恢复 .limit(1, 2) .toSQL(); // SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t // LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` // LEFT JOIN `t_blog` t2 ON t2.`deleted` = ? AND t.`id` = t2.`id` // LEFT JOIN `t_blog` t3 ON t3.`deleted` = ? AND t.`id` = t3.`id` // LIMIT 2 OFFSET 1 \",\"条件拦截,加入我的where条件大部分都符合极个别不符合可以通过提前返回不符的来保证剩余的都可以进行\",\"String id=\\\"\\\"; String userName=null; String nickname=\\\"BBB\\\"; Boolean leftEnable=true; String sql = easyQuery.queryable(DefTable.class) .leftJoin(DefTableLeft1.class, (t, t1) -> t.eq(t1, DefTable::getId, DefTableLeft1::getDefId)) .filterConfigure((t, p, v) -> {//分别是table，property，value if (\\\"id\\\".equals(p)) { //无论.eq(DefTable::getId, id) 这个方法属性为id的比较是啥结果都会添加到条件里面 return true; } return NotNullOrEmptyValueFilter.DEFAULT.accept(t, p, v); }) .where((t, t1) -> t .eq(DefTable::getId, id)//虽然id为空但是还是加入到了sql中 .eq(DefTable::getUserName, userName) .eq(DefTable::getNickname, nickname) .then(t1).eq(DefTableLeft1::getEnable, leftEnable)).toSQL(); // SELECT t.id,t.user_name,t.nickname,t.enable,t.score,t.mobile,t.avatar,t.number,t.status,t.created,t.options FROM t_def_table t // LEFT JOIN t_def_table_left1 t1 ON t.id = t1.def_id // WHERE t.id = ? AND t.nickname = ? AND t1.enable = ? \",\"注意点及说明!!!\",\"必须写到对应的where前面后续的where才会生效，用户可以自定义,比如满足的条件是优先满足eq、ge、gt等的第一个boolean条件,后续才会判断valueFilter，如果有多个where部分where需要自定义那么可以采用filterConfigure(NotNullOrEmptyValueFilter.DEFAULT)来恢复到所有参数都接受,一般用于查询时可以少写很多判断\"]},\"632\":{\"h\":\"属性一对一查询\",\"t\":[\"object的一个属性对应数据库查询的一列\",\"@EasyWhereCondition\",\"属性\",\"默认值\",\"描述\",\"strict\",\"true\",\"严格模式,如果属性没有映射到对象上报错,如果表tableIndex不在当前上下文中也报错\",\"tableIndex\",\"0\",\"当前条件用于查询哪张表\",\"allowEmptyStrings\",\"false\",\"是否允许空字符串,如果允许表示空也会加入到表达式内而不是忽略\",\"propName\",\"\\\"\\\"\",\"当前属性映射到数据库对象的属性名称,为空表示使用当前属性名\",\"type\",\"LIKE\",\"当前属性和数据库对象属性以哪种表达式构建条件\",\"mode\",\"SINGLE\",\"SINGLE:表示当前属性是一对一数据库列,MULTI_OR:表示当前值对多个数据库列并且用or来连接\",\"propNames\",\"[]\",\"当前属性映射到哪两个属性列\",\"tablesIndex\",\"[]\",\"可以和propNames长度不一样,不一样的代表0主表\",\"说明!!!\",\"属性默认是支持like,可以通过指定条件,如果查询属性与数据库对象属性不一致可以通过propName改写\",\" @Data public class BlogQuery2Request { /** * 标题 */ @EasyWhereCondition private String title; /** * 内容 */ @EasyWhereCondition private String content; /** * 点赞数 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.EQUAL) private Integer star; /** * 发布时间 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.RANGE_LEFT_CLOSED,propName = \\\"publishTime\\\") private LocalDateTime publishTimeBegin; @EasyWhereCondition(type = EasyWhereCondition.Condition.RANGE_RIGHT_CLOSED,propName = \\\"publishTime\\\") private LocalDateTime publishTimeEnd; /** * 评分 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.GREATER_THAN_EQUAL) private BigDecimal score; /** * 状态 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.LESS_THAN_EQUAL) private Integer status; /** * 排序 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.GREATER_THAN) private BigDecimal order; /** * 是否置顶 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.NOT_EQUAL) private Boolean isTop; /** * statusList没有对应的属性名称所以需要改写为映射到status */ @EasyWhereCondition(type = EasyWhereCondition.Condition.IN,propName = \\\"status\\\") private List<Integer> statusList=new ArrayList<>(); /** * statusNotList没有对应的属性名称所以需要改写为映射到status */ @EasyWhereCondition(type = EasyWhereCondition.Condition.NOT_IN,propName = \\\"status\\\") private List<Integer> statusNotList=new ArrayList<>(); } \"]},\"633\":{\"h\":\"动态查询条件1\",\"t\":[\" BlogQuery2Request query = new BlogQuery2Request(); query.setOrder(BigDecimal.valueOf(1)); query.setContent(\\\"标题\\\"); query.setPublishTimeBegin(LocalDateTime.now()); query.setPublishTimeEnd(LocalDateTime.now()); query.setStatusList(Arrays.asList(1,2)); List<BlogEntity> queryable = easyQuery.queryable(BlogEntity.class) .whereObject(query).toList(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `content` LIKE ? AND `publish_time` >= ? AND `publish_time` <= ? AND `order` = ? AND `status` IN (?,?) ==> Parameters: false(Boolean),%标题%(String),2023-07-14T22:37:47.865(LocalDateTime),2023-07-14T22:37:47.865(LocalDateTime),1(BigDecimal),1(Integer),2(Integer) <== Time Elapsed: 4(ms) <== Total: 0 BlogQuery2Request query = new BlogQuery2Request(); query.setContent(\\\"标题\\\"); query.setPublishTimeEnd(LocalDateTime.now()); query.setStatusList(Arrays.asList(1,2)); List<BlogEntity> queryable = easyQuery.queryable(BlogEntity.class) .whereObject(query).toList(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `content` LIKE ? AND `publish_time` <= ? AND `status` IN (?,?) ==> Parameters: false(Boolean),%标题%(String),2023-07-14T22:37:47.880(LocalDateTime),1(Integer),2(Integer) <== Time Elapsed: 2(ms) <== Total: 0 \"]},\"634\":{\"h\":\"属性一对多查询\",\"t\":[\"object的一个属性对应数据库查询的多列\",\" @Data public class BlogQueryRequest implements ObjectSort { /** * 标题 */ @EasyWhereCondition private String title; /** * 标题 */ @EasyWhereCondition(mode = EasyWhereCondition.Mode.MULTI_OR,propNames = {\\\"title\\\",\\\"content\\\"}) private String title2; /** * 标题 */ @EasyWhereCondition(mode = EasyWhereCondition.Mode.MULTI_OR,propNames = {\\\"id\\\",\\\"content\\\"},type = EasyWhereCondition.Condition.EQUAL) private String title3; /** * 内容 */ @EasyWhereCondition(propName = \\\"url\\\") private String content; /** * 点赞数 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.EQUAL) private Integer star; /** * 发布时间 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.RANGE_LEFT_CLOSED,propName = \\\"publishTime\\\") private LocalDateTime publishTimeBegin; @EasyWhereCondition(type = EasyWhereCondition.Condition.RANGE_RIGHT_CLOSED,propName = \\\"publishTime\\\") private LocalDateTime publishTimeEnd; /** * 评分 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.GREATER_THAN_EQUAL) private BigDecimal score; /** * 状态 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.LESS_THAN_EQUAL) private Integer status; /** * 排序 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.GREATER_THAN) private BigDecimal order; /** * 是否置顶 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.NOT_EQUAL) private Boolean isTop; @EasyWhereCondition(type = EasyWhereCondition.Condition.IN,propName = \\\"status\\\") private List<Integer> statusList=new ArrayList<>(); @EasyWhereCondition(type = EasyWhereCondition.Condition.NOT_IN,propName = \\\"status\\\") private List<Integer> statusNotList=new ArrayList<>(); private List<String> orders=new ArrayList<>(); @Override public void configure(ObjectSortBuilder builder) { for (String order : orders) { builder.orderBy(order,true); } } } BlogQueryRequest blogQueryRequest = new BlogQueryRequest(); blogQueryRequest.setTitle(\\\"123\\\"); blogQueryRequest.setTitle2(\\\"123\\\"); blogQueryRequest.setTitle3(\\\"123\\\"); blogQueryRequest.setContent(\\\"123\\\"); blogQueryRequest.setStar(123); blogQueryRequest.setPublishTimeBegin(LocalDateTime.now()); blogQueryRequest.setPublishTimeEnd(LocalDateTime.now()); blogQueryRequest.setScore(new BigDecimal(\\\"123\\\")); blogQueryRequest.setStatus(1); blogQueryRequest.setOrder(new BigDecimal(\\\"12\\\")); blogQueryRequest.setIsTop(false); blogQueryRequest.getOrders().add(\\\"status\\\"); blogQueryRequest.getOrders().add(\\\"score\\\"); String sql = easyQuery.queryable(BlogEntity.class) .whereObject(true, blogQueryRequest) .orderByObject(true, blogQueryRequest) .toSQL(); Assert.assertEquals(\\\"SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `title` LIKE ? AND (`title` LIKE ? OR `content` LIKE ?) AND (`id` = ? OR `content` = ?) AND `url` LIKE ? AND `star` = ? AND `publish_time` >= ? AND `publish_time` <= ? AND `score` >= ? AND `status` <= ? AND `order` > ? AND `is_top` <> ? ORDER BY `status` ASC,`score` ASC\\\", sql); \"]},\"635\":{\"h\":\"动态条件多表join\",\"t\":[\"通过修改@EasyWhereCondition的tableIndex或者tablesIndex(区别就是属性是否是对应多个属性)来指定当前属性对应的join的哪张表\",\"类型\",\"构建条件\",\"String\",\"不为null且不为空\",\"Integer\",\"不为null\",\"Short\",\"不为null\",\"Double\",\"不为null\",\"Float\",\"不为null\",\"BigDecimal\",\"不为null\",\"LocalDateTime\",\"不为null\",\"List\",\"不为null且不为空\",\"Array\",\"不为null且不为空\"]},\"636\":{\"h\":\"替换whereObject实现\",\"t\":[\"easy-query默认采用接口模式实现whereObject用户可以自行替换框架行为,甚至@EasyWhereCondition也可以自己实现\"]},\"637\":{\"h\":\"如何替换框架行为\",\"t\":[\"《替换框架行为❗️❗️❗️》\"]},\"638\":{\"h\":\"接口\",\"t\":[\"WhereObjectQueryExecutor 默认实现 DefaultWhereObjectQueryExecutor\",\"您可以自行实现这个并且使用自己的注解来配合使用\"]},\"639\":{\"h\":\"相关搜索\",\"t\":[\"注解查询动态查询dto查询json查询对象查询form查询表单查询\"]},\"640\":{\"h\":\"关联查询 Fill\",\"t\":[\"easy-query提供了注解配置以外的自定义填充数据,主要是针对配置外的方法,具体api为fillOne、fillMany,可以再查询时自定义关联属性(各自一个),并且支持直接select vo\",\"说明!!!\",\"暂时不支持proxy模式\"]},\"641\":{\"h\":\"api说明\",\"t\":[\"默认fill查询结果不消费null也就是produce里面不会消费null值\",\"<TREntity> Queryable<T1> fillOne(SQLFuncExpression1<SQLFillSelector, Queryable<TREntity>> fillSetterExpression, Property<TREntity, ?> targetProperty, Property<T1, ?> selfProperty, BiConsumer<T1, TREntity> produce) <TREntity> Queryable<T1> fillMany(SQLFuncExpression1<SQLFillSelector, Queryable<TREntity>> fillSetterExpression, Property<TREntity, ?> targetProperty,Property<T1, ?> selfProperty, BiConsumer<T1, Collection<TREntity>> produce) \",\"参数\",\"描述\",\"场景\",\"condition\",\"是否需要执行当前方法\",\"动态fill填充数据\",\"fillSetterExpression\",\"填充数据如何查询\",\"自定义填充数据\",\"targetProperty\",\"目标表就是fill返回的表的属性\",\"用于关联\",\"selfProperty\",\"当前主表的属性\",\"用于关联\",\"produce\",\"如何填充\",\"自定义填充数据\",\"consumeNull\",\"当关联结果为null是否也会调用produce\",\"过滤null或者不过滤\",\"List<Province> list = easyQuery.queryable(Province.class) .fillMany(x -> x.with(City.class).where(y -> y.eq(City::getCode, \\\"3306\\\")) , City::getProvinceCode , Province::getCode , (x, y) -> { x.setCities(new ArrayList<>(y)); }) .toList(); List<City> list1 = easyQuery.queryable(City.class) .fillOne(x -> x.with(Province.class), Province::getCode, City::getProvinceCode, (x, y) -> { x.setProvince(y); }) .toList(); \",\"vo转换\",\" EasyPageResult<Province> pageResult1 = easyQuery.queryable(Province.class) .fillMany(x -> x.consumeNull(true).with(City.class).where(y -> y.eq(City::getCode, \\\"3306\\\")).select(CityVO.class)//填充数据转成CityVO, , CityVO::getProvinceCode , Province::getCode , (x, y) -> { if (EasyCollectionUtil.isNotEmpty(y)) { CityVO first = EasyCollectionUtil.first(y);//获取第一条city并且赋值 x.setFirstCityName(first.getName()); } }) .toPageResult(1, 10); \"]},\"642\":{\"h\":\"分组\",\"t\":[\"easy-query提供了方便的分组查询功能的支持\",\"EntityQuery group 多表2张表及以上,group.groupTable()无法表示为对应的表,需要通过group.groupTable().t1......t10来表示\",\"List<BlogGroupIdAndName> list = easyEntityQuery.queryable(Topic.class) .leftJoin(BlogEntity.class, (t, b2) -> t.id().eq(b2.id())) .where((t, b2) -> { t.title().isNotNull(); t.createTime().le(LocalDateTime.of(2021, 3, 4, 5, 6)); }) .groupBy((t1, b2) -> GroupKeys.TABLE2.of(t1.id(), b2.star())) .select(group -> new BlogGroupIdAndNameProxy() .id().set(group.key1()) .idCount().set(group.groupTable().t2.id().count()) ).toList(); ==> Preparing: SELECT t.`id` AS `id`,COUNT(t1.`id`) AS `id_count` FROM `t_topic` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t.`title` IS NOT NULL AND t.`create_time` <= ? GROUP BY t.`id`,t1.`star` ==> Parameters: false(Boolean),2021-03-04T05:06(LocalDateTime) <== Time Elapsed: 7(ms) <== Total: 0 \",\"Lambda表达式树 group 多表2张表及以上时，group.聚合函数()的lambda入参个数等同于多表的数量，比方说A,B,C三张表查询的时候，查询B表的id字段的count时的lambda表达式为:group.count((t1,t2,t3) -> t2.getId())\",\"List<BlogGroupIdAndName> list = elq.queryable(Topic.class) .leftJoin(BlogEntity.class, (t, b2) -> t.getId() == b2.getId()) .where((t, b2) -> t.getTitle() != null && (t.getCreateTime().isEqual(LocalDateTime.of(2021, 3, 4, 5, 6)) || t.getCreateTime().isBefore(LocalDateTime.of(2021, 3, 4, 5, 6)) )) // 选择了两个元素的group .groupBy((t1, b2) -> new Grouper() { String k1 = t1.getId(); int k2 = b2.getStar(); }) .select(group -> { BlogGroupIdAndName blogGroupIdAndName = new BlogGroupIdAndName(); // group的k1(Topic表的id字段)映射到BlogGroupIdAndName类的id字段 blogGroupIdAndName.setId(group.key.k1); // group的k2(COUNT(BlogEntity表的id字段))映射到BlogGroupIdAndName类的idCount字段 blogGroupIdAndName.setIdCount(group.count((t1, t2) -> t2.getId())); return blogGroupIdAndName; }).toList(); ==> Preparing: SELECT t.`id` AS `id`,COUNT(t1.`id`) AS `id_count` FROM `t_topic` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t.`title` <> NULL AND (t.`create_time` = ? OR t.`create_time` < ?) GROUP BY t.`id`,t1.`star` ==> Parameters: null(Object),2021-03-04T05:06(LocalDateTime),2021-03-04T05:06(LocalDateTime) <== Time Elapsed: 7(ms) <== Total: 0 \"]},\"643\":{\"h\":\"多表查询\",\"t\":[\"easy-query提供了丰富的多表链接查询,并且支持匿名表链接查询\"]},\"644\":{\"h\":\"api变化\",\"t\":[\"当使用join操作后\",\"where存在两种重载,第一种就是单个参数,第二种是两个参数,单个参数为主表操作,两个参数为表顺序,可以通过链式调用then()来进行切换,select、groupBy.....同理\"]},\"645\":{\"h\":\"leftJoin\",\"t\":[\"Topic topic = easyQuery .queryable(Topic.class) .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where(o -> o.eq(Topic::getId, \\\"3\\\")) .firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM t_topic t LEFT JOIN t_blog t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),3(String) <== Total: 1 \"]},\"646\":{\"h\":\"innerJoin\",\"t\":[\" List<BlogEntity> blogEntities = easyQuery .queryable(Topic.class) .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle).then(t).eq(Topic::getId, \\\"3\\\")) .select(BlogEntity.class, (t, t1) -> t1.columnAll()) .toList(); ==> Preparing: SELECT t1.`id`,t1.`create_time`,t1.`update_time`,t1.`create_by`,t1.`update_by`,t1.`deleted`,t1.`title`,t1.`content`,t1.`url`,t1.`star`,t1.`publish_time`,t1.`score`,t1.`status`,t1.`order`,t1.`is_top`,t1.`top` FROM t_topic t INNER JOIN t_blog t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL AND t.`id` = ? ==> Parameters: false(Boolean),3(String) <== Total: 1 \"]},\"647\":{\"h\":\"嵌套Join\",\"t\":[\"//创建一个匿名表的表达式 Queryable<Topic> sql = easyQuery .queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"3\\\")); List<BlogEntity> topics = easyQuery .queryable(BlogEntity.class) .leftJoin(sql,(a,b)->a.eq(b,BlogEntity::getId,Topic::getId))//join匿名表 .where(o -> o.isNotNull(BlogEntity::getId).eq(BlogEntity::getId,\\\"3\\\")) .toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM t_blog t LEFT JOIN (SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM t_topic t WHERE t.`id` = ?) t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? AND t.`id` IS NOT NULL AND t.`id` = ? ==> Parameters: 3(String),false(Boolean),3(String) <== Total: 1 \"]},\"648\":{\"h\":\"group join\",\"t\":[\" Queryable<TopicGroupTestDTO> sql = easyQuery .queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"3\\\")) .groupBy(o->o.column(Topic::getId)) .select(TopicGroupTestDTO.class, o->o.columnAs(Topic::getId,TopicGroupTestDTO::getId).columnCount(Topic::getId,TopicGroupTestDTO::getIdCount)); List<BlogEntity> topics = easyQuery .queryable(BlogEntity.class) .leftJoin(sql,(a,b)->a.eq(b,BlogEntity::getId,TopicGroupTestDTO::getId)) .where(o -> o.isNotNull(BlogEntity::getId).eq(BlogEntity::getId,\\\"3\\\")) .toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM t_blog t LEFT JOIN (SELECT t.`id` AS `id`,COUNT(t.`id`) AS `idCount` FROM t_topic t WHERE t.`id` = ? GROUP BY t.`id`) t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? AND t.`id` IS NOT NULL AND t.`id` = ? ==> Parameters: 3(String),false(Boolean),3(String) <== Total: 1 \"]},\"649\":{\"h\":\"join2表以上\",\"t\":[\"//返回Queryable3那么可以对这个查询表达式进行后续操作,操作都是可以操作三张表的 Queryable3<Topic, BlogEntity, SysUser> where = easyQuery .queryable(Topic.class) //第一个join采用双参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity,对应关系就是参数顺序 .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId))//t表示Topic表,t1表示BlogEntity表,对应关系就是参数顺序 //第二个join采用三参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity 第三个参数表示第三张表 SysUser,对应关系就是参数顺序 .leftJoin(SysUser.class, (t, t1, t2) -> t.eq(t2, Topic::getId, SysUser::getId)) .where(o -> o.eq(Topic::getId, \\\"123\\\"))//单个条件where参数为主表Topic //支持单个参数或者全参数,全参数个数为主表+join表个数 链式写法期间可以通过then来切换操作表 .where((t, t1, t2) -> t.eq(Topic::getId, \\\"123\\\").then(t1).like(BlogEntity::getTitle, \\\"456\\\") .then(t2).eq(BaseEntity::getCreateTime, LocalDateTime.now())) //如果不想用链式的then来切换也可以通过lambda 大括号方式执行顺序就是代码顺序,默认采用and链接 .where((t, t1, t2) -> { t.eq(Topic::getId, \\\"123\\\"); t1.like(BlogEntity::getTitle, \\\"456\\\"); t1.eq(BaseEntity::getCreateTime, LocalDateTime.now()); }); //也支持单表的Queryable返回,但是这样后续操作只可以操作单表没办法操作其他join表了 Queryable<Topic> where = easyQuery .queryable(Topic.class) //第一个join采用双参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) //第二个join采用三参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity 第三个参数表示第三张表 SysUser .leftJoin(SysUser.class, (t, t1, t2) -> t.eq(t2, Topic::getId, SysUser::getId)) .where(o -> o.eq(Topic::getId, \\\"123\\\"))//单个条件where参数为主表Topic //支持单个参数或者全参数,全参数个数为主表+join表个数 链式写法期间可以通过then来切换操作表 //如果where参数过多不想写可以用whereMerge,selectMerge,orderByMerge同理 .where((t, t1, t2) -> t.eq(Topic::getId, \\\"123\\\").then(t1).like(BlogEntity::getTitle, \\\"456\\\") .then(t2).eq(BaseEntity::getCreateTime, LocalDateTime.now())) //如果不想用链式的then来切换也可以通过lambda 大括号方式执行顺序就是代码顺序,默认采用and链接 .where((t, t1, t2) -> { t.eq(Topic::getId, \\\"123\\\"); t1.like(BlogEntity::getTitle, \\\"456\\\"); t1.eq(BaseEntity::getCreateTime, LocalDateTime.now()); }); \"]},\"650\":{\"h\":\"查询某一张表的所有字段\",\"t\":[\" List<Map<String, Object>> list1 = easyEntityQuery.queryable(BlogEntity.class) .leftJoin(Topic.class, (b, t2) -> b.id().eq(t2.id())) .select((b1, t2) -> { MapProxy result = new MapProxy(); result.selectAll(b1); result.put(\\\"xx\\\",t2.createTime()); return result; }) .toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top`,t1.`create_time` AS `xx` FROM `t_blog` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? ==> Parameters: false(Boolean) <== Time Elapsed: 6(ms) <== Total: 100 \"]},\"651\":{\"h\":\"查询所有字段忽略其中一个\",\"t\":[\" List<Map<String, Object>> list1 = easyEntityQuery.queryable(BlogEntity.class) .leftJoin(Topic.class, (b, t2) -> b.id().eq(t2.id())) .select((b1, t2) -> { MapProxy result = new MapProxy(); result.selectAll(b1); result.put(\\\"xx\\\",t2.createTime()); return result; }) .toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top`,t1.`create_time` AS `xx` FROM `t_blog` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? ==> Parameters: false(Boolean) <== Time Elapsed: 6(ms) <== Total: 100 \"]},\"652\":{\"h\":\"一个相对比较全的查询\",\"t\":[\"easyQuery.queryable(Topic.class) .leftJoin(Topic.class, (t, t1) -> t.eq(t1, Topic::getId, Topic::getId)) .leftJoinMerge(Topic.class, o -> o.t().eq(o.t2(), Topic::getId, Topic::getId)) .leftJoinMerge(Topic.class, o -> o.t().eq(o.t3(), Topic::getId, Topic::getId)) .leftJoinMerge(Topic.class, o -> o.t().eq(o.t4(), Topic::getId, Topic::getId)) .leftJoinMerge(Topic.class, o -> o.t().eq(o.t5(), Topic::getId, Topic::getId)) .leftJoinMerge(Topic.class, o -> o.t().eq(o.t6(), Topic::getId, Topic::getId)) .where(o -> o.eq(Topic::getId, 1)) .where(false, o -> o.eq(Topic::getId, 1)) .whereById(\\\"1\\\") .whereById(false, \\\"1\\\") .whereById(Collections.singletonList(\\\"1\\\")) .whereById(false, Collections.singletonList(\\\"1\\\")) .whereObject(topicRequest) .whereObject(false, topicRequest) .whereMerge(o -> { o.t().eq(Topic::getId, \\\"1\\\"); o.t().eq(false, Topic::getId, \\\"1\\\"); o.t().ne(Topic::getId, \\\"1\\\"); o.t().ne(false, Topic::getId, \\\"1\\\"); o.t().ge(Topic::getId, \\\"1\\\"); o.t().ge(false, Topic::getId, \\\"1\\\"); o.t().gt(Topic::getId, \\\"1\\\"); o.t().gt(false, Topic::getId, \\\"1\\\"); o.t().le(Topic::getId, \\\"1\\\"); o.t().le(false, Topic::getId, \\\"1\\\"); o.t().lt(Topic::getId, \\\"1\\\"); o.t().lt(false, Topic::getId, \\\"1\\\"); o.t().like(Topic::getId, \\\"1\\\"); o.t().like(false, Topic::getId, \\\"1\\\"); o.t().notLike(Topic::getId, \\\"1\\\"); o.t().notLike(false, Topic::getId, \\\"1\\\"); o.t().likeMatchLeft(Topic::getId, \\\"1\\\"); o.t().likeMatchLeft(false, Topic::getId, \\\"1\\\"); o.t().likeMatchRight(Topic::getId, \\\"1\\\"); o.t().likeMatchRight(false, Topic::getId, \\\"1\\\"); o.t().notLikeMatchLeft(Topic::getId, \\\"1\\\"); o.t().notLikeMatchLeft(false, Topic::getId, \\\"1\\\"); o.t().notLikeMatchRight(Topic::getId, \\\"1\\\"); o.t().notLikeMatchRight(false, Topic::getId, \\\"1\\\"); }) .limit(1, 2) .orderByAsc(o -> o.column(Topic::getCreateTime)) .orderByDesc(o -> o.column(Topic::getCreateTime)) .orderByAsc(false, o -> o.column(Topic::getCreateTime)) .orderByDesc(false, o -> o.column(Topic::getCreateTime)) .orderByAscMerge(o -> o.t().column(Topic::getCreateTime)) .orderByDescMerge(o -> o.t().column(Topic::getCreateTime)) .orderByAscMerge(false, o -> o.t().column(Topic::getCreateTime)) .orderByDescMerge(false, o -> o.t().column(Topic::getCreateTime)) .groupByMerge(o -> o.t().column(Topic::getId)) .groupByMerge(false, o -> o.t().column(Topic::getId)) .havingMerge(o -> o.t().count(Topic::getId, AggregatePredicateCompare.GE, 1)) .havingMerge(false, o -> o.t().count(Topic::getId, AggregatePredicateCompare.GE, 1)); \"]},\"653\":{\"h\":\"原生sql\",\"t\":[\"easy-query的不但支持表达式的强类型sql,也支持手写sql来实现crud\"]},\"654\":{\"h\":\"查询sqlQuery\",\"t\":[\"强类型结果返回\"]},\"655\":{\"h\":\"无参数强类型返回\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.sqlQuery(\\\"SELECT * FROM t_blog t\\\", BlogEntity.class); ==> Preparing: SELECT * FROM t_blog t <== Total: 100 \"]},\"656\":{\"h\":\"有参数强类型返回\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.sqlQuery(\\\"SELECT * FROM t_blog t where t.id=?\\\", BlogEntity.class, Collections.singletonList(\\\"1\\\")); ==> Preparing: SELECT * FROM t_blog t where t.id=? ==> Parameters: 1(String) <== Total: 1 \"]},\"657\":{\"h\":\"查询sqlQueryMap\",\"t\":[\"Map返回默认key忽略大小写\"]},\"658\":{\"h\":\"无参数Map返回\",\"t\":[\" List<Map<String, Object>> blogs = easyQuery.sqlQueryMap(\\\"SELECT * FROM t_blog t\\\"); ==> Preparing: SELECT * FROM t_blog t <== Total: 100 \"]},\"659\":{\"h\":\"有参数Map返回\",\"t\":[\"List<Map<String, Object>> blogs = easyQuery.sqlQueryMap(\\\"SELECT * FROM t_blog t where t.id=?\\\", Collections.singletonList(\\\"1\\\")); ==> Preparing: SELECT * FROM t_blog t where t.id=? ==> Parameters: 1(String) <== Total: 1 \"]},\"660\":{\"h\":\"执行\"},\"661\":{\"h\":\"无参数\",\"t\":[\"String newContent= UUID.randomUUID().toString(); long l = easyQuery.sqlExecute(\\\"update t_blog set content='\\\"+newContent +\\\"' where id='1'\\\") ==> Preparing: update t_blog set content='3af23d78-86f1-48b1-bc51-ce0e0f63113d' where id='1' <== Total: 1 \"]},\"662\":{\"h\":\"有参数\",\"t\":[\"String newContent= UUID.randomUUID().toString(); long l = easyQuery.sqlExecute(\\\"update t_blog set content=? where id=?\\\", Arrays.asList(newContent,\\\"1\\\")); ==> Preparing: update t_blog set content=? where id=? ==> Parameters: 0d93119a-9e57-4d71-a67b-58d24823a88b(String),1(String) <== Total: 1 \",\"easy-query默认提供了数据库自定义SQL片段,其中 《CaseWhen》 就是有数据库自定义片段来自行实现api\",\"如何设计api完全可以看用户自行实现。\"]},\"663\":{\"h\":\"entityQuery\",\"t\":[\"因为entityQuery的特殊性原生sql片段有如下特殊规则\",\"where、join on、order、having的原生sql片段是具体表的o.expression().sqlSegment(......).executeSQL()方法\",\"select别名和update set为setSQL,o.expression().sqlSegment(....)\",\"o.expression()来获取表达式其中expression().sqlSegment()来执行sql用于join、where、orderBy需调用executeSQL,其中expression().sqlSegment()用来返回片段类型用于select、groupBy等\",\"说明!!!\",\"o.expression().sqlSegment(....)表示返回一个sql片段如果您是在join、where、orderBy方法内部这个片段不会生效需要调用executeSQL也就是o.expression().sqlSegment(....).executeSQL(),如果您闲这个太麻烦可以使用o.expression().sql(....)内部自动调用executeSQL,如果您是在select、groupBy等方法中使用那么是返回当做一个片段使用无需调用执行sql方法\"]},\"664\":{\"h\":\"随机排序\"},\"665\":{\"h\":\"随机排序带参数\"},\"666\":{\"h\":\"返回结果\",\"t\":[\"entityQuery使用expression().sqlSegment(....)其余几个api任然是sqlNativeSegment\",\"//因为默认原生sql片段式Object类型所以无法精确指定类型可以通过setPropertyType来指定返回接受的类型 List<Draft2<Double, Integer>> list = easyEntityQuery.queryable(Topic.class) .where(b -> { b.id().eq(\\\"123\\\"); }).select(t -> Select.DRAFT.of( t.expression().sqlSegment(\\\"RAND()\\\").setPropertyType(Double.class), t.expression().sqlSegment(\\\"IFNULL({0},{1})\\\", c -> { c.expression(t.stars()).value(1); },Integer.class) )).toList(); SELECT RAND() AS `value1`, IFNULL(t.`stars`,1) AS `value2` FROM `t_topic` t WHERE t.`id` = '123' \",\"返回片段设置别名\",\" List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(b -> { b.id().eq(\\\"123\\\"); }).select(Topic.class,t -> Select.of( t.expression().sqlSegement(\\\"RAND()\\\",c->{ c.setAlias(t.stars()); },Double.class), t.expression().sqlSegement(\\\"IFNULL({0},{1})\\\", c -> { c.expression(t.stars()); c.value(1); c.setAlias(t.createTime()); }).setPropertyType(Integer.class) )).toList(); SELECT RAND() AS `stars`, IFNULL(t.`stars`,1) AS `createTime` FROM `t_topic` t WHERE t.`id` = '123' \",\"//where List<Topic> list2 = easyEntityQuery.queryable(Topic.class) .where(o -> { Expression expression = o.expression(); o.createTime().format(\\\"yyyy/MM/dd\\\" ).eq(\\\"2023/01/01\\\" ); o.or(() -> { o.stars().ne(1); o.createTime().le(LocalDateTime.of(2024, 1, 1, 1, 1)); o.title().notLike(\\\"abc\\\" ); }); o.createTime().format(\\\"yyyy/MM/dd\\\" ).eq(\\\"2023/01/01\\\" ); o.id().nullOrDefault(\\\"yyyy/MM/dd\\\" ).eq(\\\"xxx\\\" ); expression.sql(\\\"{0} != {1}\\\" , c -> { c.expression(o.stars()).expression(o.createTime()); }); o.or(() -> { o.createTime().format(\\\"yyyy/MM/dd\\\" ).eq(\\\"2023/01/01\\\" ); o.id().nullOrDefault(\\\"yyyy/MM/dd\\\" ).eq(\\\"xxx\\\" ); expression.sql(\\\"{0} != {1}\\\" , c -> { c.expression(o.stars()).expression(o.createTime()); }); }); o.createTime().format(\\\"yyyy/MM/dd\\\" ).eq(\\\"2023/01/02\\\" ); o.id().nullOrDefault(\\\"yyyy/MM/dd2\\\" ).eq(\\\"xxx1\\\" ); }) .select(o -> o.FETCHER .allFieldsExclude(o.id(), o.title()) .id().as(o.title()) .id().fetchProxy()) .toList(); -- 第1条sql数据 SELECT t.`stars`, t.`create_time`, t.`id` AS `title`, t.`id` FROM `t_topic` t WHERE DATE_FORMAT(t.`create_time`,'%Y/%m/%d') = '2023/01/01' AND ( t.`stars` <> 1 OR t.`create_time` <= '2024-01-01 01:01' OR t.`title` NOT LIKE '%abc%' ) AND DATE_FORMAT(t.`create_time`,'%Y/%m/%d') = '2023/01/01' AND IFNULL(t.`id`,'yyyy/MM/dd') = 'xxx' AND t.`stars` != t.`create_time` AND ( DATE_FORMAT(t.`create_time`,'%Y/%m/%d') = '2023/01/01' OR IFNULL(t.`id`,'yyyy/MM/dd') = 'xxx' OR t.`stars` != t.`create_time` ) AND DATE_FORMAT(t.`create_time`,'%Y/%m/%d') = '2023/01/02' AND IFNULL(t.`id`,'yyyy/MM/dd2') = 'xxx1' //order by List<Topic> list3 = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().eq(\\\"title\\\" ); o.id().eq(\\\"1\\\" ); }) .orderBy(o -> { o.createTime().format(\\\"yyyy-MM-dd HH:mm:ss\\\" ).desc(); o.expression().sql(\\\"IFNULL({0},'') ASC\\\" , c -> { c.keepStyle().expression(o.stars()); }); }) .select(o -> new TopicProxy().selectExpression(o.FETCHER.title().id(), o.createTime().format(\\\"yyyy-MM-dd HH:mm:ss\\\" ))) .toList(); SELECT t.`title`,t.`id`,DATE_FORMAT(t.`create_time`,'%Y-%m-%d %H:%i:%s') FROM `t_topic` t WHERE t.`title` = ? AND t.`id` = ? ORDER BY DATE_FORMAT(t.`create_time`,'%Y-%m-%d %H:%i:%s') DESC,IFNULL(t.`stars`,'') ASC //select List<Topic> list2 = easyEntityQuery.queryable(Topic.class) .where(o -> o.createTime().format(\\\"yyyy/MM/dd\\\").eq(\\\"2023/01/01\\\")) .select(o -> { TopicProxy r = new TopicProxy(); r.title().set(o.stars().nullOrDefault(0).toStr()); r.alias().setSQL(\\\"IFNULL({0},'')\\\", c -> { c.keepStyle(); c.expression(o.id()); }); return r; }) .toList(); //上下凉鞋发一样通过expression来构建sql片段并且指定类型是String List<Topic> list4 = easyEntityQuery.queryable(Topic.class) .where(o -> o.createTime().format(\\\"yyyy/MM/dd\\\").eq(\\\"2023/01/01\\\")) .select(o -> { TopicProxy r = new TopicProxy(); r.title().set(o.stars().nullOrDefault(0).toStr()); ColumnFunctionComparableAnyChainExpression<String> nullProperty = o.expression().sqlSegment(\\\"IFNULL({0},'')\\\", c -> { c.expression(o.id()); }, String.class); r.alias().set(nullProperty); return r; }) .toList(); SELECT CAST(IFNULL(t.`stars`,?) AS CHAR) AS `title`,IFNULL(t.`id`,'') AS `alias` FROM `t_topic` t WHERE DATE_FORMAT(t.`create_time`,'%Y/%m/%d') = ? //update set long rows = easyEntityQuery.updatable(Topic.class) .setColumns(o->{ o.stars().setSQL(\\\"ifnull({0},0)+{1}\\\", (context) -> { context.expression(o.stars()) .value(1); }); }) .where(o -> o.id().eq(\\\"2\\\")) .executeRows(); UPDATE `t_topic` SET `stars` = ifnull(`stars`,0)+? WHERE `id` = ? \"]},\"667\":{\"h\":\"自定义原生sql查询\",\"t\":[\"通用查询但是需要支持所有数据库?\",\"EasyPageResult<Topic> pageResult1 = easyEntityQuery.queryable(\\\"select * from t_topic where id != ? \\\", Topic.class, Arrays.asList(\\\"123\\\")) .where(t -> t.id().ne(\\\"456\\\")) .toPageResult(1, 2); ==> Preparing: SELECT COUNT(*) FROM (select * from t_topic where id != ? ) t WHERE t.`id` <> ? ==> Parameters: 123(String),456(String) <== Time Elapsed: 6(ms) <== Total: 1 ==> Preparing: SELECT * FROM (select * from t_topic where id != ? ) t WHERE t.`id` <> ? LIMIT 2 ==> Parameters: 123(String),456(String) <== Time Elapsed: 3(ms) <== Total: 2 \",\"join自定义sql表\",\"EntityQueryable<TopicProxy, Topic> joinTable = easyEntityQuery.queryable(\\\"select * from t_topic where id != ? \\\", Topic.class, Arrays.asList(\\\"123\\\")); List<Draft2<String, String>> list = easyEntityQuery.queryable(BlogEntity.class) .leftJoin(joinTable, (b, t2) -> b.id().eq(t2.id())) .where((b1, t2) -> { b1.createTime().gt(LocalDateTime.now()); t2.createTime().format(\\\"yyyy\\\").eq(\\\"2014\\\"); }).select((b1, t2) -> Select.DRAFT.of( b1.id(), t2.id() )).toList(); ==> Preparing: SELECT t.`id` AS `value1`,t2.`id` AS `value2` FROM `t_blog` t LEFT JOIN (SELECT * FROM (select * from t_topic where id != ? ) t1) t2 ON t.`id` = t2.`id` WHERE t.`deleted` = ? AND t.`create_time` > ? AND DATE_FORMAT(t2.`create_time`,'%Y') = ? ==> Parameters: 123(String),false(Boolean),2024-07-16T12:12:35.343(LocalDateTime),2014(String) -- 第1条sql数据 SELECT t.`id` AS `value1`, t2.`id` AS `value2` FROM `t_blog` t LEFT JOIN ( SELECT * FROM (select * from t_topic where id != '123' ) t1) t2 ON t.`id` = t2.`id` WHERE t.`deleted` = false AND t.`create_time` > '2024-07-16 12:12:35.343' AND DATE_FORMAT(t2.`create_time`,'%Y') = '2014' \"]},\"668\":{\"h\":\"sqlNativeSegment\",\"t\":[\"无需编写复杂封装代码\",\"说明\",\"sqlNativeSegment一次个参数为原生数据库片段\",\"第二个参数为表达式,如果第一个原生sql片段存在变量比如表列或者参数值,那么可以通过第二个参数lambda选择expression或者value或format，expreesion传入当前表的属性表达式或者制定表的,value传递常量值会议参数形式体现在片段上,format会拼接到字符串上,拼接的规则底层为MessageFormat仅需满足此即可\",\"方法\",\"参数说明\",\"描述\",\"expression\",\"对象属性,或者其他表的对象属性或者表达式query\",\"如果是表对象属性那么无需管理表别名，哪怕是join下也可以自己适应,如果是query表达式那么可以实现子查询类似的功能\",\"value\",\"参数值\",\"将以参数形式\\\"?\\\"附加到sql片段上面\",\"constValue(已作废)\",\"常量值\",\"将以普通字符串拼接的形式拼接上去\",\"format\",\"常量值\",\"将以普通字符串拼接的形式拼接上去\",\"setAlias\",\"别名\",\"用于设置列别名一般用户查询较多\"]},\"669\":{\"h\":\"案例二\",\"t\":[\"OVER(Partition By ... Order By ...) 采用pgsql语法来实现\",\"获取书本价格在所有书籍中的名次\",\"获取数据的价格在所属书店中的名次\",\"注意点及说明!!!\",\"如果sqlNativeSegment内部存在参数,那么整个表达式需要将单引号改成双引号,可以通过全局配置keep-native-style:true来全局将单引号默认替换为双引号,或者在使用的时候调用.keepStyle()\",\" @Table(\\\"t_book_test\\\") @Data public class H2BookTest { @Column(primaryKey = true) private String id; private String name; private String edition; private String price; private String storeId; } String sql = easyQuery.queryable(H2BookTest.class) .select(o -> o.columnAll() .sqlNativeSegment(\\\"rank() over(order by {0} desc) as rank1\\\", it -> it.expression(H2BookTest::getPrice)) .sqlNativeSegment(\\\"rank() over(partition by {0} order by {1} desc) as rank2\\\", it -> it .expression(H2BookTest::getStoreId) .expression(H2BookTest::getPrice) ) ).toSQL(); SELECT id,name,edition,price,store_id, rank() over(order by price desc) as rank1, rank() over(partition by store_id order by price desc) as rank2 FROM t_book_test //别名自动设置 String sql = easyQuery.queryable(H2BookTest.class) .asAlias(\\\"x\\\") .select(o -> o.columnAll() .sqlNativeSegment(\\\"rank() over(order by {0} desc) as rank1\\\", it -> it.expression(H2BookTest::getPrice)) .sqlNativeSegment(\\\"rank() over(partition by {0} order by {1} desc) as rank2\\\", it -> it .expression(H2BookTest::getStoreId) .expression(H2BookTest::getPrice) ) ).toSQL(); SELECT x.id,x.name,x.edition,x.price,x.store_id, rank() over(order by x.price desc) as rank1, rank() over(partition by x.store_id order by x.price desc) as rank2 FROM t_book_test x //合并两个sql native segment String sql = easyQuery.queryable(H2BookTest.class) .asAlias(\\\"x\\\") .select(o -> o.columnAll() .sqlNativeSegment(\\\"rank() over(order by {0} desc) as rank1,rank() over(partition by {1} order by {2} desc) as rank2\\\", it -> it.expression(H2BookTest::getPrice) .expression(H2BookTest::getStoreId) .expression(H2BookTest::getPrice) ) ).toSQL(); SELECT x.id,x.name,x.edition,x.price,x.store_id, rank() over(order by x.price desc) as rank1, rank() over(partition by x.store_id order by x.price desc) as rank2 FROM t_book_test x String sql = easyQuery.queryable(H2BookTest.class) .where(o -> o.sqlNativeSegment(\\\"regexp_like({0},{1})\\\", it -> it.expression(H2BookTest::getPrice) .value(\\\"^Ste(v|ph)en$\\\"))) .select(o -> o.columnAll()).toSQL(); SELECT id,name,edition,price,store_id FROM t_book_test WHERE regexp_like(price,?) //join多表下的sql native segment String sql = easyQuery.queryable(H2BookTest.class) .leftJoin(DefTable.class,(t,t1)->t.eq(t1,H2BookTest::getPrice,DefTable::getMobile)) //1.4.31后版本支持 参数复用 {1} {1}可以加多个并且支持 .where((o,o1) -> o.sqlNativeSegment(\\\"regexp_like({0},{1}) AND regexp_like({2},{1})\\\", it -> it .expression(H2BookTest::getPrice)//单参数使用默认表的也就是o.sqlNativeSegment的o表就是第一张表 .value(\\\"^Ste(v|ph)en$\\\") .expression(o1,DefTable::getAvatar))//使用第二张表的avatar ) .select(o -> o.columnAll()).toSQL(); SELECT t.id,t.name,t.edition,t.price,t.store_id FROM t_book_test t LEFT JOIN t_def_table t1 ON t.price = t1.mobile WHERE regexp_like(t.price,?) AND regexp_like(t1.avatar,?) \"]},\"670\":{\"h\":\"注意\",\"t\":[\"如果sqlNativeSegment中存在单引号,并且是模板模式存在变量,那么需要对其单引号变成双单引号,或者将单引号作为参数或者使用keepStyle(),也可以全局设置keepStyle(),\",\"内部采用MessageFormat来格式化参数,所以如果有大数字需要传入format请先toString()后传入\",\".sqlNativeSegment(\\\"DATE_FORMAT({0}, ''%Y-%m-%d'')\\\", c -> { //因为存在变量参数所需需要使用双单引号代替,或者将格式化值变成参数 c.expression(User::getCreateTime); }) .sqlNativeSegment(\\\"DATE_FORMAT({0}, {1})\\\", c -> { //因为存在变量参数所需需要使用双单引号代替,或者将格式化值变成参数 c.expression(User::getCreateTime).format(\\\"'%Y-%m-%d'\\\"); }) .sqlNativeSegment(\\\"DATE_FORMAT({0}, '%Y-%m-%d')\\\", c -> { //因为存在变量参数所需需要使用双单引号代替,可以调用keepStyle方法或者全局配置keep-native-style为true c.keepStyle().expression(User::getCreateTime); }) .sqlNativeSegment(\\\"DATE_FORMAT(`create_time`, '%Y-%m-%d')\\\")//如果不存在变量则可以使用单引号 \"]},\"671\":{\"h\":\"相关搜索\",\"t\":[\"原生sql自定义sqlsql片段原生sql片段\"]},\"672\":{\"h\":\"OR条件\",\"t\":[\"OR条件主要分为两大类一类是entityQuery,一类是其他api,因为entitQuery和其他Api有所不一样所以需要单独讲\",\"一句话很简单or内部全部用or链接,and内部用and链接\",\" List<BlogEntity> list = easyEntityQuery.queryable(BlogEntity.class) .where(o -> { o.id().eq(\\\"2\\\" ); o.id().eq(\\\"3\\\" ); o.or(() -> { o.id().eq(\\\"4\\\" ); o.id().eq(\\\"5\\\" ); }); }) .toList(); SELECT `id`, `create_time`, `update_time`, `create_by`, `update_by`, `deleted`, `title`,..... FROM `t_blog` WHERE `deleted` = false AND `id` = '2' AND `id` = '3' AND ( `id` = '4' OR `id` = '5' ) \",\" List<Topic> list = easyEntityQuery.queryable(Topic.class) .where(o -> { o.title().ne(\\\"title0\\\");//==0 o.or(()->{ o.title().eq(\\\"1\\\"); o.title().eq(\\\"2\\\"); o.title().eq(\\\"3\\\"); o.and(()->{ o.title().eq(\\\"4\\\"); o.title().eq(\\\"5\\\"); o.title().eq(\\\"6\\\"); o.or(()->{ o.title().eq(\\\"7\\\"); o.title().eq(\\\"8\\\"); o.title().eq(\\\"9\\\"); }); o.title().eq(\\\"10\\\"); o.title().eq(\\\"11\\\"); o.title().eq(\\\"12\\\"); }); o.title().eq(\\\"13\\\"); o.title().eq(\\\"14\\\"); o.title().eq(\\\"15\\\"); }); }) .toList(); 通过表达式可以看到or内部的直接关系为条件1,2,3,一块and和13,14,15全部是or链接 SELECT `id`, `stars`, `title`, `create_time` FROM `t_topic` WHERE `title` <> 'title0' AND ( `title` = '1' OR `title` = '2' OR `title` = '3' OR ( `title` = '4' AND `title` = '5' AND `title` = '6' AND ( `title` = '7' OR `title` = '8' OR `title` = '9' ) AND `title` = '10' AND `title` = '11' AND `title` = '12' ) OR `title` = '13' OR `title` = '14' OR `title` = '15' ) \",\"where默认提供了and和or关键字并且提供了泛型版本所以用户可以通过and和or来进行组合对应的条件,默认条件和条件之间用and进行链接\",\"and(()->{条件})表示and内部的条件是以括号包裹,并且和前一个条件之间是AND关系\",\"or(()->{条件})表示or内部的条件是以括号包裹,并且和前一个条件之间是OR关系\"]},\"673\":{\"h\":\"案例\",\"t\":[\"and内部使用or链接那么可以将and视为括号(....or....or....)\",\"Topic topic = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"1\\\").and(() -> { o.like(Topic::getTitle, \\\"你好\\\") .or() .eq(Topic::getTitle, \\\"我是title\\\") .or() .le(Topic::getCreateTime, LocalDateTime.now()); })).firstOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? AND (`title` LIKE ? OR `title` = ? OR `create_time` <= ?) LIMIT 1 ==> Parameters: 1(String),%你好%(String),我是title(String),2023-07-05T06:25:17.356(LocalDateTime) <== Time Elapsed: 4(ms) <== Total: 1 \",\"没有and全部都是or以where为单位之间会以and进行组合\",\"List<Topic> topic2 = easyQuery.queryable(Topic.class) .where(o -> o.like(Topic::getTitle, \\\"你好\\\") .or() .eq(Topic::getTitle, \\\"我是title\\\") .or() .le(Topic::getCreateTime, LocalDateTime.now())).toList(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE (`title` LIKE ? OR `title` = ? OR `create_time` <= ?) ==> Parameters: %你好%(String),我是title(String),2023-07-05T06:30:24.572(LocalDateTime) <== Time Elapsed: 2(ms) <== Total: 43 \",\"和逻辑删除等组合\",\"BlogEntity blog = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"1\\\").and(() ->{ o.like(BlogEntity::getTitle, \\\"你好\\\") .or() .eq(BlogEntity::getTitle, \\\"我是title\\\") .or() .le(BlogEntity::getCreateTime, LocalDateTime.now()); })).firstOrNull(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `id` = ? AND (`title` LIKE ? OR `title` = ? OR `create_time` <= ?) LIMIT 1 ==> Parameters: false(Boolean),1(String),%你好%(String),我是title(String),2023-07-05T06:33:07.090(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 1 BlogEntity blog1 = easyQuery.queryable(BlogEntity.class) .where(o -> o.like(BlogEntity::getTitle, \\\"你好\\\") .or() .eq(BlogEntity::getTitle, \\\"我是title\\\") .or() .le(BlogEntity::getCreateTime, LocalDateTime.now())).firstOrNull(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND (`title` LIKE ? OR `title` = ? OR `create_time` <= ?) LIMIT 1 ==> Parameters: false(Boolean),%你好%(String),我是title(String),2023-07-05T06:34:07.310(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 1 \",\"多个and用or链接\",\"Topic topic3 = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"1\\\").or( () -> o.like(Topic::getTitle, \\\"你好\\\") .eq(Topic::getTitle, \\\"我是title\\\") .le(Topic::getCreateTime, LocalDateTime.now()) )).firstOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE (`id` = ? OR (`title` LIKE ? AND `title` = ? AND `create_time` <= ?)) LIMIT 1 ==> Parameters: 1(String),%你好%(String),我是title(String),2023-07-05T06:35:32.079(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 1 \",\"多列or条件模糊搜索,传入List<String>的name集合,需要查询主题id和标题包含的结果\",\" List<String> searchValues = Arrays.asList(\\\"1\\\", \\\"小明\\\", \\\"小红\\\"); List<Topic> list = easyQuery .queryable(Topic.class) .where(o -> o.isBank(Topic::getId)) .where(o -> { for (String searchValue : searchValues) { o.and(() -> { //每次and就是代表一个括号,括号里面用or来链接 o.like(Topic::getId, searchValue) .or().like(Topic::getTitle, searchValue); }); } }) .toList(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE IFNULL(`id`,?) = ? AND (`id` LIKE ? OR `title` LIKE ?) AND (`id` LIKE ? OR `title` LIKE ?) AND (`id` LIKE ? OR `title` LIKE ?) ==> Parameters: (String),(String),%1%(String),%1%(String),%小明%(String),%小明%(String),%小红%(String),%小红%(String) <== Time Elapsed: 53(ms) <== Total: 0 \"]},\"674\":{\"h\":\"排序\",\"t\":[\"easy-query提供了方便的排序查询功能支持函数排序和列排序等\"]},\"675\":{\"h\":\"一个字段排序\"},\"676\":{\"h\":\"双字段排序\"},\"677\":{\"h\":\"动态排序\",\"t\":[\"如果你希望实现前端排序那么可以参考这个链接DynamicSort\"]},\"678\":{\"h\":\"函数排序\"},\"679\":{\"h\":\"null最前最后\",\"t\":[\"支持全数据库 oracle生成 id asc nulls first\",\" //nulls last/first List<Topic> list = easyEntityQuery.queryable(Topic.class) .orderBy(t -> { t.id().asc(OrderByModeEnum.NULLS_LAST); t.createTime().desc(OrderByModeEnum.NULLS_FIRST); }) .toList(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` ORDER BY CASE WHEN `id` IS NULL THEN 1 ELSE 0 END ASC,`id` ASC,CASE WHEN `create_time` IS NULL THEN 0 ELSE 1 END ASC,`create_time` DESC <== Time Elapsed: 5(ms) <== Total: 101 \"]},\"680\":{\"h\":\"分页\",\"t\":[\"easy-query提供了非常简易的分页查询功能,方便用户进行数据结果的分页查询\"]},\"681\":{\"h\":\"简单分页\",\"t\":[\" EasyPageResult<Topic> topicPageResult = easyQuery .queryable(Topic.class) .where(o -> o.isNotNull(Topic::getId)) .toPageResult(1, 20); ==> Preparing: SELECT COUNT(1) FROM t_topic t WHERE t.`id` IS NOT NULL <== Total: 1 ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM t_topic t WHERE t.`id` IS NOT NULL LIMIT 20 <== Total: 20 \"]},\"682\":{\"h\":\"join分页\",\"t\":[\"EasyPageResult<BlogEntity> page = easyQuery .queryable(Topic.class) .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle).then(t).eq(Topic::getId, \\\"3\\\")) .select(BlogEntity.class, (t, t1) -> t1.columnAll().columnIgnore(BlogEntity::getId)) .toPageResult(1, 20); ==> Preparing: SELECT COUNT(1) FROM t_topic t INNER JOIN t_blog t1 ON t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL AND t.`id` = ? ==> Parameters: 3(String) <== Total: 1, Query Use: 3(ms) ==> Preparing: SELECT t1.`create_time`,t1.`update_time`,t1.`create_by`,t1.`update_by`,t1.`deleted`,t1.`title`,t1.`content`,t1.`url`,t1.`star`,t1.`publish_time`,t1.`score`,t1.`status`,t1.`order`,t1.`is_top`,t1.`top` FROM t_topic t INNER JOIN t_blog t1 ON t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL AND t.`id` = ? LIMIT 1 ==> Parameters: 3(String) <== Total: 1, Query Use: 2(ms) \"]},\"683\":{\"h\":\"group分页\",\"t\":[\"EasyPageResult<BlogEntity> page = easyQuery .queryable(Topic.class) .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle)) .groupBy((t, t1)->t1.column(BlogEntity::getId)) .select(BlogEntity.class, (t, t1) -> t1.column(BlogEntity::getId).columnSum(BlogEntity::getScore)) .toPageResult(1, 20); ==> Preparing: SELECT COUNT(1) FROM (SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM t_topic t INNER JOIN t_blog t1 ON t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id`) t2 <== Total: 1, Query Use: 8(ms) ==> Preparing: SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM t_topic t INNER JOIN t_blog t1 ON t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id` LIMIT 20 <== Total: 20, Query Use: 2(ms) \"]},\"684\":{\"h\":\"自定义分页返回结果\",\"t\":[\"easy-query提供了自定义分页返回结果,用户可以自行定义分页结果,《替换框架行为❗️❗️❗️》\"]},\"685\":{\"h\":\"替换接口\",\"t\":[\"EasyPageResultProvider\",\"方法\",\"参数\",\"描述\",\"createPageResult\",\"long pageIndex, long pageSize,long total, List<T> data\",\"返回toPageResult的分页对象\",\"createShardingPageResult\",\"long pageIndex, long pageSize,long total, List<T> data,SequenceCountLine sequenceCountLine\",\"返回toShardingPageResult的分页对象\"]},\"686\":{\"h\":\"默认实现\",\"t\":[\" public class DefaultEasyPageResultProvider implements EasyPageResultProvider{ @Override public <T> EasyPageResult<T> createPageResult(long pageIndex, long pageSize,long total, List<T> data) { return new DefaultPageResult<>(total,data); } @Override public <T> EasyPageResult<T> createShardingPageResult(long pageIndex, long pageSize,long total, List<T> data,SequenceCountLine sequenceCountLine) { return new DefaultShardingPageResult<>(total,data,sequenceCountLine); } } public class DefaultPageResult<T> implements EasyPageResult<T> { private final long total; private final List<T> data; public DefaultPageResult(long total, List<T> data) { this.total = total; this.data = data; } public long getTotal() { return total; } public List<T> getData() { return data; } } public interface EasyShardingPageResult<T> extends EasyPageResult<T>{ List<Long> getTotalLines(); } public class DefaultShardingPageResult<T> implements EasyShardingPageResult<T> { private final long total; private final List<T> data; private final SequenceCountLine sequenceCountLine; public DefaultShardingPageResult(long total, List<T> data,SequenceCountLine sequenceCountLine) { this.total = total; this.data = data; this.sequenceCountLine = sequenceCountLine; } public long getTotal() { return total; } public List<T> getData() { return data; } @Override public List<Long> getTotalLines() { return sequenceCountLine.getTotalLines(); } } \"]},\"687\":{\"h\":\"无依赖使用自己的PageResult\",\"t\":[\"很多时候框架提供的EasyPageResult<T>提供了方便的同时让整个项目高度依赖easy-query这是一个非常不好的事情,所以easy-query在1.4.25提供了自定义PageResult<TResult>结果,并且提供了链式方法调用方便开发人员\"]},\"688\":{\"h\":\"框架提供的分页器\",\"t\":[\"Pager<TEntity,TPageResult> 用户可以自行实现分页\"]},\"689\":{\"h\":\"添加自己的分页返回结果接口\",\"t\":[\"//接口 public interface PageResult<T> { /** * 返回总数 * @return */ long getTotalCount(); /** * 结果内容 * @return */ List<T> getList(); } //实现 public class MyPageResult<TEntity> implements PageResult<TEntity> { private final long total; private final List<TEntity> list; public MyPageResult(long total, List<TEntity> list){ this.total = total; this.list = list; } @Override public long getTotalCount() { return total; } @Override public List<TEntity> getList() { return list; } } \"]},\"690\":{\"h\":\"自定义pager\",\"t\":[\" public class MyPager<TEntity> implements Pager<TEntity,PageResult<TEntity>> { private final long pageIndex; private final long pageSize; private final long pageTotal; public MyPager(long pageIndex, long pageSize){ this(pageIndex,pageSize,-1); } public MyPager(long pageIndex, long pageSize, long pageTotal){ this.pageIndex = pageIndex; this.pageSize = pageSize; this.pageTotal = pageTotal; } @Override public PageResult<TEntity> toResult(Query<TEntity> query) { EasyPageResult<TEntity> pageResult = query.toPageResult(pageIndex, pageSize,pageTotal); return new MyPageResult<>(pageResult.getTotal(),pageResult.getData()); } } \"]},\"691\":{\"h\":\"测试代码\",\"t\":[\"//业务代码返回自定义PageResult<TEntity> PageResult<TopicGenericKey> pageResult = easyQuery .queryable(TopicGenericKey.class) .whereById(\\\"1\\\") .toPageResult(new MyPager<>(1, 2)); Assert.assertEquals(1,pageResult.getTotalCount()); Assert.assertEquals(\\\"1\\\",pageResult.getList().get(0).getId()); \"]},\"692\":{\"h\":\"🔥联级额外筛选Extra Filter\",\"t\":[\"easy-query不单支持联级的筛选还支持联级额外条件的筛选\"]},\"693\":{\"h\":\"对象关系\"},\"694\":{\"h\":\"联级查询\",\"t\":[\"筛选所有班级里面存在学生名称包含小明的班级\",\" List<SchoolClass> hasXiaoMingClass = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { //班级和学生是一对多,所以就是筛选学生里面存在名称叫做小明的 //如果要查询学生里面没有小明的就用`none`方法 s.schoolStudents().any(x -> x.name().like(\\\"小明\\\")); //下面的写法也可以也可以用多个where来支持 // s.schoolStudents().where(x -> { // x.name().like(\\\"小明\\\"); // x.classId().like(\\\"123\\\"); // }).any(); }) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE EXISTS (SELECT 1 FROM `school_student` t1 WHERE t1.`class_id` = t.`id` AND t1.`name` LIKE ? LIMIT 1) ==> Parameters: %小明%(String) \",\"筛选学生表,条件为学生所在班级的班级名称包含一班字样的比如一班、十一班\",\" List<SchoolStudent> hasXiaoMingClass = easyEntityQuery.queryable(SchoolStudent.class) // .include(x->x.schoolClass()) //如果您需要把学生所在的班级信息也带出来 .where(s -> s.schoolClass().name().like(\\\"一班\\\")) .toList(); ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t LEFT JOIN `school_class` t1 ON t.`class_id` = t1.`id` WHERE t1.`name` LIKE ? ==> Parameters: %一班%(String) \",\"筛选班级里面学生家在xx路的班级\",\"List<SchoolClass> studentAddressInXXRoadClasses = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolStudents().any( x -> x.schoolStudentAddress().address().like(\\\"xx路\\\") )).toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE EXISTS (SELECT 1 FROM `school_student` t1 LEFT JOIN `school_student_address` t2 ON t1.`id` = t2.`student_id` WHERE t1.`class_id` = t.`id` AND t2.`address` LIKE ? LIMIT 1) ==> Parameters: %xx路%(String) \",\"筛选班级里面学生家在xx路,学生名称叫小明的班级\",\" List<SchoolClass> studentAddressInXXRoadClasses = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolStudents().any( x -> { x.schoolStudentAddress().address().like(\\\"xx路\\\"); x.name().like(\\\"小明\\\"); } )).toList(); //下面的写法也可以 List<SchoolClass> studentAddressInXXRoadClasses = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolStudents() .where(x->x.schoolStudentAddress().address().like(\\\"xx路\\\")) .where(x->x.name().like(\\\"小明\\\")).any() ).toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE EXISTS (SELECT 1 FROM `school_student` t1 LEFT JOIN `school_student_address` t2 ON t1.`id` = t2.`student_id` WHERE t1.`class_id` = t.`id` AND t2.`address` LIKE ? AND t1.`name` LIKE ? LIMIT 1) ==> Parameters: %xx路%(String),%小明%(String) \",\"筛选多对多联级查询\",\"一个班级有多个老师,一个老师也可以交多个班级,老师和班级多对多通过SchoolClassTeacher表进行关联\",\" List<SchoolClass> x1 = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolTeachers() .any(x -> x.name().like(\\\"x\\\"))).toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE EXISTS (SELECT 1 FROM `school_teacher` t1 WHERE t1.`id` = t.`id` AND EXISTS (SELECT 1 FROM `school_class_teacher` t2 WHERE t2.`teacher_id` = t1.`id` AND t2.`class_id` = t.`id` LIMIT 1) AND t1.`name` LIKE ? LIMIT 1) ==> Parameters: %x%(String) \",\"筛选班级里面学生姓张的有5人的班级\",\" List<SchoolClass> nameStartZhang = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolStudents().where(x -> x.name().likeMatchLeft(\\\"张\\\")).count().eq(5L)) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE (SELECT COUNT(*) FROM `school_student` t1 WHERE t1.`class_id` = t.`id` AND t1.`name` LIKE ?) = ? ==> Parameters: 张%(String),5(Long) \"]},\"695\":{\"h\":\"🔥联级筛选Include Filter\",\"t\":[\"easy-query在1.10.3^版本后支持了联级删选,并不仅仅支持结果查询,譬如\",\"一对一：班级和老师支持查询筛选班级表条件是老师名称叫王老师的班级集合\",\"一对多:班级和学生支持查询筛选班级表条件是存在某个学生叫小明的班级集合\"]},\"696\":{\"h\":\"联级查询\",\"t\":[\"筛选所有班级里面存在学生名称包含小明的班级\",\" List<SchoolClass> hasXiaoMingClass = easyEntityQuery.queryable(SchoolClass.class) .where(s -> { //班级和学生是一对多,所以就是筛选学生里面存在名称叫做小明的 //如果要查询学生里面没有小明的就用`none`方法 s.schoolStudents().any(x -> x.name().like(\\\"小明\\\")); //下面的写法也可以也可以用多个where来支持 // s.schoolStudents().where(x -> { // x.name().like(\\\"小明\\\"); // x.classId().like(\\\"123\\\"); // }).any(); }) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE EXISTS (SELECT 1 FROM `school_student` t1 WHERE t1.`class_id` = t.`id` AND t1.`name` LIKE ? LIMIT 1) ==> Parameters: %小明%(String) \",\"筛选学生表,条件为学生所在班级的班级名称包含一班字样的比如一班、十一班\",\" List<SchoolStudent> hasXiaoMingClass = easyEntityQuery.queryable(SchoolStudent.class) // .include(x->x.schoolClass()) //如果您需要把学生所在的班级信息也带出来 .where(s -> s.schoolClass().name().like(\\\"一班\\\")) .toList(); ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t LEFT JOIN `school_class` t1 ON t.`class_id` = t1.`id` WHERE t1.`name` LIKE ? ==> Parameters: %一班%(String) \",\"筛选班级里面学生家在xx路的班级\",\"List<SchoolClass> studentAddressInXXRoadClasses = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolStudents().any( x -> x.schoolStudentAddress().address().like(\\\"xx路\\\") )).toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE EXISTS (SELECT 1 FROM `school_student` t1 LEFT JOIN `school_student_address` t2 ON t1.`id` = t2.`student_id` WHERE t1.`class_id` = t.`id` AND t2.`address` LIKE ? LIMIT 1) ==> Parameters: %xx路%(String) \",\"筛选班级里面学生家在xx路,学生名称叫小明的班级\",\" List<SchoolClass> studentAddressInXXRoadClasses = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolStudents().any( x -> { x.schoolStudentAddress().address().like(\\\"xx路\\\"); x.name().like(\\\"小明\\\"); } )).toList(); //下面的写法也可以 List<SchoolClass> studentAddressInXXRoadClasses = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolStudents() .where(x->x.schoolStudentAddress().address().like(\\\"xx路\\\")) .where(x->x.name().like(\\\"小明\\\")).any() ).toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE EXISTS (SELECT 1 FROM `school_student` t1 LEFT JOIN `school_student_address` t2 ON t1.`id` = t2.`student_id` WHERE t1.`class_id` = t.`id` AND t2.`address` LIKE ? AND t1.`name` LIKE ? LIMIT 1) ==> Parameters: %xx路%(String),%小明%(String) \",\"筛选多对多联级查询\",\"一个班级有多个老师,一个老师也可以交多个班级,老师和班级多对多通过SchoolClassTeacher表进行关联\",\" List<SchoolClass> x1 = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolTeachers() .any(x -> x.name().like(\\\"x\\\"))).toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE EXISTS (SELECT 1 FROM `school_teacher` t1 WHERE t1.`id` = t.`id` AND EXISTS (SELECT 1 FROM `school_class_teacher` t2 WHERE t2.`teacher_id` = t1.`id` AND t2.`class_id` = t.`id` LIMIT 1) AND t1.`name` LIKE ? LIMIT 1) ==> Parameters: %x%(String) \",\"筛选班级里面学生姓张的有5人的班级\",\" List<SchoolClass> nameStartZhang = easyEntityQuery.queryable(SchoolClass.class) .where(s -> s.schoolStudents().where(x -> x.name().likeMatchLeft(\\\"张\\\")).count().eq(5L)) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE (SELECT COUNT(*) FROM `school_student` t1 WHERE t1.`class_id` = t.`id` AND t1.`name` LIKE ?) = ? ==> Parameters: 张%(String),5(Long) \"]},\"697\":{\"h\":\"关联查询 Include\",\"t\":[\"easy-query 1.2.1+ 支持关联查询,支持多级关联查询,并且只支持first和tolist两个返回方法,支持vo对象返回支持include追加追踪、禁止、逻辑删除、where过滤、order、limit等一系列处理，但是返回结果必须是数据库对象实例(include方法内部),如果需要额外字段返回可以使用columnInclude/columnIncludeMany自定义返回\",\"类型\",\"描述\",\"场景\",\"OneToOne\",\"一对一\",\"学生和学生家庭信息\",\"OneToMany\",\"一对多\",\"班级和学生\",\"ManyToOne\",\"多对一\",\"学生和班级\",\"ManyToMany\",\"多对多\",\"班级和老师\",\" List<SchoolClass> classes = easyEntityQuery.queryable(SchoolClass.class) //查询班级并且连带查询每个班级最先入学的前5位学生 .include(o -> o.schoolStudents(),x->x.orderBy(u->u.createTime().asc()).limit(5)) .toList(); \",\"感谢!!!\",\"以下关系图有网友 糊搞 大佬提供十分感谢\"]},\"698\":{\"h\":\"一对一说明\"},\"699\":{\"h\":\"多对一说明\"},\"700\":{\"h\":\"一对多说明\"},\"701\":{\"h\":\"多对多说明\"},\"702\":{\"h\":\"多次include\"},\"703\":{\"h\":\"多关联查询\",\"t\":[\"说明!!!\",\"include 内部属于独立查询,如果您需要差异更新并且没有配置默认启动追踪查询那么需要独立进行asTracking()等,include的后one或者many的第二个参数表示以多少关联属性为一组进行获取\",\"对象模式include/includes参数说明 其中如果您的导航属性是ToOne那么请使用include如果是ToMany那么是includes\",\"包含的两个参数第一个参数表示你要返回的导航属性,第二个参数表示对返回导航属性如何进行增强\",\"List<SchoolClass> list = easyEntityQuery.queryable(SchoolClass.class) //表示查询学校班级的同时附带查询出班级的老师 .includes(s -> s.schoolTeachers()) //查询学校班级的同时附带查询出班级的学生(这个学生是每个班级年龄最大的三个)并且返回的学生也需要返回学生地址 .includes(s -> s.schoolStudents(),x->{ x.include(y->y.schoolStudentAddress()) .orderBy(y->y.age().desc()) .limit(3); }) .where(s -> { s.name().eq(\\\"一班\\\"); }).toList(); \"]},\"704\":{\"h\":\"Navigate\",\"t\":[\"属性\",\"是否必填\",\"默认值\",\"描述\",\"value\",\"true\",\"-\",\"表示当前对象和目标对象的关系RelationTypeEnum枚举\",\"selfProperty\",\"false\",\"-\",\"当前对象的哪个属性关联目标对象,空表示使用当前对象的主键\",\"targetProperty\",\"false\",\"-\",\"当前对象的selfProperty属性关联目标的哪个属性,空表示使用目标对象的主键\",\"mappingClass\",\"false\",\"Object.class\",\"中间表对象,必须是表对象实体字节\",\"selfMappingProperty\",\"false多对多必填\",\"-\",\"当前对象的selfProperty属性对应中间表的哪个属性,多对多不能为空\",\"targetMappingProperty\",\"false多对多必填\",\"-\",\"目标对象的targetProperty属性对应中间表的哪个属性,多对多不能为空\"]},\"705\":{\"h\":\"普通链接查询\",\"t\":[\"//班级表 @Table(\\\"school_class\\\") @Data @ToString public class SchoolClass { @Column(primaryKey = true)//主键 private String id; private String name; //一对多 一个班级多个学生 @Navigate(value = RelationTypeEnum.OneToMany, targetProperty = \\\"classId\\\") //完整配置,property忽略表示对应的主键 // @Navigate(value = RelationTypeEnum.OneToMany,selfProperty = \\\"id\\\",targetProperty = \\\"classId\\\") private List<SchoolStudent> schoolStudents; //中间表多对多配置,其中mappingClass表示中间表,selfMappingProperty表示中间表的哪个字段和当前表对应, //targetMappingProperty表示中间表的哪个字段和目标表的属性对应 @Navigate(value = RelationTypeEnum.ManyToMany , mappingClass = SchoolClassTeacher.class , selfMappingProperty = \\\"classId\\\" , targetMappingProperty = \\\"teacherId\\\") //完整配置其中自己的属性和目标属性忽略表示主键 // @Navigate(value = RelationTypeEnum.ManyToMany // , selfProperty = \\\"id\\\" // , targetProperty = \\\"id\\\" // , mappingClass = SchoolClassTeacher.class // , selfMappingProperty = \\\"classId\\\" // , targetMappingProperty = \\\"teacherId\\\") private List<SchoolTeacher> schoolTeachers; } //学生表 @Table(\\\"school_student\\\") @Data @ToString public class SchoolStudent { @Column(primaryKey = true) private String id; private String classId; private String name; @Navigate(value = RelationTypeEnum.ManyToOne,selfProperty = \\\"classId\\\",targetProperty = \\\"id\\\") private SchoolClass schoolClass; @Navigate(value = RelationTypeEnum.OneToOne,targetProperty = \\\"studentId\\\") private SchoolStudentAddress schoolStudentAddress; } //学生地址表 @Table(\\\"school_student_address\\\") @Data @ToString public class SchoolStudentAddress { private String id; private String studentId; private String address; @Navigate(value = RelationTypeEnum.ManyToOne,selfProperty = \\\"studentId\\\",targetProperty = \\\"id\\\") private SchoolStudent schoolStudent; } //教师表 @Table(\\\"school_teacher\\\") @Data @ToString public class SchoolTeacher { @Column(primaryKey = true) private String id; private String name; @Navigate(value = RelationTypeEnum.ManyToMany , mappingClass = SchoolClassTeacher.class , selfProperty = \\\"id\\\" , selfMappingProperty = \\\"teacherId\\\" , targetProperty = \\\"id\\\" , targetMappingProperty = \\\"classId\\\") private List<SchoolClass> schoolClasses; } //教师和班级的多对多关系表 @Table(\\\"school_class_teacher\\\") @Data @ToString public class SchoolClassTeacher { @Column(primaryKey = true) private String classId; @Column(primaryKey = true) private String teacherId; } \"]},\"706\":{\"h\":\"OneToOne\",\"t\":[\"学生和学生地址信息关系\",\" List<SchoolStudent> stus = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolStudentAddress)) .toList(); ==> Preparing: SELECT `id`,`class_id`,`name` FROM `school_student` <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `id`,`student_id`,`address` FROM `school_student_address` WHERE `student_id` IN (?,?,?) ==> Parameters: 1(String),2(String),3(String) <== Time Elapsed: 2(ms) <== Total: 3 [SchoolStudent(id=1, classId=class1, name=学生1, schoolClass=null, schoolStudentAddress=SchoolStudentAddress(id=address1, studentId=1, address=地址1, schoolStudent=null)), SchoolStudent(id=2, classId=class2, name=学生2, schoolClass=null, schoolStudentAddress=SchoolStudentAddress(id=address2, studentId=2, address=地址2, schoolStudent=null)), SchoolStudent(id=3, classId=class1, name=学生3, schoolClass=null, schoolStudentAddress=SchoolStudentAddress(id=address3, studentId=3, address=地址3, schoolStudent=null))] \"]},\"707\":{\"h\":\"OneToMany\",\"t\":[\"说明!!!\",\"一对多无论是否存在多的一方最终都会填充集合,永远不会为null\",\"List<SchoolClass> classes = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolStudents)) .toList(); ==> Preparing: SELECT `id`,`name` FROM `school_class` <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `id`,`class_id`,`name` FROM `school_student` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 3(ms) <== Total: 3 [SchoolClass(id=class1, name=班级1, schoolStudents=[SchoolStudent(id=1, classId=class1, name=学生1, schoolClass=null, schoolStudentAddress=null), SchoolStudent(id=3, classId=class1, name=学生3, schoolClass=null, schoolStudentAddress=null)], schoolTeachers=null), SchoolClass(id=class2, name=班级2, schoolStudents=[SchoolStudent(id=2, classId=class2, name=学生2, schoolClass=null, schoolStudentAddress=null)], schoolTeachers=null), SchoolClass(id=class3, name=班级3, schoolStudents=[], schoolTeachers=null)] \"]},\"708\":{\"h\":\"ManyToOne\",\"t\":[\"List<SchoolStudent> stus = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolClass)) .toList(); ==> Preparing: SELECT `id`,`class_id`,`name` FROM `school_student` <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `id`,`name` FROM `school_class` WHERE `id` IN (?,?) ==> Parameters: class2(String),class1(String) <== Time Elapsed: 2(ms) <== Total: 2 [SchoolStudent(id=1, classId=class1, name=学生1, schoolClass=SchoolClass(id=class1, name=班级1, schoolStudents=null, schoolTeachers=null), schoolStudentAddress=null), SchoolStudent(id=2, classId=class2, name=学生2, schoolClass=SchoolClass(id=class2, name=班级2, schoolStudents=null, schoolTeachers=null), schoolStudentAddress=null), SchoolStudent(id=3, classId=class1, name=学生3, schoolClass=SchoolClass(id=class1, name=班级1, schoolStudents=null, schoolTeachers=null), schoolStudentAddress=null)] \"]},\"709\":{\"h\":\"多对多\",\"t\":[\"班级和老师之间的关系\",\"说明!!!\",\"多对多无论是否存在多的一方最终都会填充集合,永远不会为null\",\"List<SchoolClass> classes = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolTeachers)) .toList(); ==> Preparing: SELECT `id`,`name` FROM `school_class` <== Time Elapsed: 1(ms) <== Total: 3 ==> Preparing: SELECT `class_id`,`teacher_id` FROM `school_class_teacher` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 3(ms) <== Total: 3 ==> Preparing: SELECT `id`,`name` FROM `school_teacher` WHERE `id` IN (?,?) ==> Parameters: teacher2(String),teacher1(String) <== Time Elapsed: 2(ms) <== Total: 2 [SchoolClass(id=class1, name=班级1, schoolStudents=null, schoolTeachers=[SchoolTeacher(id=teacher1, name=老师1, schoolClasses=null), SchoolTeacher(id=teacher2, name=老师2, schoolClasses=null)]), SchoolClass(id=class2, name=班级2, schoolStudents=null, schoolTeachers=[SchoolTeacher(id=teacher2, name=老师2, schoolClasses=null)]), SchoolClass(id=class3, name=班级3, schoolStudents=null, schoolTeachers=[])] \"]},\"710\":{\"h\":\"多次include\",\"t\":[\"查询班级下面的所有老师和学生\",\"List<SchoolClass> classes = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolTeachers)) .include(o -> o.many(SchoolClass::getSchoolStudents)) .toList(); ==> Preparing: SELECT `id`,`name` FROM `school_class` <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `class_id`,`teacher_id` FROM `school_class_teacher` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `id`,`name` FROM `school_teacher` WHERE `id` IN (?,?) ==> Parameters: teacher2(String),teacher1(String) <== Time Elapsed: 2(ms) <== Total: 2 ==> Preparing: SELECT `id`,`class_id`,`name` FROM `school_student` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 1(ms) <== Total: 3 \"]},\"711\":{\"h\":\"多关联查询\"},\"712\":{\"h\":\"省市区\",\"t\":[\"@Table(\\\"t_province\\\") @Data @ToString public class Province { @Column(primaryKey = true) private String code; private String name; @Navigate(value = RelationTypeEnum.OneToMany,targetProperty = \\\"provinceCode\\\") private List<City> cities; } @Table(\\\"t_city\\\") @Data @ToString public class City { @Column(primaryKey = true) private String code; private String provinceCode; private String name; @Navigate(value = RelationTypeEnum.OneToMany,targetProperty = \\\"cityCode\\\") private List<Area> areas; } @Table(\\\"t_area\\\") @Data @ToString public class Area { @Column(primaryKey = true) private String code; private String provinceCode; private String cityCode; private String name; } \",\"获取对应的省份下的市区和区县\",\"List<Province> list = easyQuery.queryable(Province.class) .include(o -> o.many(Province::getCities).include(x -> x.many(City::getAreas))) .toList(); ==> Preparing: SELECT `code`,`name` FROM `t_province` <== Time Elapsed: 1(ms) <== Total: 2 ==> Preparing: SELECT `code`,`province_code`,`name` FROM `t_city` WHERE `province_code` IN (?,?) ==> Parameters: 33(String),32(String) <== Time Elapsed: 2(ms) <== Total: 24 ==> Preparing: SELECT `code`,`province_code`,`city_code`,`name` FROM `t_area` WHERE `city_code` IN (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ==> Parameters: 3211(String),3310(String),3210(String),3208(String),3307(String),3207(String),3306(String),3206(String),3305(String),3205(String),3304(String),3204(String),3303(String),3203(String),3302(String),3202(String),3213(String),3301(String),3201(String),3212(String),3311(String),3309(String),3209(String),3308(String) <== Time Elapsed: 4(ms) <== Total: 197 \",\"关联子查询过滤\",\" List<Province> provinces = easyQuery.queryable(Province.class) .include(o -> o.many(Province::getCities).where(x->x.eq(City::getCode,\\\"3306\\\")).include(x -> x.many(City::getAreas).where(y->y.eq(Area::getCode,\\\"330602\\\")))) .toList(); ==> Preparing: SELECT `code`,`name` FROM `t_province` <== Time Elapsed: 3(ms) <== Total: 2 ==> Preparing: SELECT `code`,`province_code`,`name` FROM `t_city` WHERE `province_code` IN (?,?) AND `code` = ? ==> Parameters: 33(String),32(String),3306(String) <== Time Elapsed: 3(ms) <== Total: 1 ==> Preparing: SELECT `code`,`province_code`,`city_code`,`name` FROM `t_area` WHERE `city_code` IN (?) AND `code` = ? ==> Parameters: 3306(String),330602(String) <== Time Elapsed: 2(ms) <== Total: 1 [Province(code=32, name=江苏省, cities=[]), Province(code=33, name=浙江省, cities=[City(code=3306, provinceCode=33, name=绍兴市, areas=[Area(code=330602, provinceCode=33, cityCode=3306, name=越城区)])])] \"]},\"713\":{\"h\":\"关联查询VO返回自定义列\",\"t\":[\"针对关联查询的返回结果如果需要支持vo对象返回,譬如学生和班级是一对多的关系,但是我查询学生的时候只希望联级查询班级的id、名称不希望查询出额外信息,那么可以通过vo的形式来返回自定义列的关联查询。\",\"说明!!!\",\"虽然include方法支持vo对象返回,但是需要满足返回对象必须包含navigate映射的属性,就是说navigate的selfProperty和targetProperty可以以不同的列返回,但是必须存在于返回结果中,因为关联查询采用的是splitQuery\",\"方法\",\"描述\",\"说明\",\"columnInclude\",\"如果映射属性是对象\",\"支持最后一个参数为表达式,用来实现VO查询需要实现的列处理,如果不填写默认columnAll\",\"columnIncludeMany\",\"如果映射属性是集合\",\"支持最后一个参数为表达式,用来实现VO查询需要实现的列处理,如果不填写默认columnAll\",\" List<SchoolStudent> list1 = easyQuery.queryable(SchoolStudent.class) //一对一查询启用追踪并且对子查询逻辑删除禁用 .include(o -> o.one(SchoolStudent::getSchoolStudentAddress).asTracking().disableLogicDelete()) .toList(); \",\"//学生VO对象 @Data public class SchoolStudentVO { private String id; private String classId; private String name; @Navigate(RelationTypeEnum.ManyToOne)//VO对象使用只需要定义关联关系,其余信息不需要定义,定义了也会忽略 private SchoolClassVO schoolClass; @Navigate(RelationTypeEnum.OneToOne)//VO对象使用只需要定义关联关系,其余信息不需要定义,定义了也会忽略 private SchoolStudentAddressVO schoolStudentAddress; } //学生地址VO对象 @Data @ToString public class SchoolStudentAddressVO { private String id; private String studentId; private String address; @Navigate(value = RelationTypeEnum.ManyToOne)//VO对象使用只需要定义关联关系,其余信息不需要定义,定义了也会忽略 private SchoolStudentVO schoolStudent; } //班级 @Data public class SchoolClassVO { private String id; private String name; @Navigate(RelationTypeEnum.OneToMany) private List<SchoolStudentVO> schoolStudents; @Navigate(RelationTypeEnum.ManyToMany) private List<SchoolTeacherVO> schoolTeachers; } //教师 @Data @ToString public class SchoolTeacherVO { private String id; private String name; } \",\"通过VO返回实现自定义列,并且实现额外的处理\",\"//查询学生表,并且额外查出对应的班级表 //一对一 List<SchoolStudentVO> list1 = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolClass)) .select(SchoolStudentVO.class,o->o .columnAll() //columnInclude表示单个关联属性的映射,多个采用columnIncludeMany,关联查询结果将学生表的班级 //信息映射到VO对的班级信息上面 .columnInclude(SchoolStudent::getSchoolClass,SchoolStudentVO::getSchoolClass) ) .toList(); ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE t.`id` IN (?,?) ==> Parameters: class2(String),class1(String) <== Time Elapsed: 1(ms) <== Total: 2 //一对一自定义列 List<SchoolStudentVO> list1 = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolClass)) .select(SchoolStudentVO.class,o->o .columnAll() //将学生表信息查询额外查询出班级表,并且班级表只查询id不查询其他信息 .columnInclude(SchoolStudent::getSchoolClass,SchoolStudentVO::getSchoolClass,s->s.column(SchoolClassVO::getId)) ) .toList(); ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t <== Time Elapsed: 8(ms) <== Total: 3 ==> Preparing: SELECT t.`id` FROM `school_class` t WHERE t.`id` IN (?,?) ==> Parameters: class2(String),class1(String) <== Time Elapsed: 3(ms) <== Total: 2 //一对一自定义sql List<SchoolStudentVO> list1 = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolStudentAddress).asTracking().disableLogicDelete()) .select(SchoolStudentVO.class,o->o.columnAll() .columnInclude(SchoolStudent::getSchoolStudentAddress,SchoolStudentVO::getSchoolStudentAddress)) .toList(); ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t <== Time Elapsed: 8(ms) <== Total: 3 ==> Preparing: SELECT t.`id`,t.`student_id`,t.`address` FROM `school_student_address` t WHERE t.`student_id` IN (?,?,?) ==> Parameters: 1(String),2(String),3(String) <== Time Elapsed: 3(ms) <== Total: 3 //一对多 List<SchoolClassVO> list1 = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolStudents)) .select(SchoolClassVO.class,o->o.columnAll() .columnIncludeMany(SchoolClass::getSchoolStudents,SchoolClassVO::getSchoolStudents)) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t WHERE t.`class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 2(ms) <== Total: 3 //多对多 List<SchoolClassVO> list2 = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolTeachers)) .select(SchoolClassVO.class,o->o.columnAll() .columnIncludeMany(SchoolClass::getSchoolTeachers,SchoolClassVO::getSchoolTeachers)) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t <== Time Elapsed: 13(ms) <== Total: 3 ==> Preparing: SELECT `class_id`,`teacher_id` FROM `school_class_teacher` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 7(ms) <== Total: 3 ==> Preparing: SELECT t.`id`,t.`name` FROM `school_teacher` t WHERE t.`id` IN (?,?) ==> Parameters: teacher2(String),teacher1(String) <== Time Elapsed: 8(ms) <== Total: 2 \"]},\"714\":{\"h\":\"表达式复用\",\"t\":[\"针对复杂表达式很多时候我们需要复用表达式,而不是重复定义,我们可以使用easy-query提供的cloneQueryable方法来克隆一个一模一样的, 因为where、order、select等会让当前表达式的内容是追加上去的而不是重新生成一个新的\",\"//首先我们定义一个表达式 Queryable<BlogEntity> sql = easyQuery .queryable(Topic.class) .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle)) .groupBy((t, t1) -> t1.column(BlogEntity::getId)) .select(BlogEntity.class, (t, t1) -> t1.column(BlogEntity::getId).columnSum(BlogEntity::getScore)); //克隆一个新的 Queryable<BlogEntity> blogEntityQueryable = sql.cloneQueryable(); //对其添加select常量 String countSql = sql.cloneQueryable().select(\\\"COUNT(1)\\\").toSQL(); Assert.assertEquals(\\\"SELECT COUNT(1) FROM (SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id`) t2\\\", countSql); //对其limit String limitSql = sql.limit(2, 2).toSQL(); Assert.assertEquals(\\\"SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id` LIMIT 2 OFFSET 2\\\", limitSql); //在对原先的进行操作发现select和limit并没有赋值上去,所以cloneQueryable生效 String sql1 = blogEntityQueryable.select(Long.class, o -> o.columnCount(BlogEntity::getId)).toSQL(); Assert.assertEquals(\\\"SELECT COUNT(t2.`id`) AS `id` FROM (SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id`) t2\\\", sql1); \"]},\"715\":{\"h\":\"自定义列输出\",\"t\":[\"easy-query的select目前支持两种方式返回自定义列，一个是自己手动进行select的column一个是加入返回对象，返回对象被解析的columnName和sql的返回列名一致才会\"]},\"716\":{\"h\":\"java对象\"},\"717\":{\"h\":\"输出指定列\"},\"718\":{\"h\":\"相同属性不同列名不映射\",\"t\":[\"BlogEntity.url和BlogEntityTest2.url在Bean层面拥有一样的属性名称一样的属性类型,但是因为BlogEntityTest2.url映射到my_url列上所以无法自动映射\"]},\"719\":{\"h\":\"全字段查询\",\"t\":[\"全字段查询自动以resultClass为主映射columnName相同列\"]},\"720\":{\"h\":\"追加映射字段\"},\"721\":{\"h\":\"忽略查询字段\",\"t\":[\"查询映射到对象BlogEntityTest2在原来的查询结果上忽略BlogEntity.title字段的查询映射,因为columnAll如果真是查询表所有字段但是映射到BlogEntityTest2后会丢失所以没有必要查询全字段,直接查询映射字段即可\"]},\"722\":{\"h\":\"select子查询\",\"t\":[\"easy-query可以轻松的实现select 子查询,并且有手动和自动两种方式具体sql如下\",\"实现sql\",\"select a,b,c,(select count(t1.id) from a t1) as xx from b \"]},\"723\":{\"h\":\"数据库对象模型\"},\"724\":{\"h\":\"自动模式\",\"t\":[\"查询企业id和企业下有多少个用户\",\" List<Draft2<String, Long>> list = easyEntityQuery.queryable(Company.class) .where(com -> com.name().like(\\\"xx公司\\\")) .select(com -> Select.DRAFT.of( com.id(), com.users().count() )).toList(); SELECT t.`id` AS `value1`, (SELECT COUNT(*) FROM `t_user` t2 WHERE t2.`company_id` = t.`id`) AS `value2` FROM `t_company` t WHERE t.`name` LIKE '%xx公司%' \",\"查询企业id和企业下有多少个姓李的用户数\",\" List<Draft2<String, Long>> list = easyEntityQuery.queryable(Company.class) .where(com -> com.name().like(\\\"xx公司\\\")) .select(com -> Select.DRAFT.of( com.id(), com.users().where(user->user.name().likeMatchLeft(\\\"李\\\")).count() )).toList(); SELECT t.`id` AS `value1`, (SELECT COUNT(*) FROM `t_user` t2 WHERE t2.`company_id` = t.`id` AND t2.`name` LIKE '李%') AS `value2` FROM `t_company` t WHERE t.`name` LIKE '%xx公司%' \",\"查询企业id和企业下有多少个姓李的用户年龄总和\",\" List<Draft2<String, Integer>> list = easyEntityQuery.queryable(Company.class) .where(com -> com.name().like(\\\"xx公司\\\")) .select(com -> Select.DRAFT.of( com.id(), com.users().where(user->user.name().likeMatchLeft(\\\"李\\\")).sum(x->x.age()) )).toList(); SELECT t.`id` AS `value1`, IFNULL((SELECT SUM(t2.`age`) FROM `t_user` t2 WHERE t2.`company_id` = t.`id` AND t2.`name` LIKE '李%'), 0) AS `value2` FROM `t_company` t WHERE t.`name` LIKE '%xx公司%' \"]},\"725\":{\"h\":\"手动模式\"},\"726\":{\"h\":\"sum连表统计\",\"t\":[\"max、min 同理\"]},\"727\":{\"h\":\"select\",\"t\":[\"easy-query的select是用来终结当前表达式生成新的表达式的方式\"]},\"728\":{\"h\":\"select后置风格\",\"t\":[\"和原生SQL不同，在easy-query提供的DSL中，select语句出现在where，orderBy，groupBy，having等之后,如果表达式调用了select那么这个sql就是确定了的如果再次调用where那么前面的表达式将被视为别名表\"]},\"729\":{\"h\":\"API\",\"t\":[\"方法\",\"参数\",\"返回\",\"描述\",\"select(SqlExpression selectExpression)\",\"列选择器\",\"this\",\",返回当前Queryable对象指定的列,用于按需查询\",\"select(Class<TR> resultClass)\",\"列选择器返回对象\",\"this\",\",返回当前Queryable对象属性映射所对应的列名和返回结果属性列名一样的列,即两者属性名可以不一致但是只要两者属性名都是映射为相同columnName即可互相映射，如果返回结果属性类型不包容原属性类型，比如String->Integer 那么可能会出现转换失败,\",\"select(Class<TR> resultClass, SqlExpression selectExpression)\",\"列选择器返回对象,列选择器\",\"this\",\",返回当前Queryable对象属性映射所对应的列名和返回结果属性列名一样的列,即两者属性名可以不一致但是只要两者属性名都是映射为相同columnName即可互相映射，如果返回结果属性类型不包容原属性类型，比如String->Integer 那么可能会出现转换失败,区别就是可以自己手动指定列,\",\"lambda表达式树模式下：select(Class<TR> resultClass)\",\"列选择器返回对象\",\"this\",\"同上面的select(Class<TR> resultClass)\",\"lambda表达式树模式下：select()\",\"列选择器返回对象\",\"this\",\"等同于select(SqlExpression selectExpression)下的select(s -> s.columnAll())\",\"lambda表达式树模式下：select(Func<T... ,R> expr)\",\"列选择器返回对象\",\"this\",\"接受一个lambda表达式为参数,根据在lambda表达式里声明的对象的setter或是声明的匿名对象的类成员字段声明，与lambda入参的getter，以此完成数据库字段与类字段的映射\",\"说明!!!\",\"代理模式下select的第一个参数是selector选择器,第二个参数开始才是真正的表,生成匿名表表示select * from table如果后续有新的where | order | group ....会把这个条件当成匿名表来处理 select * from (select * from table) t每个select都是带class的都是将起变成匿名表\"]},\"730\":{\"h\":\"selector说明\"},\"731\":{\"h\":\"按需返回VO对象\",\"t\":[\"定义返回的VO\",\" @Data @ToString public class BlogEntityVO1 { /** * 评分 */ private BigDecimal score; /** * 状态 */ @Column(value = \\\"status\\\") private Integer abc; /** * 排序 */ private BigDecimal order; /** * 是否置顶 */ private Boolean isTop; /** * 是否置顶 */ private Boolean top; } \",\"注意点及说明!!!\",\"EasyEntityQuery的直接select(vo.class)和直接返回select(new vo)的区别在于您是否要对后续操作进行处理,简单理解为就是操作匿名表,如果不需要只需要返回结果那么可以直接使用VO.class不需要生成proxy,但是如果您需要在后续继续操作比如join其他表那么select需要返回对应的Proxy或者使用MapTypeProxy\",\"如果出现多表属性映射,可以将相识度高的先进行全列查询,然后将不需要的进行忽略\"]},\"732\":{\"h\":\"按需快速join返回列\",\"t\":[\"这边限制VO对象返回Topic的id其他都是Blog的属性\",\" @Data @ToString public class BlogEntityVO2 { /** * 希望返回Topic的id其他都是Blog的属性 */ private String id; /** * 标题 */ private String title; /** * 内容 */ @Column(large = true) private String content; /** * 博客链接 */ private String url; /** * 点赞数 */ private Integer star; /** * 发布时间 */ private LocalDateTime publishTime; /** * 评分 */ private BigDecimal score; /** * 状态 */ private Integer status; /** * 排序 */ private BigDecimal order; /** * 是否置顶 */ private Boolean isTop; /** * 是否置顶 */ private Boolean top; private LocalDateTime createMyTime; } \"]},\"733\":{\"h\":\"匿名表\",\"t\":[\"表达式每次select将会生成一个匿名表如果需要后续操作那么可以对其进行再次操作\",\"生成的sql语句为\",\" SELECT t2.`id`, t2.`stars`, t2.`title`, t2.`create_time` FROM (SELECT t.`id` AS `blogId`, COUNT(*) AS `blogCount` FROM `t_blog` t WHERE t.`deleted` = false AND t.`star` > 1 GROUP BY t.`id`) t1 LEFT JOIN `t_topic` t2 ON t1.`blogId` = t2.`id` WHERE t1.`blogCount` <= 123 \",\"具体表达式代码为如下\"]},\"734\":{\"h\":\"匿名表案例2\",\"t\":[\"对一张表进行开窗函数处理并且进行筛选\",\"SELECT t1.`id`, t1.`create_time`, t1.`update_time`, t1.`create_by`, t1.`update_by`, t1.`deleted`, t1.`title`, t1.`content`, t1.`url`, t1.`star`, t1.`publish_time`, t1.`score`, t1.`status`, t1.`order`, t1.`is_top`, t1.`top`, t1.`num` AS `num` FROM (SELECT t.`id`, t.`create_time`, t.`update_time`, t.`create_by`, t.`update_by`, t.`deleted`, t.`title`, t.`content`, t.`url`, t.`star`, t.`publish_time`, t.`score`, t.`status`, t.`order`, t.`is_top`, t.`top`, ROW_NUMBER() OVER(PARTITION BY t.`title` ORDER BY t.`score` DESC) AS `num` FROM `t_blog` t WHERE t.`deleted` = false AND t.`star` < 12) t1 --生成匿名表 WHERE t1.`num` < 1 \",\"//创建dto额外多一个num字段 @Data @EntityProxy public class BlogPartitionEntityVO extends BlogEntity{ private Integer num; } List<BlogPartitionEntityVO> list = easyEntityQuery.queryable(BlogEntity.class) .where(b -> b.star().lt(12)) .select(b -> { Expression expression = b.expression(); BlogPartitionEntityVOProxy r = new BlogPartitionEntityVOProxy(); r.selectAll(b); r.num().set( expression.sqlType(\\\"ROW_NUMBER() OVER(PARTITION BY {0} ORDER BY {1} DESC)\\\", c -> c.expression(b.title()).expression(b.score())) .setPropertyType(Integer.class) ); return r; }) .where(b -> b.num().lt(1)) .toList(); \"]},\"735\":{\"h\":\"toMap\",\"t\":[\"//查询所有并且将其他表字段查询出来 List<Map<String, Object>> list = easyEntityQuery.queryable(SysUser.class) .leftJoin(Topic.class, (s, t2) -> s.id().eq(t2.id())) .where((s1, t2) -> s1.id().eq(\\\"1\\\")) .select((s1, t2) -> new MapTypeProxy().selectAll(s1).selectExpression(t2.title().as(\\\"abc\\\"))) .toList(); Map<String, Object> map = easyQuery.queryable(Topic.class) .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where(o -> o.eq(Topic::getId, \\\"2\\\")) .select(BlogEntityVO2.class, (t, t1) -> t1.columnAll().then(t).column(Topic::getId)//如果不进行忽略两个id都查询,但是默认会把后面的覆盖掉前面的 ).toMap(); //相同的代码如果使用toMap将会抛出 IllegalStateException 异常:Duplicate key found: id \"]},\"736\":{\"h\":\"这个sql怎么写\",\"t\":[\"本章节主要是将一些复杂sql的编写方式用表达式展现出来\"]},\"737\":{\"h\":\"案例一\",\"t\":[\"查询对应的时间函数年份月份进行分组并且取3个月内的\",\" SELECT YEAR(日期) AS 年份， MONTH(日期) AS 月份 SUM(收入) AS 月收入 FROM your_table WHERE 日期 >= CURDATE()- INTERVAL 3 MONTH GROUP BY 年份，月份 ORDER BY 年份，月份; \",\"List<Draft3<Integer, Integer, Integer>> list = easyEntityQuery.queryable(BlogEntity.class) .where(o -> o.createTime().gt(o._now().plusMonths(-3))) //WHERE 日期 >= CURDATE()- INTERVAL 3 MONTH .groupBy(o -> GroupKeys.TABLE1.of(o.createTime().year(), o.createTime().month()))//GROUP BY 年份，月份 .orderBy(o -> { o.key1().asc(); // ORDER BY 年份，月份; o.key2().asc(); }).select(o -> Select.DRAFT.of( //采用草稿类型 o.key1(), //YEAR(日期) AS 年份， o.key2(), //MONTH(日期) AS 月份 o.sum(o.group().star()) //SUM(收入) AS 月收入 )).toList(); ==> Preparing: SELECT YEAR(t.`create_time`) AS `value1`,MONTH(t.`create_time`) AS `value2`,SUM(t.`star`) AS `value3` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`create_time` > date_add(NOW(), interval (?) month) GROUP BY YEAR(t.`create_time`),MONTH(t.`create_time`) ORDER BY YEAR(t.`create_time`) ASC,MONTH(t.`create_time`) ASC ==> Parameters: false(Boolean),-3(Integer) <== Time Elapsed: 4(ms) <== Total: 0 \"]},\"738\":{\"h\":\"案例二\",\"t\":[\"select a.id,a.name from table a where (select count(*) as num from table b where b.box_id=a.id ) = 0 \",\"List<Draft2<String, String>> list = easyEntityQuery.queryable(BlogEntity.class) .where(o -> { Query<Long> longQuery = easyEntityQuery.queryable(Topic.class) .where(x -> x.id().eq(o.id())).selectCount();//创建子查询的count然后和0常量进行比较 o.SQLParameter().valueOf(0L) .eq(longQuery); }).select(o -> Select.DRAFT.of( o.id(), o.url() )).toList(); ==> Preparing: SELECT t.`id` AS `value1`,t.`url` AS `value2` FROM `t_blog` t WHERE t.`deleted` = ? AND ? = (SELECT COUNT(*) FROM `t_topic` t1 WHERE t1.`id` = t.`id`) ==> Parameters: false(Boolean),0(Long) \"]},\"739\":{\"h\":\"案例三\",\"t\":[\"select a,b,c,(select count(*) from a t1 where t.id=b.id) as xx from b \",\"List<Draft3<String, String, Long>> list = easyEntityQuery.queryable(BlogEntity.class) .where(o -> { o.id().eq(\\\"123\\\"); }).select(o -> Select.DRAFT.of( o.id(), o.url(), o.subQuery(() -> easyEntityQuery.queryable(Topic.class).where(x -> x.id().eq(o.id())).selectCount()) )).toList(); ==> Preparing: SELECT t.`id` AS `value1`,t.`url` AS `value2`,(SELECT COUNT(*) FROM `t_topic` t1 WHERE t1.`id` = t.`id`) AS `value3` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`id` = ? ==> Parameters: false(Boolean),123(String) \"]},\"740\":{\"h\":\"大数据流式查询返回❗️❗️❗️\",\"t\":[\"easy-query提供了大数据流式返回,针对大数据量的数据无法一次在内存中获取,那么可以通过使用当前方法返回对应的结果集,通常用于excel或者部分文件写入功能,并且支持分表分库\",\"注意\",\"需要配合java8的try resource或者try finally close来关闭资源,并且需要自行处理SQLException,和mybatis不同的是期间无需开始事务也可以使用 如果您是mysql、pgsql那么请查看文档底部问题 mysql数据库那么需要默认在连接字符串添加配置信息useCursorFetch=true,譬如jdbc:mysql://127.0.0.1:3306/eq_db?useCursorFetch=true pgsql数据库那么需要满足fechSize设置需要 > 0、jdbc连接字符串不能加 preferQueryMode =simple、需要设置autocommit为false\",\"注意\",\"如果本次采用toStreamResult那么将不会支持include和fillMany和fillOne的api\"]},\"741\":{\"h\":\"API\",\"t\":[\"参数\",\"作用\",\"描述\",\"fetchSize\",\"设置每次拉取的大小\",\"用来放置流式拉取一次性拉取过多数据用户可以自行设置\",\"SQLConsumer<Statement>\",\"设置statement的参数属性\",\"比如fetchSize、fetchDirection等等\"]},\"742\":{\"h\":\"案例\",\"t\":[\" try(JdbcStreamResult<BlogEntity> streamResult = easyQuery.queryable(BlogEntity.class).where(o -> o.le(BlogEntity::getStar, 100)).orderByAsc(o -> o.column(BlogEntity::getCreateTime)).toStreamResult(1000)){ LocalDateTime begin = LocalDateTime.of(2020, 1, 1, 1, 1, 1); int i = 0; for (BlogEntity blog : streamResult.getStreamIterable()) { String indexStr = String.valueOf(i); Assert.assertEquals(indexStr, blog.getId()); Assert.assertEquals(indexStr, blog.getCreateBy()); Assert.assertEquals(begin.plusDays(i), blog.getCreateTime()); Assert.assertEquals(indexStr, blog.getUpdateBy()); Assert.assertEquals(begin.plusDays(i), blog.getUpdateTime()); Assert.assertEquals(\\\"title\\\" + indexStr, blog.getTitle()); // Assert.assertEquals(\\\"content\\\" + indexStr, blog.getContent()); Assert.assertEquals(\\\"http://blog.easy-query.com/\\\" + indexStr, blog.getUrl()); Assert.assertEquals(i, (int) blog.getStar()); Assert.assertEquals(0, new BigDecimal(\\\"1.2\\\").compareTo(blog.getScore())); Assert.assertEquals(i % 3 == 0 ? 0 : 1, (int) blog.getStatus()); Assert.assertEquals(0, new BigDecimal(\\\"1.2\\\").multiply(BigDecimal.valueOf(i)).compareTo(blog.getOrder())); Assert.assertEquals(i % 2 == 0, blog.getIsTop()); Assert.assertEquals(i % 2 == 0, blog.getTop()); Assert.assertEquals(false, blog.getDeleted()); i++; } } catch (SQLException e) { throw new RuntimeException(e); } ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `star` <= ? ORDER BY `create_time` ASC ==> Parameters: false(Boolean),100(Integer) <== Time Elapsed: 6(ms) \"]},\"743\":{\"h\":\"API\",\"t\":[\"参数\",\"作用\",\"描述\",\"Function<Stream<T>,TR>\",\"拉取器\",\"用来返回处理迭代结果\",\"fetchSize\",\"设置每次拉取的大小\",\"用来放置流式拉取一次性拉取过多数据用户可以自行设置\",\"SQLConsumer<Statement>\",\"设置statement的参数属性\",\"比如fetchSize、fetchDirection等等\"]},\"744\":{\"h\":\"案例\",\"t\":[\" Optional<Topic> traceId1 = easyProxyQuery.queryable(TopicProxy.createTable()) .filterConfigure(NotNullOrEmptyValueFilter.DEFAULT) .where(o -> o.eq(o.t().id(), \\\"1\\\")) .fetch(o -> { return o.findFirst(); },1); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? ==> Parameters: 1(String) <== Time Elapsed: 2(ms) Set<Topic> traceId1 = easyProxyQuery.queryable(TopicProxy.createTable()) .where(o -> o.eq(o.t().id(), \\\"1\\\")) .fetch(o -> { return o.peek(x -> x.setTitle(traceId)).collect(Collectors.toSet()); },100); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? ==> Parameters: 1(String) <== Time Elapsed: 3(ms) \"]},\"745\":{\"h\":\"mysql不生效\",\"t\":[\"https://blog.csdn.net/dkz97/article/details/116355022\"]},\"746\":{\"h\":\"pgsql不生效\",\"t\":[\"https://blog.csdn.net/dkz97/article/details/115643516\"]},\"747\":{\"h\":\"相关搜索\",\"t\":[\"流式结果流式查询迭代返回游标查询\"]},\"748\":{\"h\":\"map结果返回\",\"t\":[\"easy-query针对查询结果支持将结果动态返回以Map<String,Object>格式返回,默认Key忽略大小写(Locale.ENGLISH)\"]},\"749\":{\"h\":\"查询sqlQuery\",\"t\":[\"强类型结果返回\"]},\"750\":{\"h\":\"无参数强类型返回\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.sqlQuery(\\\"SELECT * FROM t_blog t\\\", BlogEntity.class); ==> Preparing: SELECT * FROM t_blog t <== Total: 100 \"]},\"751\":{\"h\":\"有参数强类型返回\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.sqlQuery(\\\"SELECT * FROM t_blog t where t.id=?\\\", BlogEntity.class, Collections.singletonList(\\\"1\\\")); ==> Preparing: SELECT * FROM t_blog t where t.id=? ==> Parameters: 1(String) <== Total: 1 \"]},\"752\":{\"h\":\"查询sqlQueryMap\",\"t\":[\"Map返回默认key忽略大小写\"]},\"753\":{\"h\":\"无参数Map返回\",\"t\":[\" List<Map<String, Object>> blogs = easyQuery.sqlQueryMap(\\\"SELECT * FROM t_blog t\\\"); ==> Preparing: SELECT * FROM t_blog t <== Total: 100 \"]},\"754\":{\"h\":\"有参数Map返回\",\"t\":[\"List<Map<String, Object>> blogs = easyQuery.sqlQueryMap(\\\"SELECT * FROM t_blog t where t.id=?\\\", Collections.singletonList(\\\"1\\\")); ==> Preparing: SELECT * FROM t_blog t where t.id=? ==> Parameters: 1(String) <== Total: 1 \"]},\"755\":{\"h\":\"Map\",\"t\":[\"返回结果为Map<String,Object> ,默认Key忽略大小写(Locale.ENGLISH)\"]},\"756\":{\"h\":\"联合查询 UNION (ALL)\",\"t\":[\"easy-query支持union，union all，并且支持对应的union下的分片查询\",\"实现sql\",\"select * from ( select a,b from t union select c,d from t1 ) t where t.id='1' \",\"警告\",\"！！！union或者union all需要表达式Queryable<T>都是相同的，您也可以自定义对象来返回对应的结果集\",\"数据库建表脚本\",\"create table t_topic ( id varchar(32) not null comment '主键ID'primary key, stars int not null comment '点赞数', title varchar(50) null comment '标题', create_time datetime not null comment '创建时间' )comment '主题表'; \",\"java实体对象\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } \"]},\"757\":{\"h\":\"单表union\",\"t\":[\" Queryable<Topic> q1 = easyQuery .queryable(Topic.class); Queryable<Topic> q2 = easyQuery .queryable(Topic.class); Queryable<Topic> q3 = easyQuery .queryable(Topic.class); List<Topic> list = q1.union(q2, q3).where(o -> o.eq(Topic::getId, \\\"123321\\\")).toList(); \",\" ==> Preparing: SELECT t1.`id`,t1.`stars`,t1.`title`,t1.`create_time` FROM ( SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t UNION SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t UNION SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t ) t1 WHERE t1.`id` = ? ==> Parameters: 123321(String) <== Time Elapsed: 19(ms) <== Total: 0 \"]},\"758\":{\"h\":\"复杂union\",\"t\":[\"//where id Queryable<Topic> q1 = easyQuery .queryable(Topic.class).where(o->o.eq(Topic::getId,\\\"123\\\")); //where create time Queryable<Topic> q2 = easyQuery .queryable(Topic.class).where(o->o.ge(Topic::getCreateTime,LocalDateTime.of(2020,1,1,1,1))); //join Queryable<Topic> q3 = easyQuery .queryable(Topic.class).leftJoin(BlogEntity.class,(t,t1)->t.eq(t1,Topic::getId,BlogEntity::getId)) .where((t,t1)->t1.isNotNull(BlogEntity::getContent).then(t).isNotNull(Topic::getStars)); List<Topic> list = q1.union(q2, q3).where(o -> o.eq(Topic::getId, \\\"123321\\\")).toList(); \",\"==> Preparing: SELECT t1.`id`,t1.`stars`,t1.`title`,t1.`create_time` FROM ( SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`id` = ? UNION SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`create_time` >= ? UNION SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`content` IS NOT NULL AND t.`stars` IS NOT NULL ) t1 WHERE t1.`id` = ? ==> Parameters: 123(String),2020-01-01T01:01(LocalDateTime),false(Boolean),123321(String) <== Time Elapsed: 10(ms) <== Total: 0 \"]},\"759\":{\"h\":\"自定义结果集\",\"t\":[\" @Data public class TopicUnion { private String id; private Integer stars; @Column(\\\"title\\\")//列名需要对应 private String abc; } \",\" Queryable<TopicUnion> q1 = easyQuery .queryable(Topic.class).where(o->o.eq(Topic::getId,\\\"123\\\")).select(TopicUnion.class); Queryable<TopicUnion> q2 = easyQuery .queryable(Topic.class) .where(o->o.ge(Topic::getCreateTime,LocalDateTime.of(2020,1,1,1,1))) .select(TopicUnion.class); Queryable<TopicUnion> q3 = easyQuery .queryable(Topic.class).leftJoin(BlogEntity.class,(t,t1)->t.eq(t1,Topic::getId,BlogEntity::getId)) .where((t,t1)->t1.isNotNull(BlogEntity::getContent).then(t).isNotNull(Topic::getStars)) .select(TopicUnion.class); List<TopicUnion> list = q1.union(q2, q3).where(o -> o.eq(TopicUnion::getId, \\\"123321\\\")).toList(); \",\"==> Preparing: SELECT t2.`id`,t2.`stars`,t2.`title` FROM ( SELECT t.`id`,t.`stars`,t.`title` FROM `t_topic` t WHERE t.`id` = ? UNION SELECT t.`id`,t.`stars`,t.`title` FROM `t_topic` t WHERE t.`create_time` >= ? UNION SELECT t.`id`,t.`stars`,t.`title` FROM `t_topic` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`content` IS NOT NULL AND t.`stars` IS NOT NULL ) t2 WHERE t2.`id` = ? ==> Parameters: 123(String),2020-01-01T01:01(LocalDateTime),false(Boolean),123321(String) <== Time Elapsed: 6(ms) <== Total: 0 \"]},\"760\":{\"h\":\"不同表union\",\"t\":[\"Queryable<TopicUnion> q1 = easyQuery .queryable(Topic.class).where(o->o.eq(Topic::getId,\\\"123\\\")).select(TopicUnion.class); Queryable<TopicUnion> q2 = easyQuery .queryable(BlogEntity.class) .where(o->o.ge(BlogEntity::getCreateTime,LocalDateTime.of(2020,1,1,1,1))) .select(TopicUnion.class,o->o.columnAs(BlogEntity::getId,TopicUnion::getId) .columnAs(BlogEntity::getStar,TopicUnion::getStars) .columnAs(BlogEntity::getContent,TopicUnion::getAbc) ); List<TopicUnion> list = q1.unionAll(q2).where(o -> o.eq(TopicUnion::getId, \\\"123321\\\")).toList(); \",\"==> Preparing: SELECT t2.`id`,t2.`stars`,t2.`title` FROM ( SELECT t.`id`,t.`stars`,t.`title` FROM `t_topic` t WHERE t.`id` = ? UNION ALL SELECT t.`id` AS `id`,t.`star` AS `stars`,t.`content` AS `title` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`create_time` >= ? ) t2 WHERE t2.`id` = ? ==> Parameters: 123(String),false(Boolean),2020-01-01T01:01(LocalDateTime),123321(String) <== Time Elapsed: 5(ms) <== Total: 0 \"]},\"761\":{\"h\":\"where 子查询\",\"t\":[\"easy-qeury提供支持子查询包括exists、not exists、in、not in,并且有手动和自动两种方式\"]},\"762\":{\"h\":\"自动子查询\"},\"763\":{\"h\":\"数据库对象模型\"},\"764\":{\"h\":\"查询企业存在用户成年的\",\"t\":[\"List<Company> list = easyEntityQuery.queryable(Company.class) .where(com -> { com.users().where(u -> { u.age().gt(18); }).any(); }).toList(); //当上述子查询有且只有一个条件比如age>18有且只有一个条件时,并且是用来断言当前条件的,那么可以使用flatElement来展开如下写法和上述写法一样 List<Company> list = easyEntityQuery.queryable(Company.class) .where(com -> { com.users().flatElement().age().gt(18); }).toList(); SELECT t.`id`, t.`name`, t.`create_time` FROM `t_company` t WHERE EXISTS ( SELECT 1 FROM `t_user` t1 WHERE t1.`company_id` = t.`id` AND t1.`age` > 18 LIMIT 1 ) \"]},\"765\":{\"h\":\"查询企业存条件是企业所有用户平均年龄大于18\",\"t\":[\"List<Company> list = easyEntityQuery.queryable(Company.class) .where(com -> { com.users().avg(u->u.age()).gt(BigDecimal.valueOf(18)); }).toList(); SELECT t.`id`, t.`name`, t.`create_time` FROM `t_company` t WHERE IFNULL((SELECT AVG(t1.`age`) FROM `t_user` t1 WHERE t1.`company_id` = t.`id`),0) > '18' \"]},\"766\":{\"h\":\"EXISTS\"},\"767\":{\"h\":\"NOT EXISTS\"},\"768\":{\"h\":\"IN\"},\"769\":{\"h\":\"NOT IN\"},\"770\":{\"h\":\"条件比较\",\"t\":[\"easy-query的查询、修改、删除核心过滤方法就是WherePredicate和SqlPredicate两种是同一种东西,条件比较永远是columncomparevalue,column永远在左侧\"]},\"771\":{\"h\":\"API\",\"t\":[\"说明!!!\",\"代理模式下where的第一个参数是filter过滤器,第二个参数开始才是真正的表\",\"方法\",\"sql\",\"描述\",\"gt\",\">\",\"列 大于 值\",\"ge\",\">=\",\"列 大于等于 值\",\"eq\",\"=\",\"列 等于 值\",\"ne\",\"<>\",\"列 不等于 值\",\"le\",\"<=\",\"列 小于等于 值\",\"lt\",\"<\",\"列 小于 值\",\"likeMatchLeft\",\"like word%\",\"列左匹配\",\"likeMatchRight\",\"like %word\",\"列右匹配\",\"like\",\"like %word%\",\"列包含值\",\"notLikeMatchLeft\",\"not like word%\",\"列 不匹配左侧\",\"notLikeMatchRight\",\"not like %word\",\"列 不匹配右侧\",\"notLike\",\"not like %word%\",\"列不包含值\",\"isNull\",\"is null\",\"列 为null\",\"isNotNull\",\"is not null\",\"列 不为null\",\"in\",\"in\",\"列 在集合内部,集合为空返回False\",\"notIn\",\"not in\",\"列 不在集合内部,集合为空返回True\",\"rangeOpenClosed\",\"< x <=\",\"区间 (left..right] = {x | left < x <= right} 一般用于范围比如时间,小的时间在前大的时间在后\",\"rangeOpen\",\"< x <\",\"区间 (left..right) = {x | left < x < right} 一般用于范围比如时间,小的时间在前大的时间在后\",\"rangeClosedOpen\",\"<= x <\",\"[left..right) = {x | left <= x < right} 一般用于范围比如时间,小的时间在前大的时间在后\",\"rangeClosed\",\"<= x <=\",\"[left..right] = {x | left <= x <= right} 一般用于范围比如时间,小的时间在前大的时间在后\",\"columnFunc\",\"自定义\",\"自定义函数包裹column\",\"exists\",\"存在\",\"使用子查询queryable\",\"notExists\",\"不存在\",\"使用子查询queryable\"]},\"772\":{\"h\":\"动态条件\",\"t\":[\"eq、ge、isNull、isNotNull...... 一些列方法都有对应的重载,其中第一个参数boolean condition表示是否追加对应的条件,并且where一样存在重载\",\"SysUser sysUser = easyQuery.queryable(SysUser.class) .where(o -> o.eq(SysUser::getId, \\\"123xxx\\\") .like(false,SysUser::getPhone,\\\"133\\\"))//表达式like第一个参数为false所以不会添加phone的like条件到sql中 .firstOrNull() ==> Preparing: SELECT `id`,`create_time`,`username`,`phone`,`id_card`,`address` FROM `easy-query-test`.`t_sys_user` WHERE `id` = ? LIMIT 1 ==> Parameters: 123xxx(String) <== Time Elapsed: 3(ms) <== Total: 0 \"]},\"773\":{\"h\":\"null pointer\",\"t\":[\" Map<String,String> phone=null; SysUser sysUser = easyQuery.queryable(SysUser.class) .where(o -> o.eq(SysUser::getId, \\\"123xxx\\\") .like(phone!=null&&phone.containsKey(\\\"phone\\\"),SysUser::getPhone,phone.get(\\\"phone\\\"))) .firstOrNull(); //虽然我们对phone进行了判断非null并且包含对应的phone的key,但是因为第二个参数是直接获取值会导致phone.get(\\\"phone\\\")的phone还是null所以会报错空指针异常 \"]},\"774\":{\"h\":\"动态条件2\",\"t\":[\"Map<String,String> phone=null; SysUser sysUser = easyQuery.queryable(SysUser.class) .where(o -> o.eq(SysUser::getId, \\\"123xxx\\\")) .where(phone!=null&&phone.containsKey(\\\"phone\\\"),o -> o.like(SysUser::getPhone,phone.get(\\\"phone\\\")))//where与where之间采用and链接 .firstOrNull(); ==> Preparing: SELECT `id`,`create_time`,`username`,`phone`,`id_card`,`address` FROM `easy-query-test`.`t_sys_user` WHERE `id` = ? LIMIT 1 ==> Parameters: 123xxx(String) <== Time Elapsed: 2(ms) <== Total: 0 \"]},\"775\":{\"h\":\"超级功能\",\"t\":[\"easy-query的超级功能主要是分表分库和读写分离,作者有着多年的分库分表经验,并且在其他语言上也有一套相对完善的分表分库orm扩展 (sharding-core)[https://github.com/dotnetcore/sharding-core]\"]},\"776\":{\"h\":\"目录\",\"t\":[\"《分表》 数据库表进行分表处理\",\"《分库》 数据库对象分库处理\"]},\"777\":{\"h\":\"案例源码\",\"t\":[\"所有的超级功能的案例源码都在easy-query-sample\"]},\"778\":{\"h\":\"分库分表\",\"t\":[\"easy-query提供了高效,高性能的分片机制,完美的屏蔽分片带来的业务复杂度,不同于sharding-jdbc的sql的antlr解析采用自带的表达式解析性能高效,并且不同于ShardingSphere-Proxy的代理模式,导致未分片的对象也需要走代理,并且需要多次jdbc,easy-query采用客户端分片保证分片下的高性能查询结果返回,并且原生orm框架自带无需使用额外组件,更少的依赖来保证程序的健壮与可控\"]},\"779\":{\"h\":\"创建数据库\",\"t\":[\"我们还是以订单表作为分库分表的对象，默认按订单id进行分库,后续按订单uid进行分表\",\"订单id取模3进行分库,uid模2进行分表\"]},\"780\":{\"h\":\"配置文件\",\"t\":[\"因为分片涉及到跨表聚合所以需要设置默认数据源的连接池大小，并且设置分片可用数据源大小\",\" server: port: 8081 spring: datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/easy_sample?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root druid: initial-size: 10 max-active: 100 easy-query: enable: true name-conversion: underlined database: mysql defaultDataSourceMergePoolSize: 50 \",\"我们设置了最大连接数100,分片可用连接池数50保证至少有50个连接可以给非分片用,当然另外50个非分片会和分片进行竞争\"]},\"781\":{\"h\":\"添加额外数据源\",\"t\":[\"默认springboot下的数据源name为ds0所以我们还需要额外添加4个数据源\",\"springboot启动后我们可以通过数据库或者其他方式来获取链接字符串来手动构建datasource,启动后会创建ds1-ds4一共4个数据源额外加一个默认数据源一共5个\",\" @Component public class ShardingInitRunner implements ApplicationRunner { @Autowired private EasyQuery easyQuery; @Override public void run(ApplicationArguments args) throws Exception { Map<String, DataSource> dataSources = createDataSources(); DataSourceManager dataSourceManager = easyQuery.getRuntimeContext().getDataSourceManager(); for (Map.Entry<String, DataSource> stringDataSourceEntry : dataSources.entrySet()) { dataSourceManager.addDataSource(stringDataSourceEntry.getKey(), stringDataSourceEntry.getValue(), 60); } System.out.println(\\\"初始化完成\\\"); } private Map<String, DataSource> createDataSources() { HashMap<String, DataSource> stringDataSourceHashMap = new HashMap<>(); for (int i = 1; i < 3; i++) { //可以通过数据库查询或者其他方式来存储额外数据源 DataSource dataSource = createDataSource(\\\"ds\\\" + i, \\\"jdbc:mysql://127.0.0.1:3306/easy_sample\\\"+i+\\\"?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\", \\\"root\\\", \\\"root\\\"); stringDataSourceHashMap.put(\\\"ds\\\" + i, dataSource); } return stringDataSourceHashMap; } private DataSource createDataSource(String dsName, String url, String username, String password) { // 设置properties Properties properties = new Properties(); properties.setProperty(\\\"name\\\", dsName); properties.setProperty(\\\"driverClassName\\\", \\\"com.mysql.cj.jdbc.Driver\\\"); properties.setProperty(\\\"url\\\", url); properties.setProperty(\\\"username\\\", username); properties.setProperty(\\\"password\\\", password); properties.setProperty(\\\"initialSize\\\", \\\"10\\\"); properties.setProperty(\\\"maxActive\\\", \\\"100\\\"); try { return DruidDataSourceFactory.createDataSource(properties); } catch (Exception e) { throw new EasyQueryException(e); } } } \"]},\"782\":{\"h\":\"新增\",\"t\":[\" @RestController @RequestMapping(\\\"/orderShardingDataSourceAndTable\\\") @RequiredArgsConstructor(onConstructor_ = @Autowired) public class OrderShardingDataSourceAndTableController { private final EasyQuery easyQuery; @GetMapping(\\\"/add\\\") public Object add() { ArrayList<TDsOrderEntity> orderEntities = new ArrayList<>(100); List<String> users = Arrays.asList(\\\"xiaoming\\\", \\\"xiaohong\\\", \\\"xiaolan\\\"); for (int i = 0; i < 10; i++) { TDsOrderEntity orderEntity = new TDsOrderEntity(); orderEntity.setId(String.valueOf(i)); int i1 = i % 3; String uid = users.get(i1); orderEntity.setUid(uid); orderEntity.setOrderNo(i); orderEntity.setStatus(i1); orderEntity.setCreateTime(LocalDateTime.now()); orderEntities.add(orderEntity); } long l = easyQuery.insertable(orderEntities).executeRows(); return \\\"成功插入:\\\"+l; } } \",\": ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `t_ds_order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 1(String),xiaohong(String),1(Integer),1(Integer),2023-09-06T08:46:52.192684(LocalDateTime) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 2(String),xiaolan(String),2(Integer),2(Integer),2023-09-06T08:46:52.192688(LocalDateTime) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 0(String),xiaoming(String),0(Integer),0(Integer),2023-09-06T08:46:52.192664(LocalDateTime) : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `t_ds_order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 4(String),xiaohong(String),4(Integer),1(Integer),2023-09-06T08:46:52.192693(LocalDateTime) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 3(String),xiaoming(String),3(Integer),0(Integer),2023-09-06T08:46:52.192691(LocalDateTime) : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 5(String),xiaolan(String),5(Integer),2(Integer),2023-09-06T08:46:52.192696(LocalDateTime) : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `t_ds_order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 7(String),xiaohong(String),7(Integer),1(Integer),2023-09-06T08:46:52.192701(LocalDateTime) : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 8(String),xiaolan(String),8(Integer),2(Integer),2023-09-06T08:46:52.192703(LocalDateTime) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 6(String),xiaoming(String),6(Integer),0(Integer),2023-09-06T08:46:52.192698(LocalDateTime) : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 9(String),xiaoming(String),9(Integer),0(Integer),2023-09-06T08:46:52.192705(LocalDateTime) : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 \",\"新增数据插入到对应数据库的对应表 无感支持分库分表插入\"]},\"783\":{\"h\":\"修改\",\"t\":[\"进修改时间所以只会变更时间\",\" @GetMapping(\\\"/edit\\\") @EasyQueryTrack public Object edit() { TDsOrderEntity orderEntity = easyQuery.queryable(TDsOrderEntity.class) .asTracking() .where(o->o.eq(TDsOrderEntity::getId,\\\"1\\\")).firstNotNull(\\\"未找到对应的订单\\\"); orderEntity.setCreateTime(LocalDateTime.now()); easyQuery.updatable(orderEntity) .executeRows(); return orderEntity; } \",\": ==> SHARDING_EXECUTOR_1, name:ds1, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `t_ds_order_01` WHERE `id` = ? LIMIT 1 : ==> SHARDING_EXECUTOR_2, name:ds1, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `t_ds_order_00` WHERE `id` = ? LIMIT 1 : ==> SHARDING_EXECUTOR_1, name:ds1, Parameters: 1(String) : ==> SHARDING_EXECUTOR_2, name:ds1, Parameters: 1(String) : <== SHARDING_EXECUTOR_1, name:ds1, Time Elapsed: 7(ms) : <== SHARDING_EXECUTOR_2, name:ds1, Time Elapsed: 9(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds1, Preparing: UPDATE `t_ds_order_01` SET `create_time` = ? WHERE `id` = ? : ==> http-nio-8081-exec-1, name:ds1, Parameters: 2023-09-06T08:48:41.358198(LocalDateTime),1(String) : <== http-nio-8081-exec-1, name:ds1, Total: 1 \",\"对象更新精确命中对应的库和对应的表\",\"java并发更新\",\" @GetMapping(\\\"/concurrentEdit\\\") @EasyQueryTrack public Object concurrentEdit() { TDsOrderEntity orderEntity = easyQuery.queryable(TDsOrderEntity.class) .asTracking() .where(o->o.eq(TDsOrderEntity::getId,\\\"2\\\")).firstNotNull(\\\"未找到对应的订单\\\"); if(!Objects.equals(2,orderEntity.getStatus())){ throw new RuntimeException(\\\"订单状态不是2\\\"); } orderEntity.setCreateTime(LocalDateTime.now()); orderEntity.setStatus(3); easyQuery.updatable(orderEntity) .whereColumns(o->o.columnKeys().column(TDsOrderEntity::getStatus)) .executeRows(1,\\\"并发修改失败\\\"); return orderEntity; } \",\"并发更新分库,高性能命中对应的库和表\",\": ==> SHARDING_EXECUTOR_1, name:ds2, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `t_ds_order_01` WHERE `id` = ? LIMIT 1 : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `t_ds_order_00` WHERE `id` = ? LIMIT 1 : ==> SHARDING_EXECUTOR_1, name:ds2, Parameters: 2(String) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 2(String) : <== SHARDING_EXECUTOR_2, name:ds2, Time Elapsed: 8(ms) : <== SHARDING_EXECUTOR_1, name:ds2, Time Elapsed: 9(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds2, Preparing: UPDATE `t_ds_order_00` SET `status` = ?,`create_time` = ? WHERE `id` = ? AND `status` = ? : ==> http-nio-8081-exec-1, name:ds2, Parameters: 3(Integer),2023-09-06T08:50:50.959225(LocalDateTime),2(String),2(Integer) : <== http-nio-8081-exec-1, name:ds2, Total: 1 \"]},\"784\":{\"h\":\"分库\",\"t\":[\"easy-query提供了高效,高性能的分片机制,完美的屏蔽分片带来的业务复杂度,不同于sharding-jdbc的sql的antlr解析采用自带的表达式解析性能高效,并且不同于ShardingSphere-Proxy的代理模式,导致未分片的对象也需要走代理,并且需要多次jdbc,easy-query采用客户端分片保证分片下的高性能查询结果返回,并且原生orm框架自带无需使用额外组件,更少的依赖来保证程序的健壮与可控\"]},\"785\":{\"h\":\"创建数据库\",\"t\":[\"我们以订单表为例来实现订单的简单取模分库,将订单表按5取模进行分库分为ds0,ds1,ds2,ds3,ds4一共5个数据源\"]},\"786\":{\"h\":\"配置文件\",\"t\":[\"因为分片涉及到跨表聚合所以需要设置默认数据源的连接池大小，并且设置分片可用数据源大小\",\" server: port: 8081 spring: datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/easy_sample?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root druid: initial-size: 10 max-active: 100 easy-query: enable: true name-conversion: underlined database: mysql defaultDataSourceMergePoolSize: 50 \",\"我们设置了最大连接数100,分片可用连接池数50保证至少有50个连接可以给非分片用,当然另外50个非分片会和分片进行竞争\"]},\"787\":{\"h\":\"添加额外数据源\",\"t\":[\"默认springboot下的数据源name为ds0所以我们还需要额外添加4个数据源\",\"springboot启动后我们可以通过数据库或者其他方式来获取链接字符串来手动构建datasource,启动后会创建ds1-ds4一共4个数据源额外加一个默认数据源一共5个\",\" @Component public class ShardingInitRunner implements ApplicationRunner { @Autowired private EasyQuery easyQuery; @Override public void run(ApplicationArguments args) throws Exception { Map<String, DataSource> dataSources = createDataSources(); DataSourceManager dataSourceManager = easyQuery.getRuntimeContext().getDataSourceManager(); for (Map.Entry<String, DataSource> stringDataSourceEntry : dataSources.entrySet()) { dataSourceManager.addDataSource(stringDataSourceEntry.getKey(), stringDataSourceEntry.getValue(), 60); } System.out.println(\\\"初始化完成\\\"); } private Map<String, DataSource> createDataSources() { HashMap<String, DataSource> stringDataSourceHashMap = new HashMap<>(); for (int i = 1; i < 5; i++) { //可以通过数据库查询或者其他方式来存储额外数据源 DataSource dataSource = createDataSource(\\\"ds\\\" + i, \\\"jdbc:mysql://127.0.0.1:3306/easy_sample\\\"+i+\\\"?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\", \\\"root\\\", \\\"root\\\"); stringDataSourceHashMap.put(\\\"ds\\\" + i, dataSource); } return stringDataSourceHashMap; } private DataSource createDataSource(String dsName, String url, String username, String password) { // 设置properties Properties properties = new Properties(); properties.setProperty(\\\"name\\\", dsName); properties.setProperty(\\\"driverClassName\\\", \\\"com.mysql.cj.jdbc.Driver\\\"); properties.setProperty(\\\"url\\\", url); properties.setProperty(\\\"username\\\", username); properties.setProperty(\\\"password\\\", password); properties.setProperty(\\\"initialSize\\\", \\\"10\\\"); properties.setProperty(\\\"maxActive\\\", \\\"100\\\"); try { return DruidDataSourceFactory.createDataSource(properties); } catch (Exception e) { throw new EasyQueryException(e); } } } \"]},\"788\":{\"h\":\"新增\",\"t\":[\" @RestController @RequestMapping(\\\"/orderShardingDataSource\\\") @RequiredArgsConstructor(onConstructor_ = @Autowired) public class OrderShardingDataSourceController { private final EasyQuery easyQuery; @GetMapping(\\\"/add\\\") public Object add() { ArrayList<DsOrderEntity> orderEntities = new ArrayList<>(100); List<String> users = Arrays.asList(\\\"xiaoming\\\", \\\"xiaohong\\\", \\\"xiaolan\\\"); for (int i = 0; i < 10; i++) { DsOrderEntity orderEntity = new DsOrderEntity(); orderEntity.setId(String.valueOf(i)); int i1 = i % 3; String uid = users.get(i1); orderEntity.setUid(uid); orderEntity.setOrderNo(i); orderEntity.setStatus(i1); orderEntity.setCreateTime(LocalDateTime.now()); orderEntities.add(orderEntity); } long l = easyQuery.insertable(orderEntities).executeRows(); return \\\"成功插入:\\\"+l; } } \",\": ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 2(String),xiaolan(String),2(Integer),2(Integer),2023-09-04T22:02:31.509635(LocalDateTime) : ==> SHARDING_EXECUTOR_5, name:ds3, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_5, name:ds3, Parameters: 0(String),xiaoming(String),0(Integer),0(Integer),2023-09-04T22:02:31.509610(LocalDateTime) : ==> SHARDING_EXECUTOR_4, name:ds4, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_4, name:ds4, Parameters: 1(String),xiaohong(String),1(Integer),1(Integer),2023-09-04T22:02:31.509631(LocalDateTime) : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 4(String),xiaohong(String),4(Integer),1(Integer),2023-09-04T22:02:31.509640(LocalDateTime) : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 3(String),xiaoming(String),3(Integer),0(Integer),2023-09-04T22:02:31.509637(LocalDateTime) : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 7(String),xiaohong(String),7(Integer),1(Integer),2023-09-04T22:02:31.509647(LocalDateTime) : <== SHARDING_EXECUTOR_4, name:ds4, Total: 1 : ==> SHARDING_EXECUTOR_4, name:ds4, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_4, name:ds4, Parameters: 6(String),xiaoming(String),6(Integer),0(Integer),2023-09-04T22:02:31.509645(LocalDateTime) : <== SHARDING_EXECUTOR_5, name:ds3, Total: 1 : ==> SHARDING_EXECUTOR_5, name:ds3, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_5, name:ds3, Parameters: 5(String),xiaolan(String),5(Integer),2(Integer),2023-09-04T22:02:31.509642(LocalDateTime) : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 9(String),xiaoming(String),9(Integer),0(Integer),2023-09-04T22:02:31.509652(LocalDateTime) : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : <== SHARDING_EXECUTOR_4, name:ds4, Total: 1 : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 8(String),xiaolan(String),8(Integer),2(Integer),2023-09-04T22:02:31.509650(LocalDateTime) : <== SHARDING_EXECUTOR_5, name:ds3, Total: 1 : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 \",\"name ds0-ds4分别对应分库插入的数据源。\"]},\"789\":{\"h\":\"修改\",\"t\":[\"进修改时间所以只会变更时间\",\" @GetMapping(\\\"/edit\\\") @EasyQueryTrack public Object edit() { DsOrderEntity orderEntity = easyQuery.queryable(DsOrderEntity.class) .asTracking() .where(o->o.eq(DsOrderEntity::getId,\\\"1\\\")).firstNotNull(\\\"未找到对应的订单\\\"); orderEntity.setCreateTime(LocalDateTime.now()); easyQuery.updatable(orderEntity) .executeRows(); return orderEntity; } \",\"对象更新可以通过id直接路由到对应的库保证用户无感更新,且数据高性能更新\",\": ==> http-nio-8081-exec-4, name:ds4, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `ds_order` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-4, name:ds4, Parameters: 1(String) : <== http-nio-8081-exec-4, name:ds4, Time Elapsed: 26(ms) : <== Total: 1 : ==> http-nio-8081-exec-4, name:ds4, Preparing: UPDATE `ds_order` SET `create_time` = ? WHERE `id` = ? : ==> http-nio-8081-exec-4, name:ds4, Parameters: 2023-09-05T08:47:48.703659(LocalDateTime),1(String) : <== http-nio-8081-exec-4, name:ds4, Total: 1 \",\"java并发更新\",\" @GetMapping(\\\"/concurrentEdit\\\") @EasyQueryTrack public Object concurrentEdit() { DsOrderEntity orderEntity = easyQuery.queryable(DsOrderEntity.class) .asTracking() .where(o->o.eq(DsOrderEntity::getId,\\\"2\\\")).firstNotNull(\\\"未找到对应的订单\\\"); if(!Objects.equals(2,orderEntity.getStatus())){ throw new RuntimeException(\\\"订单状态不是2\\\"); } orderEntity.setCreateTime(LocalDateTime.now()); orderEntity.setStatus(3); easyQuery.updatable(orderEntity) .whereColumns(o->o.columnKeys().column(DsOrderEntity::getStatus)) .executeRows(1,\\\"并发修改失败\\\"); return orderEntity; } \",\"并发更新分库,高性能命中对应的库\",\": ==> http-nio-8081-exec-1, name:ds0, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `ds_order` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-1, name:ds0, Parameters: 2(String) : <== http-nio-8081-exec-1, name:ds0, Time Elapsed: 6(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds0, Preparing: UPDATE `ds_order` SET `status` = ?,`create_time` = ? WHERE `id` = ? AND `status` = ? : ==> http-nio-8081-exec-1, name:ds0, Parameters: 3(Integer),2023-09-05T08:54:19.189373(LocalDateTime),2(String),2(Integer) : <== http-nio-8081-exec-1, name:ds0, Total: 1 \"]},\"790\":{\"h\":\"分表\",\"t\":[\"easy-query提供了高效,高性能的分片机制,完美的屏蔽分片带来的业务复杂度,不同于sharding-jdbc的sql的antlr解析采用自带的表达式解析性能高效,并且不同于ShardingSphere-Proxy的代理模式,导致未分片的对象也需要走代理,并且需要多次jdbc,easy-query采用客户端分片保证分片下的高性能查询结果返回,并且原生orm框架自带无需使用额外组件,更少的依赖来保证程序的健壮与可控\"]},\"791\":{\"h\":\"创建表\",\"t\":[\"我们以订单表为例来实现订单的简单取模分表,将订单表按5取模进行分表分为t_order_00、t_order_01....t_order_04\"]},\"792\":{\"h\":\"配置文件\",\"t\":[\"因为分片涉及到跨表聚合所以需要设置默认数据源的连接池大小，并且设置分片可用数据源大小\",\" server: port: 8081 spring: datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/easy_sample?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root druid: initial-size: 10 max-active: 100 easy-query: enable: true name-conversion: underlined database: mysql defaultDataSourceMergePoolSize: 50 \",\"我们设置了最大连接数100,分片可用连接池数50\"]},\"793\":{\"h\":\"新增\",\"t\":[\" @RestController @RequestMapping(\\\"/orderShardingTable\\\") @RequiredArgsConstructor(onConstructor_ = @Autowired) public class OrderShardingTableController { private final EasyQuery easyQuery; @GetMapping(\\\"/add\\\") public Object add() { ArrayList<OrderEntity> orderEntities = new ArrayList<>(100); List<String> users = Arrays.asList(\\\"xiaoming\\\", \\\"xiaohong\\\", \\\"xiaolan\\\"); for (int i = 0; i < 10; i++) { OrderEntity orderEntity = new OrderEntity(); orderEntity.setId(String.valueOf(i)); int i1 = i % 3; String uid = users.get(i1); orderEntity.setUid(uid); orderEntity.setOrderNo(i); orderEntity.setStatus(i1); orderEntity.setCreateTime(LocalDateTime.now()); orderEntities.add(orderEntity); } long l = easyQuery.insertable(orderEntities).executeRows(); return \\\"成功插入:\\\"+l; } } \",\" : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_03` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 0(String),xiaoming(String),0(Integer),0(Integer),2023-09-02T15:15:29.391349(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_04` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 1(String),xiaohong(String),1(Integer),1(Integer),2023-09-02T15:15:29.391420(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 2(String),xiaolan(String),2(Integer),2(Integer),2023-09-02T15:15:29.391433(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 3(String),xiaoming(String),3(Integer),0(Integer),2023-09-02T15:15:29.391445(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_02` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 4(String),xiaohong(String),4(Integer),1(Integer),2023-09-02T15:15:29.391457(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_03` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 5(String),xiaolan(String),5(Integer),2(Integer),2023-09-02T15:15:29.391469(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_04` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 6(String),xiaoming(String),6(Integer),0(Integer),2023-09-02T15:15:29.391481(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 7(String),xiaohong(String),7(Integer),1(Integer),2023-09-02T15:15:29.391492(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 8(String),xiaolan(String),8(Integer),2(Integer),2023-09-02T15:15:29.391504(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_02` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 9(String),xiaoming(String),9(Integer),0(Integer),2023-09-02T15:15:29.391516(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 \"]},\"794\":{\"h\":\"修改\",\"t\":[\"进修改时间所以只会变更时间\",\"@GetMapping(\\\"/edit\\\") @EasyQueryTrack public Object edit() { OrderEntity orderEntity = easyQuery.queryable(OrderEntity.class) .asTracking() .where(o->o.eq(OrderEntity::getId,\\\"1\\\")).firstNotNull(\\\"未找到对应的订单\\\"); orderEntity.setCreateTime(LocalDateTime.now()); easyQuery.updatable(orderEntity) .executeRows(); return orderEntity; } \",\": ==> http-nio-8081-exec-1, name:ds0, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `order_04` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-1, name:ds0, Parameters: 1(String) : <== http-nio-8081-exec-1, name:ds0, Time Elapsed: 20(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds0, Preparing: UPDATE `order_04` SET `create_time` = ? WHERE `id` = ? : ==> http-nio-8081-exec-1, name:ds0, Parameters: 2023-09-02T15:20:13.029025(LocalDateTime),1(String) : <== http-nio-8081-exec-1, name:ds0, Total: 1 \",\"并发更新，将订单状态为2的数据改为3,并且需要支持并发操作\",\" @GetMapping(\\\"/concurrentEdit\\\") @EasyQueryTrack public Object concurrentEdit() { OrderEntity orderEntity = easyQuery.queryable(OrderEntity.class) .asTracking() .where(o->o.eq(OrderEntity::getId,\\\"2\\\")).firstNotNull(\\\"未找到对应的订单\\\"); if(!Objects.equals(2,orderEntity.getStatus())){ throw new RuntimeException(\\\"订单状态不是2\\\"); } orderEntity.setCreateTime(LocalDateTime.now()); orderEntity.setStatus(3); easyQuery.updatable(orderEntity) .whereColumns(o->o.columnKeys().column(OrderEntity::getStatus)) .executeRows(1,\\\"并发修改失败\\\"); return orderEntity; } \",\" : ==> http-nio-8081-exec-1, name:ds0, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `order_00` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-1, name:ds0, Parameters: 2(String) : <== http-nio-8081-exec-1, name:ds0, Time Elapsed: 5(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds0, Preparing: UPDATE `order_00` SET `status` = ?,`create_time` = ? WHERE `id` = ? AND `status` = ? : ==> http-nio-8081-exec-1, name:ds0, Parameters: 3(Integer),2023-09-02T15:23:51.745936(LocalDateTime),2(String),2(Integer) : <== http-nio-8081-exec-1, name:ds0, Total: 1 \"]},\"795\":{\"h\":\"删除\",\"t\":[\" @GetMapping(\\\"/delete\\\") public Object delete() { OrderEntity orderEntity = easyQuery.queryable(OrderEntity.class) .asTracking() .where(o->o.eq(OrderEntity::getId,\\\"3\\\")).firstNotNull(\\\"未找到对应的订单\\\"); orderEntity.setCreateTime(LocalDateTime.now()); easyQuery.deletable(orderEntity) .allowDeleteStatement(true) .executeRows(); return orderEntity; } \",\"使用分片键删除可以精确到对应的分片表\",\": ==> http-nio-8081-exec-3, name:ds0, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `order_01` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-3, name:ds0, Parameters: 3(String) : <== http-nio-8081-exec-3, name:ds0, Time Elapsed: 6(ms) : <== Total: 1 : ==> http-nio-8081-exec-3, name:ds0, Preparing: DELETE FROM `order_01` WHERE `id` = ? : ==> http-nio-8081-exec-3, name:ds0, Parameters: 3(String) : <== http-nio-8081-exec-3, name:ds0, Total: 1 \"]},\"796\":{\"h\":\"时间分表\",\"t\":[\"本章节我们实现分库分表的分表功能,实现按时间分表，按月份表\",\"这是我们最终的java对象\",\" @Data @Table(value = \\\"t_topic_sharding_time\\\",shardingInitializer = TopicShardingTimeShardingInitializer.class) public class TopicShardingTime { @Column(primaryKey = true) private String id; private Integer stars; private String title; @ShardingTableKey private LocalDateTime createTime; } public class TopicShardingTimeShardingInitializer extends AbstractShardingMonthInitializer<TopicShardingTime> { @Override protected LocalDateTime getBeginTime() { return LocalDateTime.of(2020, 1, 1, 1, 1); } @Override protected LocalDateTime getEndTime() { return LocalDateTime.now(); } @Override public void configure0(ShardingEntityBuilder<TopicShardingTime> builder) { } } \"]},\"797\":{\"h\":\"配置对象\",\"t\":[\"首先我们来看下对象\",\"@Data @Table(value = \\\"t_topic_sharding_time\\\") public class TopicShardingTime { @Column(primaryKey = true) //@ShardingExtraTableKey 先忽略该注解 private String id; private Integer stars; private String title; @ShardingTableKey //表示这个属性为分表键 private LocalDateTime createTime; } \",\"注解Table属性shardingInitializer = TopicShardingTimeShardingInitializer.class表示分初始化器使用TopicShardingTimeShardingInitializer.class\",\" public class TopicShardingTimeShardingInitializer extends AbstractShardingMonthInitializer<TopicShardingTime> { //表示初始化时的开始时间用来初始化自动计算数据库的分片数量 @Override protected LocalDateTime getBeginTime() { return LocalDateTime.of(2020, 1, 1, 1, 1); } //结束时间,即TopicShardingTime第一次被初始化时和getBeginTime互相计算出现在数据库的分片数量 @Override protected LocalDateTime getEndTime() { return LocalDateTime.now(); } @Override public void configure0(ShardingEntityBuilder<TopicShardingTime> builder) { } } \",\"这样我们就完成了对象的分片配置,具体原理是为什么呢？ 首先我们通过设置beginTime和endTime在初次使用TopicShardingTime对象的时候确保可以计算出对应的数据库应有的db数量,具体代码在AbstractShardingMonthInitializer这个默认的分片初始化器里面\",\" @Override public void configure(ShardingEntityBuilder<T> builder) { EntityMetadata entityMetadata = builder.getEntityMetadata(); EasyQueryOption easyQueryOption = builder.getEasyQueryOption(); String defaultDataSourceName = easyQueryOption.getDefaultDataSourceName(); String tableName = entityMetadata.getTableName(); //防止系统在凌晨发布定时任务刚好在23:59:00-00:00:00时间点运行过,导致下次运行会在00:00:01-59,会缺几秒导致没有加到内存中所以需要加5分钟 LocalDateTime setBeginTime = getBeginTime().plusMinutes(5); LocalDateTime beginTime = getBeginTimeToStart(setBeginTime); LocalDateTime endTime = getEndTime(); if (beginTime.isAfter(endTime)) { throw new IllegalArgumentException(\\\"begin time:\\\" + beginTime + \\\" is after end time:\\\" + endTime); } String tableSeparator = getTableSeparator(); LinkedHashMap<String, Collection<String>> initTables = new LinkedHashMap<>(); //应该是不在endTime后可以等于endTime while (!beginTime.isAfter(endTime)) { String dataSource = formatDataSource(beginTime, defaultDataSourceName); String tail = formatTail(beginTime); Collection<String> actualTableNames = EasyMapUtil.computeIfAbsent(initTables,dataSource, key -> new ArrayList<>()); actualTableNames.add(tableName + tableSeparator + tail); beginTime = getNextTime(beginTime); } //初始化实际表 builder.actualTableNameInit(initTables); configure0(builder); } \"]},\"798\":{\"h\":\"配置路由\",\"t\":[\" public class TopicShardingTimeTableRoute extends AbstractMonthTableRoute<TopicShardingTime> { @Override protected LocalDateTime convertLocalDateTime(Object shardingValue) { return (LocalDateTime)shardingValue; } } \",\"通过继承默认抽象路由AbstractMonthTableRoute我们非常简单的实现了分片的规则\",\" EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setDeleteThrowError(false); op.setExecutorCorePoolSize(1); op.setExecutorMaximumPoolSize(0); op.setMaxShardingQueryLimit(10); op.setThrowIfRouteNotMatch(false); op.setMaxShardingRouteCount(512); op.setDefaultDataSourceMergePoolSize(20); //开启定时任务 不然明天的表或者下个月的表不会在内存中存在 op.setStartTimeJob(true); op.setReverseOffsetThreshold(10); }) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); DefaultEasyEntityQuery easyEntityQuery = new DefaultEasyEntityQuery(easyQueryClient); QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyShardingInitializer(new TopicShardingTimeShardingInitializer()); TableRouteManager tableRouteManager = runtimeContext.getTableRouteManager(); tableRouteManager.addRoute(new TopicShardingTimeTableRoute()); \",\"配置ShardingInitializer和添加路由即可\"]},\"799\":{\"h\":\"注解处理器\",\"t\":[\"Java APT（Annotation Processing Tool，注解处理工具）是一种用于在编译时处理注解的技术。它允许开发者在编译Java代码时，扫描和处理注解，并生成新的源代码、辅助文件或其他类型的输出。\",\"这边简单的使用编译时注解来完成代理功能\",\"为什么不使用动态代理而是使用编译时apt技术呢因为apt技术在项目build后可以完美的生成src代码一样,性能和原生自己实现是一样的用于处理重复劳动\"]},\"800\":{\"h\":\"动态构建Repository\"},\"801\":{\"h\":\"新建项目\",\"t\":[\"项目一定得是多模块\",\"其中apt处理的模块需要单独一个module因为编译会有依赖关系所以这边是这么建议的\",\"新建两个模块 repo-processor\",\"repo-test\",\"父模块\",\" <dependencyManagement> <dependencies> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>2.0.14</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-core</artifactId> <version>2.0.14</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>2.0.14</version> </dependency> <!-- https://mvnrepository.com/artifact/org.springframework/org.springframework.context --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.3.4</version> <scope>provided</scope> </dependency> </dependencies> </dependencyManagement> \",\"其中repo-test依赖repo-processor\",\"repo-processor\",\" <dependencies> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> </dependency> </dependencies> <build> <resources> <resource> <directory>src/main/resources</directory> <includes> <include>**/*</include> </includes> <excludes> <exclude> *.properties </exclude> </excludes> </resource> <resource> <directory>target/generated-sources</directory> </resource> </resources> <plugins> <plugin> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <proc>none</proc> <source>1.8</source> <target>1.8</target> </configuration> </plugin> </plugins> </build> \"]},\"802\":{\"h\":\"创建自定义注解\",\"t\":[\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) public @interface ProxyRepository { } \"]},\"803\":{\"h\":\"创建自定义接口\",\"t\":[\"public interface CrudRepository<TProxy extends ProxyEntity<TProxy, T>, T extends ProxyEntityAvailable<T,TProxy>> { Class<T> tableClass(); ApplicationContext getApplicationContext();//万一后续还要别的可以通过这个方法获取 EntityQueryable<TProxy, T> getQuery();//获取当前的仓储用于查询 } \",\"我们这边最终需要实现的接口是这样的\",\"编写SysUserRepository\",\"@ProxyRepository public interface SysUserRepository extends CrudRepository<SysUserEntityProxy, SysUserEntity> { } 实现类是 ```java @Component public class SysUserRepositoryImpl implements SysUserRepository { private final ApplicationContext applicationContext; private final EasyEntityQuery easyEntityQuery; public SysUserRepositoryImpl(ApplicationContext applicationContext,EasyEntityQuery easyEntityQuery){ this.applicationContext = applicationContext; this.easyEntityQuery = easyEntityQuery; } @Override public Class<SysUserEntity> tableClass() { return SysUserEntity.class; } @Override public ApplicationContext getApplicationContext() { return applicationContext; } @Override public EntityQueryable<SysUserEntityProxy, SysUserEntity> getQuery() { return easyEntityQuery.queryable(tableClass()); } } \",\"对比这个类和模板差不多我们只需要修改部分地方即可实现\"]},\"804\":{\"h\":\"新建模板\",\"t\":[\"我们在repo-prcessor模块新建模板\",\" public class AptConstant { public static final String PROXY_TEMPLATE = \\\"package @{package};\\\\n\\\" + \\\"\\\\n\\\" + \\\"@{imports}\\\" + \\\"\\\\n\\\" + \\\"/**\\\\n\\\" + \\\" * this file automatically generated by easy-query, don't modify it\\\\n\\\" + \\\" * 当前文件是scf4j自动生成的请不要随意修改\\\\n\\\" + \\\" *\\\\n\\\" + \\\" * @author scf4j\\\\n\\\" + \\\" */\\\\n\\\" + \\\" @Component\\\\n\\\" + \\\"public class @{classImplName} implements @{classInterfaceName} {\\\\n\\\" + \\\" private final ApplicationContext applicationContext;\\\\n\\\" + \\\" private final EasyEntityQuery easyEntityQuery;\\\\n\\\" + \\\"\\\\n\\\" + \\\" public @{classImplName}(ApplicationContext applicationContext,EasyEntityQuery easyEntityQuery){\\\\n\\\" + \\\" this.applicationContext = applicationContext;\\\\n\\\" + \\\" this.easyEntityQuery = easyEntityQuery;\\\\n\\\" + \\\" }\\\\n\\\" + \\\"\\\\n\\\" + \\\" @Override\\\\n\\\" + \\\" public Class<@{argClassName}> tableClass() {\\\\n\\\" + \\\" return @{argClassName}.class;\\\\n\\\" + \\\" }\\\\n\\\" + \\\"\\\\n\\\" + \\\" @Override\\\\n\\\" + \\\" public ApplicationContext getApplicationContext() {\\\\n\\\" + \\\" return applicationContext;\\\\n\\\" + \\\" }\\\\n\\\" + \\\"\\\\n\\\" + \\\" @Override\\\\n\\\" + \\\" public EntityQueryable<@{argClassProxyName}, @{argClassName}> getQuery() {\\\\n\\\" + \\\" return easyEntityQuery.queryable(tableClass());\\\\n\\\" + \\\" }\\\\n\\\" + \\\"}\\\"; } \",\"模板很简单就是把我们需要替换的地方用占位符进行了占位\"]},\"805\":{\"h\":\"新建apt处理器\",\"t\":[\" //支持的注解全路径 使用方法来实现这两个保证在高版本上的java中不会出现警告 // @SupportedAnnotationTypes({\\\"com.eq.apt.repo.processor.annotations.ProxyRepository\\\"}) // @SupportedSourceVersion(SourceVersion.RELEASE_8) public class ProxyRepositoryProcessor extends AbstractProcessor { private Filer filer; private Elements elementUtils; private Types typeUtils; @Override public synchronized void init(ProcessingEnvironment processingEnv) { super.init(processingEnv); this.filer = processingEnv.getFiler(); this.elementUtils = processingEnv.getElementUtils(); this.typeUtils = processingEnv.getTypeUtils(); } @Override public Set<String> getSupportedAnnotationTypes() { Set<String> supportedAnnotationTypes = new HashSet<>(); supportedAnnotationTypes.add(ProxyRepository.class.getCanonicalName()); return supportedAnnotationTypes; } @Override public SourceVersion getSupportedSourceVersion() { return SourceVersion.latestSupported(); } @Override public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) { if (!roundEnv.processingOver()) { // todo:处理一些业务.... } return false; } } \",\"我们在resources下新建META-INF文件夹在新建services文件夹然后在创建一个javax.annotation.processing.Processor这个文件内容填写ProxyRepositoryProcessor的全路径类名com.eq.apt.repo.processor.processor.ProxyRepositoryProcessor\"]},\"806\":{\"h\":\"编写业务调试\",\"t\":[\"调试apt只需要在右侧clean后再compile处右键debug compile即可\",\"demohttps://github.com/xuejmnet/repo-apt\",\"demohttps://github.com/xuejmnet/repo-apt\",\"demohttps://github.com/xuejmnet/repo-apt\",\"说明!!!\",\"别忘记resources下的文件还有别忘了把标记generate sources root\"]},\"807\":{\"h\":\"新建用户和仓储\",\"t\":[\" @Table(\\\"t_user\\\") @EntityProxy public class User implements ProxyEntityAvailable<User , UserProxy> { private String id; private String name; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } } @ProxyRepository public interface UserRepository extends CrudRepository<UserProxy, User> { } \",\"clean->build即可再test目录看到我们生成的文件\"]},\"808\":{\"h\":\"介绍\",\"t\":[\"本章节主要是为后续开发设计好前期的对象设计和基本配置\"]},\"809\":{\"h\":\"对象设计\",\"t\":[\"easy-query的实战环境会尽可能的给大家带来实际开发过程中我们采用的设计类型，并且给大家带来更多的解决方案\",\"默认我们都会通过新建一个基类类满足公用的对象,并且会对数据库进行额外设计字段，比如id，createTime，createBy，updateTime，updateBy，deleted，deleteTime，deleteBy\",\"更多主键设置模式可以参考 不基于BaseEntity的其他模式https://github.com/dromara/easy-query/issues/231\",\" @Data public abstract class BaseEntity implements Serializable, Cloneable { private static final long serialVersionUID = -1L; /** * 记录标识;记录标识 */ @Column(primaryKey = true) private String id; /** * 创建时间;创建时间 */ @UpdateIgnore private LocalDateTime createTime; /** * 修改时间;修改时间 */ private LocalDateTime updateTime; /** * 创建人;创建人 */ @UpdateIgnore private String createBy; /** * 修改人;修改人 */ private String updateBy; /** * 是否删除;是否删除 * 其中[strategyName = \\\"DELETE_WITH_USER_TIME\\\"]表示逻辑删除策略使用名称叫做[DELETE_WITH_USER_TIME]的 * 所以你自定义的时候必须注册一个名称[DELETE_WITH_USER_TIME]的逻辑删除 */ @LogicDelete(strategy = LogicDeleteStrategyEnum.CUSTOM,strategyName = \\\"DELETE_WITH_USER_TIME\\\") @UpdateIgnore private Boolean deleted; /** * 删除人 */ @UpdateIgnore private String deleteBy; /** * 删除时间 */ @UpdateIgnore private LocalDateTime deleteTime; } \",\"然后我们会添加对应的自动添加处理，新建拦截器,需要支持对象插入的时候可以进行创建人和创建时间的自动赋值,对象修改时可以进行修改人和修改时间的自动赋值，表达式更新的时候也可以对修改时间和修改人进行自动处理\",\" @Component @AllArgsConstructor(onConstructor_ = @Autowired) public class DefaultEntityInterceptor implements EntityInterceptor, UpdateSetInterceptor { //如果你是springsecurity可以用这个SecurityContextHolder.getContext() //如果你是satoken那么直接用StpUtil private final CurrentUser currentUser;//对springboot进行的封装可以通过jwt获取对应的当前操作人用户 /** * 添加默认的数据 * * @param entityClass * @param entityInsertExpressionBuilder * @param entity */ @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { BaseEntity baseEntity = (BaseEntity) entity; if (baseEntity.getCreateTime() == null) { baseEntity.setCreateTime(LocalDateTime.now()); } if (baseEntity.getCreateBy() == null) { String userId = StringUtils.defaultString(currentUser.getUserId()); //如果使用sa-token这边采用StpUtil.getLoginIdAsString()会让导致程序需要验证 //,所以这边需要先判断是否登录,未登录就给默认值,不然就获取 //updateBy同理 baseEntity.setCreateBy(userId); } if (baseEntity.getUpdateTime() == null) { baseEntity.setUpdateTime(LocalDateTime.now()); } if (baseEntity.getUpdateBy() == null) { String userId = StringUtils.defaultString(currentUser.getUserId()); baseEntity.setUpdateBy(userId); } if (baseEntity.getDeleted() == null) { baseEntity.setDeleted(false); } if (baseEntity.getId() == null) { baseEntity.setId(IdHelper.nextId()); } //如果你部分对象需要使用雪花id,那么你可以定义一个雪花id的空接口 //然后让对象继承这个空接口 // if(雪花ID.class.isAssignableFrom(entity.getClass())){ // if (baseEntity.getId() == null) { // baseEntity.setId(//赋值雪花id); // } // }else{ // if (baseEntity.getId() == null) { // baseEntity.setId(IdHelper.nextId()); // } // } } /** * 添加更新对象参数 * * @param entityClass * @param entityUpdateExpressionBuilder * @param entity */ @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { BaseEntity baseEntity = (BaseEntity) entity; baseEntity.setUpdateTime(LocalDateTime.now()); String userId = StringUtils.defaultString(currentUser.getUserId()); baseEntity.setUpdateBy(userId); } /** * 表达式更新set参数添加 * * @param entityClass * @param entityUpdateExpressionBuilder * @param columnSetter */ @Override public void configure(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, ColumnSetter<Object> columnSetter) { String updateBy = \\\"updateBy\\\"; String updateTime = \\\"updateTime\\\"; //是否已经set了 如果你觉得你程序里面不会手动去修改这两个值那么也可以不加这个判断 if (!entityUpdateExpressionBuilder.getSetColumns().containsOnce(entityClass, updateBy)) { String userId = StringUtils.defaultString(currentUser.getUserId()); columnSetter.set(updateBy, userId); } if (!entityUpdateExpressionBuilder.getSetColumns().containsOnce(entityClass, updateTime)) { columnSetter.set(updateTime, LocalDateTime.now()); } } @Override public String name() { return \\\"DEFAULT_INTERCEPTOR\\\";//后续禁用拦截器或者启用拦截器使用这个名称代表当前拦截器 } /** * 那些对象需要用到这个拦截器(这边设置继承BaseEntity的对象) */ @Override public boolean apply(Class<?> entityClass) { return BaseEntity.class.isAssignableFrom(entityClass); } } \",\"创建时间和创建人和修改时间修改人已经添加的情况下我们还需要对删除时间删除人进行处理\",\" @Component @RequiredArgsConstructor(onConstructor_ = @Autowired) public class MyBooleanLogicDeleteStrategy extends AbstractLogicDeleteStrategy { private final CurrentUser currentUser; private static final Set<Class<?>> allowedPropertyTypes =new HashSet<>(Arrays.asList(Boolean.class,boolean.class)); @Override public String getStrategy() { return \\\"DELETE_WITH_USER_TIME\\\";//后续用户指定逻辑删除名称就是用这个名称即可 } @Override public Set<Class<?>> allowedPropertyTypes() { return allowedPropertyTypes; } @Override protected SQLExpression1<WherePredicate<Object>> getPredicateFilterExpression(LogicDeleteBuilder builder, String propertyName) { return o -> o.eq(propertyName, false); } @Override protected SQLExpression1<ColumnSetter<Object>> getDeletedSQLExpression(LogicDeleteBuilder builder, String propertyName) { //表达式内部的参数不可以提取出来,如果提取出来那么就确定了,而不是实时的 如果一定要提取出来请参考下面的方法 return o -> o.set(propertyName, true).set(\\\"deleteBy\\\",currentUser.getUserId()).set(\\\"deleteTime\\\", LocalDateTime.now()); } //@Override //protected SQLExpression1<ColumnSetter<Object>> getDeletedSQLExpression(LogicDeleteBuilder builder, String propertyName) { // //表达式内部的参数不可以提取出来,如果提取出来那么就确定了,而不是实时的 // return o -> { // //如果判断动态条件过于复杂可以通过大括号来实现内部的编程而不是链式 // //在这边可以提取对应的表达式参数 // String userId=currentUser.getUserId(); // o.set(propertyName, true).set(\\\"deleteBy\\\",userId).set(\\\"deleteTime\\\", LocalDateTime.now()); // }; //} } \",\"这样我们就完成了新增自动填充创建信息和修改信息,删除自动填充删除信息,而不需要认为手动赋值\"]},\"810\":{\"h\":\"额外搜索\",\"t\":[\"主键雪花id自定义主键\"]},\"811\":{\"h\":\"自定义异常\",\"t\":[\"正常业务开发我们都会选择性的使用自定义异常然后全局拦截来作为业务中断的消息返回到前端。\"]},\"812\":{\"h\":\"异常\",\"t\":[\"public class BusinessException extends RuntimeException { private final String code; private final Object data; public BusinessException(String message) { this(\\\"-1\\\",message); } public BusinessException(String code,String message) { this(code,message,null); } public BusinessException(String code,String message,Object data) { super(message); this.code=code; this.data=data; } public String getCode() { return code; } public Object getData() { return data; } } //正常业务我们会抛出业务异常 SysUser u=query(SysUser.class).whereById(\\\"123\\\").firstOrNull(); if(u==null){ throw new BusinessException(\\\"未找到对应的用户信息\\\"); } //下面这种方式也可以 SysUser u=query(SysUser.class).whereById(\\\"123\\\").firstNotNull(()->new BusinessException(\\\"未找到对应的用户信息\\\")); \"]},\"813\":{\"h\":\"进阶\",\"t\":[\"因为上述代码存在很多冗余重复性的代码,所以我们对全局拦截器进行修改让其拦截easy-query的异常那么上述代码我们可以改成\",\"SysUser u=query(SysUser.class).whereById(\\\"123\\\").firstNotNull(\\\"未找到对应的用户信息\\\"); // 抛出 EasyQueryFirstNotNullException \",\"如果你大部分的时候不需要编写错误信息且大部分时候错误都是一样的情况下那么我建议这么来处理\",\"@EasyAssertMessage(\\\"未找到对应的用户信息\\\") public class SysUser{ //省略..... } \",\"我们在用户表的实体上添加断言信息下面代码可以改成\",\"SysUser u=query(SysUser.class).whereById(\\\"123\\\").firstNotNull();//如果不写自动抛出@EasyAssertMessage内容,也可以手动写入进行覆盖 // 抛出 EasyQueryFirstNotNullException \"]},\"814\":{\"h\":\"高阶\",\"t\":[\"前面我们通过拦截easy-query的异常来实现自定义响应那么有时候我们系统已经拦截了,我希望easy-query抛出我们自定义的异常怎么办\",\"这边easy-query提供了接口AssertExceptionFactory我们只需要参考DefaultAssertExceptionFactory然后替换框架默认行为即可可以点击这边查看 我们自定义实现类\",\" public class MyAssertExceptionFactory implements AssertExceptionFactory { private final EntityMetadataManager entityMetadataManager; public MyAssertExceptionFactory(EntityMetadataManager entityMetadataManager) { this.entityMetadataManager = entityMetadataManager; } @Override public <T> RuntimeException createFindNotNullException(Query<T> query, String msg, String code) { if (msg == null && code == null) { EntityMetadata entityMetadata = entityMetadataManager.getEntityMetadata(query.queryClass()); ErrorMessage errorMessage = entityMetadata.getErrorMessage(); return new BusinessException(errorMessage.getNotNull()); } return new BusinessException(code,msg); } @Override public <T> RuntimeException createRequiredException(Query<T> query, String msg, String code) { if (msg == null && code == null) { EntityMetadata entityMetadata = entityMetadataManager.getEntityMetadata(query.queryClass()); ErrorMessage errorMessage = entityMetadata.getErrorMessage(); return new BusinessException(errorMessage.getNotNull()); } return new BusinessException(code,msg); } @Override public <T> RuntimeException createFirstNotNullException(Query<T> query, String msg, String code) { if (msg == null && code == null) { EntityMetadata entityMetadata = entityMetadataManager.getEntityMetadata(query.queryClass()); ErrorMessage errorMessage = entityMetadata.getErrorMessage(); return new BusinessException(errorMessage.getNotNull()); } return new BusinessException(code,msg); } @Override public <T> RuntimeException createSingleNotNullException(Query<T> query, String msg, String code) { if (msg == null && code == null) { EntityMetadata entityMetadata = entityMetadataManager.getEntityMetadata(query.queryClass()); ErrorMessage errorMessage = entityMetadata.getErrorMessage(); return new BusinessException(errorMessage.getNotNull()); } return new BusinessException(code,msg); } @Override public <T> RuntimeException createSingleMoreElementException(Query<T> query) { return new BusinessException(\\\"查询结果大于1条\\\"); } } \"]},\"815\":{\"h\":\"springboot替换\",\"t\":[\" //实现一个启动配置 public class MyStarterConfigurer implements StarterConfigurer { @Override public void configure(ServiceCollection services) { //addService如果不存在就添加存在就替换 services.addService(AssertExceptionFactory.class, MyAssertExceptionFactory.class);//就会将默认的easy-query实例的异常断言接口进行替换 } } @Configuration public class MyConfiguration { @Bean(\\\"MyStarterConfigurer\\\") @Primary public StarterConfigurer starterConfigurer(){ return new MyStarterConfigurer(); } } \"]},\"816\":{\"h\":\"非springboot\",\"t\":[\" EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setPrintSql(true); op.setKeepNativeStyle(true); }) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .replaceService(AssertExceptionFactory.class, MyAssertExceptionFactory.class);//就会将默认的easy-query实例的异常断言接口进行替换 .build(); \"]},\"817\":{\"h\":\"主要功能与配置演示\"},\"818\":{\"h\":\"目录\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\"]},\"819\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"820\":{\"h\":\"密码加密的文章\",\"t\":[\"实际的文章内容。\",\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\",\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"]},\"821\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"822\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"823\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"824\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"825\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"826\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"827\":{\"h\":\"自定义容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"828\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"829\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"830\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"831\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"832\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注[1].\",\"查看详情\"]},\"833\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"834\":{\"h\":\"任务列表\",\"t\":[\" 计划 1\",\" 计划 2\",\"查看详情\"]},\"835\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"836\":{\"h\":\"图表\",\"t\":[\"查看详情\"]},\"837\":{\"h\":\"Echarts\",\"t\":[\"查看详情\"]},\"838\":{\"h\":\"流程图\",\"t\":[\"查看详情\"]},\"839\":{\"h\":\"Mermaid\",\"t\":[\"查看详情\"]},\"840\":{\"h\":\"Tex 语法\",\"t\":[\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\",\"查看详情\"]},\"841\":{\"h\":\"导入文件\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\",\"查看详情\"]},\"842\":{\"h\":\"代码演示\",\"t\":[\"查看详情\"]},\"843\":{\"h\":\"样式化\",\"t\":[\"向 Mr.Hope 捐赠一杯咖啡。 \",\"查看详情\"]},\"844\":{\"h\":\"交互演示\",\"t\":[\"查看详情\"]},\"845\":{\"h\":\"Vue 交互演示\",\"t\":[\"查看详情\"]},\"846\":{\"h\":\"幻灯片\",\"t\":[\"查看详情\",\"这是脚注内容 ↩︎\"]},\"847\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"848\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"849\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"提示\",\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\",\"主题包含了一个自定义徽章可以使用:\",\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"]},\"850\":{\"h\":\"页面结构\",\"t\":[\"此页面应当包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"导航栏\",\"侧边栏\",\"页脚\",\"返回顶部按钮\",\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"]},\"851\":{\"h\":\"指南\"},\"852\":{\"h\":\"功能亮点\"},\"853\":{\"h\":\"Bar\",\"t\":[\"baz\",\"...\"]},\"854\":{\"h\":\"Foo\",\"t\":[\"ray\",\"...\"]},\"855\":{\"h\":\"Bar 功能\"},\"856\":{\"h\":\"介绍\",\"t\":[\"我们支持 bar 功能，...\"]},\"857\":{\"h\":\"详情\",\"t\":[\"baz\",\"...\"]},\"858\":{\"h\":\"Baz\",\"t\":[\"功能详情...\"]},\"859\":{\"h\":\"Foo 功能\"},\"860\":{\"h\":\"介绍\",\"t\":[\"我们支持 foo 功能，...\"]},\"861\":{\"h\":\"详情\",\"t\":[\"ray\",\"...\"]},\"862\":{\"h\":\"Ray\",\"t\":[\"功能详情...\"]}},\"dirtCount\":0,\"index\":[[\"详情\",{\"0\":{\"857\":1,\"861\":1}}],[\"详情容器\",{\"1\":{\"827\":1}}],[\"徽章\",{\"1\":{\"849\":1}}],[\"徽章文字\",{\"1\":{\"849\":1}}],[\"年\",{\"1\":{\"848\":1}}],[\"年份\",{\"1\":{\"737\":6}}],[\"写作日期为\",{\"1\":{\"848\":1}}],[\"写入数据库时会自动添加base64编码读取会自动进行解码\",{\"1\":{\"554\":1}}],[\"幻灯片\",{\"0\":{\"846\":1}}],[\"幻灯片页\",{\"0\":{\"187\":1}}],[\"交互演示\",{\"0\":{\"844\":1,\"845\":1}}],[\"交流\",{\"0\":{\"2\":1}}],[\"捐赠一杯咖啡\",{\"1\":{\"843\":1}}],[\"向\",{\"1\":{\"843\":1}}],[\"样式化\",{\"0\":{\"843\":1}}],[\"流程图\",{\"0\":{\"838\":1}}],[\"流式结果流式查询迭代返回游标查询\",{\"1\":{\"747\":1}}],[\"图表\",{\"0\":{\"836\":1}}],[\"图片增强\",{\"0\":{\"835\":1}}],[\"计划\",{\"1\":{\"834\":2}}],[\"计算出来的时间如果大于30天表示是正常的\",{\"1\":{\"592\":1}}],[\"计算出两者天数差值\",{\"1\":{\"592\":1}}],[\"计算出出生日期到现在的天数除以365就是年向上取整就是虚岁\",{\"1\":{\"237\":1,\"565\":1}}],[\"计算属性就是非简单的包装类型或者基本类型\",{\"1\":{\"554\":1}}],[\"计算属性目录\",{\"0\":{\"554\":1}}],[\"计算属性\",{\"0\":{\"236\":1},\"1\":{\"100\":1,\"107\":1}}],[\"计算属性等\",{\"1\":{\"100\":1,\"107\":1}}],[\"任务列表\",{\"0\":{\"834\":1}}],[\"任意stream的终结方法\",{\"1\":{\"601\":1}}],[\"标签为\",{\"1\":{\"848\":1}}],[\"标记\",{\"0\":{\"833\":1}}],[\"标题和页面信息\",{\"1\":{\"850\":1}}],[\"标题倒序\",{\"1\":{\"623\":1}}],[\"标题9\",{\"1\":{\"360\":1}}],[\"标题8\",{\"1\":{\"360\":1}}],[\"标题7\",{\"1\":{\"360\":1}}],[\"标题6\",{\"1\":{\"360\":1}}],[\"标题5\",{\"1\":{\"360\":1}}],[\"标题4\",{\"1\":{\"360\":1}}],[\"标题3\",{\"1\":{\"360\":1}}],[\"标题2\",{\"1\":{\"360\":1}}],[\"标题\",{\"1\":{\"354\":1,\"358\":2,\"412\":1,\"600\":1,\"629\":1,\"631\":4,\"632\":1,\"633\":4,\"634\":3,\"732\":1,\"756\":1}}],[\"标题1\",{\"1\":{\"285\":1,\"360\":1,\"361\":1}}],[\"标题0\",{\"1\":{\"280\":1,\"359\":1,\"360\":1,\"361\":1}}],[\"脚注\",{\"0\":{\"832\":1}}],[\"危险容器\",{\"1\":{\"827\":1}}],[\"与\",{\"1\":{\"827\":1}}],[\"与lambda入参的getter\",{\"1\":{\"729\":1}}],[\"信息容器\",{\"1\":{\"827\":1}}],[\"信息映射到vo对的班级信息上面\",{\"1\":{\"713\":1}}],[\"安全的在\",{\"1\":{\"827\":1}}],[\"安装依赖\",{\"0\":{\"395\":1}}],[\"安装插件\",{\"0\":{\"154\":1,\"162\":1}}],[\"安装插件提高开发体验\",{\"0\":{\"153\":1}}],[\"安装插件最新版本即可\",{\"1\":{\"111\":1}}],[\"安装目录下的\",{\"1\":{\"15\":1}}],[\"扩展\",{\"0\":{\"824\":1,\"825\":1},\"1\":{\"825\":1}}],[\"演示\",{\"1\":{\"822\":1}}],[\"还不会编写\",{\"1\":{\"822\":1}}],[\"还是上述案例假设第三个线程获取到了5个链接但是获取的时间超过了multiconnwaittimeoutmillis时间的80\",{\"1\":{\"469\":1}}],[\"还是不知道就是windows就是jalt+insert\",{\"1\":{\"157\":1}}],[\"因此可以借助于\",{\"1\":{\"824\":1}}],[\"因此\",{\"1\":{\"821\":1}}],[\"因为上述代码存在很多冗余重复性的代码\",{\"1\":{\"813\":1}}],[\"因为分片涉及到跨表聚合所以需要设置默认数据源的连接池大小\",{\"1\":{\"780\":1,\"786\":1,\"792\":1}}],[\"因为columnall如果真是查询表所有字段但是映射到blogentitytest2后会丢失所以没有必要查询全字段\",{\"1\":{\"721\":1}}],[\"因为content不一样所以返回行数2\",{\"1\":{\"366\":1}}],[\"因为where\",{\"1\":{\"714\":1}}],[\"因为关联查询采用的是splitquery\",{\"1\":{\"713\":1}}],[\"因为存在变量参数所需需要使用双单引号代替\",{\"1\":{\"670\":3}}],[\"因为entitquery和其他api有所不一样所以需要单独讲\",{\"1\":{\"672\":1}}],[\"因为entityquery的特殊性原生sql片段有如下特殊规则\",{\"1\":{\"663\":1}}],[\"因为easy\",{\"1\":{\"491\":1,\"505\":1}}],[\"因为t\",{\"1\":{\"608\":1}}],[\"因为不做插入和修改所以这个status属性被用作条件比较的时候条件值还是原先的值\",{\"1\":{\"592\":1}}],[\"因为不是真实列所以不需要修改\",{\"1\":{\"592\":1}}],[\"因为不是真实列所以不需要插入\",{\"1\":{\"592\":1}}],[\"因为添加了autoselect=false所以默认不查询聚合列\",{\"1\":{\"557\":1}}],[\"因为插件内部附带com\",{\"1\":{\"535\":1}}],[\"因为连接池为20如果单次查询需要21那么会一直等待直到超时也获取不到21个\",{\"1\":{\"469\":1}}],[\"因为查询未带分片键\",{\"1\":{\"469\":1}}],[\"因为查询是stream模式获取\",{\"1\":{\"270\":1}}],[\"因为底层format采用的是messageformat\",{\"1\":{\"468\":1}}],[\"因为考虑到有时候可能需要查看sql而不是将log输出\",{\"1\":{\"468\":1}}],[\"因为默认原生sql片段式object类型所以无法精确指定类型可以通过setpropertytype来指定返回接受的类型\",{\"1\":{\"666\":1}}],[\"因为默认为非null列插入所以执行的sql是单条单条执行\",{\"1\":{\"468\":1}}],[\"因为默认添加了track的aop如果启动报错那么就添加一下aop\",{\"1\":{\"117\":1,\"492\":1}}],[\"因为proxy涉及到apt代理对象的自动生成和插件的整合\",{\"1\":{\"452\":1}}],[\"因为没有数据需要被修改\",{\"1\":{\"417\":1}}],[\"因为没有null列所以不会生成sql返回受影响行数也是0\",{\"1\":{\"352\":1}}],[\"因为是包装类型可能会出现npe\",{\"1\":{\"623\":1}}],[\"因为是返回所以需要设置别名\",{\"1\":{\"592\":1}}],[\"因为是查询单条数据所以可以近似理解为表达式生成sql的能力差距大概是5\",{\"1\":{\"385\":1}}],[\"因为是在where处所以这边获取属性的`wherepredicate`如果是lambda则获取`sqlwherepredicate`\",{\"1\":{\"223\":1}}],[\"因为允许删除命令仅对当前sql生成为delete语句才会生效判断\",{\"1\":{\"356\":1}}],[\"因为java默认不支持lambda表达式的多级获取所以需要使用asm字节码技术自行实现\",{\"1\":{\"312\":1}}],[\"因为java没有匿名类型所以在多次select后需要创建vo对象来作为临时存储是非常复杂的事情\",{\"1\":{\"18\":1}}],[\"因为update会使用track追踪模式更新所以这边json对象必须要重写equals和hashcode\",{\"1\":{\"309\":1,\"579\":1}}],[\"因为sqlparameters第一层大于1表示是批处理\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"因为开启了追踪但是对象数据没有发生变化\",{\"1\":{\"251\":1}}],[\"因为程序认为本次没有任何需要变更的数据也就不需要更新\",{\"1\":{\"251\":1}}],[\"因为有时候我们需要统计我们的子表数量可能会有对应的主表数量的聚合查询和最大值查询也可以通过这个来实现\",{\"1\":{\"239\":1}}],[\"因为为了高性能默认easy\",{\"1\":{\"235\":1,\"590\":1}}],[\"因为当前的函数设计只适合单个属性的处理\",{\"1\":{\"224\":1}}],[\"因为long类型在js中会出现精度丢失\",{\"1\":{\"201\":1}}],[\"因为这个策略是他通用的所以可以在这边判断当然你也可以选择定义多个策略不通用\",{\"1\":{\"140\":1}}],[\"因为小明和角色是多对多\",{\"1\":{\"137\":1}}],[\"因为课程目前没有直接和班级设置关系所以只能通过学生来实现\",{\"1\":{\"137\":1}}],[\"因为用户和菜单中间由角色进行关联并且两者都是多对多所以如果需要自行实现那么是非常麻烦的一件事情\",{\"1\":{\"112\":1}}],[\"段落\",{\"1\":{\"820\":2}}],[\"密码加密的文章\",{\"0\":{\"820\":1}}],[\"页脚\",{\"1\":{\"819\":1,\"850\":1}}],[\"页面结构\",{\"0\":{\"850\":1}}],[\"页面内容\",{\"0\":{\"849\":1}}],[\"页面配置\",{\"0\":{\"847\":1},\"1\":{\"848\":1}}],[\"页面引入配置\",{\"1\":{\"823\":1}}],[\"页面信息\",{\"0\":{\"848\":1},\"1\":{\"819\":1}}],[\"页面展示\",{\"1\":{\"818\":1,\"841\":1}}],[\"评论\",{\"1\":{\"819\":1,\"850\":1}}],[\"评分\",{\"1\":{\"600\":1,\"629\":1,\"632\":1,\"634\":1,\"731\":1,\"732\":1}}],[\"贡献者\",{\"1\":{\"819\":1,\"850\":1}}],[\"路径导航\",{\"1\":{\"819\":1,\"850\":1}}],[\"侧边栏\",{\"1\":{\"819\":1,\"850\":1}}],[\"布局与功能禁用\",{\"0\":{\"819\":1}}],[\"展示\",{\"0\":{\"821\":1},\"1\":{\"818\":1,\"841\":1}}],[\"展开元素进判断单个条件name\",{\"1\":{\"152\":1}}],[\"展开schoolstudents集合穿透到下方直接判断名称\",{\"1\":{\"129\":1}}],[\"就会将默认的easy\",{\"1\":{\"815\":1,\"816\":1}}],[\"就是有数据库自定义片段来自行实现api\",{\"1\":{\"662\":1}}],[\"就是还是以maxshardingquerylimit作为最大链接数尽可能少的使用连接数去执行跨分片的查询归并\",{\"1\":{\"469\":1}}],[\"就是说navigate的selfproperty和targetproperty可以以不同的列返回\",{\"1\":{\"713\":1}}],[\"就是说如果存在跨表或者跨库查询那么本次查询将会严格控制内存\",{\"1\":{\"469\":1}}],[\"就是说需要满足用户下面的角色是xx员的起码有5个及以上的\",{\"1\":{\"146\":1}}],[\"就是比如select\",{\"1\":{\"407\":1,\"469\":1}}],[\"就是在使用的时候使用easyproxyquery而不是easyentityquery\",{\"1\":{\"157\":1,\"166\":1}}],[\"就是通过模型对象关系自动动将用户表和用户书本表表通过关联关系进行关联查询\",{\"1\":{\"152\":1}}],[\"就是手动将用户表和用户书本表表通过子查询关联in或者exists的方式进行链接查询\",{\"1\":{\"152\":1}}],[\"就是手动将用户表和用户地址表进行join\",{\"1\":{\"152\":1}}],[\"就是因为用户表里面已经约定好和用户地址的对应关系\",{\"1\":{\"152\":1}}],[\"就是针对各个表之间的关系进行关联\",{\"1\":{\"10\":1}}],[\"抛出\",{\"1\":{\"813\":2}}],[\"抛错\",{\"1\":{\"532\":8}}],[\"抛错错误\",{\"1\":{\"353\":1}}],[\"那些对象需要用到这个拦截器\",{\"1\":{\"809\":1}}],[\"那么你可以定义一个雪花id的空接口\",{\"1\":{\"809\":1}}],[\"那么你是否对这种开发感觉有点麻烦\",{\"1\":{\"153\":1}}],[\"那么可能会出现转换失败\",{\"1\":{\"729\":2}}],[\"那么可以使用flatelement来展开如下写法和上述写法一样\",{\"1\":{\"764\":1}}],[\"那么可以通过使用当前方法返回对应的结果集\",{\"1\":{\"740\":1}}],[\"那么可以通过vo的形式来返回自定义列的关联查询\",{\"1\":{\"713\":1}}],[\"那么可以通过第二个参数lambda选择expression或者value或format\",{\"1\":{\"668\":1}}],[\"那么可以直接用mysql的语法和方言\",{\"1\":{\"468\":1}}],[\"那么可以采用integer属性\",{\"1\":{\"307\":1,\"573\":1}}],[\"那么需要对其单引号变成双单引号\",{\"1\":{\"670\":1}}],[\"那么需要对查询采用astracking来让返回结果被追踪\",{\"1\":{\"417\":1}}],[\"那么整个表达式需要将单引号改成双引号\",{\"1\":{\"669\":1}}],[\"那么直接将表名改写\",{\"1\":{\"625\":2}}],[\"那么直接放弃当前查询出来的结果\",{\"1\":{\"417\":1}}],[\"那么后续所有的属性必须在allowed里面\",{\"1\":{\"619\":1}}],[\"那么证书有个动态的隐藏属性叫做状态\",{\"1\":{\"554\":1,\"592\":1}}],[\"那么我们可以替换掉哪一些呢\",{\"1\":{\"545\":1}}],[\"那么我们应该如何实现\",{\"1\":{\"221\":1,\"224\":1}}],[\"那么入参一个就会生成queryable\",{\"1\":{\"530\":1}}],[\"那么框架将会打印获取链接是繁忙的\",{\"1\":{\"469\":1}}],[\"那么将会抛错\",{\"1\":{\"469\":1}}],[\"那么意味着所有线程只有10个连接池内的链接可以被用来进行分片聚合查询\",{\"1\":{\"469\":1}}],[\"那么针对单个库如果查询所有表每个表都需要一个connection所以可能会单次查询耗尽链接池的链接甚至不够\",{\"1\":{\"469\":1}}],[\"那么默认将单引号改为双单引号\",{\"1\":{\"468\":1}}],[\"那么默认单引号字符串模板需要改成双单引号\",{\"1\":{\"468\":1}}],[\"那么执行的sql和执行的结果将会以log\",{\"1\":{\"468\":1}}],[\"那么生成的sql将是insert\",{\"1\":{\"468\":1}}],[\"那么在insertable\",{\"1\":{\"426\":2}}],[\"那么在更新的时候如果是对象更新那么将会生成原子sql\",{\"1\":{\"193\":1}}],[\"那么性能会相对低下\",{\"1\":{\"417\":1}}],[\"那么会让所有的结果集全部被追踪\",{\"1\":{\"417\":1}}],[\"那么会进入当前方法如果返回true那么会默认将当前转换作用到属性上\",{\"1\":{\"306\":2,\"572\":2}}],[\"那么a线程想要获取下一个就必须等待b线程释放\",{\"1\":{\"407\":1}}],[\"那么就会导致死锁要分别等到其他线程超时\",{\"1\":{\"407\":1}}],[\"那么就双击shift输入registry\",{\"1\":{\"14\":1}}],[\"那么如果有3个线程都需要5个分片聚合那么肯定有一个线程无法获取到那么就会等到默认5秒\",{\"1\":{\"469\":1}}],[\"那么如果有3个线程a\",{\"1\":{\"407\":1}}],[\"那么如果线程a\",{\"1\":{\"407\":1}}],[\"那么行版本的追加只会纯在与where条件的追加\",{\"1\":{\"326\":1}}],[\"那么predicatefilterinterceptor可以帮你满足这个条件\",{\"1\":{\"262\":1}}],[\"那么这个属性用来描述班级下有多少学生人数\",{\"1\":{\"554\":1}}],[\"那么这个值可以设置60\",{\"1\":{\"469\":1}}],[\"那么这个值如何处理\",{\"1\":{\"236\":1,\"564\":1}}],[\"那么这个18应该怎么处理\",{\"1\":{\"236\":1,\"564\":1}}],[\"那么是否有办法可以简化这些操作呢\",{\"1\":{\"153\":1}}],[\"那么是不会自动查询导航属性\",{\"1\":{\"127\":1}}],[\"那么easy\",{\"1\":{\"99\":1,\"106\":1,\"273\":1,\"417\":1}}],[\"那么lambda查询可以让你回到mp的写法并且更加符合逻辑\",{\"1\":{\"43\":1,\"46\":1}}],[\"赋值雪花id\",{\"1\":{\"809\":1}}],[\"介绍\",{\"0\":{\"808\":1,\"822\":1,\"856\":1,\"860\":1},\"1\":{\"822\":1,\"823\":1}}],[\"别忘记resources下的文件还有别忘了把标记generate\",{\"1\":{\"806\":1}}],[\"别名自动设置\",{\"1\":{\"669\":1}}],[\"别名\",{\"1\":{\"668\":1}}],[\"调试apt只需要在右侧clean后再compile处右键debug\",{\"1\":{\"806\":1}}],[\"处理一些业务\",{\"1\":{\"805\":1}}],[\"万一后续还要别的可以通过这个方法获取\",{\"1\":{\"803\":1}}],[\"父模块\",{\"1\":{\"801\":1}}],[\"项目一定得是多模块\",{\"1\":{\"801\":1}}],[\"项目主页\",{\"0\":{\"0\":1,\"85\":1}}],[\"辅助文件或其他类型的输出\",{\"1\":{\"799\":1}}],[\"扫描和处理注解\",{\"1\":{\"799\":1}}],[\"它允许开发者在编译java代码时\",{\"1\":{\"799\":1}}],[\"应该是不在endtime后可以等于endtime\",{\"1\":{\"797\":1}}],[\"应为\",{\"1\":{\"518\":1}}],[\"防止系统在凌晨发布定时任务刚好在23\",{\"1\":{\"797\":1}}],[\"防止全字段更新把原字段改为null\",{\"1\":{\"429\":1,\"430\":1}}],[\"即topicshardingtime第一次被初始化时和getbegintime互相计算出现在数据库的分片数量\",{\"1\":{\"797\":1}}],[\"即两者属性名可以不一致但是只要两者属性名都是映射为相同columnname即可互相映射\",{\"1\":{\"729\":2}}],[\"先忽略该注解\",{\"1\":{\"797\":1}}],[\"先写表确定\",{\"1\":{\"335\":1}}],[\"订单状态不是2\",{\"1\":{\"783\":1,\"789\":1,\"794\":1}}],[\"订单id取模3进行分库\",{\"1\":{\"779\":1}}],[\"进行引用\",{\"1\":{\"849\":2}}],[\"进阶\",{\"0\":{\"813\":1}}],[\"进修改时间所以只会变更时间\",{\"1\":{\"783\":1,\"789\":1,\"794\":1}}],[\"进首页qq群后或者后续等待作者发布\",{\"1\":{\"511\":1}}],[\"成功插入\",{\"1\":{\"782\":1,\"788\":1,\"793\":1}}],[\"成对使用\",{\"1\":{\"245\":2}}],[\"导入文件\",{\"0\":{\"841\":1}}],[\"导航栏\",{\"1\":{\"819\":1,\"850\":1}}],[\"导航属性\",{\"1\":{\"439\":1}}],[\"导航属性名称\",{\"1\":{\"140\":1}}],[\"导航属性类型\",{\"1\":{\"140\":1}}],[\"导致下次运行会在00\",{\"1\":{\"797\":1}}],[\"导致未分片的对象也需要走代理\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"超级功能\",{\"0\":{\"775\":1}}],[\"超时\",{\"1\":{\"407\":1}}],[\"联合查询\",{\"0\":{\"756\":1}}],[\"联级查询\",{\"0\":{\"694\":1,\"696\":1}}],[\"联级穿透\",{\"1\":{\"129\":1}}],[\"联级筛选include\",{\"1\":{\"100\":1,\"107\":1}}],[\"拉取器\",{\"1\":{\"743\":1}}],[\"月\",{\"1\":{\"848\":1}}],[\"月收入\",{\"1\":{\"737\":2}}],[\"月份\",{\"1\":{\"737\":6}}],[\"收入\",{\"1\":{\"737\":2}}],[\"收货员\",{\"1\":{\"145\":3,\"146\":1,\"147\":1,\"148\":1}}],[\"日\",{\"1\":{\"848\":1}}],[\"日期\",{\"1\":{\"737\":6}}],[\"日志配置\",{\"0\":{\"520\":1},\"1\":{\"423\":1}}],[\"异常\",{\"0\":{\"812\":1},\"1\":{\"735\":1}}],[\"希望返回topic的id其他都是blog的属性\",{\"1\":{\"732\":1}}],[\"定义返回的vo\",{\"1\":{\"731\":1}}],[\"定义了也会忽略\",{\"1\":{\"713\":3}}],[\"李\",{\"1\":{\"724\":4}}],[\"子查询\",{\"0\":{\"761\":1},\"1\":{\"722\":1}}],[\"忽略查询字段\",{\"0\":{\"721\":1}}],[\"忽略id\",{\"1\":{\"38\":1}}],[\"追加映射字段\",{\"0\":{\"720\":1}}],[\"追踪注意点及说明\",{\"1\":{\"417\":1}}],[\"追踪更新进修改营业执照内容\",{\"1\":{\"316\":1}}],[\"追踪更新查询\",{\"1\":{\"250\":1}}],[\"追踪更新\",{\"0\":{\"250\":1}}],[\"追踪\",{\"1\":{\"100\":1,\"107\":1}}],[\"追踪查询\",{\"1\":{\"95\":1}}],[\"克隆一个新的\",{\"1\":{\"714\":1}}],[\"永远不会为null\",{\"1\":{\"707\":1,\"709\":1}}],[\"教师\",{\"1\":{\"713\":1}}],[\"教师和班级的多对多关系表\",{\"1\":{\"705\":1}}],[\"教师表\",{\"1\":{\"705\":1}}],[\"普通链接查询\",{\"0\":{\"705\":1}}],[\"普通用户\",{\"1\":{\"506\":1,\"509\":1}}],[\"中设置页面信息\",{\"1\":{\"848\":1}}],[\"中使用\",{\"1\":{\"827\":1}}],[\"中的\",{\"1\":{\"825\":1}}],[\"中很重要的一个概念\",{\"1\":{\"823\":1}}],[\"中间表多对多配置\",{\"1\":{\"705\":1}}],[\"中间表对象\",{\"1\":{\"704\":1}}],[\"中文值\",{\"1\":{\"506\":1}}],[\"中文单字符不支持查询所以是空\",{\"1\":{\"220\":1}}],[\"中文两个为一组\",{\"1\":{\"216\":1}}],[\"中文一个字符占两个长度\",{\"1\":{\"216\":1}}],[\"等于\",{\"1\":{\"771\":1}}],[\"等同于select\",{\"1\":{\"729\":1}}],[\"等\",{\"1\":{\"703\":1}}],[\"等函数同理\",{\"1\":{\"182\":1}}],[\"糊搞\",{\"1\":{\"697\":1}}],[\"感谢\",{\"1\":{\"697\":1}}],[\"感知的orm称不上一个好orm\",{\"1\":{\"18\":1}}],[\"感知\",{\"1\":{\"18\":1}}],[\"禁止\",{\"1\":{\"697\":1}}],[\"禁用了如下功能\",{\"1\":{\"819\":1}}],[\"禁用展示\",{\"1\":{\"818\":1,\"841\":1}}],[\"禁用部分逻辑删除join的表禁用from的表不禁用\",{\"1\":{\"281\":1}}],[\"禁用部分逻辑删除\",{\"0\":{\"281\":1}}],[\"禁用启用关联关系表\",{\"1\":{\"275\":1}}],[\"禁用最近的一张表\",{\"1\":{\"275\":1}}],[\"禁用逻辑删除\",{\"0\":{\"280\":1},\"1\":{\"275\":1}}],[\"张\",{\"1\":{\"694\":2,\"696\":2}}],[\"十一班\",{\"1\":{\"694\":1,\"696\":1}}],[\"双字段排序\",{\"0\":{\"676\":1}}],[\"括号里面用or来链接\",{\"1\":{\"673\":1}}],[\"^ste\",{\"1\":{\"669\":2}}],[\"合并两个sql\",{\"1\":{\"669\":1}}],[\"常量值\",{\"1\":{\"668\":2}}],[\"常见问题\",{\"0\":{\"11\":1}}],[\"已作废\",{\"1\":{\"668\":1}}],[\"附加到sql片段上面\",{\"1\":{\"668\":1}}],[\"附加断言仅一条\",{\"1\":{\"532\":2}}],[\"拼接的规则底层为messageformat仅需满足此即可\",{\"1\":{\"668\":1}}],[\"随机排序带参数\",{\"0\":{\"665\":1}}],[\"随机排序\",{\"0\":{\"664\":1}}],[\"随便添加一个条件即可\",{\"1\":{\"16\":1}}],[\"聚合函数\",{\"1\":{\"642\":1}}],[\"聚合结果\",{\"0\":{\"182\":1}}],[\"暂时不支持proxy模式\",{\"1\":{\"640\":1}}],[\"暂不支持分库分表注解\",{\"1\":{\"450\":1}}],[\"各自一个\",{\"1\":{\"640\":1}}],[\"构建条件\",{\"1\":{\"635\":1}}],[\"严格模式\",{\"1\":{\"632\":1}}],[\"严格模式下所有属性必须在对象属性里面不然会报错\",{\"1\":{\"618\":1}}],[\"虽然我们对phone进行了判断非null并且包含对应的phone的key\",{\"1\":{\"773\":1}}],[\"虽然我们没有在表达式中设置需要set的属性\",{\"1\":{\"262\":1}}],[\"虽然include方法支持vo对象返回\",{\"1\":{\"713\":1}}],[\"虽然id为空但是还是加入到了sql中\",{\"1\":{\"631\":1}}],[\"恢复如果后面没有自定义where那么不需要恢复\",{\"1\":{\"631\":1}}],[\"优点\",{\"1\":{\"628\":1}}],[\"基本类型查询\",{\"0\":{\"609\":1}}],[\"基础配置kotlin\",{\"0\":{\"461\":1}}],[\"基础配置java\",{\"0\":{\"456\":1}}],[\"基础\",{\"0\":{\"97\":1}}],[\"修正类型\",{\"1\":{\"608\":1}}],[\"修改演示\",{\"1\":{\"333\":1}}],[\"修改为topictypejsonvalue\",{\"1\":{\"310\":1,\"562\":1}}],[\"修改我们的实体对象\",{\"1\":{\"284\":1}}],[\"修改人\",{\"1\":{\"260\":1,\"809\":2}}],[\"修改人修改时间\",{\"1\":{\"100\":1,\"107\":1}}],[\"修改时间\",{\"1\":{\"260\":1,\"809\":2}}],[\"修改原始的对象\",{\"1\":{\"219\":1}}],[\"修改set字段拦截器\",{\"1\":{\"95\":1}}],[\"修改拦截器\",{\"1\":{\"95\":1}}],[\"修改\",{\"0\":{\"104\":1,\"412\":1,\"783\":1,\"789\":1,\"794\":1},\"1\":{\"95\":1,\"256\":1,\"264\":1,\"280\":1,\"333\":1,\"770\":1}}],[\"你需要阅读\",{\"1\":{\"823\":1}}],[\"你应该创建和编写\",{\"1\":{\"821\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"850\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"819\":1}}],[\"你可以将图片和\",{\"1\":{\"849\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"849\":1}}],[\"你可以在\",{\"1\":{\"848\":1}}],[\"你可以标记\",{\"1\":{\"833\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"821\":1}}],[\"你可以简单理解为一种草稿类型\",{\"1\":{\"605\":1}}],[\"你好\",{\"1\":{\"673\":10}}],[\"你的其他注解处理器\",{\"1\":{\"455\":1}}],[\"你的其他依赖包\",{\"1\":{\"455\":1}}],[\"你的版本\",{\"1\":{\"455\":1}}],[\"匿名表案例2\",{\"0\":{\"734\":1}}],[\"匿名表\",{\"0\":{\"733\":1}}],[\"匿名对象需要返回select+select\",{\"1\":{\"605\":1}}],[\"匿名类型查询\",{\"0\":{\"602\":1}}],[\"匿名类型平替\",{\"1\":{\"18\":1}}],[\"场景\",{\"0\":{\"604\":1},\"1\":{\"641\":1,\"697\":1}}],[\"背景\",{\"0\":{\"603\":1}}],[\"右侧同理\",{\"1\":{\"631\":2}}],[\"右链接\",{\"1\":{\"601\":1}}],[\"右键需要生成dto的包\",{\"1\":{\"111\":1}}],[\"左链接\",{\"1\":{\"601\":1}}],[\"左林右李02\",{\"1\":{\"206\":1}}],[\"状态\",{\"1\":{\"600\":1,\"629\":1,\"632\":1,\"634\":1,\"731\":1,\"732\":1}}],[\"状态计算属性\",{\"0\":{\"592\":1},\"1\":{\"554\":1}}],[\"发布时间\",{\"1\":{\"600\":1,\"629\":1,\"632\":1,\"634\":1,\"732\":1}}],[\"发送http请求\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"博客链接\",{\"1\":{\"600\":1,\"732\":1}}],[\"嵌套join\",{\"0\":{\"647\":1}}],[\"嵌套多表\",{\"0\":{\"599\":1}}],[\"嵌套的sql表达式\",{\"1\":{\"596\":1}}],[\"参考众多c\",{\"1\":{\"596\":1}}],[\"参数复用\",{\"1\":{\"669\":1}}],[\"参数值\",{\"1\":{\"668\":1}}],[\"参数说明\",{\"1\":{\"668\":1}}],[\"参数为符合条件的表达式\",{\"1\":{\"601\":1}}],[\"参数表示数据库隔离级别\",{\"1\":{\"410\":1}}],[\"参数3\",{\"1\":{\"298\":1}}],[\"参数2表示第二张表\",{\"1\":{\"649\":4}}],[\"参数2\",{\"1\":{\"298\":1}}],[\"参数1表示第一张表topic\",{\"1\":{\"649\":4}}],[\"参数1\",{\"1\":{\"298\":1}}],[\"参数无\",{\"1\":{\"226\":2,\"227\":1}}],[\"参数\",{\"1\":{\"198\":1,\"211\":1,\"226\":1,\"227\":2,\"245\":1,\"246\":1,\"247\":1,\"322\":1,\"601\":1,\"619\":1,\"625\":1,\"641\":1,\"685\":1,\"729\":1,\"741\":1,\"743\":1}}],[\"期间没有用到别的数据库所以是false\",{\"1\":{\"592\":1}}],[\"他不是一个真实存在的列所以返回false\",{\"1\":{\"592\":1}}],[\"他是由当前时间和生日的相减生成的动态值\",{\"1\":{\"554\":1}}],[\"他是有firstname和lastname组合\",{\"1\":{\"554\":1}}],[\"未登录就给默认值\",{\"1\":{\"809\":1}}],[\"未过期\",{\"1\":{\"592\":1}}],[\"未找到对应的用户信息\",{\"1\":{\"812\":2,\"813\":2}}],[\"未找到对应的订单\",{\"1\":{\"783\":2,\"789\":2,\"794\":2,\"795\":1}}],[\"未找到对应的数据\",{\"1\":{\"417\":1}}],[\"未找到主题信息\",{\"1\":{\"532\":5}}],[\"未找到当前主题数据\",{\"1\":{\"356\":1}}],[\"未找到小明\",{\"1\":{\"34\":1,\"167\":1}}],[\"过滤null或者不过滤\",{\"1\":{\"641\":1}}],[\"过滤包含注解\",{\"1\":{\"308\":1,\"574\":1}}],[\"过期时间\",{\"1\":{\"592\":1}}],[\"过期\",{\"1\":{\"592\":2}}],[\"临期\",{\"1\":{\"592\":2}}],[\"临时结果\",{\"1\":{\"185\":1}}],[\"总之复合计算属性是由当前对的一个或者多个以上的数据通过一定的函数进行组合来实现一个动态不存在数据库中的属性\",{\"1\":{\"564\":1}}],[\"总之跨表计算属性是由当前对的一个或者多个以上的数据或者跨表数据通过一定的函数进行组合来实现一个动态不存在数据库中的属性\",{\"1\":{\"556\":1}}],[\"总共有几个参数\",{\"1\":{\"530\":1}}],[\"跨表计算属性\",{\"0\":{\"555\":1,\"556\":1}}],[\"该属性可以做到数据由数据库生成比如数据库函数存在mysqlnextid\",{\"1\":{\"554\":1}}],[\"该监听器用来监听jdbc的执行前后sql和参数还有异常和耗时\",{\"1\":{\"267\":1}}],[\"函数排序\",{\"0\":{\"678\":1}}],[\"函数\",{\"1\":{\"608\":1}}],[\"函数自增属性\",{\"0\":{\"580\":1},\"1\":{\"554\":1}}],[\"函数来实现插入时生成对应的id列\",{\"1\":{\"253\":1,\"580\":1}}],[\"由子表或者额外表数据构成\",{\"1\":{\"554\":1}}],[\"由前端上传json\",{\"1\":{\"23\":1,\"24\":1,\"25\":1}}],[\"证书状态值\",{\"1\":{\"592\":1}}],[\"证书名称\",{\"1\":{\"592\":1}}],[\"证书是否过期可以通过这个状态来实现\",{\"1\":{\"554\":1,\"592\":1}}],[\"证书表存在证书过期时间\",{\"1\":{\"554\":1,\"592\":1}}],[\"复合计算属性\",{\"0\":{\"563\":1,\"564\":1}}],[\"复合属性private\",{\"1\":{\"554\":1}}],[\"复杂union\",{\"0\":{\"758\":1}}],[\"复杂\",{\"1\":{\"596\":1}}],[\"复杂计算属性\",{\"1\":{\"554\":1}}],[\"复杂计算属性比如班级表存在学生数量这个属性这个属性应该是select\",{\"1\":{\"100\":1,\"107\":1}}],[\"复杂的查询顺序\",{\"1\":{\"335\":1}}],[\"复杂子查询\",{\"0\":{\"239\":1}}],[\"增强属性\",{\"0\":{\"583\":1}}],[\"增强属性private\",{\"1\":{\"554\":1}}],[\"增加了自己的测试代码\",{\"1\":{\"383\":1}}],[\"增加年份\",{\"1\":{\"290\":1}}],[\"增加月份\",{\"1\":{\"290\":1}}],[\"增加时间\",{\"1\":{\"290\":1}}],[\"估顾名思义这个属性是通过转换函数或者计算得出的属性\",{\"1\":{\"554\":1}}],[\"什么叫做计算属性\",{\"1\":{\"554\":1}}],[\"什么是solon\",{\"0\":{\"474\":1}}],[\"放在最后面可以替换掉前面所有方法\",{\"1\":{\"548\":1}}],[\"完美的屏蔽分片带来的业务复杂度\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"完整配置其中自己的属性和目标属性忽略表示主键\",{\"1\":{\"705\":1}}],[\"完整配置\",{\"1\":{\"705\":1}}],[\"完整的pom\",{\"0\":{\"519\":1}}],[\"完全可以自行自定义实现\",{\"1\":{\"544\":1}}],[\"轻易实际为准\",{\"1\":{\"540\":1}}],[\"轻量级\",{\"1\":{\"94\":1}}],[\"快捷键shift+m\",{\"1\":{\"540\":1}}],[\"快捷键shift+p\",{\"1\":{\"540\":1}}],[\"快速预览🔥\",{\"0\":{\"398\":1}}],[\"快速get\",{\"1\":{\"395\":1}}],[\"快速生成接口\",{\"0\":{\"155\":1}}],[\"快速开始\",{\"0\":{\"476\":1},\"1\":{\"153\":1}}],[\"快速开始🔥🔥🔥\",{\"0\":{\"26\":1}}],[\"快速筛选\",{\"0\":{\"152\":1}}],[\"快速查询\",{\"0\":{\"151\":1}}],[\"快速返回用户拥有的菜单\",{\"1\":{\"112\":1}}],[\"快速实现分页查询\",{\"1\":{\"23\":1,\"24\":1,\"25\":1}}],[\"快速实现表单查询\",{\"0\":{\"20\":1}}],[\"快速了解api🔥🔥🔥\",{\"0\":{\"150\":1}}],[\"快速了解\",{\"0\":{\"18\":1}}],[\"从idea的插件市场下载插件\",{\"1\":{\"539\":1}}],[\"从而达到对象间的互相引用和互相调用\",{\"1\":{\"10\":1}}],[\"工欲善其事必先利其器\",{\"1\":{\"534\":1}}],[\"工具栏点击build\",{\"1\":{\"396\":1}}],[\"看不懂大于小于记不住\",{\"0\":{\"533\":1}}],[\"智能提示\",{\"0\":{\"531\":1}}],[\"智能的差异识别更新\",{\"1\":{\"100\":1,\"107\":1}}],[\"填写说明\",{\"1\":{\"530\":1}}],[\"填充数据转成cityvo\",{\"1\":{\"641\":1}}],[\"填充数据如何查询\",{\"1\":{\"641\":1}}],[\"填充\",{\"1\":{\"216\":1}}],[\"便捷轻量的easy\",{\"1\":{\"528\":1}}],[\"便于快速的写出需要的便捷的代码\",{\"1\":{\"10\":1}}],[\"或许我们做的还不够好但是您的使用体验和反馈会让整个生态繁荣\",{\"1\":{\"527\":1}}],[\"或者将格式化值变成参数\",{\"1\":{\"670\":2}}],[\"或者将单引号作为参数或者使用keepstyle\",{\"1\":{\"670\":1}}],[\"或者在使用的时候调用\",{\"1\":{\"669\":1}}],[\"或者其他表的对象属性或者表达式query\",{\"1\":{\"668\":1}}],[\"或者gis中由数据库生成的函数那么适用于改方法仅插入时生效\",{\"1\":{\"554\":1}}],[\"或者springboot下使用\",{\"1\":{\"468\":1}}],[\"或者调用easyquery\",{\"1\":{\"417\":1}}],[\"或者调用useinterceptor\",{\"1\":{\"257\":1}}],[\"或者接口logicdeletestrategy\",{\"1\":{\"284\":1}}],[\"或者可以通过判断当前是否是某个api接口比如startwith\",{\"1\":{\"266\":1}}],[\"或者使用easyquery\",{\"1\":{\"242\":1}}],[\"或者\",{\"1\":{\"94\":1,\"528\":1}}],[\"清楚当前上下文数据源\",{\"1\":{\"522\":1}}],[\"清晰的看到差异更新只会更新需要更新的列\",{\"1\":{\"417\":1}}],[\"输出指定列\",{\"0\":{\"717\":1}}],[\"输出\",{\"1\":{\"509\":1}}],[\"输入url\",{\"1\":{\"481\":1}}],[\"性别\",{\"1\":{\"506\":1}}],[\"性能和原生自己实现是一样的用于处理重复劳动\",{\"1\":{\"799\":1}}],[\"性能\",{\"1\":{\"383\":2,\"450\":1}}],[\"性能说明\",{\"0\":{\"379\":1}}],[\"性能比较\",{\"0\":{\"383\":1},\"1\":{\"333\":1}}],[\"性能问题自行处理\",{\"1\":{\"308\":1,\"574\":1}}],[\"姓名\",{\"1\":{\"506\":1}}],[\"管理员\",{\"1\":{\"506\":1,\"509\":1}}],[\"女\",{\"1\":{\"506\":1,\"509\":1}}],[\"男\",{\"1\":{\"506\":1,\"509\":1}}],[\"记录标识\",{\"1\":{\"809\":2}}],[\"记录器级别的配置示例\",{\"1\":{\"481\":1,\"483\":1}}],[\"记录耗时操作\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"打包可以缩到\",{\"1\":{\"474\":1}}],[\"打印sql显示\",{\"1\":{\"465\":1,\"470\":1}}],[\"打印的sql\",{\"1\":{\"34\":1,\"167\":1}}],[\"高阶\",{\"0\":{\"814\":1}}],[\"高性能命中对应的库\",{\"1\":{\"789\":1}}],[\"高性能命中对应的库和表\",{\"1\":{\"783\":1}}],[\"高性能的分片机制\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"高\",{\"1\":{\"474\":1}}],[\"高级功能\",{\"0\":{\"188\":1}}],[\"高级扩展\",{\"0\":{\"140\":1}}],[\"～\",{\"1\":{\"474\":1}}],[\"国产框架solon配置\",{\"0\":{\"472\":1,\"473\":1}}],[\"此页面应当包含\",{\"1\":{\"850\":1}}],[\"此文字有脚注\",{\"1\":{\"832\":1}}],[\"此处count默认返回long类型但是star可接受类型为integer所以可以通过setpropertytype\",{\"1\":{\"608\":1}}],[\"此处用于配置系统默认配置选项\",{\"1\":{\"471\":1,\"548\":1}}],[\"此方法引发batchupdateexception\",{\"1\":{\"206\":1}}],[\"线程池有界队列大小\",{\"1\":{\"469\":1}}],[\"涉及entity操作比如update对象\",{\"1\":{\"469\":1}}],[\"尽可能的一次性查询所有的表\",{\"1\":{\"469\":1}}],[\"被记录到日志里面\",{\"1\":{\"468\":1}}],[\"被追踪的返回结果对象必须要满足是数据库实体才可以\",{\"1\":{\"417\":1}}],[\"纯lambda表达式模式\",{\"1\":{\"460\":1}}],[\"语法\",{\"0\":{\"840\":1},\"1\":{\"826\":1}}],[\"语法进行了扩展\",{\"1\":{\"825\":1}}],[\"语法扩展\",{\"1\":{\"824\":1}}],[\"语义上面来讲代理模式最好\",{\"1\":{\"459\":1}}],[\"语句\",{\"1\":{\"127\":1}}],[\"且数据高性能更新\",{\"1\":{\"789\":1}}],[\"且属性名需要一致\",{\"1\":{\"628\":1}}],[\"且必须大于等于maxshardingquerylimit\",{\"1\":{\"469\":1}}],[\"且必须设置小于等于datasource的连接池大小\",{\"1\":{\"469\":1}}],[\"且可以互相调用\",{\"1\":{\"458\":1}}],[\"且是否使用astracking查询或者查询后是否已经添加到当前追踪上下\",{\"1\":{\"252\":3}}],[\"程序那么请直接点击跳转\",{\"1\":{\"456\":2}}],[\"程序包xxxxxxxx\",{\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"必要参数\",{\"1\":{\"455\":2}}],[\"必须是表对象实体字节\",{\"1\":{\"704\":1}}],[\"必须写到对应的where前面后续的where才会生效\",{\"1\":{\"631\":1}}],[\"必须要实现一个构造函数\",{\"1\":{\"521\":1}}],[\"必须要设置对应的版本号\",{\"1\":{\"468\":1}}],[\"必须添加这个注解\",{\"1\":{\"396\":1}}],[\"必须设置generatedkey为true\",{\"1\":{\"254\":1,\"581\":1}}],[\"较好\",{\"1\":{\"450\":2}}],[\"书写一般class\",{\"1\":{\"450\":1}}],[\"书写非常方便\",{\"1\":{\"450\":1}}],[\"拥有完善的智能提示\",{\"1\":{\"450\":1}}],[\"拥有非常高的性能\",{\"1\":{\"436\":1}}],[\"好\",{\"1\":{\"450\":1}}],[\"重构无法通过对象的属性对应的引用\",{\"1\":{\"450\":1}}],[\"重构无法找到属性对应的引用\",{\"1\":{\"450\":1}}],[\"重要的内容\",{\"1\":{\"833\":1}}],[\"重要\",{\"0\":{\"11\":1,\"467\":1}}],[\"难维护\",{\"1\":{\"450\":2}}],[\"易维护\",{\"1\":{\"450\":4}}],[\"缺点\",{\"1\":{\"450\":1,\"628\":1}}],[\"缺少aop依赖\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"五种模式\",{\"0\":{\"450\":1}}],[\"乐观锁也就是版本号\",{\"1\":{\"431\":1}}],[\"乐观锁版本号\",{\"0\":{\"318\":1},\"1\":{\"95\":1}}],[\"后传入\",{\"1\":{\"670\":1}}],[\"后续用户指定逻辑删除名称就是用这个名称即可\",{\"1\":{\"809\":1}}],[\"后续禁用拦截器或者启用拦截器使用这个名称代表当前拦截器\",{\"1\":{\"809\":1}}],[\"后续按订单uid进行分表\",{\"1\":{\"779\":1}}],[\"后续才会判断valuefilter\",{\"1\":{\"631\":1}}],[\"后续的where才会添加到条件中\",{\"1\":{\"631\":3}}],[\"后续的操作就是将select和之前的表达式转成匿名sql类似select\",{\"1\":{\"340\":1}}],[\"后续可以通过allowdeletestatment来允许\",{\"1\":{\"465\":1,\"470\":1}}],[\"后获取自增id后将会填充到里面\",{\"1\":{\"426\":2}}],[\"弃用\",{\"1\":{\"426\":1}}],[\"针对大数据量的数据无法一次在内存中获取\",{\"1\":{\"740\":1}}],[\"针对复杂表达式很多时候我们需要复用表达式\",{\"1\":{\"714\":1}}],[\"针对关联查询的返回结果如果需要支持vo对象返回\",{\"1\":{\"713\":1}}],[\"针对单个数据源进行配置\",{\"1\":{\"486\":1}}],[\"针对默认配置参数进行说明\",{\"1\":{\"423\":1}}],[\"针对分表分库时有效\",{\"1\":{\"227\":1}}],[\"策略默认\",{\"1\":{\"618\":1}}],[\"策略更新\",{\"0\":{\"419\":1}}],[\"策略新增\",{\"0\":{\"363\":1}}],[\"正确的用法\",{\"1\":{\"417\":1}}],[\"正常业务我们会抛出业务异常\",{\"1\":{\"812\":1}}],[\"正常业务开发我们都会选择性的使用自定义异常然后全局拦截来作为业务中断的消息返回到前端\",{\"1\":{\"811\":1}}],[\"正常\",{\"1\":{\"592\":1}}],[\"正常情况下如果用户想使用差异更新\",{\"1\":{\"417\":1}}],[\"正常的sql不进行部分禁用\",{\"1\":{\"281\":1}}],[\"错误\",{\"0\":{\"518\":1}}],[\"错误的用法\",{\"1\":{\"417\":1}}],[\"错误了\",{\"1\":{\"411\":1}}],[\"哪张表默认\",{\"1\":{\"619\":1}}],[\"哪怕是join下也可以自己适应\",{\"1\":{\"668\":1}}],[\"哪怕传递了也不会生效不会报错\",{\"1\":{\"619\":1}}],[\"哪怕this\",{\"1\":{\"411\":1}}],[\"哪些对象允许采用当前拦截器\",{\"1\":{\"257\":1}}],[\"内部属于独立查询\",{\"1\":{\"703\":1}}],[\"内部采用messageformat来格式化参数\",{\"1\":{\"670\":1}}],[\"内部自动调用executesql\",{\"1\":{\"663\":1}}],[\"内部调用this\",{\"1\":{\"411\":1}}],[\"内链接\",{\"1\":{\"601\":1}}],[\"内容\",{\"1\":{\"600\":1,\"629\":1,\"632\":1,\"634\":1,\"732\":1,\"824\":1}}],[\"内存严格表示会多开连接数\",{\"1\":{\"407\":1}}],[\"关于这些扩展\",{\"1\":{\"825\":1}}],[\"关联子查询过滤\",{\"1\":{\"712\":1}}],[\"关联查询结果将学生表的班级\",{\"1\":{\"713\":1}}],[\"关联查询vo返回自定义列\",{\"0\":{\"713\":1}}],[\"关联查询\",{\"0\":{\"640\":1,\"697\":1}}],[\"关闭事务\",{\"1\":{\"410\":1}}],[\"关系对象\",{\"0\":{\"128\":1,\"142\":1}}],[\"提示\",{\"1\":{\"849\":1}}],[\"提示容器\",{\"1\":{\"827\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"826\":1}}],[\"提供了以kotlin语法强类型\",{\"1\":{\"466\":1}}],[\"提供了以java语法强类型\",{\"1\":{\"460\":1}}],[\"提供了apt自动生成代理对象\",{\"1\":{\"453\":1,\"460\":1,\"466\":1}}],[\"提供了代理模式支持apt模式以非lambda形式的强类型sql语法\",{\"1\":{\"453\":1,\"460\":1,\"466\":1}}],[\"提供了作者在多年工作中使用的缓存双删最佳实践\",{\"1\":{\"208\":1}}],[\"提供了强类型纠错防止number类型赋值给string或者datetime等类型\",{\"1\":{\"18\":1}}],[\"提交事务\",{\"1\":{\"410\":1}}],[\"唯一限制就是当前线程内的\",{\"1\":{\"409\":1}}],[\"核心线程数采用executorcorepoolsize并且需要比\",{\"1\":{\"407\":1}}],[\"核心包\",{\"1\":{\"30\":1,\"31\":1}}],[\"连接数严格会选择少开连接数在内存归并\",{\"1\":{\"407\":1}}],[\"连接池\",{\"1\":{\"395\":1}}],[\"系统自动选择有内存严格和连接数严格\",{\"1\":{\"407\":1}}],[\"系统默认实现\",{\"0\":{\"195\":1}}],[\"符合超大数量级的数据获取\",{\"1\":{\"399\":1}}],[\"加入我的where条件大部分都符合极个别不符合可以通过提前返回不符的来保证剩余的都可以进行\",{\"1\":{\"631\":1}}],[\"加入班级和用户是一对多\",{\"1\":{\"554\":1}}],[\"加群配合插件可以快速生成apt代理类无需每次都要build\",{\"1\":{\"391\":1}}],[\"加密展示\",{\"1\":{\"818\":1,\"841\":1}}],[\"加密策略\",{\"1\":{\"486\":1}}],[\"加密策略实现类\",{\"1\":{\"212\":1}}],[\"加密长度\",{\"1\":{\"216\":1}}],[\"加密方式\",{\"0\":{\"216\":1}}],[\"加密实现类支持模糊搜索高性能\",{\"0\":{\"215\":1}}],[\"加密值\",{\"1\":{\"211\":1}}],[\"想进一步进行更多测试的同学\",{\"1\":{\"390\":1}}],[\"远快于\",{\"1\":{\"388\":1,\"389\":1}}],[\"是一种用于在编译时处理注解的技术\",{\"1\":{\"799\":1}}],[\"是采用流失聚合还是内存聚合\",{\"1\":{\"469\":1}}],[\"是\",{\"1\":{\"387\":1,\"823\":1}}],[\"是否删除\",{\"1\":{\"809\":2}}],[\"是否必填\",{\"1\":{\"704\":1}}],[\"是否需要执行当前方法\",{\"1\":{\"641\":1}}],[\"是否需要替换掉原先的如果原先的存在的话\",{\"1\":{\"298\":1}}],[\"是否允许空字符串\",{\"1\":{\"632\":1}}],[\"是否正序表示排序是否使用asc\",{\"1\":{\"619\":1}}],[\"是否正序\",{\"1\":{\"619\":1,\"620\":1,\"621\":1}}],[\"是否为严格模式\",{\"1\":{\"618\":1}}],[\"是否置顶\",{\"1\":{\"600\":2,\"629\":1,\"632\":1,\"634\":1,\"731\":2,\"732\":2}}],[\"是否是合并子查询\",{\"1\":{\"585\":1}}],[\"是否是自增列\",{\"1\":{\"426\":2}}],[\"是否打印执行sql\",{\"1\":{\"468\":1}}],[\"是否打印sql\",{\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"是否将当前对象添加到了追踪上下文\",{\"1\":{\"417\":1}}],[\"是否支持\",{\"1\":{\"372\":1,\"613\":1}}],[\"是否支持模糊查询\",{\"1\":{\"212\":1}}],[\"是否已经set了\",{\"1\":{\"262\":1,\"809\":1}}],[\"是否默认添加到表达式中前提是apply为true\",{\"1\":{\"257\":1}}],[\"是否存在get\",{\"1\":{\"166\":1}}],[\"是否启动默认true\",{\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"依赖安装\",{\"0\":{\"453\":1,\"455\":1}}],[\"依赖注入easyentityquery即可完美使用\",{\"1\":{\"157\":1}}],[\"依赖注入\",{\"0\":{\"30\":1,\"31\":1,\"44\":1,\"163\":1},\"1\":{\"115\":1,\"157\":1,\"465\":1,\"490\":1}}],[\"依然是\",{\"1\":{\"386\":1}}],[\"倍左右\",{\"1\":{\"388\":1}}],[\"倍\",{\"1\":{\"385\":1,\"386\":1,\"387\":1,\"389\":1,\"474\":2}}],[\"轮的测试结果\",{\"1\":{\"385\":1,\"386\":1,\"387\":1,\"388\":1,\"389\":1}}],[\"轮\",{\"1\":{\"384\":1}}],[\"则性能越高\",{\"1\":{\"384\":1}}],[\"谁消耗的时间越少\",{\"1\":{\"384\":1}}],[\"之后通过打印时间戳的方式进行对比\",{\"1\":{\"384\":1}}],[\"开始\",{\"1\":{\"521\":9}}],[\"开始分片表为2020年1月那么如果你查下2019年或者查询未来的时间那么框架内部还没有这个时间所以本次查询获取到的路由为空\",{\"1\":{\"469\":1}}],[\"开始之前先进行预热\",{\"1\":{\"384\":1}}],[\"开发方便性\",{\"1\":{\"450\":1}}],[\"开发人员那么肯定这种模式相对的会更加适合您的开发理念\",{\"1\":{\"391\":1}}],[\"开启定时任务\",{\"1\":{\"798\":1}}],[\"开启上下文追踪但是没有将查询结果对象附加到当前上下文\",{\"1\":{\"417\":1}}],[\"开启追踪后对象属性不修改更新\",{\"0\":{\"251\":1}}],[\"条数据\",{\"1\":{\"384\":1,\"386\":1,\"387\":1}}],[\"条件比较永远是columncomparevalue\",{\"1\":{\"770\":1}}],[\"条件比较\",{\"0\":{\"770\":1}}],[\"条件为学生所在班级的班级名称包含一班字样的比如一班\",{\"1\":{\"694\":1,\"696\":1}}],[\"条件拦截\",{\"1\":{\"631\":1}}],[\"条件拦截器\",{\"1\":{\"256\":1}}],[\"条件接收器\",{\"1\":{\"631\":1}}],[\"条件接受\",{\"0\":{\"631\":1}}],[\"条件仅支持and\",{\"1\":{\"628\":1}}],[\"条件函数\",{\"0\":{\"293\":1,\"296\":1}}],[\"条件\",{\"1\":{\"152\":1,\"672\":2}}],[\"条件更新\",{\"1\":{\"95\":1}}],[\"条件里面判断是否要继续\",{\"1\":{\"25\":1}}],[\"条件过滤默认非null不加入条件如果是字符串还需满足非空\",{\"1\":{\"23\":1}}],[\"和mybatis不同的是期间无需开始事务也可以使用\",{\"1\":{\"740\":1}}],[\"和直接返回select\",{\"1\":{\"731\":1}}],[\"和原生sql不同\",{\"1\":{\"728\":1}}],[\"和逻辑删除等组合\",{\"1\":{\"673\":1}}],[\"和java\",{\"1\":{\"596\":1}}],[\"和first的区别是不会添加limit\",{\"1\":{\"399\":2}}],[\"和\",{\"1\":{\"384\":1,\"822\":1,\"848\":1}}],[\"和set列\",{\"1\":{\"369\":1}}],[\"再比如多级查询需要对结果进行匿名处理后在筛选\",{\"1\":{\"604\":1}}],[\"再比如年龄\",{\"1\":{\"554\":1}}],[\"再说一遍\",{\"1\":{\"455\":1}}],[\"再获取1w条记录的情况下更是遥遥领先与另外两个框架\",{\"1\":{\"383\":1}}],[\"再他们的基础上删除了json的typehandler\",{\"1\":{\"383\":1}}],[\"再次感谢用户←x→↑y↓大佬的测试指出问题所在\",{\"1\":{\"127\":1}}],[\"都是依托于网上orm的性能测试后加入其中\",{\"1\":{\"379\":1}}],[\"都启用的情况下才会去判断是否禁用\",{\"1\":{\"275\":1}}],[\"存在\",{\"1\":{\"771\":1}}],[\"存在至少一条\",{\"1\":{\"601\":1}}],[\"存在至少一条返回true\",{\"1\":{\"601\":1}}],[\"存在更新存在忽略merge\",{\"1\":{\"378\":1}}],[\"存在就更新所有列除了主键和指定约束键\",{\"1\":{\"377\":1}}],[\"存在就更新stars和title\",{\"1\":{\"376\":1,\"377\":1}}],[\"存在就更新\",{\"0\":{\"376\":1,\"377\":1}}],[\"存在就更新或者忽略\",{\"1\":{\"371\":1}}],[\"存在就忽略不更新\",{\"0\":{\"374\":1}}],[\"物理删除时抛出异常\",{\"1\":{\"483\":1}}],[\"物理删除\",{\"1\":{\"357\":1}}],[\"点赞数\",{\"1\":{\"354\":1,\"358\":1,\"412\":1,\"600\":1,\"629\":1,\"632\":1,\"634\":1,\"732\":1,\"756\":1}}],[\"允许那些属性可以排序\",{\"1\":{\"619\":1}}],[\"允许删除命令\",{\"1\":{\"353\":1}}],[\"允许datetime类型的属性\",{\"1\":{\"284\":1,\"485\":1}}],[\"建议转easyentityquery\",{\"1\":{\"490\":1}}],[\"建议使用逻辑删除来规避\",{\"1\":{\"468\":1}}],[\"建议和实际数据库连接池大小一致或者比实际稍小\",{\"1\":{\"407\":1}}],[\"建议和\",{\"1\":{\"350\":1}}],[\"建议重写bean\",{\"1\":{\"117\":1,\"493\":1}}],[\"传入list<string>的name集合\",{\"1\":{\"673\":1}}],[\"传入builder对象排序属性和是否正序即可\",{\"1\":{\"620\":1}}],[\"传入单个字符串string参数\",{\"1\":{\"521\":1}}],[\"传入对应的值来表示是否查询\",{\"1\":{\"350\":1}}],[\"传入是否启用值\",{\"1\":{\"275\":1}}],[\"入参参数顺序就是from和join的表\",{\"1\":{\"344\":1}}],[\"链式写法期间可以通过then来切换操作表\",{\"1\":{\"649\":2}}],[\"链式添加\",{\"0\":{\"361\":1}}],[\"链式说明\",{\"1\":{\"342\":1,\"344\":1}}],[\"链接\",{\"1\":{\"819\":1,\"827\":1}}],[\"链接多个列或者值\",{\"1\":{\"289\":1}}],[\"链接字符串需要添加rewritebatchedstatements=true\",{\"1\":{\"204\":2,\"468\":2}}],[\"操作都是可以操作三张表的\",{\"1\":{\"649\":1}}],[\"操作\",{\"1\":{\"334\":1}}],[\"事务\",{\"0\":{\"408\":1},\"1\":{\"333\":1}}],[\"以便\",{\"1\":{\"821\":1}}],[\"以此完成数据库字段与类字段的映射\",{\"1\":{\"729\":1}}],[\"以select方法作为终结方法结束本次sql链式\",{\"1\":{\"340\":1}}],[\"以mybatis\",{\"1\":{\"333\":1}}],[\"以下关系图有网友\",{\"1\":{\"697\":1}}],[\"以下所有测试来自于beetlsql\",{\"1\":{\"380\":1}}],[\"以下情况不需要调用include或者includes\",{\"1\":{\"127\":1}}],[\"以下配置那么在各个独立module处不需要在引入sql\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1}}],[\"|\",{\"1\":{\"313\":1,\"729\":2,\"771\":4}}],[\"||\",{\"1\":{\"122\":1,\"313\":1,\"498\":1,\"530\":1,\"642\":1}}],[\"公司表\",{\"1\":{\"311\":1}}],[\"区间\",{\"1\":{\"771\":2}}],[\"区\",{\"1\":{\"311\":1}}],[\"区别就是可以自己手动指定列\",{\"1\":{\"729\":1}}],[\"区别就是属性是否是对应多个属性\",{\"1\":{\"635\":1}}],[\"区别在于使用like或者like相关查询的时候会将入参进行相同方式加密后匹配\",{\"1\":{\"212\":1}}],[\"区别\",{\"1\":{\"182\":1}}],[\"市\",{\"1\":{\"311\":1}}],[\"省市区\",{\"0\":{\"712\":1}}],[\"省\",{\"1\":{\"311\":1}}],[\"省略\",{\"1\":{\"111\":3,\"813\":1}}],[\"企业地址信息\",{\"1\":{\"311\":1}}],[\"企业营业执照信息\",{\"1\":{\"311\":1}}],[\"企业营业执照经营内容\",{\"1\":{\"311\":3}}],[\"企业营业执照图片\",{\"1\":{\"311\":3}}],[\"企业营业执照到期时间\",{\"1\":{\"311\":3}}],[\"企业营业执照编号\",{\"1\":{\"311\":3}}],[\"企业所属区域\",{\"1\":{\"311\":2}}],[\"企业所属市区\",{\"1\":{\"311\":2}}],[\"企业所属省份\",{\"1\":{\"311\":2}}],[\"企业名称\",{\"1\":{\"311\":2}}],[\"企业级数据库列加密\",{\"1\":{\"95\":1}}],[\"譬如jdbc\",{\"1\":{\"740\":1}}],[\"譬如学生和班级是一对多的关系\",{\"1\":{\"713\":1}}],[\"譬如按时间分片\",{\"1\":{\"469\":1}}],[\"譬如\",{\"1\":{\"311\":1,\"695\":1}}],[\"譬如我有一个库存冗余字段\",{\"1\":{\"193\":1}}],[\"集合为空返回true\",{\"1\":{\"771\":1}}],[\"集合为空返回false\",{\"1\":{\"771\":1}}],[\"集合内部是一个每个属性采用何种排序方法\",{\"1\":{\"621\":1}}],[\"集合属性\",{\"0\":{\"558\":1}}],[\"集合属性private\",{\"1\":{\"554\":1}}],[\"集合类型的json支持\",{\"0\":{\"310\":1,\"562\":1}}],[\"集合查询\",{\"0\":{\"180\":1}}],[\"相同的代码如果使用tomap将会抛出\",{\"1\":{\"735\":1}}],[\"相同属性不同列名不映射\",{\"0\":{\"718\":1}}],[\"相对性能会稍微低一点\",{\"1\":{\"468\":1}}],[\"相对没有接口模式性能高\",{\"1\":{\"308\":1,\"574\":1}}],[\"相当于select之后就是对之前的表达式进行匿名表处理\",{\"1\":{\"334\":1}}],[\"相关配置\",{\"0\":{\"319\":1}}],[\"相关博客\",{\"0\":{\"240\":1,\"591\":1}}],[\"相关搜索\",{\"0\":{\"202\":1,\"207\":1,\"286\":1,\"317\":1,\"378\":1,\"639\":1,\"671\":1,\"747\":1}}],[\"相关信息\",{\"1\":{\"56\":1,\"823\":1}}],[\"静态方法\",{\"1\":{\"308\":1,\"505\":1,\"574\":1}}],[\"+l\",{\"1\":{\"782\":1,\"788\":1,\"793\":1}}],[\"+newcontent\",{\"1\":{\"661\":1}}],[\"+name+\",{\"1\":{\"547\":1,\"548\":1}}],[\"+i+\",{\"1\":{\"781\":1,\"787\":1}}],[\"+i\",{\"1\":{\"358\":1}}],[\"+id\",{\"1\":{\"323\":1,\"327\":1,\"328\":1}}],[\"+\",{\"1\":{\"306\":1,\"308\":6,\"313\":2,\"362\":1,\"365\":3,\"366\":3,\"368\":1,\"369\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"385\":3,\"386\":3,\"387\":3,\"389\":6,\"417\":1,\"505\":6,\"572\":1,\"574\":6,\"661\":1,\"666\":2,\"742\":3,\"781\":2,\"787\":2,\"797\":5,\"804\":34}}],[\"+abxnyba==avtylqlfeztwfoynb0x+cw==\",{\"1\":{\"220\":1}}],[\"+abxnyba==avtylqlfeztwfoynb0x+cw==xorntdpvndrdid+jlsmh4w==s+w1g858r9lawlqhsbhw9a==vrhlsnycy28x4io+srasca==xngerbsmiv4jd+imjzyd6w==\",{\"1\":{\"220\":2}}],[\"控制台\",{\"0\":{\"304\":1,\"561\":1,\"570\":1,\"578\":1}}],[\"功能详情\",{\"1\":{\"858\":1,\"862\":1}}],[\"功能亮点\",{\"0\":{\"852\":1}}],[\"功能\",{\"0\":{\"855\":1,\"859\":1},\"1\":{\"302\":2,\"559\":2,\"568\":2,\"576\":2,\"856\":1,\"860\":1}}],[\"接受一个lambda表达式为参数\",{\"1\":{\"729\":1}}],[\"接口assertexceptionfactory\",{\"1\":{\"402\":1}}],[\"接口\",{\"0\":{\"638\":1},\"1\":{\"302\":1,\"559\":1,\"568\":1,\"576\":1,\"689\":1}}],[\"接下来我将使用数据库函数来实现\",{\"1\":{\"229\":1,\"584\":1}}],[\"接下来我将演示学校的关系信息\",{\"1\":{\"128\":1}}],[\"接下来我会分别实现这两种模块下easy\",{\"1\":{\"156\":1}}],[\"接下来我们将使用easy\",{\"1\":{\"221\":1,\"224\":1}}],[\"接下来我们继续查找哪些用户拥有\",{\"1\":{\"152\":1}}],[\"接下来我们在用户表示添加一个对象就是用户拥有的书本\",{\"1\":{\"152\":1}}],[\"接下来我们在用户表上添加一个对象关联关系\",{\"1\":{\"152\":1}}],[\"接下来我们给用户添加书籍\",{\"1\":{\"152\":1}}],[\"接下来我们再次来筛选用户叫做小明并且地址是绍兴的\",{\"1\":{\"152\":1}}],[\"格式化参数为语言数据库的格式化\",{\"1\":{\"294\":1}}],[\"格式化参数为语言java的格式化\",{\"1\":{\"294\":1}}],[\"格式化日期支持java格式化\",{\"1\":{\"290\":1}}],[\"四舍五入\",{\"1\":{\"294\":1}}],[\"绝对值\",{\"1\":{\"294\":1}}],[\"两个参数为表顺序\",{\"1\":{\"644\":1}}],[\"两个日期a\",{\"1\":{\"290\":1}}],[\"两者的区别就是相对的不支持emoji的策略性能会稍微高一点点\",{\"1\":{\"217\":1}}],[\"时间分表\",{\"0\":{\"796\":1}}],[\"时间格式格式化\",{\"1\":{\"294\":2}}],[\"时间函数\",{\"0\":{\"290\":1}}],[\"时间2022年以前的\",{\"1\":{\"140\":1}}],[\"比方说a\",{\"1\":{\"642\":1}}],[\"比较字符串大小\",{\"1\":{\"289\":1}}],[\"比如id\",{\"1\":{\"809\":1}}],[\"比如fetchsize\",{\"1\":{\"741\":1,\"743\":1}}],[\"比如string\",{\"1\":{\"729\":2}}],[\"比如满足的条件是优先满足eq\",{\"1\":{\"631\":1}}],[\"比如我要对topic进行查询聚合然后结果再去join基本配置表获取信息\",{\"1\":{\"604\":1}}],[\"比如我们现在有这么一个需求因为部分接口需要针对测试数据进行移除\",{\"1\":{\"266\":1}}],[\"比如private\",{\"1\":{\"554\":1}}],[\"比如您有一张证书表\",{\"1\":{\"554\":1,\"592\":1}}],[\"比如queryable\",{\"1\":{\"530\":1}}],[\"比如查询单表没有配置\",{\"1\":{\"530\":1}}],[\"比如自定义逻辑删除\",{\"1\":{\"486\":1}}],[\"比如tolist那么就是空集合\",{\"1\":{\"469\":1}}],[\"比如上述100个连接池分片设置为10个\",{\"1\":{\"469\":1}}],[\"比如大于等于1\",{\"1\":{\"468\":1}}],[\"比如大于等于3\",{\"1\":{\"468\":2}}],[\"比如delete\",{\"1\":{\"468\":1}}],[\"比如创建时间\",{\"1\":{\"429\":1}}],[\"比如连接池2个链接\",{\"1\":{\"407\":1}}],[\"比如入参为o那么对应的表就是o\",{\"1\":{\"397\":1}}],[\"比如\",{\"1\":{\"256\":1,\"554\":1}}],[\"比如通过自定义nextid\",{\"1\":{\"253\":1,\"580\":1}}],[\"比如数据库函数加密\",{\"1\":{\"228\":1,\"583\":1}}],[\"比如中文数字英文特殊符号等\",{\"1\":{\"217\":1}}],[\"比如你可以实现一个uuid的或者雪花id的\",{\"1\":{\"197\":1}}],[\"比如update\",{\"1\":{\"193\":1}}],[\"往右补值\",{\"1\":{\"289\":1}}],[\"往左补值\",{\"1\":{\"289\":1}}],[\"替换接口\",{\"0\":{\"685\":1}}],[\"替换whereobject实现\",{\"0\":{\"636\":1}}],[\"替换框架行为❗️❗️❗️\",{\"0\":{\"544\":1},\"1\":{\"637\":1,\"684\":1}}],[\"替换框架内部的属性和列转换模式改为大写转下划线\",{\"1\":{\"397\":1,\"471\":1}}],[\"替换系统默认lambda表达式解析\",{\"0\":{\"313\":1}}],[\"替换字符串\",{\"1\":{\"289\":1}}],[\"替换掉系统的默认监听行为\",{\"1\":{\"271\":1}}],[\"替换掉系统的监听器\",{\"1\":{\"271\":1}}],[\"去掉后面空格\",{\"1\":{\"289\":1}}],[\"去掉前面空格\",{\"1\":{\"289\":1}}],[\"去掉前后空格\",{\"1\":{\"289\":1}}],[\"切割字符串\",{\"1\":{\"289\":1}}],[\"统计数量返回int\",{\"1\":{\"288\":1}}],[\"统计数量返回long\",{\"1\":{\"288\":1}}],[\"包含\",{\"1\":{\"827\":1}}],[\"包含的两个参数第一个参数表示你要返回的导航属性\",{\"1\":{\"703\":1}}],[\"包依赖关系\",{\"0\":{\"502\":1},\"1\":{\"423\":1}}],[\"包括其他返回结果需要注意返回的对象不可以是final之类的\",{\"1\":{\"503\":1}}],[\"包括增删改查\",{\"1\":{\"469\":1}}],[\"包括提交前提交后等处理\",{\"1\":{\"410\":1}}],[\"包括数学函数等\",{\"1\":{\"287\":1}}],[\"包括常见的字符串函数和时间格式化函数\",{\"1\":{\"287\":1}}],[\"包名\",{\"1\":{\"9\":1,\"372\":1}}],[\"框架提供的分页器\",{\"0\":{\"688\":1}}],[\"框架提供了一个可选notnulloremptyvaluefilter\",{\"1\":{\"631\":1}}],[\"框架内部使用了大量的依赖注入\",{\"1\":{\"545\":1}}],[\"框架内部本身不想对该处理进行过多的封装尽可能保证需要多数据源的用户自行处理而不是提供默认的这边提供一个思路\",{\"1\":{\"522\":1}}],[\"框架对于firstnotnull和singlenotnull抛出了系统自定义级别的异常\",{\"1\":{\"510\":1}}],[\"框架会自动处理\",{\"1\":{\"469\":1}}],[\"框架默认针对notnull返回的错误类型可能并不是你所希望得我们可以通过重写接口实现自己的自定义异常\",{\"1\":{\"402\":1}}],[\"框架默认提供了部分数据库函数\",{\"1\":{\"287\":1,\"294\":1}}],[\"框架springboot\",{\"0\":{\"113\":1}}],[\"到这边位我们已经适配好了\",{\"1\":{\"505\":1}}],[\"到这里为止我们就完全实现了逻辑删除自定义并且支持更新多字段\",{\"1\":{\"285\":1}}],[\"到目前为止基本上大部分的业务需求已经可以实现了\",{\"1\":{\"262\":1}}],[\"简单理解为就是操作匿名表\",{\"1\":{\"731\":1}}],[\"简单分页\",{\"0\":{\"681\":1}}],[\"简单查询\",{\"0\":{\"615\":1}}],[\"简单计算属性\",{\"1\":{\"554\":1}}],[\"简单的查询编写顺序\",{\"1\":{\"335\":1}}],[\"简单\",{\"1\":{\"284\":1}}],[\"简介\",{\"0\":{\"27\":1,\"160\":1}}],[\"甚至\",{\"1\":{\"636\":1}}],[\"甚至只支持单字段的逻辑删除\",{\"1\":{\"282\":1}}],[\"甚至0\",{\"1\":{\"49\":1}}],[\"很多时候框架提供的easypageresult<t>提供了方便的同时让整个项目高度依赖easy\",{\"1\":{\"687\":1}}],[\"很多时候我们设置id自增那么需要在插入的时候回填对应的主键自增信息所以easy\",{\"1\":{\"362\":1}}],[\"很多时候我们可能会将监听到的超时sql进行mq的发送然后来存入到自己的数据库\",{\"1\":{\"272\":1}}],[\"很多用户可能对现有的很多系统拥有的逻辑删除都表示非常弱鸡\",{\"1\":{\"282\":1}}],[\"除了框架默认提供的框架也支持用户自定义逻辑删除\",{\"1\":{\"277\":1}}],[\"会使用\",{\"1\":{\"824\":1}}],[\"会让导致程序需要验证\",{\"1\":{\"809\":1}}],[\"会缺几秒导致没有加到内存中所以需要加5分钟\",{\"1\":{\"797\":1}}],[\"会把这个条件当成匿名表来处理\",{\"1\":{\"729\":1}}],[\"会在target包下的xgenerated\",{\"1\":{\"396\":1}}],[\"会和全局disablelogicdelete\",{\"1\":{\"275\":1}}],[\"会生成\",{\"1\":{\"39\":1,\"172\":3}}],[\"启用default表示默认的对象和数据库映射关系为属性名如属性名userage那么对应数据库也是userage列名\",{\"1\":{\"468\":1}}],[\"启用逻辑删除\",{\"1\":{\"275\":1}}],[\"启动后会创建ds1\",{\"1\":{\"781\":1,\"787\":1}}],[\"启动快\",{\"1\":{\"474\":1}}],[\"启动时进行替换\",{\"1\":{\"300\":1}}],[\"启动报错\",{\"0\":{\"12\":1,\"117\":1,\"492\":1}}],[\"保证插入到数据库不会出现循环监听\",{\"1\":{\"272\":1}}],[\"保证对象更新时的差异更新而不是全量更新\",{\"1\":{\"241\":1}}],[\"循环监听\",{\"0\":{\"272\":1}}],[\"批量修改和表达式修改数据的方法\",{\"1\":{\"412\":1}}],[\"批量插入需要jdbc链接字符串开启\",{\"1\":{\"360\":1}}],[\"批量提交批量插入批量操作批处理\",{\"1\":{\"207\":1}}],[\"批处理的时间一般是比较多的你可以选择\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"耗时3秒以上的sql需要记录\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"同上面的select\",{\"1\":{\"729\":1}}],[\"同理\",{\"1\":{\"644\":1,\"726\":1}}],[\"同时支持\",{\"1\":{\"474\":1}}],[\"同时也不需要来自apt生成的代理类的支持\",{\"1\":{\"454\":1}}],[\"同时具备两者的orm\",{\"1\":{\"18\":1}}],[\"同entityproxy但是生成的文件存在源码中\",{\"1\":{\"447\":1}}],[\"同一个表达式内from的表然后加join的表所以最近的一张表是join的表\",{\"1\":{\"281\":1}}],[\"同步的话会影响性能\",{\"1\":{\"271\":3,\"273\":3,\"274\":6}}],[\"受影响行数\",{\"1\":{\"270\":1}}],[\"执行\",{\"0\":{\"660\":1}}],[\"执行指定数据源的方法并且返回结果\",{\"1\":{\"522\":1}}],[\"执行线程数\",{\"1\":{\"407\":1}}],[\"执行时发生的异常\",{\"1\":{\"270\":1}}],[\"执行前的参数\",{\"1\":{\"270\":1}}],[\"执行前参数\",{\"1\":{\"269\":1}}],[\"执行后参数\",{\"1\":{\"270\":1}}],[\"执行当前方法的毫秒数\",{\"1\":{\"269\":1,\"270\":1}}],[\"执行的sql\",{\"1\":{\"269\":1}}],[\"执行顺序在insert的方法调用executerows后将先执行对象的primarykeygenerator\",{\"1\":{\"198\":1}}],[\"空表示使用目标对象的主键\",{\"1\":{\"704\":1}}],[\"空表示使用当前对象的主键\",{\"1\":{\"704\":1}}],[\"空\",{\"1\":{\"268\":2}}],[\"把原先拦截器里面的自动填充租户id移动到租户拦截器里面\",{\"1\":{\"265\":1}}],[\"租户模式实现\",{\"0\":{\"265\":1}}],[\"租户拦截器\",{\"1\":{\"260\":1}}],[\"租户id\",{\"1\":{\"256\":1}}],[\"模板很简单就是把我们需要替换的地方用占位符进行了占位\",{\"1\":{\"804\":1}}],[\"模拟当前用户租户对象\",{\"1\":{\"260\":1}}],[\"模式\",{\"0\":{\"209\":1},\"1\":{\"209\":1,\"216\":1,\"628\":1}}],[\"越小越先执行\",{\"1\":{\"257\":1}}],[\"名称不希望查询出额外信息\",{\"1\":{\"713\":1}}],[\"名称\",{\"1\":{\"256\":1,\"311\":1}}],[\"部分场景可能会对索引有相关影响\",{\"1\":{\"399\":2}}],[\"部分使用代理对象的地方需要使用entityproxy\",{\"1\":{\"101\":1}}],[\"部门只能看看和操作本部门\",{\"1\":{\"256\":1}}],[\"而不需要认为手动赋值\",{\"1\":{\"809\":1}}],[\"而不是实时的\",{\"1\":{\"809\":2}}],[\"而不是重复定义\",{\"1\":{\"714\":1}}],[\"而不是无脑的对对象进行全字段更新\",{\"1\":{\"417\":1}}],[\"而不是普通的对象属性列\",{\"1\":{\"253\":1,\"580\":1}}],[\"而是实现了数据库对应的方言实现数据库自身的功能\",{\"1\":{\"371\":1}}],[\"而proxy因为数据库对象是孤单对象没有具体的proxy绑定只有proxy能够感知到数据库对象所以两种在创建的时候会不一样\",{\"1\":{\"102\":1}}],[\"否则可能会导致程序假死\",{\"1\":{\"469\":1}}],[\"否则需要手动加astracking才能对查询出来的结果进行追踪\",{\"1\":{\"417\":1}}],[\"否则每个查询对象都会添加到当前追踪上下文中\",{\"1\":{\"252\":3}}],[\"否则就是用户的\",{\"1\":{\"140\":1}}],[\"警告容器\",{\"1\":{\"827\":1}}],[\"警告\",{\"1\":{\"252\":1,\"756\":1}}],[\"差异更新可以自动监听被追踪的对象\",{\"1\":{\"417\":1}}],[\"差异更新\",{\"0\":{\"417\":1},\"1\":{\"250\":1}}],[\"差异更新实体\",{\"1\":{\"95\":1}}],[\"孙\",{\"1\":{\"238\":2,\"566\":2}}],[\"悟空\",{\"1\":{\"238\":2,\"566\":2}}],[\"悟\",{\"1\":{\"237\":6,\"565\":6}}],[\"通常用于excel或者部分文件写入功能\",{\"1\":{\"740\":1}}],[\"通常我们会对用户的年龄使用一个字段来进行存储\",{\"1\":{\"236\":1,\"564\":1}}],[\"通用查询但是需要支持所有数据库\",{\"1\":{\"667\":1}}],[\"通用函数\",{\"0\":{\"288\":1}}],[\"通过\",{\"1\":{\"823\":1,\"826\":1}}],[\"通过继承默认抽象路由abstractmonthtableroute我们非常简单的实现了分片的规则\",{\"1\":{\"798\":1}}],[\"通过vo返回实现自定义列\",{\"1\":{\"713\":1}}],[\"通过表达式可以看到or内部的直接关系为条件1\",{\"1\":{\"672\":1}}],[\"通过修改\",{\"1\":{\"635\":1}}],[\"通过springboot上传json对象实现条件查询\",{\"1\":{\"627\":1}}],[\"通过serviceprovider来获取注册的bean实例\",{\"1\":{\"274\":1}}],[\"通过默认的bootstrapper的方法replaceservice来实现替换\",{\"1\":{\"548\":1}}],[\"通过反射拿到注解对象\",{\"1\":{\"525\":1}}],[\"通过easy\",{\"1\":{\"503\":1}}],[\"通过配置文件可以直接配置上述选项\",{\"1\":{\"470\":1}}],[\"通过对查询数据采用非追踪查询后续再修改数据前将其进行添加到追踪里面可以保证更新也是差异更新\",{\"1\":{\"417\":1}}],[\"通过属性\",{\"1\":{\"311\":1}}],[\"通过添加链式方法disablelogicdelete\",{\"1\":{\"280\":1}}],[\"通过构造函数注入\",{\"1\":{\"273\":1}}],[\"通过getstate来获取before的参数\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"通过字符串属性方式来实现查询\",{\"1\":{\"115\":1,\"157\":1,\"465\":1,\"490\":1}}],[\"作者设置为\",{\"1\":{\"848\":1}}],[\"作者有着多年的分库分表经验\",{\"1\":{\"775\":1}}],[\"作者对框架的api进行了大刀阔斧\",{\"1\":{\"18\":1}}],[\"作用\",{\"1\":{\"741\":1,\"743\":1}}],[\"作用于生成的sql是否会有别名\",{\"1\":{\"585\":1}}],[\"作用域\",{\"1\":{\"230\":1,\"585\":1}}],[\"作为局部变量来使用\",{\"1\":{\"397\":1}}],[\"作为插入函数\",{\"1\":{\"254\":1,\"581\":1}}],[\"秘钥\",{\"1\":{\"229\":2,\"230\":2,\"584\":2,\"585\":2}}],[\"手机号列\",{\"1\":{\"229\":1,\"230\":1,\"584\":1,\"585\":1}}],[\"手机号值\",{\"1\":{\"229\":1,\"584\":1}}],[\"手动模式\",{\"0\":{\"725\":1}}],[\"手动错误\",{\"1\":{\"532\":1}}],[\"手动指定查询那么将会查询出来\",{\"1\":{\"557\":1}}],[\"手动指定策略\",{\"1\":{\"422\":2}}],[\"手动指定更新\",{\"1\":{\"422\":2}}],[\"手动指定赋值\",{\"1\":{\"38\":1}}],[\"手动将查询出来的对象进行easyquery\",{\"1\":{\"417\":1}}],[\"手动事务\",{\"0\":{\"409\":1}}],[\"手动添加到当前上下文\",{\"1\":{\"242\":1}}],[\"手动实现proxyentityavailable接口或者使用插件实现\",{\"1\":{\"157\":1}}],[\"手动创建vo是很复杂的一件事情\",{\"1\":{\"139\":1}}],[\"手动处理是否需要添加到查询条件中\",{\"1\":{\"25\":1}}],[\"编辑此页链接\",{\"1\":{\"819\":1}}],[\"编译\",{\"0\":{\"516\":1}}],[\"编码\",{\"1\":{\"228\":1,\"583\":1}}],[\"编写业务调试\",{\"0\":{\"806\":1}}],[\"编写sysuserrepository\",{\"1\":{\"803\":1}}],[\"编写的所有扩展比如逻辑删除\",{\"1\":{\"190\":1}}],[\"编写的所有扩展如何添加到当前orm中\",{\"0\":{\"190\":1}}],[\"编写数据库对象\",{\"1\":{\"157\":1}}],[\"请使用绝对链接\",{\"1\":{\"849\":1}}],[\"请阅读\",{\"1\":{\"825\":1}}],[\"请先阅读\",{\"1\":{\"822\":1}}],[\"请求对象中有一个集合\",{\"1\":{\"621\":1}}],[\"请求租户id自动条件过滤\",{\"1\":{\"256\":1}}],[\"请在对应模块需要生成代理对象的类处都添加sql\",{\"1\":{\"395\":1,\"453\":1}}],[\"请确认是否已经开启trackmanager\",{\"1\":{\"252\":3}}],[\"请看\",{\"1\":{\"227\":1}}],[\"请注意不需要添加这一行因为selectautoinclude会自动执行allfields\",{\"1\":{\"111\":1}}],[\"列不包含值\",{\"1\":{\"771\":1}}],[\"列包含值\",{\"1\":{\"771\":1}}],[\"列右匹配\",{\"1\":{\"771\":1}}],[\"列左匹配\",{\"1\":{\"771\":1}}],[\"列\",{\"1\":{\"771\":12}}],[\"列选择器返回对象\",{\"1\":{\"729\":5}}],[\"列选择器\",{\"1\":{\"729\":2}}],[\"列类型\",{\"1\":{\"601\":5}}],[\"列如用户和证书属于一对多\",{\"1\":{\"556\":1}}],[\"列加密\",{\"1\":{\"436\":1}}],[\"列名需要对应\",{\"1\":{\"759\":1}}],[\"列名\",{\"1\":{\"227\":1}}],[\"列值原子更新\",{\"0\":{\"193\":1}}],[\"旧\",{\"0\":{\"224\":1}}],[\"假如我们要实现这么一个数据库语句\",{\"1\":{\"221\":1,\"224\":1}}],[\"假设连接池大小为100\",{\"1\":{\"469\":1}}],[\"假设单次查询涉及到跨13张表查询\",{\"1\":{\"469\":1}}],[\"假设你还引入了lombok\",{\"1\":{\"455\":1}}],[\"假设线程池为3并且不设置当前值\",{\"1\":{\"407\":1}}],[\"假设我们有这个一个日志请求bean通过\",{\"1\":{\"273\":1}}],[\"假设我们存在一张表是用户地址信息表\",{\"1\":{\"152\":1}}],[\"假设我定义了mysql的函数mysqlnextid自动生成主键id由mysql数据库函数来实现\",{\"1\":{\"254\":1,\"581\":1}}],[\"假设班级和学生没有直接关系\",{\"1\":{\"133\":1}}],[\"目标对象的targetproperty属性对应中间表的哪个属性\",{\"1\":{\"704\":1}}],[\"目标表就是fill返回的表的属性\",{\"1\":{\"641\":1}}],[\"目前有两种解决方案\",{\"1\":{\"627\":1}}],[\"目前有两个选择当然用户也可以自行实现接口nameconversion\",{\"1\":{\"468\":1}}],[\"目前可选default\",{\"1\":{\"468\":1}}],[\"目前easy\",{\"1\":{\"458\":1}}],[\"目前各项指标easy\",{\"1\":{\"383\":1}}],[\"目前不是很建议看这一章节\",{\"1\":{\"224\":1}}],[\"目前框架未提供相应的数据库函数\",{\"1\":{\"221\":1,\"224\":1}}],[\"目录\",{\"0\":{\"189\":1,\"776\":1,\"818\":1},\"1\":{\"333\":1,\"423\":1}}],[\"目录指引\",{\"0\":{\"100\":1,\"107\":1}}],[\"新的生态型应用开发框架\",{\"1\":{\"474\":1}}],[\"新建拦截器\",{\"1\":{\"809\":1}}],[\"新建用户和仓储\",{\"0\":{\"807\":1}}],[\"新建apt处理器\",{\"0\":{\"805\":1}}],[\"新建模板\",{\"0\":{\"804\":1}}],[\"新建两个模块\",{\"1\":{\"801\":1}}],[\"新建vo\",{\"1\":{\"557\":1}}],[\"新建项目\",{\"0\":{\"512\":1,\"801\":1}}],[\"新建datasource注入\",{\"0\":{\"479\":1}}],[\"新建java\",{\"0\":{\"477\":1}}],[\"新建java类\",{\"0\":{\"396\":1}}],[\"新建一个类来实现接口nameconversion\",{\"1\":{\"547\":1,\"548\":1}}],[\"新建一个日志打印的实现继承com\",{\"1\":{\"521\":1}}],[\"新建一个springboot项目\",{\"0\":{\"504\":1}}],[\"新建一个静态帮助类来模拟当前用户因为我们这次自定义需要实现两个甚至多个字段逻辑删除处理\",{\"1\":{\"284\":1}}],[\"新建一个java8以上的任意项目我们创建maven的空项目即可然后引入对应的包\",{\"1\":{\"43\":1,\"162\":1}}],[\"新增控制器\",{\"0\":{\"480\":1}}],[\"新增或者更新\",{\"0\":{\"371\":1}}],[\"新增演示\",{\"1\":{\"333\":1}}],[\"新增\",{\"0\":{\"314\":1,\"358\":1,\"782\":1,\"788\":1,\"793\":1},\"1\":{\"333\":1}}],[\"新增测试数据\",{\"0\":{\"249\":1}}],[\"新增数据插入到对应数据库的对应表\",{\"1\":{\"782\":1}}],[\"新增数据库对象\",{\"0\":{\"515\":1}}],[\"新增数据\",{\"0\":{\"232\":1,\"587\":1}}],[\"新\",{\"0\":{\"221\":1,\"287\":1},\"1\":{\"224\":1,\"450\":2}}],[\"绍\",{\"1\":{\"220\":1}}],[\"绍兴\",{\"1\":{\"152\":2,\"220\":1}}],[\"绍兴市\",{\"1\":{\"130\":1,\"144\":2}}],[\"浙江省绍兴市越城区城市广场\",{\"1\":{\"249\":1,\"323\":2,\"324\":1,\"327\":2,\"328\":2}}],[\"浙江省绍兴市越城区城市广场旁边2\",{\"1\":{\"214\":1,\"220\":1}}],[\"浙江省绍兴市\",{\"1\":{\"220\":1}}],[\"测试添加控制器\",{\"0\":{\"509\":1}}],[\"测试列表\",{\"0\":{\"386\":1,\"387\":1}}],[\"测试结论\",{\"1\":{\"385\":1,\"386\":1,\"387\":1,\"388\":1,\"389\":1}}],[\"测试单条数据查询\",{\"0\":{\"385\":1}}],[\"测试的结果会有所不同\",{\"1\":{\"384\":1}}],[\"测试说明\",{\"1\":{\"384\":1}}],[\"测试源码\",{\"1\":{\"384\":1}}],[\"测试方法\",{\"0\":{\"384\":1}}],[\"测试数据\",{\"0\":{\"323\":1,\"400\":1}}],[\"测试当前人员\",{\"1\":{\"285\":1}}],[\"测试代码\",{\"0\":{\"691\":1},\"1\":{\"260\":1}}],[\"测试\",{\"0\":{\"220\":1,\"285\":1},\"1\":{\"262\":1,\"265\":1}}],[\"遇到错误是否抛出\",{\"1\":{\"219\":1}}],[\"字典表\",{\"1\":{\"506\":1}}],[\"字符串属性\",{\"1\":{\"458\":1}}],[\"字符串长度\",{\"1\":{\"289\":1}}],[\"字符串多列join组合返回常用语group+逗号组合\",{\"1\":{\"289\":1}}],[\"字符串函数\",{\"0\":{\"289\":1}}],[\"字节加密后长度\",{\"1\":{\"216\":1}}],[\"字节加密后数据长度\",{\"1\":{\"216\":1}}],[\"字段加密等企业级功能\",{\"1\":{\"96\":1}}],[\"算法\",{\"1\":{\"216\":1}}],[\"阿里巴巴密文字段检索方案\",{\"1\":{\"215\":1}}],[\"阿里镜像找不到依赖\",{\"0\":{\"15\":1}}],[\"解决痛点一\",{\"0\":{\"528\":1}}],[\"解决办法添加对应的依赖\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"解放生产力🔥🔥🔥\",{\"0\":{\"527\":1}}],[\"解析表达式性能会稍稍低于属性模式和代理模式\",{\"1\":{\"450\":1}}],[\"解码等数据库函数对\",{\"1\":{\"228\":1,\"583\":1}}],[\"解密\",{\"1\":{\"228\":1,\"583\":1}}],[\"解密值\",{\"1\":{\"211\":1}}],[\"值转换\",{\"1\":{\"486\":1}}],[\"值转换器\",{\"1\":{\"426\":1}}],[\"值类型对象\",{\"0\":{\"311\":1}}],[\"值\",{\"1\":{\"211\":2,\"771\":6}}],[\"值对象\",{\"1\":{\"100\":1,\"107\":1}}],[\"属性一对多查询\",{\"0\":{\"634\":1}}],[\"属性一对一查询\",{\"0\":{\"632\":1}}],[\"属性默认是支持like\",{\"1\":{\"632\":1}}],[\"属性名\",{\"1\":{\"426\":1}}],[\"属性名用来动态创建lambda\",{\"1\":{\"262\":2}}],[\"属性来访问和使用\",{\"1\":{\"311\":1}}],[\"属性\",{\"1\":{\"211\":2,\"212\":1,\"425\":1,\"426\":1,\"430\":1,\"431\":1,\"450\":1,\"632\":1,\"704\":1}}],[\"属性模式已经原生支持\",{\"1\":{\"311\":1}}],[\"属性模式\",{\"0\":{\"120\":1,\"496\":1},\"1\":{\"315\":1,\"450\":1}}],[\"回滚事务\",{\"1\":{\"209\":1,\"410\":1}}],[\"采用草稿类型\",{\"1\":{\"737\":1}}],[\"采用pgsql语法来实现\",{\"1\":{\"669\":1}}],[\"采用复杂类型支持对象json和array集合\",{\"1\":{\"309\":1,\"579\":1}}],[\"采用变量是因为可能出现join附带别名所以需要变量\",{\"1\":{\"231\":1,\"586\":1}}],[\"采用k\",{\"1\":{\"209\":2}}],[\"采用控制台输出打印sql\",{\"1\":{\"34\":1,\"167\":1}}],[\"缓存最佳实践\",{\"0\":{\"208\":1}}],[\"转换器\",{\"1\":{\"308\":1,\"574\":1}}],[\"转成匿名表sql\",{\"1\":{\"341\":1,\"342\":1}}],[\"转成大写\",{\"1\":{\"289\":1}}],[\"转成小写\",{\"1\":{\"289\":1}}],[\"转载请附上原文出处链接及本声明\",{\"1\":{\"206\":1}}],[\"转过来的开发\",{\"1\":{\"99\":1,\"106\":1}}],[\"遵循cc\",{\"1\":{\"206\":1}}],[\"版本升级\",{\"0\":{\"538\":1}}],[\"版本升级指南\",{\"0\":{\"49\":1}}],[\"版权声明\",{\"1\":{\"206\":1}}],[\"给出了\",{\"1\":{\"206\":1}}],[\"大数据流式查询返回❗️❗️❗️\",{\"0\":{\"740\":1}}],[\"大数据流式查询防止oom\",{\"1\":{\"100\":1,\"107\":1}}],[\"大佬提供十分感谢\",{\"1\":{\"697\":1}}],[\"大括号方式执行顺序就是代码顺序\",{\"1\":{\"649\":2}}],[\"大括号一对\",{\"1\":{\"529\":1}}],[\"大字段依旧查询\",{\"1\":{\"483\":1}}],[\"大字段字段不需要update时更新\",{\"1\":{\"429\":1,\"430\":1}}],[\"大部分情况下终结方法就是这两个\",{\"1\":{\"403\":1}}],[\"大概是\",{\"1\":{\"385\":1,\"388\":1,\"389\":1}}],[\"大于\",{\"1\":{\"771\":1}}],[\"大于等于0表示临期的小于0表示过期的\",{\"1\":{\"592\":1}}],[\"大于等于\",{\"1\":{\"533\":1,\"771\":1}}],[\"大于0表示被删除\",{\"1\":{\"279\":1}}],[\"大于或等于零的数字\",{\"1\":{\"206\":1}}],[\"数组各值可能是以下之一\",{\"1\":{\"206\":1}}],[\"数据更新速度easy\",{\"1\":{\"389\":1}}],[\"数据更新\",{\"0\":{\"389\":1}}],[\"数据内容和数据量\",{\"1\":{\"384\":1}}],[\"数据追踪\",{\"0\":{\"241\":1}}],[\"数据加密秘钥\",{\"1\":{\"231\":1,\"586\":1}}],[\"数据的无价\",{\"1\":{\"189\":1}}],[\"数据权限\",{\"1\":{\"100\":1,\"107\":1}}],[\"数据填充\",{\"1\":{\"100\":1,\"107\":1}}],[\"数据编码存储解码获取\",{\"1\":{\"100\":1,\"107\":1}}],[\"数据脱敏\",{\"1\":{\"100\":1,\"107\":1}}],[\"数据查询\",{\"0\":{\"386\":1,\"387\":1},\"1\":{\"97\":1}}],[\"数据删除\",{\"1\":{\"97\":1}}],[\"数据修改\",{\"1\":{\"97\":1}}],[\"数据新增\",{\"1\":{\"97\":1}}],[\"数据源是你要的即可\",{\"1\":{\"493\":1}}],[\"数据源\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"163\":1}}],[\"数据库格式化只是简单的把参数拼接到sql中这样就可以直接运行\",{\"1\":{\"540\":1}}],[\"数据库脚本\",{\"0\":{\"506\":1}}],[\"数据库schema\",{\"1\":{\"425\":1}}],[\"数据库表进行分表处理\",{\"1\":{\"776\":1}}],[\"数据库表名为空表示\",{\"1\":{\"425\":1}}],[\"数据库表对象\",{\"0\":{\"32\":1,\"45\":1,\"164\":1}}],[\"数据库\",{\"1\":{\"384\":1}}],[\"数据库建表脚本\",{\"1\":{\"354\":1,\"358\":1,\"412\":1,\"756\":1}}],[\"数据库搅拌\",{\"1\":{\"311\":1}}],[\"数据库插入对象\",{\"1\":{\"306\":1,\"572\":1}}],[\"数据库枚举\",{\"1\":{\"306\":1,\"572\":1}}],[\"数据库对应的java类型\",{\"1\":{\"302\":1,\"559\":1,\"568\":1,\"576\":1}}],[\"数据库对象分库处理\",{\"1\":{\"776\":1}}],[\"数据库对象模型\",{\"0\":{\"723\":1,\"763\":1}}],[\"数据库对象模型关联查询\",{\"1\":{\"100\":1,\"107\":1}}],[\"数据库对象属性integer值\",{\"0\":{\"307\":1,\"573\":1}}],[\"数据库对象属性枚举值\",{\"0\":{\"306\":1,\"572\":1}}],[\"数据库对象属性本身就是枚举或者对象的\",{\"1\":{\"301\":1,\"558\":1,\"567\":1,\"575\":1}}],[\"数据库对象很多时候我们可能希望将枚举值设计为java枚举对象而不是integer\",{\"1\":{\"305\":1,\"571\":1}}],[\"数据库对象\",{\"0\":{\"21\":1},\"1\":{\"254\":1,\"581\":1}}],[\"数据库函数\",{\"0\":{\"287\":1,\"294\":1}}],[\"数据库函数生成列\",{\"0\":{\"253\":1}}],[\"数据库函数列\",{\"0\":{\"228\":1}}],[\"数据库中受命令影响的行数执行\",{\"1\":{\"206\":1}}],[\"数据库列加密解密脱敏\",{\"1\":{\"240\":1,\"591\":1}}],[\"数据库列加密\",{\"0\":{\"210\":1},\"1\":{\"100\":1,\"107\":1,\"229\":1,\"584\":1}}],[\"数据库列的加密和加密后的模糊查询企业级解决方案\",{\"1\":{\"100\":1,\"107\":1}}],[\"数据库名称\",{\"1\":{\"9\":1,\"372\":1}}],[\"数据库支持\",{\"0\":{\"8\":1}}],[\"代码演示\",{\"0\":{\"842\":1}}],[\"代码块\",{\"0\":{\"828\":1}}],[\"代码\",{\"1\":{\"827\":1}}],[\"代码注意点\",{\"0\":{\"205\":1}}],[\"代理属性\",{\"1\":{\"458\":1}}],[\"代理\",{\"1\":{\"450\":1}}],[\"代理api\",{\"1\":{\"395\":1}}],[\"代理模式下where的第一个参数是filter过滤器\",{\"1\":{\"771\":1}}],[\"代理模式下select的第一个参数是selector选择器\",{\"1\":{\"729\":1}}],[\"代理模式\",{\"0\":{\"497\":1},\"1\":{\"121\":1,\"450\":1,\"497\":1}}],[\"例如\",{\"0\":{\"204\":1}}],[\"例子\",{\"0\":{\"196\":1,\"278\":1}}],[\"其余信息不需要定义\",{\"1\":{\"713\":3}}],[\"其余几个api任然是sqlnativesegment\",{\"1\":{\"666\":1}}],[\"其实不需要添加下面的包也可以运行\",{\"1\":{\"453\":1,\"460\":1,\"466\":1}}],[\"其他api下多次调用行为也是追加\",{\"1\":{\"342\":1,\"344\":1}}],[\"其他数据库自行查询相关的说明也可能不需要\",{\"1\":{\"203\":1}}],[\"其中repo\",{\"1\":{\"801\":1}}],[\"其中apt处理的模块需要单独一个module因为编译会有依赖关系所以这边是这么建议的\",{\"1\":{\"801\":1}}],[\"其中第一个参数boolean\",{\"1\":{\"772\":1}}],[\"其中mappingclass表示中间表\",{\"1\":{\"705\":1}}],[\"其中map的key表示数据库对应的列名\",{\"1\":{\"370\":1,\"420\":1}}],[\"其中如果您的导航属性是toone那么请使用include如果是tomany那么是includes\",{\"1\":{\"703\":1}}],[\"其中expression\",{\"1\":{\"663\":1}}],[\"其中easyentityquery是最新开发的api\",{\"1\":{\"27\":1,\"160\":1}}],[\"其中\",{\"1\":{\"662\":1,\"809\":1}}],[\"其中对应的参数是一个lambda表达式入参为现有表名\",{\"1\":{\"625\":1}}],[\"其中对一包括多对一\",{\"1\":{\"127\":1}}],[\"其中框架默认提供多种实现\",{\"1\":{\"614\":1}}],[\"其中processors是runtime\",{\"1\":{\"469\":1}}],[\"其中proxy已适配完成\",{\"1\":{\"311\":1}}],[\"其中proxyentityavailable<sysuser\",{\"1\":{\"21\":1}}],[\"其中代理模式的使用上面更加符合人性化\",{\"1\":{\"391\":1}}],[\"其中fetcher是select的简化操作不支持返回vo\",{\"1\":{\"340\":1}}],[\"其中6和7可以互相调换\",{\"1\":{\"335\":1}}],[\"其中configuration通过以下代码来获取\",{\"1\":{\"284\":1}}],[\"其中content1和createtime1为blogentityvo1的属性字段\",{\"1\":{\"185\":1}}],[\"其中strategy表示为逻辑删除字段的枚举\",{\"1\":{\"277\":1}}],[\"其中用户和用户所在地址为一对一关系\",{\"1\":{\"142\":1}}],[\"其中因为书本分为学生版和老师版本所以在书本里面和当前用户关联的书籍只有type=1的才是\",{\"1\":{\"140\":1}}],[\"其中一个班级有多个学生\",{\"1\":{\"128\":1}}],[\"其中key1\",{\"1\":{\"39\":1,\"172\":3}}],[\"初始化实际表\",{\"1\":{\"797\":1}}],[\"初始化完成\",{\"1\":{\"781\":1,\"787\":1}}],[\"初始化判断是否是和其他数据表有交互\",{\"1\":{\"585\":1}}],[\"初始化判断是否是数据库存在的列\",{\"1\":{\"585\":1}}],[\"初始化属性模式\",{\"1\":{\"397\":1}}],[\"初始化连接池\",{\"1\":{\"397\":1}}],[\"初始化代码\",{\"0\":{\"397\":1}}],[\"初始化\",{\"1\":{\"201\":1}}],[\"雪花id\",{\"0\":{\"201\":1},\"1\":{\"809\":1}}],[\"如何设计api完全可以看用户自行实现\",{\"1\":{\"662\":1}}],[\"如何填充\",{\"1\":{\"641\":1}}],[\"如何替换框架行为\",{\"0\":{\"637\":1}}],[\"如何自定义配置日志接口信息\",{\"1\":{\"423\":1}}],[\"如何配置使用kotlin\",{\"1\":{\"423\":1}}],[\"如何配置java\",{\"1\":{\"423\":1}}],[\"如何开启\",{\"0\":{\"411\":1}}],[\"如何开启数据追踪\",{\"1\":{\"242\":1}}],[\"如何添加\",{\"0\":{\"300\":1}}],[\"如何实现一个uuid的主键生成器\",{\"1\":{\"200\":1}}],[\"如何使用\",{\"0\":{\"199\":1}}],[\"如果判断动态条件过于复杂可以通过大括号来实现内部的编程而不是链式\",{\"1\":{\"809\":1}}],[\"如果提取出来那么就确定了\",{\"1\":{\"809\":2}}],[\"如果提前select相当于是进行了一次匿名表\",{\"1\":{\"334\":1}}],[\"如果本次采用tostreamresult那么将不会支持include和fillmany和fillone的api\",{\"1\":{\"740\":1}}],[\"如果本次查询结果数据条数大于1条那么将会抛错easyquerysinglemoreelementexception\",{\"1\":{\"399\":2}}],[\"如果返回结果属性类型不包容原属性类型\",{\"1\":{\"729\":2}}],[\"如果返回结果一样可以用fetcher\",{\"1\":{\"335\":2}}],[\"如果表达式调用了select那么这个sql就是确定了的如果再次调用where那么前面的表达式将被视为别名表\",{\"1\":{\"728\":1}}],[\"如果表tableindex不在当前上下文中也报错\",{\"1\":{\"632\":1}}],[\"如果映射属性是集合\",{\"1\":{\"713\":1}}],[\"如果映射属性是对象\",{\"1\":{\"713\":1}}],[\"如果映射属性对应的column\",{\"1\":{\"185\":1}}],[\"如果要查询学生里面没有小明的就用`none`方法\",{\"1\":{\"694\":1,\"696\":1}}],[\"如果要使用此功能建议升级到1\",{\"1\":{\"371\":1}}],[\"如果sqlnativesegment中存在单引号\",{\"1\":{\"670\":1}}],[\"如果sqlnativesegment内部存在参数\",{\"1\":{\"669\":1}}],[\"如果solon在app处onevent无法获取bean那么可以通过延迟获取的方式\",{\"1\":{\"274\":1}}],[\"如果第一个原生sql片段存在变量比如表列或者参数值\",{\"1\":{\"668\":1}}],[\"如果第三个参数为null那么和topageresult行为一致\",{\"1\":{\"601\":1}}],[\"如果where参数过多不想写可以用wheremerge\",{\"1\":{\"649\":1}}],[\"如果允许表示空也会加入到表达式内而不是忽略\",{\"1\":{\"632\":1}}],[\"如果属性没有映射到对象上报错\",{\"1\":{\"632\":1}}],[\"如果属性updatesetintrackdiff\",{\"1\":{\"429\":1}}],[\"如果有多个where部分where需要自定义那么可以采用filterconfigure\",{\"1\":{\"631\":1}}],[\"如果有多主键那么也是一样的用法\",{\"1\":{\"199\":1}}],[\"如果采用\",{\"1\":{\"622\":1}}],[\"如果采用加密对进行处理那么默认是不支持like函数的\",{\"1\":{\"235\":1,\"590\":1}}],[\"如果严格模式\",{\"1\":{\"619\":1}}],[\"如果调用一次后\",{\"1\":{\"619\":1}}],[\"如果一定要提取出来请参考下面的方法\",{\"1\":{\"809\":1}}],[\"如果一个orm没有匿名对象那么在返回自定义列的时候就需要新建一个vo来接受\",{\"1\":{\"603\":1}}],[\"如果一张表存在id和name那么当name为null列时生成的sql将不会指定name列比如insert\",{\"1\":{\"468\":1}}],[\"如果最近的表是匿名表则设置表别名alias\",{\"1\":{\"601\":2}}],[\"如果没命中就返回null\",{\"1\":{\"601\":1}}],[\"如果没有符合条件的结果将返回默认分页对象而不是null\",{\"1\":{\"399\":1}}],[\"如果没有符合条件的结果将返回空的arraylist而不是null\",{\"1\":{\"399\":1}}],[\"如果没有结果则返回空集合\",{\"1\":{\"601\":1}}],[\"如果没有结果将会抛错easyquerysingleornotnullexception\",{\"1\":{\"399\":1}}],[\"如果没有结果将会抛错easyqueryfirstornotnullexception\",{\"1\":{\"399\":1}}],[\"如果没有结果返回null\",{\"1\":{\"399\":2}}],[\"如果没有生成proxy请先确定是否引入sql\",{\"1\":{\"13\":1}}],[\"如果参数不匹配则会按照每个对象的对象名称获取大写字母组成缩写\",{\"1\":{\"530\":1}}],[\"如果配置了\",{\"1\":{\"530\":1}}],[\"如果配置为true\",{\"1\":{\"115\":1,\"157\":1,\"468\":1,\"490\":1}}],[\"如果每组数量和lambda数量一致则使用这边的参数\",{\"1\":{\"530\":1}}],[\"如果无法提示有对应的topicproxy那么请刷新下maven\",{\"1\":{\"517\":1}}],[\"如果无法看到具体版本可以去github或者gitee源码右侧有对应的release版本\",{\"1\":{\"161\":1}}],[\"如果实现了proxyentityavailable\",{\"1\":{\"517\":1}}],[\"如果集成后不行请注意是否开启全局翻译\",{\"1\":{\"503\":1}}],[\"如果超过这个时间还是无法获取前两个还未查询完成\",{\"1\":{\"469\":1}}],[\"如果超出将会分为两个语句执行\",{\"1\":{\"468\":1}}],[\"如果连接池100当前值设置为10\",{\"1\":{\"469\":1}}],[\"如果name列不是null\",{\"1\":{\"468\":1}}],[\"如果改为false\",{\"1\":{\"465\":1,\"470\":1}}],[\"如果执行物理删除delete语句将会报错\",{\"1\":{\"465\":1,\"470\":1}}],[\"如果true那么就会在入参参数中对其进行分段加密\",{\"1\":{\"438\":1}}],[\"如果整个查询采用\",{\"1\":{\"417\":1}}],[\"如果附加实体的时候发现当前上下文已经有被追踪的实体\",{\"1\":{\"417\":1}}],[\"如果查询属性与数据库对象属性不一致可以通过propname改写\",{\"1\":{\"632\":1}}],[\"如果查询数据量有几万或者几十万那么性能肯定会有影响\",{\"1\":{\"417\":1}}],[\"如果查询列名和vo结果一致那么可以不需要手动指定\",{\"1\":{\"40\":1}}],[\"如果希望默认是追踪的可以设置启动配置defaulttrack为true那么只需要开始上下文环境即可\",{\"1\":{\"417\":1}}],[\"如果事务未提交则自动调用回滚\",{\"1\":{\"410\":1}}],[\"如果程序不涉及同datasource分配聚合那么那么就不需要设置该值\",{\"1\":{\"407\":1}}],[\"如果为true那么只需要开启当前上下文追踪\",{\"1\":{\"468\":1}}],[\"如果为0那么采用无界线程池executors\",{\"1\":{\"407\":1}}],[\"如果为空就赋值123\",{\"1\":{\"39\":1,\"172\":1}}],[\"如果自定义必须大于maxshardingquerylimit\",{\"1\":{\"407\":1}}],[\"如果传入null则表示存在就忽略\",{\"1\":{\"373\":1}}],[\"如果设置为false则需要手动指定对应列\",{\"1\":{\"350\":1}}],[\"如果updatable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率\",{\"1\":{\"348\":1}}],[\"如果updatable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率\",{\"1\":{\"204\":1,\"468\":1}}],[\"如果在写where就对前面的表进行括号进行匿名表处理以此类推\",{\"1\":{\"335\":1}}],[\"如果先order后select那么会先排序后生成匿名表但是因为匿名表后续没有操作所以会展开\",{\"1\":{\"335\":1}}],[\"如果先select后order那么将会对匿名表进行排序\",{\"1\":{\"335\":1}}],[\"如果禁用逻辑删\",{\"1\":{\"326\":1}}],[\"如果列为null则返回默认值\",{\"1\":{\"294\":1}}],[\"如果列为null则返回参数值\",{\"1\":{\"288\":1}}],[\"如果a小于b则返回负数\",{\"1\":{\"290\":1}}],[\"如果全局设置禁用那么不会去判断是否启用\",{\"1\":{\"275\":1}}],[\"如果当前最近的表是匿名表比如嵌套queryable的表那么将alias改成对应的表名\",{\"1\":{\"625\":2}}],[\"如果当前最近的表是正常的数据库表名\",{\"1\":{\"625\":2}}],[\"如果当前是真实咧那么在当前表达式里面可以使用当前属性否则不可以\",{\"1\":{\"585\":1}}],[\"如果当前是查询那么这个值永远为0\",{\"1\":{\"270\":1}}],[\"如果当前没有指定数据源则返回默认数据源\",{\"1\":{\"522\":1}}],[\"如果当前字段标记update\",{\"1\":{\"429\":1}}],[\"如果当前数据表为自增id那么会回填对应的数据到id主键里面使用executerows\",{\"1\":{\"359\":1}}],[\"如果当前对象不是数据库对象\",{\"1\":{\"247\":1}}],[\"如果单独创建那么可以单独对其进行选择性启用或者禁用\",{\"1\":{\"261\":1}}],[\"如果数据量过多建议采用非tracking查询\",{\"1\":{\"252\":3}}],[\"如果数据未被差异更新\",{\"1\":{\"252\":3}}],[\"如果开启了追踪并且对象属性没有进行修改那么本次更新将不会生成sql执行数据库\",{\"1\":{\"251\":1}}],[\"如果对象已被追踪且追踪对象并不是同一个对象也将抛错\",{\"1\":{\"247\":1}}],[\"如果存在一样的key或者唯一约束那么insert就变成update\",{\"1\":{\"366\":1}}],[\"如果存在复杂对象通过valueconverter转换的需要实现重写hashcode和equals\",{\"1\":{\"241\":1}}],[\"如果存在如下情况无法获取到topicproxy对象那么就将目录标记为生成目录\",{\"1\":{\"165\":1}}],[\"如果这边也是用变量就会导致join下不是别名而是带具体表的列比如\",{\"1\":{\"231\":1,\"586\":1}}],[\"如果驱动程序继续处理\",{\"1\":{\"206\":1}}],[\"如果批量更新中的命令之一无法正确执行\",{\"1\":{\"206\":1}}],[\"如果idea无法智能提示那么就刷新一下maven\",{\"1\":{\"396\":1}}],[\"如果idea报错slow\",{\"1\":{\"14\":1}}],[\"如果insertable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率\",{\"1\":{\"348\":1}}],[\"如果insertable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率\",{\"1\":{\"204\":1,\"468\":1}}],[\"如果需要额外字段返回可以使用columninclude\",{\"1\":{\"697\":1}}],[\"如果需要动态设置可以通过springel来实现\",{\"1\":{\"525\":1}}],[\"如果需要区分数据源可以通过e\",{\"1\":{\"487\":1}}],[\"如果需要影响到所有数据源看下面的影响到所有数据源\",{\"1\":{\"486\":1}}],[\"如果需要设置或者自定义请设置为最小maxshardingquerylimit\",{\"1\":{\"469\":1}}],[\"如果需要设定多约束值\",{\"1\":{\"369\":1}}],[\"如果需要不查询建议在设置为large的前提下将对应列设置为\",{\"1\":{\"468\":1}}],[\"如果需要可以用表达式忽略\",{\"1\":{\"429\":1}}],[\"如果需要更新的列一个都没有\",{\"1\":{\"417\":1}}],[\"如果需要聚合的情况下并且存在外部orm或者getconnection那么可能导致无法正确反应超时可以适当将该值降低\",{\"1\":{\"407\":1}}],[\"如果需要会对当前表达式的主表进行select\",{\"1\":{\"334\":1}}],[\"如果需要唯一索引请自行选择数据库是否支持null的唯一索引\",{\"1\":{\"284\":1}}],[\"如果需要支持可以通过自行实现easypageresultprovider或者pager<tentity\",{\"1\":{\"503\":1}}],[\"如果需要支持差异更新需要实现重写hashcode和equalsenum除外\",{\"1\":{\"301\":1,\"558\":1,\"567\":1,\"575\":1}}],[\"如果需要支持解密可以采用上一篇文章的加密方式\",{\"1\":{\"235\":1,\"590\":1}}],[\"如果需要支持多个数据库字段\",{\"1\":{\"227\":1}}],[\"如果需要搜索默认需要至少4个非中文字符或者2个中文字符如下\",{\"1\":{\"216\":1}}],[\"如果需要手动调用或者手动限制不调用可以通过调用batch方法\",{\"1\":{\"203\":1}}],[\"如果需要判断之前是否有值\",{\"1\":{\"200\":1,\"201\":1}}],[\"如果新值比旧值大update\",{\"1\":{\"195\":2}}],[\"如果旧值比新值大生成update\",{\"1\":{\"195\":2}}],[\"如果出现多表属性映射\",{\"1\":{\"731\":1}}],[\"如果出现错误类文件具有错误的版本\",{\"1\":{\"518\":1}}],[\"如果出现无法build或者启动那么请确认是否引入了sql\",{\"1\":{\"167\":1}}],[\"如果出现no\",{\"1\":{\"166\":1}}],[\"如果不写自动抛出\",{\"1\":{\"813\":1}}],[\"如果不进行忽略两个id都查询\",{\"1\":{\"735\":1}}],[\"如果不填写默认columnall\",{\"1\":{\"713\":2}}],[\"如果不存在变量则可以使用单引号\",{\"1\":{\"670\":1}}],[\"如果不存在就更新\",{\"1\":{\"371\":1}}],[\"如果不想用链式的then来切换也可以通过lambda\",{\"1\":{\"649\":2}}],[\"如果不想使用`topictypetitle2complextype`额外定义一个类可以在json对象上直接定义\",{\"1\":{\"310\":1,\"562\":1}}],[\"如果不想使用aop可以禁用默认加载aop追踪\",{\"1\":{\"12\":1}}],[\"如果不需要只需要返回结果那么可以直接使用vo\",{\"1\":{\"731\":1}}],[\"如果不需要代码生成工具那么可以进群和联系群主会编译去除该插件的版本\",{\"1\":{\"535\":1}}],[\"如果不需要追踪可以使用asnotracking\",{\"1\":{\"417\":1}}],[\"如果不查询建议设置为updateignore防止update\",{\"1\":{\"483\":1}}],[\"如果不希望报错可以通过ignoreversion来忽略\",{\"1\":{\"468\":1}}],[\"如果不引用也可以使用只是无法使用lambda表达式来表示属性只能用字符串\",{\"1\":{\"460\":1,\"466\":1}}],[\"如果不添加那么不会追踪数据\",{\"1\":{\"417\":1}}],[\"如果不添加generatedsqlcolumngenerator那么将会视为自增列一样\",{\"1\":{\"254\":1,\"581\":1}}],[\"如果不支持可以选择小于1900年或者一个固定年份来作为被删除\",{\"1\":{\"284\":1}}],[\"如果不知道如何使用可以查看\",{\"1\":{\"256\":1}}],[\"如果不清楚具体样例可以参考如下源码\",{\"1\":{\"158\":1}}],[\"如果生成后无法引用则标记annotations目录为generated\",{\"1\":{\"157\":1}}],[\"如果easyqueryimplement没有效果请检查类是否添加了\",{\"1\":{\"155\":1}}],[\"如果我们需要传递外部bean到框架内部可以直接注册\",{\"1\":{\"271\":1}}],[\"如果我们需要查询用户至少有两本金庸小说的书籍\",{\"1\":{\"152\":1}}],[\"如果我们存储firstname和lastname那么用户的name字段也可以通过这种方式来实现计算\",{\"1\":{\"236\":1,\"564\":1}}],[\"如果我们对子表的条件有且仅有一个的时候我们还可以简化any的写法\",{\"1\":{\"152\":1}}],[\"如果我们要查找哪些用户拥有\",{\"1\":{\"152\":1}}],[\"如果我们结构化dto需要多一个额外字段由其他表来的那么我们该怎么办呢\",{\"1\":{\"111\":1}}],[\"如果只有一个条件name可以这么写\",{\"1\":{\"149\":1}}],[\"如果\",{\"1\":{\"127\":1}}],[\"如果穿透获取的是非基本类型那么对象只能是数据库对象而不是dto对象\",{\"1\":{\"112\":1}}],[\"如果字段一样可以这么写直接映射\",{\"1\":{\"110\":1}}],[\"如果还是报错只需要刷新下maven即可\",{\"1\":{\"33\":1}}],[\"如果您需要差异更新并且没有配置默认启动追踪查询那么需要独立进行astracking\",{\"1\":{\"703\":1}}],[\"如果您需要把学生所在的班级信息也带出来\",{\"1\":{\"694\":1,\"696\":1}}],[\"如果您闲这个太麻烦可以使用o\",{\"1\":{\"663\":1}}],[\"如果您只需要返回基本类型那么不需要额外定义复杂的对象\",{\"1\":{\"609\":1}}],[\"如果您不是easyentityquery那么写法就是where\",{\"1\":{\"533\":1}}],[\"如果您不想使用复杂恶心的xml来编写sql\",{\"1\":{\"99\":1,\"106\":1}}],[\"如果您不想依赖插件或者您不是idea开发java那么可以采用\",{\"1\":{\"33\":1}}],[\"如果您没有配置\",{\"1\":{\"529\":1}}],[\"如果您没有设置log那么一样看不到对应的执行sql\",{\"1\":{\"468\":1}}],[\"如果您使用entityquery查询并且采用\",{\"1\":{\"453\":1}}],[\"如果您对枚举转成数据库对象或者json转成数据库对象的自定义列处理可以通过值对象转换来实现\",{\"1\":{\"423\":1}}],[\"如果您的项目是多模块\",{\"1\":{\"395\":1,\"453\":1}}],[\"如果您的项目是多模块那么只需要在需要使用\",{\"1\":{\"166\":1}}],[\"如果您的对象关系涉及到多对多请使用\",{\"1\":{\"127\":1}}],[\"如果您第一步安装了插件那么可以在呼出get\",{\"1\":{\"166\":1}}],[\"如果您第一步安装了插件那么在你鼠标移出当前entity的编辑区域那么就会自动生成proxy类或者呼出get\",{\"1\":{\"165\":1}}],[\"如果您还是不行那么建议您点击idea右侧的maven刷新按钮进行刷新即可\",{\"1\":{\"165\":1}}],[\"如果您希望直接快速体验可以下载对应代码jdk17+springboot3\",{\"1\":{\"160\":1}}],[\"如果您有自定义日志接口可以通过自行实现\",{\"1\":{\"520\":1}}],[\"如果您有洁癖不想实现这个接口也是可以的\",{\"1\":{\"157\":1,\"166\":1}}],[\"如果您有lombok\",{\"1\":{\"157\":1}}],[\"如果您非旗舰版idea可能无法使用当前插件您可以进群联系作者\",{\"1\":{\"153\":1}}],[\"如果您是mysql\",{\"1\":{\"740\":1}}],[\"如果您是在select\",{\"1\":{\"663\":1}}],[\"如果您是\",{\"1\":{\"456\":2}}],[\"如果您是springboot\",{\"1\":{\"200\":1,\"201\":1}}],[\"如果您是自行构建的easy\",{\"1\":{\"116\":1,\"257\":1,\"493\":1}}],[\"如果您是一个刚入行java的新人\",{\"1\":{\"99\":1,\"106\":1}}],[\"如果您是一个有追求的喜欢强类型的技术开发\",{\"1\":{\"99\":1,\"106\":1}}],[\"如果您是c\",{\"1\":{\"99\":1,\"106\":1,\"391\":1}}],[\"如果您觉得这个框架有用可以请作者喝杯咖啡\",{\"1\":{\"48\":1}}],[\"如果您习惯了mybatis\",{\"1\":{\"43\":1,\"46\":1}}],[\"如果您之前已经存在annotationprocessorpaths那么你可以在里面添加eq的apt处理\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1}}],[\"如果你大部分的时候不需要编写错误信息且大部分时候错误都是一样的情况下那么我建议这么来处理\",{\"1\":{\"813\":1}}],[\"如果你觉得你程序里面不会手动去修改这两个值那么也可以不加这个判断\",{\"1\":{\"809\":1}}],[\"如果你部分对象需要使用雪花id\",{\"1\":{\"809\":1}}],[\"如果你不了解它\",{\"1\":{\"823\":1}}],[\"如果你不需要分库那么可以不用去设置该值\",{\"1\":{\"469\":1}}],[\"如果你不想为每个查询定义专门的排序类可以添加通用自行实现\",{\"1\":{\"623\":1}}],[\"如果你不想使用封装的方法可以使用原生的sqlnativesegment\",{\"1\":{\"223\":1}}],[\"如果你不想使用字符串那么可以在sysuserdto中使用lombok注解\",{\"1\":{\"110\":1}}],[\"如果你不想用插件那么可以将注解\",{\"1\":{\"21\":1}}],[\"如果你的所有表中有分片表那么一定要设置这个值\",{\"1\":{\"469\":1}}],[\"如果你只需要使用代理模式那么在可以自行安装依赖或者使用整合包比如springboot下的starter或者solon下的plugin\",{\"1\":{\"453\":1}}],[\"如果你希望实现前端排序那么可以参考这个链接dynamicsort\",{\"1\":{\"677\":1}}],[\"如果你希望当前枚举转换配置到全局可以使用\",{\"1\":{\"306\":1,\"572\":1}}],[\"如果你希望数据库对象和数据库类型一致\",{\"1\":{\"301\":1,\"558\":1,\"567\":1,\"575\":1}}],[\"如果你需要返回数据库表对象而不是自定义structdto那么需要自行include\",{\"1\":{\"148\":1}}],[\"如果你是一个新手\",{\"1\":{\"822\":1}}],[\"如果你是satoken那么直接用stputil\",{\"1\":{\"809\":1}}],[\"如果你是springsecurity可以用这个securitycontextholder\",{\"1\":{\"809\":1}}],[\"如果你是springboot并且是默认easy\",{\"1\":{\"116\":1,\"257\":1,\"493\":1}}],[\"如果你是proxy模式那么这个插件可以帮助你快速实现apt的proxy类\",{\"1\":{\"540\":1}}],[\"如果你是自行构建的easy\",{\"1\":{\"190\":1}}],[\"如果你是用springboot\",{\"1\":{\"190\":1}}],[\"如果你是\",{\"1\":{\"33\":1,\"538\":2}}],[\"如果你是多模块只需要在生成apt的对象模块处需要引入\",{\"1\":{\"30\":1,\"163\":1}}],[\"如果你们是c\",{\"1\":{\"18\":1}}],[\"如果未使用过那么还是建议需要apt的模块单独引入sql\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1}}],[\"如果遇到build后报错java\",{\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"如果插件报错\",{\"0\":{\"14\":1}}],[\"如果是query表达式那么可以实现子查询类似的功能\",{\"1\":{\"668\":1}}],[\"如果是表对象属性那么无需管理表别名\",{\"1\":{\"668\":1}}],[\"如果是表达式更新那么还是按表达式更新来处理\",{\"1\":{\"193\":1}}],[\"如果是忽略模式那么就是忽略该属性\",{\"1\":{\"618\":1}}],[\"如果是可以通过默认配置或者运行时指定是否需要查询出该列\",{\"1\":{\"426\":1}}],[\"如果是true\",{\"1\":{\"426\":2}}],[\"如果是那么在update对象delete对象将会以这个字段为id\",{\"1\":{\"426\":1}}],[\"如果是大于0采用长度为executorqueuesize的有界队列\",{\"1\":{\"407\":1}}],[\"如果是自定义strategy必须是logicdeletestrategyenum\",{\"1\":{\"284\":1}}],[\"如果是非spring项目直接添加到easqueryconfiguration\",{\"1\":{\"262\":1}}],[\"如果是非spring项目直接添加到queryconfiguration\",{\"1\":{\"260\":1}}],[\"如果是springboot的小伙伴只需要在更新方法外部加上aop注解即可\",{\"1\":{\"417\":1}}],[\"如果是springboot的话\",{\"1\":{\"231\":1,\"586\":1}}],[\"如果是spring\",{\"1\":{\"284\":1}}],[\"如果是spring项目添加\",{\"1\":{\"260\":1,\"262\":1}}],[\"如果是多模块那么可以再每个需要生成proxy的module处的pom\",{\"1\":{\"161\":1}}],[\"如果是历史书籍那么应该是2022年以前的书籍\",{\"1\":{\"140\":1}}],[\"如果是单个对象则不需要\",{\"1\":{\"137\":1}}],[\"如果是\",{\"1\":{\"13\":1,\"127\":1}}],[\"如果使用sa\",{\"1\":{\"809\":1}}],[\"如果使用entityfileproxy使用插件那么可以不引入这个包\",{\"1\":{\"460\":1,\"466\":1}}],[\"如果使用batch那么自行处理返回结果\",{\"1\":{\"205\":1}}],[\"如果使用\",{\"1\":{\"13\":1}}],[\"设置properties\",{\"1\":{\"781\":1,\"787\":1}}],[\"设置statement的参数属性\",{\"1\":{\"741\":1,\"743\":1}}],[\"设置每次拉取的大小\",{\"1\":{\"741\":1,\"743\":1}}],[\"设置非null字符串非空\",{\"1\":{\"631\":3}}],[\"设置最近表名名称\",{\"1\":{\"625\":2}}],[\"设置值后将使用有界队列线程池\",{\"1\":{\"469\":1}}],[\"设置当前上下文线程使用哪个数据源\",{\"1\":{\"522\":1}}],[\"设置当前事务的执行行为\",{\"1\":{\"410\":1}}],[\"设置当前租户和当前用户\",{\"1\":{\"260\":1}}],[\"设置方言语法等为mysql的\",{\"1\":{\"397\":1,\"471\":1,\"548\":1}}],[\"设置以log\",{\"1\":{\"397\":1,\"471\":1,\"548\":1}}],[\"设置不允许物理删除\",{\"1\":{\"397\":1,\"471\":1,\"548\":1}}],[\"设置不查询\",{\"1\":{\"350\":1}}],[\"设置日志打印为控制台\",{\"1\":{\"397\":1}}],[\"设置主键为自增\",{\"1\":{\"362\":1}}],[\"设置jdbc参数\",{\"1\":{\"299\":1}}],[\"设置98\",{\"1\":{\"196\":1}}],[\"设置idea的注解处理器\",{\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"❌\",{\"1\":{\"195\":2,\"216\":14,\"279\":4}}],[\"✅\",{\"1\":{\"195\":1,\"216\":1,\"279\":1,\"372\":8,\"613\":18}}],[\"描述属性对应的列名\",{\"1\":{\"426\":1}}],[\"描述对象对应数据库表名\",{\"1\":{\"425\":1}}],[\"描述easy\",{\"1\":{\"423\":1}}],[\"描述\",{\"1\":{\"195\":1,\"198\":1,\"204\":1,\"209\":1,\"211\":1,\"212\":1,\"219\":1,\"245\":1,\"246\":1,\"247\":1,\"256\":1,\"257\":1,\"260\":1,\"262\":1,\"264\":1,\"268\":1,\"269\":1,\"270\":1,\"275\":1,\"279\":1,\"288\":1,\"289\":1,\"290\":1,\"294\":1,\"298\":1,\"299\":1,\"322\":1,\"348\":1,\"399\":4,\"407\":1,\"410\":1,\"425\":1,\"426\":1,\"430\":1,\"431\":1,\"468\":1,\"469\":1,\"601\":1,\"614\":1,\"625\":1,\"632\":1,\"641\":1,\"668\":1,\"685\":1,\"697\":1,\"704\":1,\"713\":1,\"729\":1,\"741\":1,\"743\":1,\"771\":1}}],[\"原生sql自定义sqlsql片段原生sql片段\",{\"1\":{\"671\":1}}],[\"原生sql\",{\"0\":{\"653\":1}}],[\"原生sql片段使用\",{\"1\":{\"100\":1,\"107\":1}}],[\"原子追踪更新\",{\"1\":{\"486\":1}}],[\"原子更新\",{\"1\":{\"426\":1}}],[\"原子更新接口\",{\"1\":{\"194\":1}}],[\"原理就是开启一个定时任务线程去执行\",{\"1\":{\"469\":1}}],[\"原因是正确的写法在开启追踪后查询使用了\",{\"1\":{\"417\":1}}],[\"原因可能\",{\"0\":{\"206\":1}}],[\"原本是mybatis\",{\"1\":{\"383\":1}}],[\"原始数据长度\",{\"1\":{\"216\":2}}],[\"原文链接\",{\"1\":{\"206\":1}}],[\"仅where条件生效\",{\"1\":{\"631\":1}}],[\"仅executormaximumpoolsize>0时生效\",{\"1\":{\"469\":2}}],[\"仅entity对象更新有效\",{\"1\":{\"193\":1}}],[\"仅查询地址和营业执照编号\",{\"1\":{\"315\":1}}],[\"仅新增时调用\",{\"1\":{\"255\":1,\"582\":1}}],[\"仅作用到insert\",{\"1\":{\"230\":1,\"585\":1}}],[\"仅作用到select投影上面\",{\"1\":{\"230\":1,\"585\":1}}],[\"仅提供了count\",{\"1\":{\"221\":1,\"224\":1}}],[\"仅支持对象缓存id查询仅支持返回单一对象\",{\"1\":{\"209\":1}}],[\"仅获取用户拥有的菜单id和菜单名称\",{\"1\":{\"112\":1}}],[\"仅获取用户拥有的菜单id\",{\"1\":{\"112\":1}}],[\"废弃❌\",{\"0\":{\"193\":1}}],[\"$\",{\"1\":{\"192\":1,\"479\":1,\"485\":1,\"486\":1}}],[\"让用户无需关心底层通过修改delete语句为update来实现自动无感逻辑删除\",{\"1\":{\"189\":1}}],[\"让我们通过对象关系可以非常优雅的实现数据筛选和复杂的数据筛选逻辑\",{\"1\":{\"177\":1}}],[\"逻辑删除策略\",{\"1\":{\"430\":1}}],[\"逻辑删除字段不需要update时更新\",{\"1\":{\"429\":1,\"430\":1}}],[\"逻辑删除字段\",{\"1\":{\"429\":1}}],[\"逻辑删除情况下删除数据将会对数据列进行行版本追加\",{\"1\":{\"326\":1}}],[\"逻辑删除加版本号\",{\"0\":{\"326\":1}}],[\"逻辑删除软删除soft\",{\"1\":{\"286\":1}}],[\"逻辑删除\",{\"0\":{\"275\":1,\"485\":1},\"1\":{\"189\":1,\"327\":1,\"357\":1,\"430\":1,\"697\":1}}],[\"具有非常强悍的实际实践意义\",{\"1\":{\"188\":1}}],[\"具体代码在abstractshardingmonthinitializer这个默认的分片初始化器里面\",{\"1\":{\"797\":1}}],[\"具体代码以最新版源码为准\",{\"1\":{\"545\":1}}],[\"具体原理是为什么呢\",{\"1\":{\"797\":1}}],[\"具体表达式代码为如下\",{\"1\":{\"733\":1}}],[\"具体api为fillone\",{\"1\":{\"640\":1}}],[\"具体功能就是可以自动对当前对象的主键进行赋值\",{\"1\":{\"197\":1}}],[\"具体的处理typehandler\",{\"1\":{\"298\":1}}],[\"具体的easy\",{\"1\":{\"161\":1}}],[\"具体的pom\",{\"1\":{\"157\":1}}],[\"具体请看下方截图\",{\"1\":{\"157\":1}}],[\"拆分后就是\",{\"1\":{\"185\":1}}],[\"对\",{\"1\":{\"825\":1}}],[\"对springboot进行的封装可以通过jwt获取对应的当前操作人用户\",{\"1\":{\"809\":1}}],[\"对一张表进行开窗函数处理并且进行筛选\",{\"1\":{\"734\":1}}],[\"对其limit\",{\"1\":{\"714\":1}}],[\"对其添加select常量\",{\"1\":{\"714\":1}}],[\"对结果进行先count\",{\"1\":{\"601\":1}}],[\"对查询结果进行去重\",{\"1\":{\"601\":1}}],[\"对easyqueryclient的增强通过apt代理模式实现强类型\",{\"1\":{\"465\":1}}],[\"对easyqueryclient的增强通过lambda方式实现查询\",{\"1\":{\"465\":1,\"490\":1}}],[\"对应关系就是参数顺序\",{\"1\":{\"649\":3}}],[\"对应的模块是指当前模块有\",{\"1\":{\"453\":1}}],[\"对应的vo或者bo等对象上采用枚举也是可以的\",{\"1\":{\"307\":1,\"573\":1}}],[\"对应数据库表的列名\",{\"1\":{\"426\":1}}],[\"对比这个类和模板差不多我们只需要修改部分地方即可实现\",{\"1\":{\"803\":1}}],[\"对比\",{\"1\":{\"383\":1}}],[\"对于\",{\"1\":{\"849\":1}}],[\"对于大部分业务场景过于复杂\",{\"1\":{\"628\":1}}],[\"对于大对象属性聚合有着更好的属性表示而不是一股脑儿的展开平铺对象的设计\",{\"1\":{\"311\":1}}],[\"对于是否允许删除命令将不会生效\",{\"1\":{\"356\":1}}],[\"对于对象更新方法提供了数据追踪\",{\"1\":{\"241\":1}}],[\"对当前表达式进行查询结果进行排序\",{\"1\":{\"601\":1}}],[\"对当前表达式进行查询结果返回和偏移进行限制\",{\"1\":{\"601\":1}}],[\"对当前表达式进行条件追加\",{\"1\":{\"601\":1}}],[\"对当前phone进行赋值因为phone是string类型所以goup后的count需要强转成string也就是cast\",{\"1\":{\"185\":3}}],[\"对当前id进行赋值\",{\"1\":{\"185\":3}}],[\"对象修改时可以进行修改人和修改时间的自动赋值\",{\"1\":{\"809\":1}}],[\"对象设计\",{\"0\":{\"809\":1}}],[\"对象更新可以通过id直接路由到对应的库保证用户无感更新\",{\"1\":{\"789\":1}}],[\"对象更新精确命中对应的库和对应的表\",{\"1\":{\"783\":1}}],[\"对象更新包括对象集合如果后续不需要处理column信息那么不需要useproxy\",{\"1\":{\"104\":1,\"105\":1}}],[\"对象更新包括对象集合\",{\"1\":{\"104\":1,\"105\":1}}],[\"对象查询\",{\"1\":{\"628\":1}}],[\"对象查询四种api接口调用\",{\"1\":{\"458\":1}}],[\"对象模式include\",{\"1\":{\"703\":1}}],[\"对象模式\",{\"1\":{\"450\":1}}],[\"对象值转换\",{\"1\":{\"423\":1}}],[\"对象主键更新\",{\"0\":{\"413\":1}}],[\"对象属性\",{\"1\":{\"668\":1}}],[\"对象属性类型\",{\"1\":{\"302\":1,\"559\":1,\"568\":1,\"576\":1}}],[\"对象属性和数据库列名的转换器\",{\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"对象删除\",{\"1\":{\"265\":1}}],[\"对象拦截器\",{\"1\":{\"256\":1}}],[\"对象\",{\"1\":{\"198\":1,\"211\":2,\"264\":2,\"450\":1}}],[\"对象自动\",{\"1\":{\"138\":1}}],[\"对象映射那么\",{\"1\":{\"127\":1}}],[\"对象关系\",{\"0\":{\"693\":1}}],[\"对象关系才是orm的精髓\",{\"1\":{\"127\":1}}],[\"对象关系关联查询nosql不仅仅是sql联级筛选\",{\"1\":{\"100\":1,\"107\":1}}],[\"对象关系查询案例2\",{\"0\":{\"141\":1}}],[\"对象关系查询案例1\",{\"0\":{\"127\":1}}],[\"对象关系查询\",{\"1\":{\"100\":2,\"107\":2}}],[\"对象关系结构化vo自动组装返回\",{\"1\":{\"100\":1,\"107\":1}}],[\"对象实战\",{\"1\":{\"100\":1,\"107\":1}}],[\"对象插入\",{\"1\":{\"95\":1}}],[\"所有的超级功能的案例源码都在easy\",{\"1\":{\"777\":1}}],[\"所有的依赖是\",{\"1\":{\"504\":1}}],[\"所有的增删改都会添加对应的条件表达式值\",{\"1\":{\"265\":1}}],[\"所有列都插入\",{\"1\":{\"351\":1,\"363\":1}}],[\"所谓匿名临时表就是select\",{\"1\":{\"185\":1}}],[\"所以你自定义的时候必须注册一个名称\",{\"1\":{\"809\":1}}],[\"所以clonequeryable生效\",{\"1\":{\"714\":1}}],[\"所以就是筛选学生里面存在名称叫做小明的\",{\"1\":{\"694\":1,\"696\":1}}],[\"所以easy\",{\"1\":{\"687\":1}}],[\"所以匿名对象的存在非常有意义\",{\"1\":{\"603\":1}}],[\"所以我们对全局拦截器进行修改让其拦截easy\",{\"1\":{\"813\":1}}],[\"所以我们可以通过\",{\"1\":{\"547\":1}}],[\"所以我们在easy\",{\"1\":{\"528\":1}}],[\"所以很轻松可以替换掉\",{\"1\":{\"545\":1}}],[\"所以本次查询会将13张同数据库下的表进行分组以没5张为一组分成3组最后一组为3张表\",{\"1\":{\"469\":1}}],[\"所以一般会和下面的配置参数maxshardingquerylimit配合作为限制\",{\"1\":{\"469\":1}}],[\"所以如歌设置为true\",{\"1\":{\"468\":1}}],[\"所以如果有大数字需要传入format请先tostring\",{\"1\":{\"670\":1}}],[\"所以如果您不需要可以在拦截器里面对其进行从新设置或者清空\",{\"1\":{\"198\":1}}],[\"所以如果存在多条件还是建议使用where来处理\",{\"1\":{\"129\":1}}],[\"所以如果不支持对应的sql那么你可以自行扩展或者提交相应的issue\",{\"1\":{\"8\":1}}],[\"所以这边需要先判断是否登录\",{\"1\":{\"809\":1}}],[\"所以这边需要添加一个特殊的注解来标识主键\",{\"1\":{\"505\":1}}],[\"所以这边不能太依赖这个插件尤其是参数中存在括号参数等会被误认为是参数从而导致拼接错误\",{\"1\":{\"540\":1}}],[\"所以这边单独进行文档编写说来演示如何使用proxy编写易于表达维护的orm语法\",{\"1\":{\"452\":1}}],[\"所以这边采用更新忽略\",{\"1\":{\"429\":1}}],[\"所以这边先用枚举来做一个测试\",{\"1\":{\"305\":1,\"571\":1}}],[\"所以提供了额外的追踪方法\",{\"1\":{\"417\":1}}],[\"所以提供了draft草稿类型来平替匿名类型\",{\"1\":{\"18\":1}}],[\"所以框架无法追踪对象变更无法有效生成差异更新\",{\"1\":{\"417\":1}}],[\"所以logslowsqllistener也可以获取到\",{\"1\":{\"273\":1}}],[\"所以不生成sql不使用更新\",{\"1\":{\"251\":1}}],[\"所以建议使用sqlnativesegment或者sqlfunction来实现数据库方言自定义\",{\"1\":{\"224\":1}}],[\"所以sql查询也是不可或缺的一个完整的orm应该是sql+对象查询\",{\"1\":{\"177\":1}}],[\"所以无需手动join也可以实现筛选\",{\"1\":{\"152\":1}}],[\"所以具体使用哪种用户自行抉择\",{\"1\":{\"101\":1}}],[\"所以年龄应该是\",{\"1\":{\"100\":1,\"107\":1}}],[\"所以原则上支持所有数据库\",{\"1\":{\"8\":1}}],[\"每次and就是代表一个括号\",{\"1\":{\"673\":1}}],[\"每次测试\",{\"1\":{\"384\":1}}],[\"每次select就是将当前查询结果作为匿名临时表\",{\"1\":{\"185\":1}}],[\"每个数据源10个\",{\"1\":{\"469\":1}}],[\"每个库\",{\"1\":{\"384\":1}}],[\"每个学生都有多门自己选择的课程\",{\"1\":{\"128\":1}}],[\"每个学生都有自己的家庭地址\",{\"1\":{\"128\":1}}],[\"按月份表\",{\"1\":{\"796\":1}}],[\"按需快速join返回列\",{\"0\":{\"732\":1}}],[\"按需返回vo对象\",{\"0\":{\"731\":1}}],[\"按需拦截\",{\"0\":{\"266\":1}}],[\"按条件删除\",{\"1\":{\"278\":1}}],[\"按列更新\",{\"0\":{\"235\":1,\"590\":1}}],[\"按title聚合返回title和count结果\",{\"1\":{\"184\":1}}],[\"按创建时间asc\",{\"1\":{\"183\":1}}],[\"按创建时间asc排序\",{\"1\":{\"183\":1}}],[\"按id查询\",{\"1\":{\"179\":1}}],[\"zaxxer\",{\"1\":{\"481\":1,\"483\":1,\"517\":1}}],[\"zaxxer<\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"163\":1,\"395\":1,\"478\":1,\"513\":1,\"519\":1}}],[\"zero\",{\"1\":{\"182\":2}}],[\"类型\",{\"1\":{\"269\":1,\"270\":1,\"506\":1,\"613\":1,\"635\":1,\"697\":1}}],[\"类型为arraylist\",{\"1\":{\"180\":2}}],[\"类\",{\"1\":{\"256\":1}}],[\"类似直白的sql结果\",{\"1\":{\"109\":1}}],[\"结束时间\",{\"1\":{\"797\":1}}],[\"结束\",{\"1\":{\"521\":9}}],[\"结论\",{\"0\":{\"380\":1},\"1\":{\"380\":1}}],[\"结果内容\",{\"1\":{\"689\":1}}],[\"结果可为null按单主键查询\",{\"1\":{\"179\":1}}],[\"结果不能为null按单主键查询\",{\"1\":{\"179\":1}}],[\"结构化dto\",{\"1\":{\"111\":2}}],[\"结构化数据返回\",{\"0\":{\"111\":1},\"1\":{\"108\":1}}],[\"最新最热\",{\"1\":{\"460\":1}}],[\"最新版本easy\",{\"1\":{\"161\":1}}],[\"最后的终结方法收集器比如tolist\",{\"1\":{\"334\":1}}],[\"最后一个版本号没有破坏性变动\",{\"1\":{\"49\":1}}],[\"最大值\",{\"1\":{\"288\":1}}],[\"最小值\",{\"1\":{\"288\":1}}],[\"最小加密长度\",{\"1\":{\"219\":1}}],[\"要注意是否开启了追踪spring\",{\"1\":{\"417\":1}}],[\"要求返回的数据为\",{\"1\":{\"386\":1,\"387\":1}}],[\"要求对应的导航属性是一样的才可以比如数据库实体关联学生属性叫做shoolstudents那么\",{\"1\":{\"138\":1}}],[\"要么从不继续处理命令\",{\"1\":{\"206\":1}}],[\"要么总是继续处理命令\",{\"1\":{\"206\":1}}],[\"要实现这个功能有以下两种方式\",{\"1\":{\"161\":1}}],[\"只有join比较特殊\",{\"1\":{\"531\":1}}],[\"只需要普通的maven打包即可\",{\"1\":{\"455\":1}}],[\"只需要在正确配置后进行打包后即可食用\",{\"1\":{\"454\":1}}],[\"只需要自定义实现对应数据库的增删改查接口即可\",{\"1\":{\"8\":1}}],[\"只更新非null列到数据库\",{\"1\":{\"419\":1}}],[\"只更新null列到数据库\",{\"1\":{\"419\":1}}],[\"只更新了phone字段并未对所有的字段进行更新\",{\"1\":{\"250\":1}}],[\"只插入null列\",{\"1\":{\"351\":1,\"363\":1}}],[\"只要对应的apply方法返回true\",{\"1\":{\"302\":1,\"568\":1}}],[\"只要将实例对象httplogrequest直接注入到容器中\",{\"1\":{\"273\":1}}],[\"只是有些框架是一套试题的情况下那么不需要实现接口也可以用entityquery的api仅此而已正常使用还是推荐大家实现proxyentityavailable接口\",{\"1\":{\"157\":1,\"166\":1}}],[\"菜单如果不知道就是生成get\",{\"1\":{\"157\":1}}],[\"菜单典型的多对多关联关系\",{\"1\":{\"142\":1}}],[\"生成匿名表\",{\"1\":{\"734\":1}}],[\"生成匿名表表示select\",{\"1\":{\"729\":1}}],[\"生成的sql语句为\",{\"1\":{\"733\":1}}],[\"生成的文件存在于target目录下\",{\"1\":{\"446\":1}}],[\"生成代码\",{\"1\":{\"516\":1}}],[\"生成代理对象\",{\"1\":{\"446\":1}}],[\"生成apt文件\",{\"0\":{\"165\":1}}],[\"生成选择entityqueryimplement\",{\"1\":{\"157\":1}}],[\"生成到target目录下需要build\",{\"1\":{\"33\":1}}],[\"生成到源码文件里面\",{\"1\":{\"33\":1}}],[\"推荐\",{\"1\":{\"157\":1,\"465\":4,\"490\":1}}],[\"推荐🔥🔥🔥\",{\"1\":{\"28\":1}}],[\"答案是有的就是这一章节的插件\",{\"1\":{\"153\":1}}],[\"然后让对象继承这个空接口\",{\"1\":{\"809\":1}}],[\"然后我们会添加对应的自动添加处理\",{\"1\":{\"809\":1}}],[\"然后将不需要的进行忽略\",{\"1\":{\"731\":1}}],[\"然后limit+tolist查询结果并且封装成pageresult返回\",{\"1\":{\"601\":1}}],[\"然后按冒号分割\",{\"1\":{\"530\":1}}],[\"然后再本次查询完成后归还到datasource连接池中\",{\"1\":{\"469\":1}}],[\"然后写条件写排序写分组等确定了之后写选择的select的列不写就是主表的\",{\"1\":{\"335\":1}}],[\"然后实体对象定义为\",{\"1\":{\"310\":1,\"562\":1}}],[\"然后默认将enable改成false需要时自行添加条件通过useinteceptor\",{\"1\":{\"266\":1}}],[\"然后进行aes进行解密\",{\"1\":{\"229\":1,\"584\":1}}],[\"然后进行base64编码\",{\"1\":{\"229\":1,\"584\":1}}],[\"然后还需要刷新maven然后还要添加接口\",{\"1\":{\"153\":1}}],[\"然后在弹出的地方搜索slow\",{\"1\":{\"14\":1}}],[\"毕竟需要先build\",{\"1\":{\"153\":1}}],[\"毕竟dsl语句只是强类型拼接sql\",{\"1\":{\"127\":1}}],[\"经过第一章节\",{\"1\":{\"153\":1}}],[\"显式子查询\",{\"1\":{\"152\":1}}],[\"指示默认的个别数据库行为语句没办法生成\",{\"1\":{\"453\":1,\"460\":1,\"466\":1}}],[\"指引\",{\"0\":{\"333\":1,\"423\":1}}],[\"指定本次查询最近的表的表名\",{\"1\":{\"601\":2}}],[\"指定列更新或条件\",{\"0\":{\"418\":1}}],[\"指定存在的条件\",{\"0\":{\"375\":1}}],[\"指定需要处理的类型\",{\"1\":{\"298\":1}}],[\"指定条件链接内外两张表\",{\"1\":{\"152\":1}}],[\"指南\",{\"0\":{\"93\":1,\"851\":1}}],[\"上一篇\",{\"1\":{\"819\":1}}],[\"上一篇文章我们讲解了如何使用java代码来实现数据库列的加密解密\",{\"1\":{\"229\":1}}],[\"上面的是错误用法\",{\"1\":{\"284\":1,\"485\":1}}],[\"上述这个模式我们称之为隐式子查询\",{\"1\":{\"152\":1}}],[\"上述这个模式我们称之为隐式join\",{\"1\":{\"152\":1}}],[\"上述这个模式我们称之为显式子查询\",{\"1\":{\"152\":1}}],[\"上述这个模式我们称之为显式join\",{\"1\":{\"152\":1}}],[\"上下角标\",{\"0\":{\"829\":1}}],[\"上下凉鞋发一样通过expression来构建sql片段并且指定类型是string\",{\"1\":{\"666\":1}}],[\"上下都行\",{\"1\":{\"184\":1}}],[\"上下两种映射都行\",{\"1\":{\"171\":2,\"172\":1}}],[\"上下两种都可以表示查询班级表过滤班级关联的学生并且不存在学生姓金的\",{\"1\":{\"129\":1}}],[\"上下两种都可以表示查询班级表过滤班级关联的学生并且存在学生姓金的\",{\"1\":{\"129\":1}}],[\"上下两个查询高判立下下面的更加优雅更加通俗易懂\",{\"1\":{\"152\":1}}],[\"上下两个方法都行\",{\"1\":{\"152\":1}}],[\"上下写法一样\",{\"1\":{\"129\":1}}],[\"筛选班级里面学生姓张的有5人的班级\",{\"1\":{\"694\":1,\"696\":1}}],[\"筛选班级里面学生家在xx路\",{\"1\":{\"694\":1,\"696\":1}}],[\"筛选班级里面学生家在xx路的班级\",{\"1\":{\"694\":1,\"696\":1}}],[\"筛选多对多联级查询\",{\"1\":{\"694\":1,\"696\":1}}],[\"筛选学生表\",{\"1\":{\"694\":1,\"696\":1}}],[\"筛选所有班级里面存在学生名称包含小明的班级\",{\"1\":{\"694\":1,\"696\":1}}],[\"筛选\",{\"0\":{\"594\":1}}],[\"筛选用户叫做小明并且地址是绍兴的\",{\"1\":{\"152\":1}}],[\"筛选用户名称包含小明并且是2020年以前创建的\",{\"1\":{\"152\":1}}],[\"筛选用户名称包含小明的或者名称包含小红的\",{\"1\":{\"152\":1}}],[\"筛选用户名称包含小明的\",{\"1\":{\"152\":1}}],[\"筛选条件为角色集合里面有角色最大时间不能大于2022年的\",{\"1\":{\"147\":1}}],[\"筛选条件为角色集合里面有角色名称叫做xx员的\",{\"1\":{\"146\":1}}],[\"筛选条件为角色集合里面有角色名称叫做收货员的\",{\"1\":{\"145\":1}}],[\"前后变更\",{\"1\":{\"196\":1}}],[\"前面我们通过拦截easy\",{\"1\":{\"814\":1}}],[\"前面是大的时间后面是小的时间\",{\"1\":{\"592\":1}}],[\"前面几个都是直接\",{\"1\":{\"531\":1}}],[\"前面一个篇章我们将讲解了对象查询\",{\"1\":{\"177\":1}}],[\"前面的表达式表示要返回roles后面的表示如何返回返回按时间正序的3个\",{\"1\":{\"148\":1}}],[\"前端指定排序\",{\"1\":{\"100\":1,\"107\":1}}],[\"适用于评论和评论子表前n个\",{\"1\":{\"148\":1}}],[\"员\",{\"1\":{\"146\":2}}],[\"杭州市\",{\"1\":{\"144\":2}}],[\"隐式join因为用户返回了地址标的地址信息\",{\"1\":{\"144\":1}}],[\"隐式join\",{\"1\":{\"142\":1}}],[\"隐式子查询返回用户拥有的角色数量\",{\"1\":{\"144\":1}}],[\"隐式子查询会自动join用户表和地址表\",{\"1\":{\"144\":1}}],[\"隐式子查询\",{\"1\":{\"142\":1,\"152\":1}}],[\"角色\",{\"1\":{\"142\":1}}],[\"角色和菜单也是多对多可以通过方式2当前也可以通过方式1\",{\"1\":{\"137\":1}}],[\"小的时间在前大的时间在后\",{\"1\":{\"771\":4}}],[\"小于等于\",{\"1\":{\"533\":1,\"771\":1}}],[\"小于\",{\"1\":{\"533\":1,\"771\":1}}],[\"小刚\",{\"1\":{\"506\":1,\"509\":1}}],[\"小时\",{\"1\":{\"290\":1}}],[\"小红\",{\"1\":{\"152\":1,\"673\":3}}],[\"小学\",{\"1\":{\"140\":4}}],[\"小明\",{\"1\":{\"23\":3,\"24\":1,\"25\":1,\"34\":2,\"110\":3,\"111\":2,\"112\":3,\"134\":1,\"144\":4,\"149\":5,\"152\":5,\"167\":2,\"370\":2,\"506\":1,\"509\":1,\"673\":3,\"694\":6,\"696\":6}}],[\"直接在参数后面进行大于\",{\"1\":{\"533\":1}}],[\"直接放结论\",{\"1\":{\"383\":1}}],[\"直接更新\",{\"1\":{\"316\":1}}],[\"直接插入对象实体\",{\"1\":{\"309\":1,\"579\":1}}],[\"直接注册实例到easy\",{\"1\":{\"273\":1}}],[\"直接使用where\",{\"1\":{\"529\":1}}],[\"直接使用被追踪的数据作为当前对象\",{\"1\":{\"417\":1}}],[\"直接使用\",{\"1\":{\"196\":1}}],[\"直接查询映射字段即可\",{\"1\":{\"721\":1}}],[\"直接查询一班然后拉取的时候额外查出所需要的学生下的课程\",{\"1\":{\"137\":1}}],[\"直接查询课程筛选出关联的班级是一班的\",{\"1\":{\"137\":1}}],[\"直接升级修改版本号即可1\",{\"1\":{\"49\":1}}],[\"判断顺序\",{\"1\":{\"275\":1}}],[\"判断结果是否存在\",{\"0\":{\"181\":1}}],[\"判断菜单下的角色存在角色的用户叫做小明的\",{\"1\":{\"149\":2}}],[\"判断小明是否存在\",{\"1\":{\"34\":1,\"167\":1}}],[\"判定班级下的老师有姓金的\",{\"1\":{\"133\":1}}],[\"获取当前的仓储用于查询\",{\"1\":{\"803\":1}}],[\"获取当前线程追踪上下文没有这返回null\",{\"1\":{\"245\":1}}],[\"获取数据的价格在所属书店中的名次\",{\"1\":{\"669\":1}}],[\"获取书本价格在所有书籍中的名次\",{\"1\":{\"669\":1}}],[\"获取第一条city并且赋值\",{\"1\":{\"641\":1}}],[\"获取枚举值\",{\"1\":{\"306\":1,\"572\":1}}],[\"获取对应的省份下的市区和区县\",{\"1\":{\"712\":1}}],[\"获取对应的结果\",{\"1\":{\"299\":1}}],[\"获取对多的老师的信息但是必须是姓金的才返回\",{\"1\":{\"133\":1}}],[\"获取最新\",{\"0\":{\"114\":1,\"457\":1,\"462\":1,\"464\":1,\"475\":1,\"489\":1}}],[\"的逻辑删除\",{\"1\":{\"809\":1}}],[\"的phone还是null所以会报错空指针异常\",{\"1\":{\"773\":1}}],[\"的区别在于您是否要对后续操作进行处理\",{\"1\":{\"731\":1}}],[\"的lambda入参个数等同于多表的数量\",{\"1\":{\"642\":1}}],[\"的变量名命名是痛苦的\",{\"1\":{\"528\":1}}],[\"的非代理对象方法调用事务\",{\"1\":{\"411\":1}}],[\"的2\",{\"1\":{\"387\":1}}],[\"的\",{\"1\":{\"385\":1,\"386\":1,\"388\":1,\"389\":1,\"809\":1,\"831\":1,\"848\":1}}],[\"的查询单条数据的速度相当\",{\"1\":{\"385\":1}}],[\"的代码如下\",{\"1\":{\"385\":3,\"386\":3,\"387\":3,\"388\":3,\"389\":3}}],[\"的字段\",{\"1\":{\"350\":1}}],[\"的web请求路径将当前企业id\",{\"1\":{\"256\":1}}],[\"的column\",{\"1\":{\"226\":1}}],[\"的原创文章\",{\"1\":{\"206\":1}}],[\"的值\",{\"1\":{\"206\":1}}],[\"的快速开始体验\",{\"1\":{\"153\":1}}],[\"的书籍\",{\"1\":{\"152\":2}}],[\"的第二个参数可以筛选返回的数据结果如果不加就返回当前班级下的所有关联的老师\",{\"1\":{\"133\":1}}],[\"的同理\",{\"1\":{\"132\":1}}],[\"的方向肯定是不仅仅是\",{\"1\":{\"127\":1}}],[\"岁的班级\",{\"1\":{\"132\":2}}],[\"位的班级\",{\"1\":{\"131\":1}}],[\"金庸\",{\"1\":{\"152\":2}}],[\"金\",{\"1\":{\"129\":5,\"131\":1,\"133\":2}}],[\"案例源码\",{\"0\":{\"777\":1}}],[\"案例三\",{\"0\":{\"739\":1}}],[\"案例二\",{\"0\":{\"607\":1,\"669\":1,\"738\":1}}],[\"案例一\",{\"0\":{\"606\":1,\"737\":1}}],[\"案例场景\",{\"0\":{\"255\":1,\"582\":1}}],[\"案例6\",{\"0\":{\"149\":1}}],[\"案例5\",{\"0\":{\"148\":1}}],[\"案例4\",{\"0\":{\"147\":1}}],[\"案例3\",{\"0\":{\"146\":1}}],[\"案例2\",{\"0\":{\"145\":1}}],[\"案例1\",{\"0\":{\"144\":1}}],[\"案例9进阶\",{\"0\":{\"139\":1}}],[\"案例\",{\"0\":{\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"231\":1,\"291\":1,\"586\":1,\"626\":1,\"673\":1,\"742\":1,\"744\":1}}],[\"学生地址vo对象\",{\"1\":{\"713\":1}}],[\"学生地址表\",{\"1\":{\"705\":1}}],[\"学生vo对象\",{\"1\":{\"713\":1}}],[\"学生表\",{\"1\":{\"705\":1}}],[\"学生和学生地址信息关系\",{\"1\":{\"706\":1}}],[\"学生和学生家庭信息\",{\"1\":{\"697\":1}}],[\"学生和班级\",{\"1\":{\"697\":1}}],[\"学生名称叫小明的班级\",{\"1\":{\"694\":1,\"696\":1}}],[\"学生数量复杂计算属性\",{\"1\":{\"556\":1}}],[\"学生家庭地址\",{\"1\":{\"128\":1}}],[\"学生\",{\"1\":{\"128\":1}}],[\"学习指南\",{\"0\":{\"96\":1}}],[\"老师和班级多对多通过schoolclassteacher表进行关联\",{\"1\":{\"694\":1,\"696\":1}}],[\"老师的责应该是type=2的\",{\"1\":{\"140\":1}}],[\"老师\",{\"1\":{\"128\":1,\"140\":2}}],[\"班级表\",{\"1\":{\"705\":1}}],[\"班级和老师之间的关系\",{\"1\":{\"709\":1}}],[\"班级和老师\",{\"1\":{\"697\":1}}],[\"班级和老师支持查询筛选班级表条件是老师名称叫王老师的班级集合\",{\"1\":{\"695\":1}}],[\"班级和学生\",{\"1\":{\"697\":1}}],[\"班级和学生支持查询筛选班级表条件是存在某个学生叫小明的班级集合\",{\"1\":{\"695\":1}}],[\"班级和学生是一对多\",{\"1\":{\"694\":1,\"696\":1}}],[\"班级和班级所在的学生人数\",{\"1\":{\"556\":1}}],[\"班级\",{\"1\":{\"128\":1,\"713\":1}}],[\"也支持手写sql来实现crud\",{\"1\":{\"653\":1}}],[\"也支持单表的queryable返回\",{\"1\":{\"649\":1}}],[\"也支持stream模式的对象函数查询扩展\",{\"1\":{\"151\":1}}],[\"也可以手动写入进行覆盖\",{\"1\":{\"813\":1}}],[\"也可以全局设置keepstyle\",{\"1\":{\"670\":1}}],[\"也可以理解为tuple类型\",{\"1\":{\"605\":1}}],[\"也可以不添加后续手动添加\",{\"1\":{\"425\":1}}],[\"也可以讲queryable\",{\"1\":{\"397\":1}}],[\"也可以用以下写法\",{\"1\":{\"185\":1}}],[\"也可以where\",{\"1\":{\"152\":1}}],[\"也必须是这个名称\",{\"1\":{\"138\":1}}],[\"也就是\",{\"1\":{\"128\":1}}],[\"也就是sql\",{\"1\":{\"8\":1}}],[\"也需要手动调用\",{\"1\":{\"127\":1}}],[\"为每个\",{\"1\":{\"823\":1}}],[\"为null\",{\"1\":{\"771\":1}}],[\"为空表示使用当前属性名\",{\"1\":{\"632\":1}}],[\"为自己实现的转换器\",{\"1\":{\"578\":1}}],[\"为没有添加\",{\"1\":{\"530\":1}}],[\"为插件赋能添加别名用于lambda\",{\"1\":{\"529\":1}}],[\"为了丰富文档写作\",{\"1\":{\"825\":1}}],[\"为了解放生产力我推荐您使用easyentityquery的apt模式无论是原生apt还是file\",{\"1\":{\"527\":1}}],[\"为了测试防止数据被删掉\",{\"1\":{\"285\":1}}],[\"为了不影响性能建议采用异步线程池发送http\",{\"1\":{\"271\":3,\"273\":3,\"274\":6}}],[\"为什么不使用动态代理而是使用编译时apt技术呢因为apt技术在项目build后可以完美的生成src代码一样\",{\"1\":{\"799\":1}}],[\"为什么对象关系查询叫做nodsl一个好的\",{\"1\":{\"127\":1}}],[\"为什么我们需要对象关系查询\",{\"1\":{\"127\":1}}],[\"为往圣继绝学\",{\"1\":{\"1\":1}}],[\"✨\",{\"0\":{\"127\":1,\"141\":1,\"177\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"847\":1}}],[\"注册计算属性\",{\"1\":{\"592\":1}}],[\"注入您自己的多数据源datasource\",{\"1\":{\"523\":1}}],[\"注入字典翻译服务\",{\"1\":{\"508\":1}}],[\"注入bean\",{\"0\":{\"123\":1,\"499\":1}}],[\"注解处理工具\",{\"1\":{\"799\":1}}],[\"注解处理器\",{\"0\":{\"799\":1}}],[\"注解table属性shardinginitializer\",{\"1\":{\"797\":1}}],[\"注解查询动态查询dto查询json查询对象查询form查询表单查询\",{\"1\":{\"639\":1}}],[\"注解动态处理\",{\"0\":{\"524\":1}}],[\"注解说明\",{\"0\":{\"424\":1}}],[\"注解\",{\"1\":{\"308\":1,\"574\":1}}],[\"注解模式\",{\"0\":{\"308\":1,\"574\":1}}],[\"注意必须是配置多数据源的其中一个\",{\"1\":{\"482\":1}}],[\"注意必须使用easy\",{\"1\":{\"157\":2}}],[\"注意这个值的设置不可以大于数据库连接池数量\",{\"1\":{\"407\":1}}],[\"注意这边列会自动带上具体的表名而不是简单的拼接所以在join条件下也无需关心别名\",{\"1\":{\"235\":1,\"590\":1}}],[\"注意表达式应该以select作为整个表达式的终结方法\",{\"1\":{\"334\":1}}],[\"注意如果返回结果是对多的集合需要调用flatelement来展开结果\",{\"1\":{\"137\":1}}],[\"注意\",{\"0\":{\"422\":1,\"608\":1,\"670\":1},\"1\":{\"117\":1,\"301\":1,\"309\":1,\"492\":1,\"503\":1,\"558\":1,\"567\":1,\"575\":1,\"579\":1,\"740\":2}}],[\"注意自行构建的数据源如果datasource不是被spring接管的bean那么事务将不会生效\",{\"1\":{\"116\":1,\"493\":1}}],[\"注意点及说明\",{\"1\":{\"116\":1,\"311\":1,\"334\":1,\"335\":2,\"493\":1,\"503\":1,\"517\":1,\"518\":1,\"529\":1,\"533\":1,\"540\":1,\"631\":1,\"669\":1,\"731\":1}}],[\"注意顺序\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1}}],[\"首先创建自己的jdbctypehandler\",{\"1\":{\"300\":1}}],[\"首先我们通过设置begintime和endtime在初次使用topicshardingtime对象的时候确保可以计算出对应的数据库应有的db数量\",{\"1\":{\"797\":1}}],[\"首先我们来看下对象\",{\"1\":{\"797\":1}}],[\"首先我们定义一个表达式\",{\"1\":{\"714\":1}}],[\"首先我们定义一个user用户信息对象\",{\"1\":{\"152\":1}}],[\"首先我们实现objectsort接口的方法\",{\"1\":{\"620\":1}}],[\"首先我们引入fastjson2\",{\"1\":{\"309\":1,\"579\":1}}],[\"首先我们创建springboot项目或者maven项目\",{\"1\":{\"157\":1}}],[\"首先我们如果需要支持springboot的事务需要再easy\",{\"1\":{\"122\":1,\"498\":1}}],[\"首先如果您无法接受entityquery模式需要对象实现proxyentityavailable接口的也可以换成easyproxyquery来查询两者出了部分功能不太一样本质是一样的\",{\"1\":{\"101\":1}}],[\"用法\",{\"1\":{\"614\":1}}],[\"用在数据库对象和返回结果上面用于处理一对一\",{\"1\":{\"439\":1}}],[\"用于按需查询\",{\"1\":{\"729\":1}}],[\"用于设置列别名一般用户查询较多\",{\"1\":{\"668\":1}}],[\"用于关联\",{\"1\":{\"641\":2}}],[\"用于注册编译器插件\",{\"1\":{\"455\":2}}],[\"用于方法之上\",{\"1\":{\"445\":1}}],[\"用于分片聚合查询时一次性获取多个数据库connection但是因为连接池有限所以多个聚合线程间会等待防止死锁\",{\"1\":{\"407\":1}}],[\"用于防止获取链接死锁程序假死\",{\"1\":{\"407\":1}}],[\"用于描述数据库对象的聚合列\",{\"1\":{\"311\":1}}],[\"用于对lambda列进行长度查询\",{\"1\":{\"601\":1}}],[\"用于对lambda列进行平均值值查询\",{\"1\":{\"601\":1}}],[\"用于对lambda列进行最小值查询\",{\"1\":{\"601\":1}}],[\"用于对lambda列进行最大值查询\",{\"1\":{\"601\":1}}],[\"用于对lambda列进行求和\",{\"1\":{\"601\":2}}],[\"用于对拦截器进行顺序排序执行\",{\"1\":{\"257\":1}}],[\"用于对象插入前和修改前进行对象拦截\",{\"1\":{\"256\":1}}],[\"用于做java对象字段到数据库列的函数处理比如\",{\"1\":{\"230\":1,\"585\":1}}],[\"用于做数据库列到java对象字段的函数处理比如\",{\"1\":{\"230\":1,\"585\":1}}],[\"用来放置流式拉取一次性拉取过多数据用户可以自行设置\",{\"1\":{\"741\":1,\"743\":1}}],[\"用来实现vo查询需要实现的列处理\",{\"1\":{\"713\":2}}],[\"用来返回处理迭代结果\",{\"1\":{\"743\":1}}],[\"用来返回片段类型用于select\",{\"1\":{\"663\":1}}],[\"用来返回一个主键\",{\"1\":{\"198\":1}}],[\"用来描述数据库存储的字符串或者数字类型\",{\"1\":{\"554\":1}}],[\"用来描述数据库存储的字符串或者json类型\",{\"1\":{\"554\":2}}],[\"用来描述当前列是否是大列\",{\"1\":{\"426\":1}}],[\"用来防止生成的apt属性和系统自带的重复\",{\"1\":{\"448\":1}}],[\"用来标识当前对象的数据库分表额外键是哪个\",{\"1\":{\"443\":1}}],[\"用来标识当前对象的数据库分表键是哪个\",{\"1\":{\"442\":1}}],[\"用来标识当前对象的数据库分库键是哪个\",{\"1\":{\"440\":1}}],[\"用来标识当前对象是数据库分库额外分库键是哪个\",{\"1\":{\"441\":1}}],[\"用来表示是否需要支持like搜索\",{\"1\":{\"438\":1}}],[\"用来表明一个用户有一个地址\",{\"1\":{\"152\":1}}],[\"用来处理如何加密解密数据策略\",{\"1\":{\"437\":1}}],[\"用来连接前后执行的追踪id\",{\"1\":{\"269\":1}}],[\"用来监听监听后的参数信息\",{\"1\":{\"268\":1,\"269\":2,\"270\":1}}],[\"用来记录监听前的参数信息\",{\"1\":{\"268\":1,\"269\":1}}],[\"用来包装数据库片段\",{\"1\":{\"227\":1}}],[\"用来获取针对那个属性进行方法处理\",{\"1\":{\"226\":1}}],[\"用来获取具体的列方法\",{\"1\":{\"226\":1}}],[\"用来对对象进行设置主键\",{\"1\":{\"198\":1}}],[\"用来生成代理对象\",{\"1\":{\"121\":1,\"497\":1}}],[\"用户也可以自定义实现接口\",{\"1\":{\"631\":1}}],[\"用户也可以自行构建其他数据库或者其他数据源的easy\",{\"1\":{\"493\":1}}],[\"用户可以自行实现分页\",{\"1\":{\"688\":1}}],[\"用户可以自行定义分页结果\",{\"1\":{\"684\":1}}],[\"用户可以自定义\",{\"1\":{\"631\":1}}],[\"用户可以替换掉框架内部的所有接口\",{\"1\":{\"544\":1}}],[\"用户可以通过重写assertexceptionfactory来实现抛出的异常是用户自定义的\",{\"1\":{\"510\":1}}],[\"用户表\",{\"1\":{\"506\":1}}],[\"用户类型\",{\"1\":{\"506\":1}}],[\"用户输入的表达式将会和执行的一致\",{\"1\":{\"468\":1}}],[\"用户还是一样使用deletable方法来调用执行\",{\"1\":{\"468\":1}}],[\"用户需要返回16位的向量和秘钥\",{\"1\":{\"437\":1}}],[\"用户自定义\",{\"1\":{\"430\":1}}],[\"用户自定义实现logicdeletestrategy或者\",{\"1\":{\"279\":1}}],[\"用户在更新update表达式的时候可以通过当前拦截器自动追加set列操作\",{\"1\":{\"256\":1}}],[\"用户在查询\",{\"1\":{\"256\":1}}],[\"用户只能看和操作自己的数据\",{\"1\":{\"256\":1}}],[\"用户权限比如领导可以看看和操作本部门和下属部门\",{\"1\":{\"256\":1}}],[\"用户\",{\"1\":{\"142\":1}}],[\"用户角色菜单信息表的展示\",{\"1\":{\"141\":1}}],[\"用户里面有两个书本导航属性\",{\"1\":{\"140\":1}}],[\"用户和书本关系为一对多表名一个用户拥有多本书籍\",{\"1\":{\"152\":1}}],[\"用户和书本的关系\",{\"1\":{\"140\":1}}],[\"用户和菜单之间隔着角色的多对多所以如果想要获取用户的菜单id直接可以通过这种方式快速筛选\",{\"1\":{\"112\":1}}],[\"用户dto\",{\"0\":{\"110\":1}}],[\"下一篇\",{\"1\":{\"819\":1}}],[\"下的select\",{\"1\":{\"729\":1}}],[\"下载\",{\"0\":{\"539\":1}}],[\"下载源码后\",{\"1\":{\"390\":1}}],[\"下载地址\",{\"1\":{\"118\":1,\"494\":1}}],[\"下面这种方式也可以\",{\"1\":{\"812\":1}}],[\"下面仅展示控制台程序下使用的依赖\",{\"1\":{\"453\":1}}],[\"下面所有方法包括where\",{\"1\":{\"334\":1}}],[\"下面是平替写法其实是一样的\",{\"1\":{\"185\":1}}],[\"下面的写法也可以\",{\"1\":{\"694\":1,\"696\":1}}],[\"下面的写法也可以也可以用多个where来支持\",{\"1\":{\"694\":1,\"696\":1}}],[\"下面的是手动指定返回结果\",{\"1\":{\"40\":1}}],[\"下面的和上面的一致\",{\"1\":{\"40\":1}}],[\"下面我们分别以两种注解模式来说明如何开发\",{\"1\":{\"29\":1}}],[\"创建自定义接口\",{\"0\":{\"803\":1}}],[\"创建自定义注解\",{\"0\":{\"802\":1}}],[\"创建表\",{\"0\":{\"791\":1}}],[\"创建数据库\",{\"0\":{\"779\":1,\"785\":1}}],[\"创建子查询的count然后和0常量进行比较\",{\"1\":{\"738\":1}}],[\"创建dto额外多一个num字段\",{\"1\":{\"734\":1}}],[\"创建配置\",{\"0\":{\"523\":1}}],[\"创建对象\",{\"0\":{\"507\":1}}],[\"创建匿名表\",{\"0\":{\"405\":1}}],[\"创建代理模式api查询\",{\"1\":{\"397\":1}}],[\"创建三个不同的数据库\",{\"1\":{\"384\":1}}],[\"创建easyquery配置项的时候可以通过构造函数开启允许删除\",{\"1\":{\"354\":1}}],[\"创建一个匿名表的表达式\",{\"1\":{\"647\":1}}],[\"创建一个自定义监听器监听耗时3秒以上的sql\",{\"1\":{\"271\":1}}],[\"创建一个mysql的属性方法包装\",{\"1\":{\"227\":1}}],[\"创建一个mysql的方言提供者\",{\"1\":{\"223\":1}}],[\"创建人\",{\"1\":{\"260\":1,\"429\":1,\"809\":2}}],[\"创建时间和创建人和修改时间修改人已经添加的情况下我们还需要对删除时间删除人进行处理\",{\"1\":{\"809\":1}}],[\"创建时间字段不需要update时更新\",{\"1\":{\"429\":1,\"430\":1}}],[\"创建时间\",{\"1\":{\"260\":1,\"354\":1,\"358\":1,\"412\":1,\"592\":1,\"756\":1,\"809\":2}}],[\"创建user代理\",{\"1\":{\"185\":3}}],[\"创建group\",{\"1\":{\"185\":3}}],[\"创建springboot应用\",{\"0\":{\"118\":1,\"494\":1}}],[\"创建完拦截器后需要配置到queryconfiguration\",{\"1\":{\"116\":1,\"257\":1,\"493\":1}}],[\"有参数\",{\"0\":{\"662\":1}}],[\"有参数map返回\",{\"0\":{\"659\":1,\"754\":1}}],[\"有参数强类型返回\",{\"0\":{\"656\":1,\"751\":1}}],[\"有时候我们的case\",{\"1\":{\"616\":1}}],[\"有时候你可能需要这个方法那么可以在springboot中通过begintransaction来开启事务\",{\"1\":{\"411\":1}}],[\"有洁癖的用户多一个选择\",{\"1\":{\"596\":1}}],[\"有利于了解如何进行优化\",{\"1\":{\"467\":1}}],[\"有注解\",{\"1\":{\"411\":1}}],[\"有可能因为每个人的电脑性能不同\",{\"1\":{\"384\":1}}],[\"有些用户喜欢数据库对象是和数据库列类型一一对应的\",{\"1\":{\"307\":1,\"573\":1}}],[\"有些用户喜欢拥有非常强的强迫症\",{\"1\":{\"117\":1,\"493\":1}}],[\"有值就添加到条件\",{\"1\":{\"100\":1,\"107\":1}}],[\"强制物理删除\",{\"0\":{\"357\":1}}],[\"强力推荐🔥🔥🔥\",{\"1\":{\"115\":2,\"157\":2,\"490\":1}}],[\"强类型结果返回\",{\"1\":{\"654\":1,\"749\":1}}],[\"强类型实现类\",{\"1\":{\"223\":1}}],[\"强类型表达式可以选择这种模式\",{\"1\":{\"223\":1}}],[\"强类型api\",{\"1\":{\"115\":2,\"157\":2,\"460\":2,\"466\":2}}],[\"强类型的java对象查询orm框架支持分库分表读写分离\",{\"1\":{\"94\":1}}],[\"强类型纠错\",{\"1\":{\"18\":1}}],[\"但受影响的行数为未知\",{\"1\":{\"206\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"849\":1}}],[\"但是默认会把后面的覆盖掉前面的\",{\"1\":{\"735\":1}}],[\"但是必须存在于返回结果中\",{\"1\":{\"713\":1}}],[\"但是需要满足返回对象必须包含navigate映射的属性\",{\"1\":{\"713\":1}}],[\"但是我查询学生的时候只希望联级查询班级的id\",{\"1\":{\"713\":1}}],[\"但是返回结果必须是数据库对象实例\",{\"1\":{\"697\":1}}],[\"但是这样后续操作只可以操作单表没办法操作其他join表了\",{\"1\":{\"649\":1}}],[\"但是这边也是提供了默认的希望大家可以pr相关思路算法等\",{\"1\":{\"220\":1}}],[\"但是后续会将这一部分全部简化掉让用户无感\",{\"1\":{\"624\":1}}],[\"但是提供了非常完善的替换框架内部行为的方式\",{\"1\":{\"544\":1}}],[\"但是有些功能可以通过其他框架来实现\",{\"1\":{\"503\":1}}],[\"但是不可以比连接池大\",{\"1\":{\"469\":1}}],[\"但是追踪更新只会涉及到1\",{\"1\":{\"417\":1}}],[\"但是在jdbc到bean对象的转换是相对低效的\",{\"1\":{\"387\":1}}],[\"但是完全一样的数据结构\",{\"1\":{\"384\":1}}],[\"但是还希望用枚举转换的或者其他属性转换的\",{\"1\":{\"301\":1,\"558\":1,\"567\":1,\"575\":1}}],[\"但是因为第二个参数是直接获取值会导致phone\",{\"1\":{\"773\":1}}],[\"但是因为blogentitytest2\",{\"1\":{\"718\":1}}],[\"但是因为参数的复杂程度可能导致sql拼接不正确\",{\"1\":{\"540\":1}}],[\"但是因为存入数据库也会触发jdbclistener所以eq贴心的给用户添加了忽略jdbclistener的功能\",{\"1\":{\"272\":1}}],[\"但是因为拦截器得原因easy\",{\"1\":{\"262\":1}}],[\"但是大部分时候这个年龄属性应该是动态计算的而不是实时计算的\",{\"1\":{\"236\":1,\"564\":1}}],[\"但是driver的行为是与特定的dbms绑定的\",{\"1\":{\"206\":1}}],[\"但是会导致返回结果不正确\",{\"1\":{\"205\":1}}],[\"但是对象查询并不是万能的\",{\"1\":{\"177\":1}}],[\"但是如果您需要在后续继续操作比如join其他表那么select需要返回对应的proxy或者使用maptypeproxy\",{\"1\":{\"731\":1}}],[\"但是如果大写字母就一个则采用类名小写模式\",{\"1\":{\"530\":1}}],[\"但是如果default\",{\"1\":{\"417\":1}}],[\"但是如果你是有租户的或者你是需要对当前请求查询条件进行额外条件过滤添加的\",{\"1\":{\"262\":1}}],[\"但是如果是表达式更新那么还是原先的操作并不会更新\",{\"1\":{\"260\":1}}],[\"但是如果一个orm只有对象关系查询那么这个orm也不是一个好的orm\",{\"1\":{\"127\":1}}],[\"但是如果不添加\",{\"1\":{\"115\":1,\"157\":1}}],[\"但是easy\",{\"1\":{\"122\":1,\"498\":1}}],[\"但一群人会走的更远\",{\"1\":{\"1\":1}}],[\"需要支持对象插入的时候可以进行创建人和创建时间的自动赋值\",{\"1\":{\"809\":1}}],[\"需要设置autocommit为false\",{\"1\":{\"740\":1}}],[\"需要查询主题id和标题包含的结果\",{\"1\":{\"673\":1}}],[\"需要通过group\",{\"1\":{\"642\":1}}],[\"需要排序的字段\",{\"1\":{\"621\":1}}],[\"需要排序的属性集合\",{\"1\":{\"621\":1}}],[\"需要排序的属性\",{\"1\":{\"620\":1}}],[\"需要统计返回id+count+sum之类的结果用于中间业务处理\",{\"1\":{\"604\":1}}],[\"需要开启追踪后才有效\",{\"1\":{\"601\":1}}],[\"需要开启允许或者使用delete语句的时候允许\",{\"1\":{\"354\":1}}],[\"需要springel自行实现\",{\"1\":{\"526\":1}}],[\"需要框架默认有日志以\",{\"1\":{\"465\":1,\"470\":1}}],[\"需要将lambda转成属性\",{\"1\":{\"450\":1}}],[\"需要额外通过代理对象找引用\",{\"1\":{\"450\":1}}],[\"需要忽略的属性\",{\"1\":{\"425\":1}}],[\"需要添加依赖asm的\",{\"1\":{\"313\":1}}],[\"需要更新前手动调用easyquery\",{\"1\":{\"252\":3}}],[\"需要和begin\",{\"1\":{\"245\":1}}],[\"需要和release\",{\"1\":{\"245\":1}}],[\"需要加密算法支持模糊查询\",{\"1\":{\"212\":1}}],[\"需要自行实现\",{\"1\":{\"194\":1}}],[\"需要配合java8的try\",{\"1\":{\"740\":1}}],[\"需要配合track更新\",{\"1\":{\"193\":1}}],[\"需要配置log信息才可以\",{\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"需要引入sql\",{\"1\":{\"34\":3}}],[\"配置shardinginitializer和添加路由即可\",{\"1\":{\"798\":1}}],[\"配置路由\",{\"0\":{\"798\":1}}],[\"配置对象\",{\"0\":{\"797\":1}}],[\"配置动态排序\",{\"1\":{\"618\":1}}],[\"配置bean\",{\"0\":{\"505\":1}}],[\"配置和springboot的配置一样\",{\"1\":{\"493\":1}}],[\"配置影响到所有的数据源\",{\"0\":{\"487\":1}}],[\"配置额外插件\",{\"1\":{\"486\":1}}],[\"配置了print\",{\"1\":{\"483\":1}}],[\"配置自定义日志\",{\"1\":{\"483\":1}}],[\"配置自动插入时的值\",{\"1\":{\"260\":1}}],[\"配置参数选项\",{\"0\":{\"467\":1},\"1\":{\"423\":1}}],[\"配置kotlin\",{\"1\":{\"423\":1}}],[\"配置java\",{\"1\":{\"423\":1}}],[\"配置\",{\"0\":{\"349\":1,\"823\":1}}],[\"配置表达式where条件\",{\"1\":{\"264\":1}}],[\"配置表达式更新set列自动填充\",{\"1\":{\"262\":1}}],[\"配置更新是需要修改的值\",{\"1\":{\"260\":1}}],[\"配置名称\",{\"1\":{\"204\":1,\"468\":1,\"469\":1}}],[\"配置application\",{\"1\":{\"157\":1}}],[\"配置为默认追踪\",{\"1\":{\"115\":1,\"157\":1}}],[\"配置文件easy\",{\"1\":{\"503\":1}}],[\"配置文件\",{\"0\":{\"780\":1,\"786\":1,\"792\":1},\"1\":{\"115\":1,\"157\":1,\"465\":1,\"490\":1}}],[\"配合插件非常好\",{\"1\":{\"450\":1}}],[\"配合插件能非常流畅\",{\"1\":{\"450\":1}}],[\"配合插件使用apt\",{\"1\":{\"28\":1}}],[\"配合easy\",{\"1\":{\"100\":1,\"107\":1}}],[\"配合sql\",{\"1\":{\"28\":1}}],[\"搜索com\",{\"1\":{\"114\":1,\"457\":1,\"462\":1,\"464\":1,\"475\":1,\"489\":1}}],[\"穿透获取用户下的roles下的menus下的id\",{\"1\":{\"112\":1}}],[\"穿透结构返回\",{\"0\":{\"112\":1},\"1\":{\"108\":1}}],[\"方便用户进行数据结果的分页查询\",{\"1\":{\"680\":1}}],[\"方便开发人员使用数据库特有的函数或者方言\",{\"1\":{\"100\":1,\"107\":1}}],[\"方面的对比\",{\"1\":{\"383\":1}}],[\"方法名\",{\"1\":{\"245\":1,\"246\":1,\"247\":1,\"322\":1}}],[\"方法将返回\",{\"1\":{\"206\":1}}],[\"方法\",{\"1\":{\"198\":1,\"211\":1,\"219\":1,\"226\":1,\"227\":1,\"229\":1,\"230\":1,\"257\":1,\"260\":1,\"262\":1,\"264\":1,\"268\":1,\"269\":1,\"270\":1,\"275\":1,\"288\":1,\"289\":1,\"290\":1,\"294\":1,\"298\":1,\"299\":1,\"302\":1,\"348\":1,\"399\":4,\"407\":1,\"410\":1,\"559\":1,\"568\":1,\"576\":1,\"584\":1,\"585\":1,\"601\":1,\"614\":1,\"618\":1,\"619\":1,\"625\":1,\"663\":1,\"668\":1,\"685\":1,\"713\":1,\"729\":1,\"771\":1}}],[\"方式3展开查询\",{\"1\":{\"149\":1}}],[\"方式三返回用户dto和用户拥有的菜单id集合和角色id集合\",{\"1\":{\"112\":1}}],[\"方式2一次次查询\",{\"1\":{\"149\":1}}],[\"方式2和方式3生成的sql一样都是隐式子查询\",{\"1\":{\"149\":1}}],[\"方式2适合多对多情况下比如查询小明所拥有的菜单\",{\"1\":{\"137\":1}}],[\"方式2\",{\"1\":{\"112\":1}}],[\"方式1多次查询\",{\"1\":{\"149\":1}}],[\"方式1采用的是多次查询筛选用户获取用户下的菜单信息\",{\"1\":{\"149\":1}}],[\"方式1\",{\"1\":{\"112\":1}}],[\"主题包含了一个自定义徽章可以使用\",{\"1\":{\"849\":1}}],[\"主题扩展了更多\",{\"1\":{\"826\":1}}],[\"主题扩展\",{\"0\":{\"826\":1}}],[\"主题表\",{\"1\":{\"354\":1,\"358\":1,\"412\":1,\"756\":1}}],[\"主键雪花id自定义主键\",{\"1\":{\"810\":1}}],[\"主键\",{\"1\":{\"556\":1,\"557\":1,\"601\":1,\"705\":1}}],[\"主键id\",{\"1\":{\"311\":1,\"354\":1,\"358\":1,\"412\":1,\"756\":1}}],[\"主要从\",{\"1\":{\"821\":1}}],[\"主要功能与配置演示\",{\"0\":{\"817\":1}}],[\"主要是针对配置外的方法\",{\"1\":{\"640\":1}}],[\"主要是针对当前数据的库存或者金额等数据进行原子更新\",{\"1\":{\"193\":1}}],[\"主要是影响分片后的聚合模式\",{\"1\":{\"469\":1}}],[\"主要原因是\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"主表查询全字段忽略title和createtime\",{\"1\":{\"185\":1}}],[\"主表添加topic\",{\"1\":{\"111\":1}}],[\"映射到bloggroupidandname类的idcount字段\",{\"1\":{\"642\":1}}],[\"映射到bloggroupidandname类的id字段\",{\"1\":{\"642\":1}}],[\"映射到java的枚举属性\",{\"1\":{\"554\":1}}],[\"映射到java的集合上\",{\"1\":{\"554\":1}}],[\"映射到java的对象上\",{\"1\":{\"554\":1}}],[\"映射到vo返回设置为查询id\",{\"1\":{\"185\":2}}],[\"映射到vo\",{\"1\":{\"185\":2}}],[\"映射\",{\"1\":{\"111\":2}}],[\"可用插件生成则可以使用easyentityquery\",{\"1\":{\"517\":1}}],[\"可与宇宙最强orm\",{\"1\":{\"450\":1}}],[\"可维护性\",{\"1\":{\"450\":1}}],[\"可选\",{\"0\":{\"162\":1},\"1\":{\"395\":1}}],[\"可能会有小伙伴认为这种做法太复杂了有没有建议的方法\",{\"1\":{\"417\":1}}],[\"可能会造成内存泄露\",{\"1\":{\"334\":1}}],[\"可能是springboot版本太低导致没有的依赖不是以空map返回而是报错\",{\"1\":{\"117\":1,\"493\":1}}],[\"可能有些用户希望自己一个一个进行赋值那么我们可以这么处理\",{\"1\":{\"110\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"821\":1}}],[\"可以将相识度高的先进行全列查询\",{\"1\":{\"731\":1}}],[\"可以调用keepstyle方法或者全局配置keep\",{\"1\":{\"670\":1}}],[\"可以加多个并且支持\",{\"1\":{\"669\":1}}],[\"可以和propnames长度不一样\",{\"1\":{\"632\":1}}],[\"可以快速实现基于dto的条件查询\",{\"1\":{\"628\":1}}],[\"可以快速的编写crud代码和复杂代码\",{\"1\":{\"99\":1,\"106\":1}}],[\"可以帮助不想写sql的用户\",{\"1\":{\"596\":1}}],[\"可以帮你摆脱很多无意义的操作\",{\"1\":{\"188\":1}}],[\"可以被替换的接口\",{\"0\":{\"545\":1}}],[\"可以在运行时修改\",{\"1\":{\"425\":1}}],[\"可以再查询时自定义关联属性\",{\"1\":{\"640\":1}}],[\"可以再属性上定义别名\",{\"1\":{\"448\":1}}],[\"可以再运行时修改\",{\"1\":{\"425\":1}}],[\"可以再easy\",{\"1\":{\"139\":1}}],[\"可以返回数据库执行修改后的受影响行数\",{\"1\":{\"412\":1}}],[\"可以返回数据库执行插入后的受影响行数\",{\"1\":{\"358\":1}}],[\"可以到\",{\"1\":{\"390\":1}}],[\"可以采用逻辑删除来处理数据的删除\",{\"1\":{\"353\":1}}],[\"可以保证在高并发下数据一致性更新的问题\",{\"1\":{\"318\":1}}],[\"可以禁用当前表达式的逻辑删除\",{\"1\":{\"280\":1}}],[\"可以用来记录慢sql\",{\"1\":{\"267\":1}}],[\"可以新建一个表达式拦截器predicatefilterinterceptor\",{\"1\":{\"266\":1}}],[\"可以做到表结构完美隔离租户之间的数据\",{\"1\":{\"265\":1}}],[\"可以动态生成updatesql语句\",{\"1\":{\"247\":1}}],[\"可以实现任意复杂条件构建\",{\"1\":{\"628\":1}}],[\"可以实现列表title的排序并且支持多级排序\",{\"1\":{\"617\":1}}],[\"可以实现数据库对象属性枚举转换的功能或者对象string转json对象的功能\",{\"1\":{\"301\":1,\"558\":1,\"567\":1,\"575\":1}}],[\"可以实现高性能的加密列like\",{\"1\":{\"235\":1,\"590\":1}}],[\"可以实现功能复杂的数据库列加密\",{\"1\":{\"210\":1}}],[\"可以完美的实现java对象和数据库列的函数互相交换\",{\"1\":{\"228\":1,\"583\":1}}],[\"可以通过数据库查询或者其他方式来存储额外数据源\",{\"1\":{\"781\":1,\"787\":1}}],[\"可以通过全局配置keep\",{\"1\":{\"669\":1}}],[\"可以通过链式调用then\",{\"1\":{\"644\":1}}],[\"可以通过指定条件\",{\"1\":{\"632\":1}}],[\"可以通过api接口来实现物理删除\",{\"1\":{\"353\":1}}],[\"可以通过allowdeletestament来实现允许\",{\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"可以通过调用api接口querylargecolumn\",{\"1\":{\"350\":1}}],[\"可以通过调用insert或者update的batch方法来手动使用或者禁用\",{\"1\":{\"204\":2,\"468\":2}}],[\"可以通过noversionignore来忽略\",{\"1\":{\"325\":1,\"326\":1}}],[\"可以通过noversionerror或者noversionignore来配置\",{\"1\":{\"319\":1}}],[\"可以通过threadlocal来表示当前启用值\",{\"1\":{\"266\":1}}],[\"可以自行替换自定义注解来实现动态条件\",{\"1\":{\"444\":1}}],[\"可以自己重写\",{\"1\":{\"269\":1}}],[\"可以自己实现软删除或者使用系统默认定义的软删除\",{\"1\":{\"95\":1}}],[\"可以自定义实现\",{\"1\":{\"437\":1}}],[\"可以自定义枚举或者json等\",{\"1\":{\"426\":1}}],[\"可以自定义\",{\"1\":{\"193\":1}}],[\"可以提高用户体验\",{\"1\":{\"162\":1}}],[\"可以筛选如获取班级语文平均分不足\",{\"1\":{\"132\":1}}],[\"可以直接筛选出结构化dto\",{\"1\":{\"111\":1}}],[\"可以替换为腾讯云或者华为云的镜像源\",{\"1\":{\"15\":1}}],[\"当上述子查询有且只有一个条件比如age>18有且只有一个条件时\",{\"1\":{\"764\":1}}],[\"当使用join操作后\",{\"1\":{\"644\":1}}],[\"当使用系统默认的按时间分片时设置这个配置为true那么框架会在内存中添加对应的系统表\",{\"1\":{\"469\":1}}],[\"当关联结果为null是否也会调用produce\",{\"1\":{\"641\":1}}],[\"当query\",{\"1\":{\"631\":6}}],[\"当做属性用所以不需要别名\",{\"1\":{\"592\":1}}],[\"当查询用户时需要返回用户的证书数那么可以通过跨表计算属性来实现\",{\"1\":{\"556\":1}}],[\"当查询没有匹配到路由是否选择报错\",{\"1\":{\"469\":1}}],[\"当查询没有路由匹配的时候查询是否报错\",{\"1\":{\"407\":1}}],[\"当调用singlenotnull或者singleornull结果为大于1个时抛出的异常\",{\"1\":{\"510\":1}}],[\"当调用singlenotnull结果为null时抛出的异常\",{\"1\":{\"510\":1}}],[\"当调用firstnotnull结果为null时抛出的异常\",{\"1\":{\"510\":1}}],[\"当entity的schema为空时切defaultschema不为空时采用defaultschema\",{\"1\":{\"468\":1}}],[\"当jdbc的resultset对应的coluname无法映射到entity属性上时将会以log\",{\"1\":{\"468\":1}}],[\"当对象存在版本号并且是表达式更新的那么如果不添加版本号withversion将会报错\",{\"1\":{\"468\":1}}],[\"当逻辑删除为自定义逻辑删除时\",{\"1\":{\"430\":1}}],[\"当全局配置default\",{\"1\":{\"417\":1}}],[\"当获取链接时间大于multiconnwaittimeoutmillis\",{\"1\":{\"407\":1}}],[\"当小于maxshardingquerylimit后启动会抛出警告\",{\"1\":{\"407\":1}}],[\"当出现条件分片大于多少时报错默认128\",{\"1\":{\"407\":1,\"469\":1}}],[\"当出现跨分片聚合也就是通过表达式无法精确到具体路由或筛选后路由大于1那么会开启最多多少个线程为一组进行查询聚合\",{\"1\":{\"407\":1}}],[\"当且仅当对象是分片对象是用来初始化分片对象\",{\"1\":{\"425\":1}}],[\"当且仅当executormaximumpoolsize>0生效\",{\"1\":{\"407\":2}}],[\"当且仅当返回结果为自身时用于快速选择列\",{\"1\":{\"340\":1}}],[\"当值为0时分片聚合采用无界队列executors\",{\"1\":{\"407\":1}}],[\"当当前方法或者配置不允许删除命令的时候程序将会抛出对应的异常easyqueryinvalidoperationexception\",{\"1\":{\"356\":1}}],[\"当这个值被用作非查询的值的时候如何处理不出现在select里面\",{\"1\":{\"236\":1,\"564\":1}}],[\"当这个值被作为select的时候如何处理\",{\"1\":{\"236\":1,\"564\":1}}],[\"当然另外50个非分片会和分片进行竞争\",{\"1\":{\"780\":1,\"786\":1}}],[\"当然链接模式用户也可以自行指定\",{\"1\":{\"469\":1}}],[\"当然也可以在执行时手动更改执行策略为sqlexecutestrategyenum\",{\"1\":{\"468\":1}}],[\"当然也可以使用sysuserdto\",{\"1\":{\"110\":1}}],[\"当然全局设置了后面也可以在\",{\"1\":{\"468\":1}}],[\"当然您也可以选择更新策略为非null更新\",{\"1\":{\"429\":1}}],[\"当然您还可以随意扩展\",{\"1\":{\"227\":1}}],[\"当然可以在调用时调用keepstyle或者将单引号改为双单引号来处理\",{\"1\":{\"468\":1}}],[\"当然可以使用batch或者到了插入批处理阈值也是可以的\",{\"1\":{\"360\":1}}],[\"当然可以设置忽略更新\",{\"1\":{\"348\":1}}],[\"当然因为easy\",{\"1\":{\"350\":1}}],[\"当然这种情况只适合无需外部参数传入的情况下\",{\"1\":{\"271\":1}}],[\"当然你也可以单独创建一个拦截器\",{\"1\":{\"261\":1}}],[\"当然目前算法不一定是最优的空间也不一定是最有效的\",{\"1\":{\"220\":1}}],[\"当执行物理删除是否报错\",{\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"当前文件是scf4j自动生成的请不要随意修改\",{\"1\":{\"804\":1}}],[\"当前文件是easy\",{\"1\":{\"111\":2}}],[\"当前主表的属性\",{\"1\":{\"641\":1}}],[\"当前条件用于查询哪张表\",{\"1\":{\"632\":1}}],[\"当前查询会一次性获取5个链接这5个链接会通过defaultdatasourcemergepoolsize参数进行限制\",{\"1\":{\"469\":1}}],[\"当前查询条件不使用追踪查询\",{\"1\":{\"246\":1}}],[\"当前查询条件使用追踪需开启trackmanager\",{\"1\":{\"246\":1}}],[\"当前环境线程数且最小为\",{\"1\":{\"407\":1}}],[\"当前性能比较代码来自mybatis\",{\"1\":{\"383\":1}}],[\"当前对象的selfproperty属性对应中间表的哪个属性\",{\"1\":{\"704\":1}}],[\"当前对象的selfproperty属性关联目标的哪个属性\",{\"1\":{\"704\":1}}],[\"当前对象的哪个属性关联目标对象\",{\"1\":{\"704\":1}}],[\"当前对象如果支持软删除那么在生成对应命令的时候会生成update语句来实现软删除\",{\"1\":{\"356\":1}}],[\"当前对象必须是数据库对象\",{\"1\":{\"199\":1}}],[\"当前版本信息和对应的属性和对象信息\",{\"1\":{\"322\":1}}],[\"当前utc时间\",{\"1\":{\"290\":1,\"294\":1}}],[\"当前天数在一年中代表第几天\",{\"1\":{\"290\":2}}],[\"当前线程是否开启了追踪\",{\"1\":{\"245\":1}}],[\"当前上下文开启追踪\",{\"1\":{\"245\":2}}],[\"当前这个值作为存储值的时候比如insert\",{\"1\":{\"236\":1,\"564\":1}}],[\"当前值作为比较值的时候比如where\",{\"1\":{\"236\":1,\"564\":1}}],[\"当前值是用于比较还是存储\",{\"1\":{\"230\":1,\"236\":1,\"564\":1,\"585\":1}}],[\"当前列被当做片段时如何使用\",{\"1\":{\"230\":1,\"585\":1}}],[\"当前属性映射到哪两个属性列\",{\"1\":{\"632\":1}}],[\"当前属性映射到数据库对象的属性名称\",{\"1\":{\"632\":1}}],[\"当前属性和数据库对象属性以哪种表达式构建条件\",{\"1\":{\"632\":1}}],[\"当前属性添加\",{\"1\":{\"199\":1}}],[\"当前属性不可以是生成列\",{\"1\":{\"199\":1}}],[\"当前属性必须是主键\",{\"1\":{\"199\":1}}],[\"当前没开事务\",{\"1\":{\"122\":1,\"498\":1}}],[\"当前时间\",{\"1\":{\"100\":1,\"107\":1,\"290\":1,\"294\":1}}],[\"额外搜索\",{\"0\":{\"810\":1}}],[\"额外配置\",{\"0\":{\"176\":1,\"484\":1}}],[\"额外过滤条件支持比如\",{\"1\":{\"140\":1}}],[\"额外将用户地址映射到myaddress中\",{\"1\":{\"110\":1}}],[\"额外计算列比如年龄是动态的而不是固定的\",{\"1\":{\"100\":1,\"107\":1}}],[\"将订单状态为2的数据改为3\",{\"1\":{\"794\":1}}],[\"将订单表按5取模进行分表分为t\",{\"1\":{\"791\":1}}],[\"将订单表按5取模进行分库分为ds0\",{\"1\":{\"785\":1}}],[\"将学生表信息查询额外查询出班级表\",{\"1\":{\"713\":1}}],[\"将以普通字符串拼接的形式拼接上去\",{\"1\":{\"668\":2}}],[\"将以参数形式\",{\"1\":{\"668\":1}}],[\"将当前表达式最近的一张表的表名修改成tablenameas返回的表名\",{\"1\":{\"625\":1}}],[\"将当前表达式最近的一张表的表名修改成tablename\",{\"1\":{\"625\":1}}],[\"将对象类型转成lambda入参短名称\",{\"1\":{\"530\":1}}],[\"将下面的代码插入到plugins下的plugin下的executions\",{\"1\":{\"514\":1}}],[\"将不会生成sql因为只有一个主键没有其他任何需要update的列\",{\"1\":{\"352\":1}}],[\"将会报错\",{\"1\":{\"325\":1,\"326\":1}}],[\"将实体对象转成数据库值\",{\"1\":{\"302\":1,\"559\":1,\"568\":1,\"576\":1}}],[\"将数据库的值转成对象值\",{\"1\":{\"302\":1,\"559\":1,\"568\":1,\"576\":1}}],[\"将数据库和对象值进行互相转换的接口\",{\"1\":{\"302\":1,\"559\":1,\"576\":1}}],[\"将数据进行base64解码\",{\"1\":{\"229\":1,\"584\":1}}],[\"将数据进行aes加密\",{\"1\":{\"229\":1,\"584\":1}}],[\"将now值获取后那么这个now就是个固定值而不是动态值\",{\"1\":{\"284\":1,\"485\":1}}],[\"将抛出错误\",{\"1\":{\"247\":1}}],[\"将s表的所有字段哦度映射到sysuserdto中\",{\"1\":{\"110\":1}}],[\"将ide\",{\"1\":{\"14\":1}}],[\"来解析\",{\"1\":{\"824\":1}}],[\"来执行sql用于join\",{\"1\":{\"663\":1}}],[\"来获取表达式其中expression\",{\"1\":{\"663\":1}}],[\"来进行切换\",{\"1\":{\"644\":1}}],[\"来指定当前属性对应的join的哪张表\",{\"1\":{\"635\":1}}],[\"来恢复到所有参数都接受\",{\"1\":{\"631\":1}}],[\"来修正当然也可以用o\",{\"1\":{\"608\":1}}],[\"来确定\",{\"1\":{\"608\":1}}],[\"来区分\",{\"1\":{\"487\":1}}],[\"来代替\",{\"1\":{\"335\":1}}],[\"来显式使用\",{\"1\":{\"257\":1}}],[\"来实现\",{\"1\":{\"252\":3}}],[\"来实现本次功能\",{\"1\":{\"215\":1}}],[\"来自网上的说法\",{\"1\":{\"206\":1}}],[\"来自sysuseraddress\",{\"1\":{\"110\":2}}],[\"来创建创建后两者是一样的\",{\"1\":{\"101\":1}}],[\"我在右对齐\",{\"1\":{\"830\":1}}],[\"我是居中的\",{\"1\":{\"830\":1}}],[\"我是title\",{\"1\":{\"673\":10}}],[\"我希望easy\",{\"1\":{\"814\":1}}],[\"我的请求体\",{\"1\":{\"526\":1}}],[\"我们支持\",{\"1\":{\"856\":1,\"860\":1}}],[\"我们自定义实现类\",{\"1\":{\"814\":1}}],[\"我们在用户表的实体上添加断言信息下面代码可以改成\",{\"1\":{\"813\":1}}],[\"我们在resources下新建meta\",{\"1\":{\"805\":1}}],[\"我们在repo\",{\"1\":{\"804\":1}}],[\"我们在原先的拦截器上再次实现updatesetinterceptor让原先的拦截器支持表达式set\",{\"1\":{\"261\":1}}],[\"我们这边最终需要实现的接口是这样的\",{\"1\":{\"803\":1}}],[\"我们以订单表为例来实现订单的简单取模分表\",{\"1\":{\"791\":1}}],[\"我们以订单表为例来实现订单的简单取模分库\",{\"1\":{\"785\":1}}],[\"我们以这个简单的例子为例可以看到我们应该编写的顺序是select在最后\",{\"1\":{\"335\":1}}],[\"我们设置了最大连接数100\",{\"1\":{\"780\":1,\"786\":1,\"792\":1}}],[\"我们还是以订单表作为分库分表的对象\",{\"1\":{\"779\":1}}],[\"我们可以使用easy\",{\"1\":{\"714\":1}}],[\"我们可能会有这样的需求这边需要查询出几百上万条数据\",{\"1\":{\"417\":1}}],[\"我们都知道easy\",{\"1\":{\"528\":1}}],[\"我们的主要操作处理都是通过该接口实现的\",{\"1\":{\"161\":1}}],[\"我们依然使用用户角色菜单和用户地址来描述下列接口\",{\"1\":{\"108\":1}}],[\"我会给您编译一个社区版本支持的插件\",{\"1\":{\"153\":1}}],[\"我相信你应该已经把项目跑起来了\",{\"1\":{\"153\":1}}],[\"我能查看我下面的所有组\",{\"1\":{\"100\":1,\"107\":1}}],[\"本页面就是一个示例\",{\"1\":{\"819\":1}}],[\"本质和easyproxyquery一样\",{\"1\":{\"517\":1}}],[\"本质就是如下写法\",{\"1\":{\"335\":1}}],[\"本章节主要是为后续开发设计好前期的对象设计和基本配置\",{\"1\":{\"808\":1}}],[\"本章节主要是将一些复杂sql的编写方式用表达式展现出来\",{\"1\":{\"736\":1}}],[\"本章节源码\",{\"1\":{\"522\":1}}],[\"本章节针对springboot进行如何多数据源\",{\"1\":{\"522\":1}}],[\"本章节就提供了一个解决方案\",{\"1\":{\"503\":1}}],[\"本章节是为了方便没有经验的用户进行快速预览使用和场景说明\",{\"1\":{\"398\":1}}],[\"本章节我们实现分库分表的分表功能\",{\"1\":{\"796\":1}}],[\"本章节我们提供easy\",{\"1\":{\"333\":1,\"423\":1}}],[\"本章节我们将展示easy\",{\"1\":{\"108\":1}}],[\"本文只阐述了\",{\"1\":{\"383\":1}}],[\"本文为csdn博主\",{\"1\":{\"206\":1}}],[\"本次查询使用追踪\",{\"1\":{\"601\":1}}],[\"本次查询使用拦截器\",{\"1\":{\"601\":1}}],[\"本次查询不使用追踪\",{\"1\":{\"601\":1}}],[\"本次查询不使用拦截器\",{\"1\":{\"601\":1}}],[\"本次查询不启用逻辑删除\",{\"1\":{\"601\":1}}],[\"本次查询启用逻辑删除\",{\"1\":{\"601\":1}}],[\"本次查询需要2个链接聚合有两个线程\",{\"1\":{\"407\":1}}],[\"本次查询10000条的情况下可以看到easy\",{\"1\":{\"387\":1}}],[\"本次查询10条的情况下可以看到easy\",{\"1\":{\"386\":1}}],[\"本次结果可以得出mybatis\",{\"1\":{\"387\":1}}],[\"本次采用\",{\"1\":{\"216\":1}}],[\"本次我们采用easyentityquery来实现优雅的crud\",{\"1\":{\"28\":1}}],[\"插入列策略\",{\"1\":{\"483\":1}}],[\"插入成功返回1\",{\"1\":{\"366\":1}}],[\"插入时如果主键或者唯一索引存在就忽略插入\",{\"1\":{\"365\":1}}],[\"插入sql\",{\"1\":{\"359\":1}}],[\"插入数据移除jdbc\",{\"1\":{\"272\":1}}],[\"插入数据测试\",{\"0\":{\"214\":1}}],[\"插入的时候确定了自动填充\",{\"1\":{\"260\":1}}],[\"插入语句采用手机号加密\",{\"1\":{\"232\":1,\"587\":1}}],[\"插入\",{\"0\":{\"103\":1,\"238\":1,\"566\":1},\"1\":{\"323\":1,\"327\":1}}],[\"插件来实现\",{\"1\":{\"824\":1}}],[\"插件功能介绍\",{\"0\":{\"540\":1}}],[\"插件版本\",{\"1\":{\"535\":1}}],[\"插件助手\",{\"0\":{\"534\":1}}],[\"插件可以解决\",{\"1\":{\"450\":1}}],[\"插件可以有效的提升用户体验\",{\"1\":{\"13\":1}}],[\"插件的功能并非这些我们将会在后续的章节对插件的使用进行详细介绍目前您只需要知道这两点就可以解决掉上述的apt缺点和您的疑虑\",{\"1\":{\"155\":1}}],[\"插件的安装可以帮助我们针对自动生成的文件进行快速管理无感\",{\"1\":{\"29\":1,\"154\":1}}],[\"插件安装\",{\"0\":{\"29\":1}}],[\"出生日期\",{\"1\":{\"100\":1,\"107\":1}}],[\"不基于baseentity的其他模式https\",{\"1\":{\"809\":1}}],[\"不存在\",{\"1\":{\"771\":1}}],[\"不在集合内部\",{\"1\":{\"771\":1}}],[\"不匹配右侧\",{\"1\":{\"771\":1}}],[\"不匹配左侧\",{\"1\":{\"771\":1}}],[\"不等于\",{\"1\":{\"771\":1}}],[\"不同于sharding\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"不同表union\",{\"0\":{\"760\":1}}],[\"不同的是solon通过监听订阅事件注入即可\",{\"1\":{\"274\":1}}],[\"不为null\",{\"1\":{\"635\":6,\"771\":1}}],[\"不为null且不为空\",{\"1\":{\"635\":3}}],[\"不为null添加左闭区间\",{\"1\":{\"631\":2}}],[\"不一样的代表0主表\",{\"1\":{\"632\":1}}],[\"不一致需要手动映射为一致\",{\"1\":{\"628\":1}}],[\"不生效\",{\"1\":{\"631\":1}}],[\"不允许排序的属性\",{\"1\":{\"619\":1}}],[\"不允许排序属性\",{\"1\":{\"619\":1}}],[\"不使用指定name的拦截器\",{\"1\":{\"601\":1}}],[\"不包括手写sql的情况\",{\"1\":{\"483\":1}}],[\"不要问为什么不默认batch因为batch部分jdbc驱动或者数据库不会返回正确的受影响行数\",{\"1\":{\"468\":2}}],[\"不会判断是否为null\",{\"1\":{\"468\":1}}],[\"不会有任何冲突\",{\"1\":{\"100\":1,\"107\":1}}],[\"不用构建\",{\"1\":{\"455\":2}}],[\"不然就获取\",{\"1\":{\"809\":1}}],[\"不然明天的表或者下个月的表不会在内存中存在\",{\"1\":{\"798\":1}}],[\"不然返回整个对象会导致下层方法无法得知哪个属性没有被查询\",{\"1\":{\"603\":1}}],[\"不然还是单条执行\",{\"1\":{\"360\":1}}],[\"不然有可能导致更新策略为allcolumn的时候把这个字段更新为null\",{\"1\":{\"350\":1}}],[\"不建议在实体对象上使用因为会导致update的时候有可能null会被更新掉\",{\"1\":{\"348\":1}}],[\"不建议使用双括号的初始化可能会造成内存泄露\",{\"1\":{\"335\":1}}],[\"不建议select返回双括号初始化譬如new\",{\"1\":{\"334\":1}}],[\"不推荐\",{\"1\":{\"322\":1,\"432\":1}}],[\"不查询营业执照额外信息\",{\"1\":{\"315\":1}}],[\"不可以在\",{\"1\":{\"411\":1}}],[\"不可以是具体枚举类型除非整个系统就一个枚举类型\",{\"1\":{\"306\":1,\"572\":1}}],[\"不可以generatekey=true\",{\"1\":{\"199\":1}}],[\"不具有传递性也会和全局作用\",{\"1\":{\"275\":1}}],[\"不具有跨表达式的传递性也就是子查询逻辑删除独立计算\",{\"1\":{\"275\":4}}],[\"不记录本次sql或者只记录sql不记录sql参数自行处理\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"不希望统计到程序里面所以可以针对部分情况进行按需拦截\",{\"1\":{\"266\":1}}],[\"不添加可以通过threadlocal动态设置\",{\"1\":{\"257\":1}}],[\"不加入insert语句由数据库生成\",{\"1\":{\"254\":1,\"581\":1}}],[\"不追踪更新\",{\"0\":{\"252\":1}}],[\"不支持循环依赖\",{\"1\":{\"544\":1}}],[\"不支持以下版本如果需要支持可以加qq群联系群主\",{\"1\":{\"535\":1}}],[\"不支持emoji\",{\"1\":{\"218\":1}}],[\"不支持\",{\"1\":{\"216\":3}}],[\"不满\",{\"1\":{\"216\":1}}],[\"不处理\",{\"1\":{\"195\":1}}],[\"不是spring接管的datasource那么事务将不会生效\",{\"1\":{\"523\":1}}],[\"不是属性名是属性对应的列名是一样的\",{\"1\":{\"185\":1}}],[\"不是很推荐使用起来会稍微麻烦一点点击查看两者的区别\",{\"1\":{\"157\":3,\"166\":3}}],[\"不是很推荐除非电脑差\",{\"1\":{\"30\":1}}],[\"不是很推荐因为依赖插件\",{\"1\":{\"28\":1}}],[\"不需要实现接口但是使用方式有点区别\",{\"1\":{\"167\":1}}],[\"不需要在引入因为starter已经引入了\",{\"1\":{\"157\":1}}],[\"组员查看自己的数据\",{\"1\":{\"100\":1,\"107\":1}}],[\"组长可以查询所有组员的数据\",{\"1\":{\"100\":1,\"107\":1}}],[\"业务代码返回自定义pageresult<tentity>\",{\"1\":{\"691\":1}}],[\"业务权限拦截器\",{\"1\":{\"100\":1,\"107\":1}}],[\"业务场景\",{\"1\":{\"20\":1}}],[\"更少的依赖来保证程序的健壮与可控\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"更简单\",{\"1\":{\"474\":1}}],[\"更小\",{\"1\":{\"474\":1}}],[\"更快\",{\"1\":{\"474\":1}}],[\"更符合sql语法\",{\"1\":{\"459\":1}}],[\"更加直观\",{\"1\":{\"397\":1}}],[\"更多主键设置模式可以参考\",{\"1\":{\"809\":1}}],[\"更多的测试\",{\"0\":{\"390\":1}}],[\"更多问题可以参考常见问题\",{\"1\":{\"126\":1,\"158\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"850\":1}}],[\"更新时间\",{\"1\":{\"819\":1}}],[\"更新内容\",{\"1\":{\"535\":1}}],[\"更新删除无版本号报错\",{\"1\":{\"483\":1}}],[\"更新列策略\",{\"1\":{\"483\":1}}],[\"更新列拦截器\",{\"1\":{\"256\":1}}],[\"更新优先级顺序\",{\"1\":{\"422\":1}}],[\"更新自定义sql\",{\"0\":{\"421\":1}}],[\"更新指定列\",{\"0\":{\"414\":1}}],[\"更新null列\",{\"1\":{\"352\":1}}],[\"更新not\",{\"1\":{\"352\":1}}],[\"更新添加租户id条件\",{\"1\":{\"265\":1}}],[\"更新的时候也会自动更新时间\",{\"1\":{\"260\":1}}],[\"更新数据移除jdbc\",{\"1\":{\"272\":1}}],[\"更新数据\",{\"0\":{\"234\":1,\"589\":1}}],[\"更新前的实体拦截修改\",{\"1\":{\"189\":1}}],[\"更新\",{\"0\":{\"316\":1},\"1\":{\"100\":1,\"107\":1}}],[\"更改\",{\"1\":{\"15\":1}}],[\"并生成新的源代码\",{\"1\":{\"799\":1}}],[\"并发修改失败\",{\"1\":{\"783\":1,\"789\":1,\"794\":1}}],[\"并发更新分库\",{\"1\":{\"783\":1,\"789\":1}}],[\"并发更新\",{\"1\":{\"100\":1,\"107\":1,\"794\":1}}],[\"并不仅仅支持结果查询\",{\"1\":{\"695\":1}}],[\"并不会合并批处理\",{\"1\":{\"468\":1}}],[\"并不是不可以执行delete操作而是不可以在执行delete后生成delete语句\",{\"1\":{\"468\":1}}],[\"并不是利用数据库加解密函数\",{\"1\":{\"436\":1}}],[\"并不是简单的查询判断是否存在\",{\"1\":{\"371\":1}}],[\"并且会对数据库进行额外设计字段\",{\"1\":{\"809\":1}}],[\"并且设置分片可用数据源大小\",{\"1\":{\"780\":1,\"786\":1,\"792\":1}}],[\"并且原生orm框架自带无需使用额外组件\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"并且不同于shardingsphere\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"并且不需要添加astable来指定操作的数据库表名\",{\"1\":{\"370\":1,\"420\":1}}],[\"并且在其他语言上也有一套相对完善的分表分库orm扩展\",{\"1\":{\"775\":1}}],[\"并且在springboot下可以跨非代理方法生效\",{\"1\":{\"409\":1}}],[\"并且where一样存在重载\",{\"1\":{\"772\":1}}],[\"并且where条件也会追加版本号\",{\"1\":{\"326\":1}}],[\"并且有手动和自动两种方式\",{\"1\":{\"761\":1}}],[\"并且有手动和自动两种方式具体sql如下\",{\"1\":{\"722\":1}}],[\"并且需要支持并发操作\",{\"1\":{\"794\":1}}],[\"并且需要多次jdbc\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"并且需要自行处理sqlexception\",{\"1\":{\"740\":1}}],[\"并且需要当前上下文开启追踪模式不然无法使用\",{\"1\":{\"193\":1}}],[\"并且班级表只查询id不查询其他信息\",{\"1\":{\"713\":1}}],[\"并且额外查出对应的班级表\",{\"1\":{\"713\":1}}],[\"并且实现额外的处理\",{\"1\":{\"713\":1}}],[\"并且返回的学生也需要返回学生地址\",{\"1\":{\"703\":1}}],[\"并且返回t1的title取别名为content\",{\"1\":{\"42\":1,\"175\":1}}],[\"并且只支持first和tolist两个返回方法\",{\"1\":{\"697\":1}}],[\"并且只有左侧是属性而非属性函数时才会生效如果左侧为函数那么将不会生效\",{\"1\":{\"631\":1}}],[\"并且提供了链式方法调用方便开发人员\",{\"1\":{\"687\":1}}],[\"并且和前一个条件之间是or关系\",{\"1\":{\"672\":1}}],[\"并且和前一个条件之间是and关系\",{\"1\":{\"672\":1}}],[\"并且拥有强类型语法提示\",{\"1\":{\"596\":1}}],[\"并且改属性支持筛选排序筛选和分组等操作\",{\"1\":{\"556\":1,\"564\":1}}],[\"并且使用接口依赖模式开发\",{\"1\":{\"545\":1}}],[\"并且框架提供了自动apt编译插件修改entity数据库对象无需build也会自动修改对应的apt文件\",{\"1\":{\"511\":1}}],[\"并且生成差异更新语句\",{\"1\":{\"417\":1}}],[\"并且以arraylist集合进行返回\",{\"1\":{\"399\":1}}],[\"并且增加了获取1w条记录的性能测试\",{\"1\":{\"383\":1}}],[\"并且update只更新star和content两个字段\",{\"1\":{\"366\":1}}],[\"并且很方便的使用\",{\"1\":{\"362\":1}}],[\"并且默认需要使insertstrategy用all\",{\"1\":{\"360\":1}}],[\"并且如果配置或者没有配置noversionerror\",{\"1\":{\"325\":1,\"326\":1}}],[\"并且是用来断言当前条件的\",{\"1\":{\"764\":1}}],[\"并且是模板模式存在变量\",{\"1\":{\"670\":1}}],[\"并且是枚举enum<\",{\"1\":{\"306\":2,\"572\":2}}],[\"并且是更新计数\",{\"1\":{\"206\":1}}],[\"并且支持对应的union下的分片查询\",{\"1\":{\"756\":1}}],[\"并且支持分表分库\",{\"1\":{\"740\":1}}],[\"并且支持匿名表链接查询\",{\"1\":{\"643\":1}}],[\"并且支持直接select\",{\"1\":{\"640\":1}}],[\"并且支持map等数据结构\",{\"1\":{\"609\":1}}],[\"并且支持在数据库层面进行like搜索处理\",{\"1\":{\"436\":1}}],[\"并且支持适配所有的数据库\",{\"1\":{\"287\":1,\"294\":1}}],[\"并且支持所有数据库\",{\"1\":{\"210\":1}}],[\"并且strategyname不可以为空\",{\"1\":{\"284\":1}}],[\"并且用户也可以自定义实现更多的逻辑删除\",{\"1\":{\"275\":1}}],[\"并且用户使用全程无感\",{\"1\":{\"265\":1}}],[\"并且系统提供了大量的默认逻辑删除策略\",{\"1\":{\"275\":1}}],[\"并且发送到监控平台\",{\"1\":{\"271\":1}}],[\"并且过于繁琐\",{\"1\":{\"224\":1}}],[\"并且可以支持模糊查询\",{\"1\":{\"210\":1}}],[\"并且createtime查询映射到别名createtime1\",{\"1\":{\"185\":1}}],[\"并且存在个数大于5个的用户\",{\"1\":{\"146\":1}}],[\"并且给大家带来更多的解决方案\",{\"1\":{\"98\":1,\"809\":1}}],[\"并且选择obtain\",{\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"敬请期待已经完成功能文档还在完善中\",{\"1\":{\"100\":1,\"107\":1}}],[\"慢sql监听拦截\",{\"1\":{\"100\":1,\"107\":1}}],[\"拦截器名称需要自己实现\",{\"1\":{\"257\":1}}],[\"拦截器等\",{\"1\":{\"190\":1}}],[\"拦截器\",{\"1\":{\"100\":1,\"107\":1,\"260\":1,\"486\":1}}],[\"枚举转换器\",{\"1\":{\"306\":1,\"572\":1}}],[\"枚举接口\",{\"1\":{\"306\":1,\"572\":1}}],[\"枚举值\",{\"0\":{\"305\":1,\"571\":1}}],[\"枚举\",{\"1\":{\"279\":1}}],[\"枚举属性private\",{\"1\":{\"554\":1}}],[\"枚举属性\",{\"0\":{\"567\":1},\"1\":{\"100\":1,\"107\":1}}],[\"枚举和数据库映射\",{\"1\":{\"100\":1,\"107\":1}}],[\"软删除可以给程序带来后悔药\",{\"1\":{\"189\":1}}],[\"软删除记录删除时间\",{\"1\":{\"100\":1,\"107\":1}}],[\"软删除部分禁用启用非常方便\",{\"1\":{\"100\":1,\"107\":1}}],[\"软删除\",{\"1\":{\"100\":1,\"107\":1}}],[\"多关联查询\",{\"0\":{\"703\":1,\"711\":1}}],[\"多次include\",{\"0\":{\"702\":1,\"710\":1}}],[\"多次set表示set拼接\",{\"1\":{\"414\":1}}],[\"多列or条件模糊搜索\",{\"1\":{\"673\":1}}],[\"多列以字符串形式相加\",{\"1\":{\"294\":1}}],[\"多个采用columnincludemany\",{\"1\":{\"713\":1}}],[\"多个and用or链接\",{\"1\":{\"673\":1}}],[\"多个orderby都是对之前的追加\",{\"1\":{\"342\":1}}],[\"多字段组合动态排序\",{\"0\":{\"621\":1}}],[\"多层嵌套匿名表sql\",{\"1\":{\"607\":1}}],[\"多条件casewhen\",{\"0\":{\"616\":1}}],[\"多条件会生成多个exists函数\",{\"1\":{\"129\":1}}],[\"多条插入\",{\"0\":{\"360\":1}}],[\"多表2张表及以上时\",{\"1\":{\"642\":1}}],[\"多表2张表及以上\",{\"1\":{\"642\":1}}],[\"多表\",{\"0\":{\"598\":1}}],[\"多表自定义结果api\",{\"0\":{\"346\":1}}],[\"多表返回表达式\",{\"0\":{\"345\":1}}],[\"多表查询api\",{\"0\":{\"344\":1}}],[\"多表查询\",{\"0\":{\"186\":1,\"643\":1}}],[\"多表join查询\",{\"1\":{\"95\":1,\"235\":1,\"590\":1}}],[\"多模块和单模块的区别就是在需要生成proxy的模块引入sql\",{\"1\":{\"158\":1}}],[\"多模块项目需要注意的是需要在您需要使用apt技术也就是使用注解\",{\"1\":{\"126\":1,\"158\":1}}],[\"多模块\",{\"0\":{\"126\":1,\"158\":1}}],[\"多对一说明\",{\"0\":{\"699\":1}}],[\"多对一\",{\"1\":{\"100\":1,\"107\":1,\"439\":1,\"697\":1}}],[\"多对多无论是否存在多的一方最终都会填充集合\",{\"1\":{\"709\":1}}],[\"多对多不能为空\",{\"1\":{\"704\":2}}],[\"多对多说明\",{\"0\":{\"143\":1,\"701\":1}}],[\"多对多关联+type区分\",{\"1\":{\"100\":1,\"107\":1}}],[\"多对多\",{\"0\":{\"709\":1},\"1\":{\"100\":1,\"107\":1,\"108\":2,\"439\":1,\"697\":1,\"713\":1}}],[\"多数据源处理\",{\"0\":{\"522\":1}}],[\"多数据源请查看dynamicdatasource\",{\"1\":{\"116\":1}}],[\"多数据源\",{\"0\":{\"493\":1},\"1\":{\"100\":1,\"107\":1}}],[\"没值就忽略\",{\"1\":{\"100\":1,\"107\":1}}],[\"没有and全部都是or以where为单位之间会以and进行组合\",{\"1\":{\"673\":1}}],[\"没有匹配数返回0\",{\"1\":{\"601\":1}}],[\"没有查询到数据\",{\"1\":{\"505\":2}}],[\"没有的情况下返回null\",{\"1\":{\"401\":1,\"402\":1}}],[\"没有需要修改的所以返回1\",{\"1\":{\"366\":2}}],[\"没有mybatis的繁琐\",{\"1\":{\"99\":1,\"106\":1}}],[\"没有file的需要引入sql\",{\"1\":{\"33\":1}}],[\"没有生成proxy\",{\"0\":{\"13\":1}}],[\"动态构建repository\",{\"0\":{\"800\":1}}],[\"动态fill填充数据\",{\"1\":{\"641\":1}}],[\"动态查询条件1\",{\"0\":{\"633\":1}}],[\"动态表名\",{\"0\":{\"624\":1}}],[\"动态数据源\",{\"1\":{\"524\":1}}],[\"动态类型api\",{\"1\":{\"115\":1,\"157\":1}}],[\"动态报名支持对查询的表名进行动态设置可以再非分库分表模式下直接操作对应表\",{\"1\":{\"100\":1,\"107\":1}}],[\"动态多数据源进行封装处理\",{\"1\":{\"522\":1}}],[\"动态多数据源\",{\"1\":{\"100\":1,\"107\":1}}],[\"动态排序\",{\"0\":{\"617\":1,\"677\":1},\"1\":{\"100\":1,\"107\":1}}],[\"动态条件2\",{\"0\":{\"774\":1}}],[\"动态条件多表join\",{\"0\":{\"635\":1}}],[\"动态条件\",{\"0\":{\"627\":1,\"630\":1,\"772\":1},\"1\":{\"100\":1,\"107\":1,\"628\":1}}],[\"动态对象条件\",{\"1\":{\"24\":1}}],[\"无感支持分库分表插入\",{\"1\":{\"782\":1}}],[\"无依赖使用自己的pageresult\",{\"0\":{\"687\":1}}],[\"无依赖引入easy\",{\"1\":{\"117\":1,\"493\":1}}],[\"无需编写复杂封装代码\",{\"1\":{\"668\":1}}],[\"无需用户指定\",{\"1\":{\"469\":1}}],[\"无参数\",{\"0\":{\"661\":1}}],[\"无参数map返回\",{\"0\":{\"658\":1,\"753\":1}}],[\"无参数强类型返回\",{\"0\":{\"655\":1,\"750\":1}}],[\"无论\",{\"1\":{\"631\":1}}],[\"无论是否设置都会用\",{\"1\":{\"254\":1,\"581\":1}}],[\"无论join了多少张表group后全部只有一个入参参数其余参数在group属性里面\",{\"1\":{\"39\":1,\"172\":3}}],[\"无法表示为对应的表\",{\"1\":{\"642\":1}}],[\"无法匹配任意一条抛错\",{\"1\":{\"601\":1}}],[\"无法匹配任意一条在返回false\",{\"1\":{\"601\":1}}],[\"无法在jdbc返回后知晓结果\",{\"1\":{\"270\":1}}],[\"无法获取数据库表名\",{\"1\":{\"247\":1}}],[\"无法单独使用\",{\"1\":{\"193\":1}}],[\"无\",{\"1\":{\"198\":1,\"212\":1,\"219\":2,\"245\":4,\"246\":2,\"257\":1,\"260\":2,\"262\":1,\"264\":1}}],[\"无任何依赖的框架\",{\"1\":{\"100\":1,\"107\":1}}],[\"无实体删除等操作\",{\"1\":{\"100\":1,\"107\":1}}],[\"无实体新增\",{\"1\":{\"100\":1,\"107\":1}}],[\"无实体更新\",{\"1\":{\"100\":1,\"107\":1}}],[\"无实体查询\",{\"1\":{\"100\":1,\"107\":1}}],[\"读写分离\",{\"1\":{\"95\":1,\"96\":1,\"100\":2,\"107\":2}}],[\"实际的文章内容\",{\"1\":{\"820\":1}}],[\"实际项目中可以通过接口来限制\",{\"1\":{\"260\":1}}],[\"实例的接口list<t>\",{\"1\":{\"403\":1}}],[\"实体删除\",{\"0\":{\"356\":1}}],[\"实体对象删除\",{\"0\":{\"327\":1},\"1\":{\"278\":1}}],[\"实体对象更新\",{\"1\":{\"265\":1}}],[\"实体更新\",{\"0\":{\"324\":1},\"1\":{\"95\":1}}],[\"实现按时间分表\",{\"1\":{\"796\":1}}],[\"实现sql\",{\"1\":{\"722\":1,\"756\":1}}],[\"实现动态排序配置器\",{\"1\":{\"619\":1}}],[\"实现动态排序接口\",{\"1\":{\"618\":1}}],[\"实现了支持单表多表\",{\"1\":{\"596\":1}}],[\"实现一个启动配置\",{\"1\":{\"547\":1,\"815\":1}}],[\"实现接口\",{\"1\":{\"522\":1}}],[\"实现接口complexproptype返回对应的复杂类型type\",{\"1\":{\"310\":1,\"562\":1}}],[\"实现接口即可\",{\"1\":{\"166\":1}}],[\"实现自定义逻辑删除策略\",{\"0\":{\"284\":1}}],[\"实现\",{\"1\":{\"257\":1,\"689\":1}}],[\"实现智能差异更新\",{\"1\":{\"247\":1}}],[\"实现类是\",{\"1\":{\"803\":1}}],[\"实现类\",{\"1\":{\"223\":1}}],[\"实现加密策略\",{\"0\":{\"217\":1}}],[\"实现手机地址的加密存储且高性能模糊搜索\",{\"1\":{\"215\":1}}],[\"实现方式具体请看阿里巴巴密文字段检索方案\",{\"1\":{\"210\":1}}],[\"实现方式2\",{\"1\":{\"137\":1}}],[\"实现方式1\",{\"1\":{\"137\":1}}],[\"实战对象设计\",{\"1\":{\"256\":1}}],[\"实战\",{\"0\":{\"98\":1}}],[\"实在抱歉这次changebreak因为这次更新实在是让人太着迷了\",{\"1\":{\"18\":1}}],[\"单词\",{\"1\":{\"831\":1}}],[\"单参数使用默认表的也就是o\",{\"1\":{\"669\":1}}],[\"单个条件where参数为主表topic\",{\"1\":{\"649\":2}}],[\"单个参数为主表操作\",{\"1\":{\"644\":1}}],[\"单个查询\",{\"0\":{\"35\":1,\"168\":1,\"179\":1}}],[\"单字段动态排序\",{\"0\":{\"620\":1}}],[\"单条插入\",{\"0\":{\"359\":1}}],[\"单表union\",{\"0\":{\"757\":1}}],[\"单表api使用\",{\"0\":{\"343\":1}}],[\"单表\",{\"1\":{\"233\":1,\"588\":1}}],[\"单表查询\",{\"0\":{\"451\":1,\"597\":1},\"1\":{\"95\":1}}],[\"单模块\",{\"0\":{\"157\":1}}],[\"删除自动填充删除信息\",{\"1\":{\"809\":1}}],[\"删除时间\",{\"1\":{\"809\":1}}],[\"删除核心过滤方法就是wherepredicate和sqlpredicate两种是同一种东西\",{\"1\":{\"770\":1}}],[\"删除演示\",{\"1\":{\"333\":1}}],[\"删除数据移除jdbc\",{\"1\":{\"272\":1}}],[\"删除添加租户id\",{\"1\":{\"265\":1}}],[\"删除的时候可以通过条件拦截来动态构建添加条件如\",{\"1\":{\"256\":1}}],[\"删除\",{\"0\":{\"105\":1,\"354\":1,\"795\":1},\"1\":{\"264\":1,\"280\":1,\"333\":1}}],[\"删除人\",{\"1\":{\"100\":1,\"107\":1,\"809\":1}}],[\"删除条件拦截器\",{\"1\":{\"95\":1}}],[\"删除错误\",{\"0\":{\"16\":1}}],[\"自行判断key和value是否为null\",{\"1\":{\"623\":1}}],[\"自行定义版本号策略\",{\"1\":{\"431\":1}}],[\"自行处理\",{\"0\":{\"191\":1}}],[\"自增主键回填\",{\"0\":{\"362\":1}}],[\"自己选择对应的驱动\",{\"1\":{\"120\":1,\"121\":1,\"496\":1,\"497\":1}}],[\"自带便捷的batch批处理\",{\"1\":{\"100\":1,\"107\":1}}],[\"自带分页方法和无依赖分页链式返回\",{\"1\":{\"100\":1,\"107\":1}}],[\"自动子查询\",{\"0\":{\"762\":1}}],[\"自动模式\",{\"0\":{\"724\":1}}],[\"自动apt文件编译\",{\"1\":{\"540\":1}}],[\"自动追踪\",{\"1\":{\"422\":2}}],[\"自动填充修改时间等\",{\"1\":{\"256\":1}}],[\"自动填充修改人\",{\"1\":{\"256\":1}}],[\"自动填充创建时间\",{\"1\":{\"256\":1}}],[\"自动填充创建人\",{\"1\":{\"256\":1}}],[\"自动填充id\",{\"1\":{\"256\":1}}],[\"自动映射vo有的属性\",{\"1\":{\"171\":1}}],[\"自动筛选返回结构化数据\",{\"1\":{\"138\":1}}],[\"自动上报预警\",{\"1\":{\"100\":1,\"107\":1}}],[\"自动赋值创建人创建时间\",{\"1\":{\"100\":1,\"107\":1}}],[\"自动生成的entityproxy类会在用户修改属性字段后同步修改\",{\"1\":{\"33\":1}}],[\"自动生成\",{\"0\":{\"33\":1}}],[\"自定义它们\",{\"1\":{\"850\":1}}],[\"自定义对齐\",{\"0\":{\"830\":1}}],[\"自定义标题\",{\"1\":{\"827\":5}}],[\"自定义容器\",{\"0\":{\"827\":1}}],[\"自定义函数包裹column\",{\"1\":{\"771\":1}}],[\"自定义函数创建数据库自动生成列\",{\"0\":{\"254\":1,\"581\":1}}],[\"自定义\",{\"1\":{\"771\":1}}],[\"自定义结果集\",{\"0\":{\"759\":1}}],[\"自定义pager\",{\"0\":{\"690\":1}}],[\"自定义分页返回结果\",{\"0\":{\"684\":1}}],[\"自定义分库分表\",{\"1\":{\"95\":1}}],[\"自定义原生sql查询\",{\"0\":{\"667\":1}}],[\"自定义填充数据\",{\"1\":{\"641\":2}}],[\"自定义vo返回结果\",{\"0\":{\"600\":1}}],[\"自定义vo列返回\",{\"1\":{\"100\":1,\"107\":1}}],[\"自定义nameconversion\",{\"0\":{\"546\":1}}],[\"自定义模板导出导入\",{\"1\":{\"540\":1}}],[\"自定义错误\",{\"1\":{\"532\":8}}],[\"自定义错误异常快速针对firstnotnull\",{\"1\":{\"100\":1,\"107\":1}}],[\"自定义异常\",{\"0\":{\"510\":1,\"811\":1}}],[\"自定义列输出\",{\"0\":{\"715\":1}}],[\"自定义列\",{\"0\":{\"404\":1}}],[\"自定义typehandler\",{\"0\":{\"297\":1}}],[\"自定义逻辑删除数据\",{\"0\":{\"283\":1}}],[\"自定义逻辑删除\",{\"0\":{\"282\":1}}],[\"自定义监听器\",{\"0\":{\"271\":1}}],[\"自定义插入列函数\",{\"1\":{\"254\":1,\"581\":1}}],[\"自定义数据库片段\",{\"1\":{\"227\":1}}],[\"自定义数据库函数\",{\"0\":{\"221\":1,\"224\":1},\"1\":{\"224\":1}}],[\"自定义返回结果支持后续链式将前面的结果作为匿名表\",{\"1\":{\"185\":1}}],[\"自定义返回结果不支持后续链式只支持最终结果\",{\"1\":{\"185\":1}}],[\"自定义返回结果\",{\"0\":{\"185\":1}}],[\"自定义dto\",{\"0\":{\"108\":1}}],[\"自定义删除\",{\"1\":{\"105\":1}}],[\"自定义主键雪花id自定义id\",{\"1\":{\"202\":1}}],[\"自定义主键\",{\"0\":{\"197\":1},\"1\":{\"100\":1}}],[\"自定义更新\",{\"1\":{\"95\":1,\"104\":2,\"105\":1}}],[\"自定义软删除\",{\"1\":{\"95\":1}}],[\"全字段查询自动以resultclass为主映射columnname相同列\",{\"1\":{\"719\":1}}],[\"全字段查询\",{\"0\":{\"719\":1}}],[\"全字段更新\",{\"1\":{\"252\":1}}],[\"全参数个数为主表+join表个数\",{\"1\":{\"649\":2}}],[\"全参数时为一一对应的表\",{\"1\":{\"334\":1}}],[\"全名就是first+last\",{\"1\":{\"237\":1,\"565\":1}}],[\"全自动属性匹配映射\",{\"1\":{\"185\":1}}],[\"全局配置的更新策略\",{\"1\":{\"422\":1}}],[\"全局配置策略\",{\"1\":{\"422\":2}}],[\"全局配置default\",{\"1\":{\"417\":1}}],[\"全局拦截器\",{\"0\":{\"256\":1},\"1\":{\"189\":1}}],[\"全局自定义拦截器\",{\"1\":{\"95\":1}}],[\"全局默认\",{\"1\":{\"95\":1}}],[\"全属性映射等于selectall\",{\"1\":{\"40\":1,\"173\":1}}],[\"特性\",{\"0\":{\"95\":1}}],[\"问题反馈请前往\",{\"1\":{\"94\":1}}],[\"↩︎\",{\"1\":{\"80\":1,\"846\":1}}],[\"−1\",{\"1\":{\"74\":1,\"840\":1}}],[\"ωyω​\",{\"1\":{\"74\":2,\"840\":2}}],[\"∂ωr∂r​\",{\"1\":{\"74\":1,\"840\":1}}],[\"yyyy\",{\"1\":{\"293\":1,\"296\":1,\"666\":14,\"667\":1}}],[\"year\",{\"1\":{\"290\":1,\"737\":6}}],[\"yml\",{\"1\":{\"157\":1,\"481\":1}}],[\"yml同级目录下添加easy\",{\"1\":{\"12\":1}}],[\"y\",{\"1\":{\"135\":1,\"136\":2,\"293\":1,\"296\":1,\"641\":11,\"666\":7,\"667\":2,\"670\":4,\"703\":2,\"712\":1}}],[\"your\",{\"1\":{\"83\":2,\"737\":1}}],[\"you\",{\"1\":{\"52\":1,\"54\":2,\"55\":1,\"56\":2,\"67\":1,\"82\":1,\"83\":3,\"84\":1}}],[\"爱心\",{\"0\":{\"48\":1}}],[\"您也可以自定义对象来返回对应的结果集\",{\"1\":{\"756\":1}}],[\"您如果发现有不一样的也可以提交pr来帮我们修复文档\",{\"1\":{\"545\":1}}],[\"您可以自行实现这个并且使用自己的注解来配合使用\",{\"1\":{\"638\":1}}],[\"您可以选择不报错返回默认值\",{\"1\":{\"469\":1}}],[\"您可以进行如下操作\",{\"1\":{\"16\":1}}],[\"您可能需要重新调整defaultdatasourcemergepoolsize这个值和调整连接池大小\",{\"1\":{\"469\":1}}],[\"您好\",{\"1\":{\"397\":3}}],[\"您只需要将秘钥和偏移量进行填入即可abstractunsupportemojiaesbase64encryptionstrategy或abstractsupportemojiaesbase64encryptionstrategy\",{\"1\":{\"217\":1}}],[\"您的支持是我坚持的动力\",{\"1\":{\"47\":1}}],[\"服务支持\",{\"0\":{\"47\":1}}],[\"选择了两个元素的group\",{\"1\":{\"642\":1}}],[\"选择合适的版本\",{\"0\":{\"535\":1}}],[\"选择性追踪\",{\"1\":{\"417\":1}}],[\"选择自己合适的版本即可\",{\"1\":{\"313\":1}}],[\"选择自己的合适版本\",{\"1\":{\"44\":3,\"163\":3}}],[\"选择\",{\"1\":{\"111\":1}}],[\"选择您需要的类\",{\"1\":{\"111\":1}}],[\"选择createstructdto\",{\"1\":{\"111\":1}}],[\"选择enable\",{\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"排序交互全是属性所以完全可以避免sql注入的bug\",{\"1\":{\"623\":1}}],[\"排序那么就使用第二张表\",{\"1\":{\"622\":1}}],[\"排序属性表示按这个属性排序\",{\"1\":{\"619\":1}}],[\"排序属性\",{\"1\":{\"619\":2}}],[\"排序\",{\"0\":{\"42\":1,\"175\":1,\"183\":1,\"595\":1,\"674\":1},\"1\":{\"100\":1,\"107\":1,\"600\":1,\"629\":1,\"632\":1,\"634\":1,\"731\":1,\"732\":1}}],[\"第三个参数表示第三张表\",{\"1\":{\"649\":2}}],[\"第二个join采用三参数\",{\"1\":{\"649\":2}}],[\"第二个参数开始才是真正的表\",{\"1\":{\"729\":1,\"771\":1}}],[\"第二个参数表示对返回导航属性如何进行增强\",{\"1\":{\"703\":1}}],[\"第二个参数表示指定存在的约束判断支持多列\",{\"1\":{\"373\":1}}],[\"第二个参数为表达式\",{\"1\":{\"668\":1}}],[\"第二个参数t1表示第二个表\",{\"1\":{\"41\":1,\"174\":1}}],[\"第二种是两个参数\",{\"1\":{\"644\":1}}],[\"第二种写法提取表变量\",{\"1\":{\"397\":1}}],[\"第二种情况我们可以用exists\",{\"1\":{\"152\":1}}],[\"第一个join采用双参数\",{\"1\":{\"649\":2}}],[\"第一个参数表示要更新的列\",{\"1\":{\"373\":1}}],[\"第一个参数t表示第一个表\",{\"1\":{\"41\":1,\"174\":1}}],[\"第一种就是单个参数\",{\"1\":{\"644\":1}}],[\"第一种写法\",{\"1\":{\"397\":1}}],[\"第一种情况我们可以通过in子查询来实现\",{\"1\":{\"152\":1}}],[\"第1条sql数据\",{\"1\":{\"146\":1,\"149\":1,\"185\":1,\"557\":1,\"595\":1,\"606\":1,\"607\":1,\"666\":1,\"667\":1}}],[\"表列原子更新\",{\"0\":{\"416\":1}}],[\"表列自更新\",{\"0\":{\"415\":1}}],[\"表达式内部的参数不可以提取出来\",{\"1\":{\"809\":2}}],[\"表达式内部直接用表变量\",{\"1\":{\"397\":1}}],[\"表达式like第一个参数为false所以不会添加phone的like条件到sql中\",{\"1\":{\"772\":1}}],[\"表达式每次select将会生成一个匿名表如果需要后续操作那么可以对其进行再次操作\",{\"1\":{\"733\":1}}],[\"表达式复用\",{\"0\":{\"714\":1}}],[\"表达式入参为现有表名返回设置的表名\",{\"1\":{\"601\":1}}],[\"表达式主键删除\",{\"1\":{\"355\":1}}],[\"表达式删除必须要添加withversion否则将不会使用行版本删除\",{\"1\":{\"328\":1}}],[\"表达式删除必须要添加withversion否则将不会使用行版本更新\",{\"1\":{\"325\":1}}],[\"表达式删除\",{\"0\":{\"328\":1,\"355\":1},\"1\":{\"265\":1,\"355\":1}}],[\"表达式更新set参数添加\",{\"1\":{\"809\":1}}],[\"表达式更新的时候也可以对修改时间和修改人进行自动处理\",{\"1\":{\"809\":1}}],[\"表达式更新只需要添加withversion那么就可以针对当前version进行版本控制\",{\"1\":{\"325\":1}}],[\"表达式更新\",{\"0\":{\"325\":1},\"1\":{\"265\":1}}],[\"表达式\",{\"1\":{\"264\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1}}],[\"表达式仅查询id和title\",{\"1\":{\"40\":1}}],[\"表示逻辑删除策略使用名称叫做\",{\"1\":{\"809\":1}}],[\"表示初始化时的开始时间用来初始化自动计算数据库的分片数量\",{\"1\":{\"797\":1}}],[\"表示这个属性为分表键\",{\"1\":{\"797\":1}}],[\"表示查询学校班级的同时附带查询出班级的老师\",{\"1\":{\"703\":1}}],[\"表示or内部的条件是以括号包裹\",{\"1\":{\"672\":1}}],[\"表示and内部的条件是以括号包裹\",{\"1\":{\"672\":1}}],[\"表示返回一个sql片段如果您是在join\",{\"1\":{\"663\":1}}],[\"表示返回默认值\",{\"1\":{\"407\":1}}],[\"表示当前对象和目标对象的关系relationtypeenum枚举\",{\"1\":{\"704\":1}}],[\"表示当前值对多个数据库列并且用or来连接\",{\"1\":{\"632\":1}}],[\"表示当前属性是一对一数据库列\",{\"1\":{\"632\":1}}],[\"表示当前字段对应到数据库是逻辑删除表示\",{\"1\":{\"430\":1}}],[\"表示不警告\",{\"1\":{\"468\":1}}],[\"表示不允许删除数据\",{\"1\":{\"353\":1}}],[\"表示警告\",{\"1\":{\"468\":1}}],[\"表示默认行为\",{\"1\":{\"468\":1}}],[\"表示是否是主键\",{\"1\":{\"426\":1}}],[\"表示是否使用监听器\",{\"1\":{\"268\":1}}],[\"表示报错\",{\"1\":{\"407\":1}}],[\"表示需要开启监听\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"表示为自动生成的\",{\"1\":{\"254\":1,\"581\":1}}],[\"表示命令为处理成功\",{\"1\":{\"206\":1}}],[\"表示命令已成功处理\",{\"1\":{\"206\":1}}],[\"表2查询stars\",{\"1\":{\"185\":1}}],[\"表单查询3\",{\"0\":{\"25\":1}}],[\"表单查询2\",{\"0\":{\"24\":1}}],[\"表单查询1\",{\"0\":{\"23\":1}}],[\"分类为\",{\"1\":{\"848\":1}}],[\"分割结果按逗号分组\",{\"1\":{\"530\":1}}],[\"分表\",{\"0\":{\"790\":1},\"1\":{\"776\":1}}],[\"分表分库特有配置\",{\"0\":{\"469\":1}}],[\"分表设置与否无关紧要\",{\"1\":{\"407\":1}}],[\"分片可用连接池数50\",{\"1\":{\"792\":1}}],[\"分片可用连接池数50保证至少有50个连接可以给非分片用\",{\"1\":{\"780\":1,\"786\":1}}],[\"分片链接模式\",{\"1\":{\"483\":1}}],[\"分片数目\",{\"1\":{\"469\":1}}],[\"分片初始化器\",{\"1\":{\"425\":1,\"486\":1}}],[\"分片聚合最大线程数\",{\"1\":{\"469\":1}}],[\"分片聚合超时时间默认60秒单位\",{\"1\":{\"469\":1}}],[\"分片聚合超时时间默认30秒\",{\"1\":{\"407\":1}}],[\"分片聚合执行线程队列\",{\"1\":{\"407\":1}}],[\"分片默认行为配置\",{\"0\":{\"406\":1}}],[\"分库\",{\"0\":{\"784\":1},\"1\":{\"776\":1}}],[\"分库数据源\",{\"1\":{\"486\":1}}],[\"分库数量\",{\"1\":{\"407\":1}}],[\"分库分表\",{\"0\":{\"778\":1},\"1\":{\"100\":2,\"107\":2}}],[\"分别是table\",{\"1\":{\"631\":1}}],[\"分别是用户有多本书和用户所拥有的历史书籍\",{\"1\":{\"140\":1}}],[\"分别对应上下文10张表\",{\"1\":{\"397\":1}}],[\"分解表达式\",{\"0\":{\"336\":1}}],[\"分多次sql查询\",{\"1\":{\"137\":1}}],[\"分页查询速度\",{\"1\":{\"388\":1}}],[\"分页查询\",{\"0\":{\"388\":1}}],[\"分页\",{\"0\":{\"40\":1,\"173\":1,\"680\":1},\"1\":{\"100\":1,\"107\":1}}],[\"分组筛选\",{\"0\":{\"184\":1}}],[\"分组\",{\"0\":{\"39\":1,\"172\":1,\"642\":1}}],[\"取绝对值\",{\"1\":{\"39\":1,\"172\":1}}],[\"草稿模式无需定义返回结果\",{\"1\":{\"39\":1,\"172\":1}}],[\"默认我们都会通过新建一个基类类满足公用的对象\",{\"1\":{\"809\":1}}],[\"默认按订单id进行分库\",{\"1\":{\"779\":1}}],[\"默认条件和条件之间用and进行链接\",{\"1\":{\"672\":1}}],[\"默认采用and链接\",{\"1\":{\"649\":2}}],[\"默认采用datasource的可以自定义\",{\"1\":{\"410\":1}}],[\"默认fill查询结果不消费null也就是produce里面不会消费null值\",{\"1\":{\"641\":1}}],[\"默认表是0开始\",{\"1\":{\"619\":1}}],[\"默认表示无原子更新\",{\"1\":{\"426\":1}}],[\"默认表示不转换\",{\"1\":{\"426\":1}}],[\"默认key忽略大小写\",{\"1\":{\"612\":1,\"748\":1,\"755\":1}}],[\"默认springboot下的数据源name为ds0所以我们还需要额外添加4个数据源\",{\"1\":{\"781\":1,\"787\":1}}],[\"默认springboot\",{\"1\":{\"547\":1}}],[\"默认错误\",{\"1\":{\"532\":1}}],[\"默认错误消息\",{\"0\":{\"532\":1}}],[\"默认topageresult是final的结果\",{\"1\":{\"503\":1}}],[\"默认true表示删除\",{\"1\":{\"430\":1}}],[\"默认true表示查询\",{\"1\":{\"350\":1}}],[\"默认true\",{\"1\":{\"115\":2,\"157\":2,\"325\":1,\"326\":1,\"490\":2}}],[\"默认仅支持单个数据源的处理\",{\"1\":{\"493\":1}}],[\"默认记录器配置\",{\"1\":{\"481\":1,\"483\":1}}],[\"默认为0将使用executors\",{\"1\":{\"469\":1}}],[\"默认为true\",{\"1\":{\"353\":1}}],[\"默认针对分片链接获取大于1的操作进行defaultdatasourcemergepoolsize总数的扣减\",{\"1\":{\"469\":1}}],[\"默认框架将链接分片的链接模式改为自动\",{\"1\":{\"469\":1}}],[\"默认框架会在配置参数阈值到达后自动合并sql调用executebatch合并\",{\"1\":{\"203\":1}}],[\"默认依然查询被标记为\",{\"1\":{\"468\":1}}],[\"默认这种情况下会将多个对象进行合并执行batch而不是单条执行\",{\"1\":{\"468\":1}}],[\"默认update命令生成的语句将是对整个对象的所有列进行更新\",{\"1\":{\"468\":1}}],[\"默认使用mysql语法如果你的数据库默认支持mysql语法且easy\",{\"1\":{\"468\":1}}],[\"默认配置项\",{\"0\":{\"468\":1,\"628\":1}}],[\"默认的追踪上下文注解也可以自定义\",{\"1\":{\"445\":1}}],[\"默认的动态条件对象查询条件\",{\"1\":{\"444\":1}}],[\"默认乐观锁版本号策略\",{\"0\":{\"432\":1}}],[\"默认更新策略就是全字段\",{\"1\":{\"429\":1}}],[\"默认更新所有列\",{\"1\":{\"352\":1}}],[\"默认更新所有列包括null和非null\",{\"1\":{\"348\":1}}],[\"默认空为nameconversion\",{\"1\":{\"426\":1}}],[\"默认jdbc连接串的database\",{\"1\":{\"425\":1}}],[\"默认5秒分表聚合多链接获取分表插入更新删除同理多个线程间等待获取时间单位毫秒\",{\"1\":{\"407\":1}}],[\"默认datasource\",{\"1\":{\"407\":1}}],[\"默认数据源的数据源连接池大小分表有效\",{\"1\":{\"407\":1}}],[\"默认分库数据源名称\",{\"1\":{\"407\":1,\"469\":1}}],[\"默认是如果不选择保存则返回默认值\",{\"1\":{\"469\":1}}],[\"默认是否使用追踪模式\",{\"1\":{\"468\":1}}],[\"默认是5\",{\"1\":{\"407\":1}}],[\"默认是true\",{\"1\":{\"12\":1}}],[\"默认异常替换成业务异常\",{\"1\":{\"402\":1}}],[\"默认easyquery不支持delete命令\",{\"1\":{\"354\":1}}],[\"默认not\",{\"1\":{\"351\":1,\"363\":1}}],[\"默认会对sql添加limit\",{\"1\":{\"399\":2}}],[\"默认会被查询\",{\"1\":{\"350\":1}}],[\"默认会添加2022年以前因为你查询的是历史书籍\",{\"1\":{\"140\":1}}],[\"默认执行物理删除会报错\",{\"1\":{\"348\":1}}],[\"默认生成语句不包含null列\",{\"1\":{\"348\":1}}],[\"默认查询返回\",{\"1\":{\"348\":1}}],[\"默认行为\",{\"0\":{\"348\":1,\"407\":1}}],[\"默认行为配置\",{\"0\":{\"347\":1}}],[\"默认起始0\",{\"1\":{\"289\":1}}],[\"默认用户可以选择抽象\",{\"1\":{\"284\":1}}],[\"默认可以才用是否为某个接口的实现interface\",{\"1\":{\"257\":1}}],[\"默认可以使用类名\",{\"1\":{\"257\":1}}],[\"默认添加\",{\"1\":{\"257\":1}}],[\"默认就是不使用追踪\",{\"1\":{\"601\":1}}],[\"默认就是不使用\",{\"1\":{\"246\":1}}],[\"默认需要自行开启\",{\"1\":{\"241\":1}}],[\"默认非中文4个长度为一组\",{\"1\":{\"216\":1}}],[\"默认支持等于匹配\",{\"1\":{\"212\":1}}],[\"默认不允许调用删除功能\",{\"1\":{\"354\":1}}],[\"默认不支持和springboot的嵌套事务\",{\"1\":{\"411\":1}}],[\"默认不支持\",{\"1\":{\"212\":1}}],[\"默认不使用\",{\"1\":{\"127\":1}}],[\"默认值\",{\"1\":{\"204\":1,\"212\":1,\"219\":1,\"229\":1,\"257\":1,\"348\":1,\"399\":4,\"407\":1,\"410\":1,\"425\":1,\"426\":1,\"430\":1,\"431\":1,\"468\":1,\"469\":1,\"584\":1,\"601\":6,\"618\":1,\"632\":1,\"704\":1}}],[\"默认已经实现一个通用方法\",{\"1\":{\"198\":1}}],[\"默认\",{\"1\":{\"195\":1,\"268\":1,\"269\":1,\"270\":1,\"275\":1,\"279\":1}}],[\"默认实现有一个aes+base64的abstractaesbase64encryptionstrategy抽象类\",{\"1\":{\"437\":1}}],[\"默认实现系统提供\",{\"1\":{\"322\":1}}],[\"默认实现\",{\"0\":{\"686\":1},\"1\":{\"195\":1,\"260\":1,\"262\":1,\"264\":1,\"638\":1}}],[\"默认实现sl4jimpl\",{\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"默认返回long类型\",{\"1\":{\"39\":2,\"172\":3}}],[\"k2\",{\"1\":{\"642\":1}}],[\"k1\",{\"1\":{\"642\":2}}],[\"kotlin<\",{\"1\":{\"519\":5}}],[\"kotlin\",{\"1\":{\"519\":2}}],[\"kotlin代理模式\",{\"0\":{\"511\":1}}],[\"kotlin也需要自行实现\",{\"1\":{\"311\":1}}],[\"kt\",{\"1\":{\"463\":1,\"465\":1}}],[\"kcrrvsd1fa++a==6s2nnhbfy4vm0knpmmexhw==a000vaxsbiodisuudxv7ow==d8z7fptvpiymvhixtvujba==xchjvvd0uvw7a435+66hcq==yqcxesywhm+0knr39su2oa==skfe84ttzzfqhwzfbfadkw==ieailfgcyjbsmscn7hvnvw==v7c\",{\"1\":{\"249\":1,\"252\":1}}],[\"kgx28zi\",{\"1\":{\"220\":2}}],[\"kv\",{\"1\":{\"209\":1}}],[\"keepstyle\",{\"1\":{\"666\":2,\"669\":1,\"670\":1}}],[\"keepnativestyle\",{\"1\":{\"468\":1}}],[\"keep\",{\"1\":{\"115\":1,\"157\":1,\"465\":1,\"470\":1,\"483\":1,\"490\":1}}],[\"key为需要排序的属性\",{\"1\":{\"623\":1}}],[\"key\",{\"1\":{\"308\":1,\"311\":1,\"313\":1,\"354\":1,\"358\":1,\"366\":3,\"412\":1,\"486\":1,\"506\":2,\"507\":2,\"574\":1,\"642\":1,\"735\":1,\"756\":1,\"797\":1}}],[\"key的columnmetadata\",{\"1\":{\"198\":1}}],[\"key或者not\",{\"1\":{\"166\":1}}],[\"keyn表示key默认支持10个\",{\"1\":{\"39\":1,\"172\":3}}],[\"key2\",{\"1\":{\"39\":1,\"172\":3,\"237\":1,\"565\":1,\"737\":2}}],[\"key1就是id\",{\"1\":{\"39\":2,\"172\":3}}],[\"key1\",{\"1\":{\"39\":3,\"172\":7,\"184\":4,\"185\":4,\"237\":1,\"565\":1,\"606\":1,\"608\":1,\"642\":1,\"737\":2}}],[\"know\",{\"1\":{\"55\":1,\"56\":1}}],[\"kingbase\",{\"1\":{\"9\":3,\"372\":1,\"483\":1}}],[\"返回顶部按钮\",{\"1\":{\"819\":1,\"850\":1}}],[\"返回总数\",{\"1\":{\"689\":1}}],[\"返回toshardingpageresult的分页对象\",{\"1\":{\"685\":1}}],[\"返回topageresult的分页对象\",{\"1\":{\"685\":1}}],[\"返回片段设置别名\",{\"1\":{\"666\":1}}],[\"返回queryable3那么可以对这个查询表达式进行后续操作\",{\"1\":{\"649\":1}}],[\"返回参数为最终确定的表名内部可以通过复杂计算甚至远程rpc调用都可以\",{\"1\":{\"625\":1}}],[\"返回当前queryable对象属性映射所对应的列名和返回结果属性列名一样的列\",{\"1\":{\"729\":2}}],[\"返回当前queryable对象指定的列\",{\"1\":{\"729\":1}}],[\"返回当前表达式在数据库中命中的所有结果\",{\"1\":{\"601\":1}}],[\"返回当前表达式在数据库中命中的第一条\",{\"1\":{\"601\":1}}],[\"返回当前表达式在数据库中命中的条数有多少\",{\"1\":{\"601\":1}}],[\"返回当前表达式是在数据库中是否所有的都匹配\",{\"1\":{\"601\":1}}],[\"返回当前表达式是在数据库中是否存在匹配项\",{\"1\":{\"601\":2}}],[\"返回当前表达式即将执行的sql语句\",{\"1\":{\"601\":1}}],[\"返回当前对象自定义列\",{\"1\":{\"404\":1}}],[\"返回当前对象只查询id\",{\"1\":{\"185\":1}}],[\"返回排序等\",{\"1\":{\"554\":5}}],[\"返回一个存在的数据源没有就报错\",{\"1\":{\"522\":1}}],[\"返回hello\",{\"1\":{\"481\":1}}],[\"返回更新后的版本信息\",{\"1\":{\"322\":1}}],[\"返回列函数\",{\"0\":{\"292\":1,\"295\":1}}],[\"返回列表\",{\"0\":{\"36\":1,\"169\":1}}],[\"返回间隔天\",{\"1\":{\"290\":1}}],[\"返回秒数0\",{\"1\":{\"290\":1}}],[\"返回分钟0\",{\"1\":{\"290\":1}}],[\"返回小时0\",{\"1\":{\"290\":1}}],[\"返回月份中的天数1\",{\"1\":{\"290\":1}}],[\"返回月份1\",{\"1\":{\"290\":1}}],[\"返回年份\",{\"1\":{\"290\":1}}],[\"返回结果bigdecimal防止结果溢出\",{\"1\":{\"601\":1}}],[\"返回结果为map<string\",{\"1\":{\"612\":1,\"755\":1}}],[\"返回结果为当前方法的聚合类型\",{\"1\":{\"227\":1}}],[\"返回结果为数据库片段\",{\"1\":{\"227\":1}}],[\"返回结果为属性名也就是列所对应的属性\",{\"1\":{\"226\":1}}],[\"返回结果为columnfunction接口\",{\"1\":{\"226\":1}}],[\"返回结果\",{\"0\":{\"666\":1},\"1\":{\"226\":1,\"227\":1,\"604\":1}}],[\"返回结果意思查询学生并且展开查询下面的课程然后展开\",{\"1\":{\"137\":1}}],[\"返回max或者min\",{\"1\":{\"184\":1}}],[\"返回集合不会为null\",{\"1\":{\"180\":1}}],[\"返回层级对象\",{\"1\":{\"138\":1}}],[\"返回\",{\"1\":{\"138\":1,\"601\":1,\"625\":1,\"729\":1}}],[\"返回对象被解析的columnname和sql的返回列名一致才会\",{\"1\":{\"715\":1}}],[\"返回对多的导航属性比如\",{\"1\":{\"127\":1}}],[\"返回对一导航属性而不是对多包括相关列\",{\"1\":{\"127\":1}}],[\"返回导航属性的列比如\",{\"1\":{\"127\":1}}],[\"返回导航属性本身\",{\"1\":{\"127\":1}}],[\"返回导航属性那么自动会进行\",{\"1\":{\"127\":1}}],[\"返回草稿支持1\",{\"1\":{\"39\":1,\"172\":1}}],[\"返回int\",{\"1\":{\"39\":2,\"172\":3}}],[\"返回自定义列\",{\"0\":{\"38\":1,\"171\":1}}],[\"6正式支持solon适配国产框架的orm部分\",{\"1\":{\"473\":1}}],[\"6<\",{\"1\":{\"313\":1}}],[\"698\",{\"1\":{\"309\":1,\"579\":1}}],[\"6星期日为0\",{\"1\":{\"290\":1}}],[\"670\",{\"1\":{\"260\":1}}],[\"643\",{\"1\":{\"260\":2}}],[\"60000\",{\"1\":{\"469\":1}}],[\"60^+插件0\",{\"1\":{\"139\":1}}],[\"60\",{\"1\":{\"132\":1,\"781\":1,\"787\":1}}],[\"6\",{\"0\":{\"134\":1,\"342\":1,\"364\":1,\"421\":1},\"1\":{\"35\":2,\"168\":2,\"205\":1,\"251\":1,\"252\":3,\"335\":1,\"360\":1,\"519\":1,\"642\":3,\"650\":1,\"651\":1,\"667\":1,\"672\":2,\"742\":1,\"759\":1,\"782\":2,\"788\":2,\"789\":1,\"793\":2,\"795\":1}}],[\"断言小明是否存在\",{\"1\":{\"34\":1,\"167\":1}}],[\"根据在lambda表达式里声明的对象的setter或是声明的匿名对象的类成员字段声明\",{\"1\":{\"729\":1}}],[\"根据表生成对应的实体\",{\"1\":{\"540\":1}}],[\"根据id\",{\"1\":{\"505\":2}}],[\"根据id查询返回自定义列\",{\"1\":{\"168\":1}}],[\"根据id查询\",{\"1\":{\"35\":1,\"168\":1}}],[\"根据id查询自定义条件返回第一条\",{\"1\":{\"34\":1,\"35\":1,\"167\":1,\"168\":1}}],[\"根据id查询并且断言仅一条\",{\"1\":{\"34\":1,\"35\":1,\"167\":1,\"168\":1}}],[\"根据id查询第一条\",{\"1\":{\"34\":1,\"35\":1,\"167\":1,\"168\":1}}],[\"根据typehandler类型获取对应的typehandler处理器\",{\"1\":{\"298\":1}}],[\"根据类型获取对应的typehandler处理器\",{\"1\":{\"298\":1}}],[\"根据条件返回符合的集合默认arraylist实现\",{\"1\":{\"34\":1,\"167\":1}}],[\"运行只要有对应的sql打印就说明已经ok\",{\"1\":{\"517\":1}}],[\"运行时内存节省\",{\"1\":{\"474\":1}}],[\"运行\",{\"0\":{\"34\":1,\"167\":1,\"517\":1}}],[\"添加更新对象参数\",{\"1\":{\"809\":1}}],[\"添加默认的数据\",{\"1\":{\"809\":1}}],[\"添加默认多数据源接口\",{\"1\":{\"522\":1}}],[\"添加额外数据源\",{\"0\":{\"781\":1,\"787\":1}}],[\"添加自己的分页返回结果接口\",{\"0\":{\"689\":1}}],[\"添加自定义筛选条件返回集合不会为null\",{\"1\":{\"180\":1}}],[\"添加in条件\",{\"1\":{\"631\":2}}],[\"添加查询动态排序\",{\"1\":{\"601\":1}}],[\"添加对象查询条件\",{\"1\":{\"601\":1}}],[\"添加单主键条件\",{\"1\":{\"601\":1}}],[\"添加别名用于lambda的参数入参名称\",{\"1\":{\"529\":1}}],[\"添加kapt设置\",{\"0\":{\"514\":1}}],[\"添加翻译缓存服务\",{\"0\":{\"508\":1}}],[\"添加驱动\",{\"1\":{\"505\":1}}],[\"添加easy\",{\"1\":{\"504\":1}}],[\"添加entity到当前追踪上下文\",{\"1\":{\"247\":1}}],[\"添加分表或者分库的路由\",{\"1\":{\"486\":1}}],[\"添加项目依赖\",{\"0\":{\"478\":1}}],[\"添加到实体和dto之上用来自动生成apt代理类\",{\"1\":{\"446\":1}}],[\"添加这个注解的属性将不会再更新时被更新除非手动指定\",{\"1\":{\"429\":1}}],[\"添加这个注解的属性将不会再插入时被赋值\",{\"1\":{\"428\":1}}],[\"添加这个注解的属性将会被直接忽略映射到数据库\",{\"1\":{\"427\":1}}],[\"添加这个列为加密列\",{\"1\":{\"231\":1,\"586\":1}}],[\"添加其他方面的测试\",{\"1\":{\"390\":1}}],[\"添加测试数据\",{\"1\":{\"323\":1}}],[\"添加租户id\",{\"1\":{\"265\":1}}],[\"添加追踪主要用于对当前对象进行对象属性赋值前后的变更进行记录\",{\"1\":{\"247\":1}}],[\"添加注解\",{\"1\":{\"242\":1}}],[\"添加注解后呼出generate不知道快捷键就右键生成get\",{\"1\":{\"33\":1}}],[\"添加方言了的\",{\"1\":{\"227\":1}}],[\"添加筛选条件对star列进行求和返回结果或者默认值\",{\"1\":{\"182\":1}}],[\"添加筛选条件对star列进行求和返回结果或者null\",{\"1\":{\"182\":1}}],[\"添加主键条件结果可为null且至多一条\",{\"1\":{\"179\":1}}],[\"添加主键条件结果可为null\",{\"1\":{\"179\":1}}],[\"添加主键条件结果不能为null且至多一条\",{\"1\":{\"179\":1}}],[\"添加主键条件结果不能为null\",{\"1\":{\"179\":1}}],[\"添加数据库对象接口\",{\"0\":{\"166\":1}}],[\"添加控制器\",{\"0\":{\"125\":1,\"501\":1}}],[\"添加配置文件\",{\"0\":{\"124\":1,\"500\":1},\"1\":{\"481\":1,\"483\":1,\"505\":1}}],[\"添加配置\",{\"0\":{\"122\":1,\"498\":1}}],[\"添加依赖\",{\"0\":{\"119\":1,\"495\":1,\"513\":1}}],[\"添加如下配置\",{\"1\":{\"15\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"835\":1}}],[\"支持最后一个参数为表达式\",{\"1\":{\"713\":2}}],[\"支持vo对象返回支持include追加追踪\",{\"1\":{\"697\":1}}],[\"支持valueobject嵌套\",{\"1\":{\"311\":1}}],[\"支持关联查询\",{\"1\":{\"697\":1}}],[\"支持全数据库\",{\"1\":{\"679\":1}}],[\"支持单个参数或者全参数\",{\"1\":{\"649\":2}}],[\"支持单参数时为主表\",{\"1\":{\"334\":1}}],[\"支持高性能分片下的分页查询\",{\"1\":{\"601\":1}}],[\"支持筛选排序返回\",{\"1\":{\"554\":1}}],[\"支持筛选\",{\"1\":{\"554\":5}}],[\"支持带属性sqlcolumn\",{\"1\":{\"535\":1}}],[\"支持easyproxyquery表达式api\",{\"1\":{\"614\":1}}],[\"支持easyktquery表达式api\",{\"1\":{\"614\":1}}],[\"支持easyquery表达式api\",{\"1\":{\"614\":1}}],[\"支持easyqueryclient表达式api\",{\"1\":{\"614\":1}}],[\"支持easyqueryclient\",{\"1\":{\"533\":1}}],[\"支持entity对象的插入\",{\"1\":{\"189\":1}}],[\"支持underlined\",{\"1\":{\"483\":1}}],[\"支持mysql\",{\"1\":{\"483\":1}}],[\"支持自定义数据加密存储\",{\"1\":{\"436\":1}}],[\"支持多级关联查询\",{\"1\":{\"697\":1}}],[\"支持多次set\",{\"1\":{\"414\":1}}],[\"支持多主键模式primarykeygenerator\",{\"1\":{\"100\":1}}],[\"支持获取iterable接口也支持foreach\",{\"1\":{\"399\":1}}],[\"支持的注解全路径\",{\"1\":{\"805\":1}}],[\"支持的类型\",{\"0\":{\"613\":1}}],[\"支持的idea版本\",{\"1\":{\"535\":1}}],[\"支持的db\",{\"0\":{\"372\":1}}],[\"支持的数据库\",{\"0\":{\"9\":1},\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"支持指定约束列\",{\"1\":{\"369\":1}}],[\"支持指定set列\",{\"1\":{\"366\":1}}],[\"支持枚举类型全局作用到没有添加valueconverter注解的属性上\",{\"1\":{\"302\":1,\"568\":1}}],[\"支持项目在工程化的时候可以批量拦截sql表达式\",{\"1\":{\"256\":1}}],[\"支持join和下多表的自动识别表别名而无需自行处理别名\",{\"1\":{\"230\":1,\"585\":1}}],[\"支持spring事务\",{\"1\":{\"493\":2}}],[\"支持springel\",{\"1\":{\"100\":1,\"107\":1}}],[\"支持select\",{\"1\":{\"189\":1}}],[\"支持后续链式结果存储到value1\",{\"1\":{\"185\":1}}],[\"支持null\",{\"1\":{\"183\":1}}],[\"支持分页\",{\"1\":{\"148\":1}}],[\"支持结构化数据返回\",{\"1\":{\"108\":1}}],[\"支持雪花id\",{\"1\":{\"100\":1}}],[\"支持额外条件过滤比如公用中间表\",{\"1\":{\"100\":1,\"107\":1}}],[\"支持一对多一对一结果筛选\",{\"1\":{\"100\":1,\"107\":1}}],[\"支持like搜索\",{\"1\":{\"95\":1}}],[\"支持查询\",{\"1\":{\"95\":1}}],[\"支持clear重新build生成或者插件生成\",{\"1\":{\"28\":1}}],[\"4<\",{\"1\":{\"801\":1}}],[\"46\",{\"1\":{\"782\":10}}],[\"43\",{\"1\":{\"673\":1}}],[\"43^\",{\"1\":{\"197\":1}}],[\"4d71\",{\"1\":{\"662\":1}}],[\"4compatible\",{\"1\":{\"535\":3}}],[\"4+\",{\"1\":{\"535\":1}}],[\"48b1\",{\"1\":{\"661\":1}}],[\"48\",{\"1\":{\"418\":1,\"783\":1,\"789\":1}}],[\"48^快速生成嵌套结构化对象模型\",{\"1\":{\"139\":1}}],[\"44\",{\"1\":{\"385\":1}}],[\"47\",{\"1\":{\"385\":1,\"633\":3,\"789\":1}}],[\"41\",{\"1\":{\"385\":1,\"388\":1,\"783\":1}}],[\"41+\",{\"1\":{\"371\":1}}],[\"419\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"42\",{\"1\":{\"361\":2}}],[\"426\",{\"1\":{\"262\":1}}],[\"40\",{\"1\":{\"309\":2,\"386\":2,\"579\":2}}],[\"400\",{\"1\":{\"205\":5}}],[\"45\",{\"1\":{\"307\":1,\"573\":1}}],[\"45655\",{\"1\":{\"310\":2,\"562\":2}}],[\"4565\",{\"1\":{\"310\":2,\"562\":2}}],[\"456\",{\"1\":{\"289\":3,\"293\":1,\"296\":1,\"309\":2,\"310\":2,\"562\":2,\"579\":2,\"614\":4,\"615\":6,\"616\":2,\"649\":4,\"667\":3}}],[\"49\",{\"1\":{\"249\":1,\"323\":1,\"324\":1}}],[\"4\",{\"0\":{\"132\":1,\"340\":1,\"362\":1,\"418\":1},\"1\":{\"38\":3,\"39\":2,\"40\":1,\"157\":3,\"171\":5,\"172\":4,\"173\":1,\"206\":1,\"219\":1,\"233\":1,\"260\":1,\"262\":1,\"306\":1,\"308\":1,\"327\":2,\"335\":1,\"360\":1,\"407\":1,\"469\":1,\"478\":1,\"506\":2,\"509\":1,\"513\":3,\"514\":1,\"519\":7,\"572\":1,\"574\":1,\"588\":1,\"606\":1,\"631\":1,\"633\":1,\"642\":3,\"669\":1,\"672\":4,\"673\":1,\"687\":1,\"712\":1,\"737\":1,\"782\":2,\"788\":8,\"789\":6,\"793\":32}}],[\"4种模式可以在一个应用里面共存\",{\"1\":{\"27\":1}}],[\"非强类型api\",{\"1\":{\"460\":1,\"466\":1}}],[\"非常轻量且仅支持构造函数注入\",{\"1\":{\"544\":1}}],[\"非常好无需插件配合就有完善的智能提示\",{\"1\":{\"450\":1}}],[\"非常好\",{\"1\":{\"450\":3}}],[\"非常好配合插件几乎无敌流畅\",{\"1\":{\"450\":1}}],[\"非常推荐\",{\"1\":{\"27\":1,\"160\":1}}],[\"非数据库对象不需要\",{\"1\":{\"425\":1}}],[\"非springboot\",{\"0\":{\"816\":1}}],[\"非springboot自行注册比如solon\",{\"1\":{\"592\":1}}],[\"非springboot环境\",{\"0\":{\"548\":1}}],[\"非springboot或者多数据源之类的可以通过获取对应的queryconfiguration进行添加\",{\"1\":{\"231\":1,\"586\":1}}],[\"非spring或者spring且自行构建build的qu二有runtimecontext那么就需要调用\",{\"1\":{\"284\":1}}],[\"非spring\",{\"0\":{\"243\":1,\"460\":1,\"466\":1,\"471\":1}}],[\"非select查询时被作为片段如何使用默认就是使用当前列\",{\"1\":{\"230\":1,\"585\":1}}],[\"非中文单个字符占一个长度\",{\"1\":{\"216\":1}}],[\"非null的int更新\",{\"1\":{\"195\":2}}],[\"非null并且字符串非空即加入条件\",{\"1\":{\"23\":1}}],[\"非基本对象也可以直接返回数据库对象\",{\"1\":{\"112\":1}}],[\"非机构化数据返回是我们平时在使用时最最最常见的结构返回\",{\"1\":{\"109\":1}}],[\"非结构化平铺数据\",{\"0\":{\"109\":1},\"1\":{\"108\":1}}],[\"非结构化平铺数据返回还有穿透结构返回\",{\"1\":{\"108\":1}}],[\"使用方法来实现这两个保证在高版本上的java中不会出现警告\",{\"1\":{\"805\":1}}],[\"使用分片键删除可以精确到对应的分片表\",{\"1\":{\"795\":1}}],[\"使用子查询queryable\",{\"1\":{\"771\":2}}],[\"使用第二张表的avatar\",{\"1\":{\"669\":1}}],[\"使用指定name的拦截器\",{\"1\":{\"601\":1}}],[\"使用指南\",{\"0\":{\"92\":1},\"1\":{\"848\":2}}],[\"使用java方式只需要迭代一次返回符合stream的结果\",{\"1\":{\"601\":1}}],[\"使用即可\",{\"1\":{\"531\":1}}],[\"使用示例\",{\"0\":{\"459\":1}}],[\"使用纯lambda表达式\",{\"1\":{\"450\":1}}],[\"使用apt来生成除了build也很流畅\",{\"1\":{\"450\":1}}],[\"使用时需要开启当前追踪环境并且对查询出来的结果进行追踪后续即可监听到变更列实现差异化update语句\",{\"1\":{\"417\":1}}],[\"使用时需要配合try\",{\"1\":{\"399\":1}}],[\"使用\",{\"0\":{\"526\":1},\"1\":{\"384\":1}}],[\"使用更加人性化\",{\"1\":{\"333\":1}}],[\"使用代理模式的话非springboot环境必须要安装sql\",{\"1\":{\"460\":1,\"466\":1}}],[\"使用代理模式api更加人性化编写orm\",{\"1\":{\"333\":1}}],[\"使用代理模式\",{\"0\":{\"391\":1},\"1\":{\"333\":1}}],[\"使用前替换掉默认的解析器\",{\"1\":{\"313\":1}}],[\"使用值类型后可以改写为\",{\"1\":{\"311\":1}}],[\"使用这个接口无需添加column\",{\"1\":{\"302\":1,\"568\":1}}],[\"使用具体那个加密策略来实现当前列的加密\",{\"1\":{\"212\":1}}],[\"使用batch可以有效的提高插入或者更新的性能\",{\"1\":{\"205\":1}}],[\"使用插件就右键generate\",{\"1\":{\"157\":1}}],[\"使用的时候通过注入指定名称即可\",{\"1\":{\"123\":1,\"499\":1}}],[\"使用场景多租户\",{\"1\":{\"100\":1,\"107\":1}}],[\"使用草稿无需定义返回结果\",{\"1\":{\"42\":1,\"175\":1}}],[\"使用新版本api对象查询\",{\"1\":{\"34\":1,\"460\":1,\"466\":1}}],[\"使用起来非常顺畅流畅\",{\"1\":{\"27\":1,\"160\":1}}],[\"使用过efcore\",{\"1\":{\"18\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"819\":1}}],[\"在集合内部\",{\"1\":{\"771\":1}}],[\"在easy\",{\"1\":{\"728\":1}}],[\"在entityquery下groupby不支持连续调用两个groupby之间必须存在一个select指定要查询的结果才可以\",{\"1\":{\"342\":1,\"344\":1}}],[\"在如上的业务代码中因为需要有id+group+count+sum所以我们不得不去定义一个中间对象来处理\",{\"1\":{\"604\":1}}],[\"在第一个join表写完后逗号后面空格填写on那么就会有对应的只能提示来填充lambda参数\",{\"1\":{\"531\":1}}],[\"在第几个参数位\",{\"1\":{\"530\":1}}],[\"在分片下默认拉取大小设置\",{\"1\":{\"469\":1}}],[\"在分片聚合的时候因为需要单次获取多个链接\",{\"1\":{\"469\":1}}],[\"在使用逻辑删除后会变成update\",{\"1\":{\"468\":1}}],[\"在使用前希望用户可以首先查看一遍可选择配置项\",{\"1\":{\"467\":1}}],[\"在使用前您需要知晓目前1\",{\"1\":{\"27\":1,\"160\":1}}],[\"在你需要的模块下引入sql\",{\"1\":{\"455\":1}}],[\"在你没有写表的时候只能用\",{\"1\":{\"335\":1}}],[\"在对原先的进行操作发现select和limit并没有赋值上去\",{\"1\":{\"714\":1}}],[\"在对象更新的情况下可以选择对应的列进行set或者进行where\",{\"1\":{\"418\":1}}],[\"在对应的数据库实体上面添加注解\",{\"1\":{\"277\":1}}],[\"在代理模式下面查询相关方法入参都只有一个\",{\"1\":{\"397\":1}}],[\"在以下的所有测试中\",{\"1\":{\"384\":1}}],[\"在初始化的时候分别为easy\",{\"1\":{\"384\":1}}],[\"在所有orm中偏中上并不是天花板\",{\"1\":{\"380\":1}}],[\"在查询的时候会被解密\",{\"1\":{\"211\":1}}],[\"在插入修改查询的时候会被调用\",{\"1\":{\"211\":1}}],[\"在这边可以提取对应的表达式参数\",{\"1\":{\"809\":1}}],[\"在这边进行apply\",{\"1\":{\"192\":1}}],[\"在这里希望您可以免费给我点个star\",{\"1\":{\"47\":1}}],[\"在之前版本会有一个失误导致关系会提前在where中体现导致结果不正确\",{\"1\":{\"127\":1}}],[\"在众多orm中极少数orm才会支持的group感知\",{\"1\":{\"100\":1,\"107\":1}}],[\"在application\",{\"1\":{\"12\":1}}],[\"745936\",{\"1\":{\"794\":1}}],[\"740\",{\"1\":{\"23\":2}}],[\"7<\",{\"1\":{\"504\":4}}],[\"70\",{\"1\":{\"469\":1}}],[\"703659\",{\"1\":{\"789\":1}}],[\"703\",{\"1\":{\"306\":1,\"308\":1,\"572\":1,\"574\":1}}],[\"7759\",{\"1\":{\"387\":1}}],[\"7751\",{\"1\":{\"387\":1}}],[\"7755\",{\"1\":{\"387\":1}}],[\"7762\",{\"1\":{\"387\":1}}],[\"7745\",{\"1\":{\"387\":1}}],[\"7771\",{\"1\":{\"387\":1}}],[\"7776\",{\"1\":{\"387\":1}}],[\"7772\",{\"1\":{\"387\":1}}],[\"7784\",{\"1\":{\"387\":1}}],[\"7780\",{\"1\":{\"387\":2}}],[\"7790\",{\"1\":{\"387\":1}}],[\"7798\",{\"1\":{\"387\":1}}],[\"7794\",{\"1\":{\"387\":1}}],[\"773\",{\"1\":{\"265\":1}}],[\"7856\",{\"1\":{\"387\":1}}],[\"7851\",{\"1\":{\"387\":1}}],[\"7805\",{\"1\":{\"387\":1}}],[\"7803\",{\"1\":{\"387\":1}}],[\"7807\",{\"1\":{\"387\":1}}],[\"7821\",{\"1\":{\"387\":1}}],[\"756\",{\"1\":{\"265\":1}}],[\"7oh9gtlq8hk4vflsizrrkg==rsw+jktki+3iiq0xm3vssw==\",{\"1\":{\"220\":1}}],[\"7vntymw==r+bfxclbpmfdtvtgnpb2kg==2bm0wnppthxlttf3epf8ow==\",{\"1\":{\"220\":2}}],[\"7\",{\"0\":{\"135\":1,\"367\":1,\"422\":1},\"1\":{\"35\":1,\"157\":1,\"168\":1,\"311\":1,\"360\":1,\"395\":1,\"417\":4,\"642\":2,\"672\":2,\"713\":1,\"782\":2,\"783\":1,\"788\":2,\"793\":2}}],[\"79\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"```java\",{\"1\":{\"803\":1}}],[\"`ds\",{\"1\":{\"788\":10,\"789\":4}}],[\"`deleted\",{\"1\":{\"285\":11}}],[\"`deleted`\",{\"1\":{\"174\":1,\"185\":5,\"186\":2,\"205\":1,\"224\":1,\"227\":1,\"278\":8,\"280\":1,\"281\":5,\"327\":3,\"328\":5,\"365\":1,\"366\":5,\"521\":2,\"607\":2,\"616\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":2,\"626\":6,\"631\":7,\"633\":4,\"634\":2,\"642\":2,\"645\":1,\"646\":2,\"647\":2,\"648\":2,\"650\":2,\"651\":2,\"667\":2,\"672\":2,\"673\":4,\"682\":1,\"714\":3,\"733\":1,\"734\":3,\"737\":1,\"738\":1,\"739\":1,\"742\":2,\"758\":1,\"759\":1,\"760\":1}}],[\"`depart\",{\"1\":{\"23\":1,\"185\":3,\"186\":4}}],[\"`order\",{\"1\":{\"782\":10,\"783\":4,\"788\":10,\"789\":2,\"793\":20,\"794\":6,\"795\":3}}],[\"`order`\",{\"1\":{\"205\":1,\"281\":2,\"365\":1,\"366\":5,\"521\":1,\"623\":1,\"626\":3,\"631\":3,\"633\":3,\"634\":2,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"734\":2,\"742\":1}}],[\"`xx`\",{\"1\":{\"650\":1,\"651\":1}}],[\"`num`\",{\"1\":{\"734\":4}}],[\"`no`\",{\"1\":{\"397\":1}}],[\"`name1`\",{\"1\":{\"370\":1,\"420\":1}}],[\"`name`\",{\"1\":{\"23\":3,\"140\":6,\"144\":5,\"145\":2,\"146\":2,\"147\":1,\"149\":2,\"186\":2,\"214\":4,\"220\":10,\"254\":1,\"314\":1,\"315\":4,\"316\":1,\"350\":2,\"351\":2,\"352\":2,\"363\":2,\"370\":1,\"397\":2,\"420\":1,\"557\":5,\"581\":1,\"593\":1,\"594\":1,\"595\":1,\"694\":11,\"696\":11,\"706\":1,\"707\":2,\"708\":2,\"709\":2,\"710\":3,\"712\":6,\"713\":8,\"724\":5,\"764\":1,\"765\":1}}],[\"`query\",{\"1\":{\"350\":2,\"351\":3,\"352\":3,\"353\":1,\"363\":3}}],[\"`version`\",{\"1\":{\"323\":2,\"324\":2,\"325\":2,\"327\":3,\"328\":3}}],[\"`value4`\",{\"1\":{\"185\":2}}],[\"`value3`\",{\"1\":{\"39\":1,\"42\":1,\"144\":1,\"172\":1,\"175\":1,\"185\":4,\"237\":1,\"565\":1,\"737\":1,\"739\":1}}],[\"`value2`\",{\"1\":{\"39\":1,\"42\":1,\"144\":2,\"172\":1,\"175\":1,\"185\":4,\"237\":1,\"565\":1,\"606\":1,\"607\":4,\"666\":1,\"667\":2,\"724\":3,\"737\":1,\"738\":1,\"739\":1}}],[\"`value1`\",{\"1\":{\"39\":1,\"42\":1,\"144\":2,\"172\":1,\"175\":1,\"185\":4,\"237\":1,\"565\":1,\"606\":1,\"607\":6,\"666\":1,\"667\":2,\"724\":3,\"737\":1,\"738\":1,\"739\":1}}],[\"`license\",{\"1\":{\"314\":4,\"315\":14,\"316\":5}}],[\"`last\",{\"1\":{\"237\":18,\"238\":1,\"565\":18,\"566\":1}}],[\"`my\",{\"1\":{\"314\":1,\"315\":6,\"316\":2,\"420\":1}}],[\"`menu\",{\"1\":{\"149\":1}}],[\"`province\",{\"1\":{\"712\":6}}],[\"`province`\",{\"1\":{\"314\":1,\"315\":12,\"316\":1}}],[\"`publish\",{\"1\":{\"281\":2,\"521\":1,\"623\":1,\"626\":3,\"631\":6,\"633\":5,\"634\":3,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"734\":2,\"742\":1}}],[\"`phone\",{\"1\":{\"214\":10,\"220\":23}}],[\"`phone`\",{\"1\":{\"23\":3,\"185\":19,\"186\":4,\"231\":1,\"232\":1,\"233\":2,\"234\":1,\"235\":4,\"249\":1,\"250\":2,\"251\":1,\"252\":3,\"323\":2,\"324\":1,\"325\":3,\"327\":1,\"328\":1,\"586\":1,\"587\":1,\"588\":2,\"589\":1,\"590\":4,\"772\":1,\"774\":1}}],[\"`full\",{\"1\":{\"237\":3,\"565\":3}}],[\"`first\",{\"1\":{\"237\":18,\"238\":1,\"565\":18,\"566\":1}}],[\"`blogcount`\",{\"1\":{\"733\":2}}],[\"`blogid`\",{\"1\":{\"733\":2}}],[\"`birthday`\",{\"1\":{\"237\":10,\"238\":1,\"565\":10,\"566\":1}}],[\"`book\",{\"1\":{\"140\":2}}],[\"`student\",{\"1\":{\"557\":3,\"694\":2,\"696\":2,\"706\":2,\"713\":2}}],[\"`status`\",{\"1\":{\"205\":1,\"281\":2,\"365\":1,\"366\":5,\"521\":1,\"593\":1,\"594\":1,\"595\":1,\"623\":1,\"626\":3,\"631\":4,\"633\":4,\"634\":3,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"734\":2,\"742\":1,\"782\":10,\"783\":6,\"788\":10,\"789\":4,\"793\":10,\"794\":4,\"795\":1}}],[\"`stars6`\",{\"1\":{\"517\":2}}],[\"`stars4`\",{\"1\":{\"517\":2}}],[\"`stars3`\",{\"1\":{\"517\":4}}],[\"`stars2`\",{\"1\":{\"517\":2}}],[\"`stars`\",{\"1\":{\"34\":1,\"35\":4,\"36\":1,\"38\":1,\"39\":4,\"41\":2,\"42\":2,\"167\":1,\"168\":5,\"169\":1,\"171\":1,\"172\":4,\"174\":2,\"175\":2,\"186\":1,\"196\":6,\"260\":3,\"265\":2,\"278\":2,\"280\":1,\"285\":3,\"293\":1,\"296\":1,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"359\":2,\"360\":1,\"361\":1,\"362\":1,\"417\":1,\"418\":2,\"419\":1,\"482\":2,\"517\":2,\"562\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2,\"607\":1,\"631\":1,\"645\":1,\"647\":1,\"666\":11,\"672\":1,\"673\":4,\"679\":1,\"681\":1,\"733\":1,\"744\":2,\"757\":4,\"758\":5,\"759\":5,\"760\":3}}],[\"`star`\",{\"1\":{\"185\":10,\"186\":2,\"205\":1,\"281\":2,\"365\":1,\"366\":9,\"521\":1,\"616\":2,\"621\":1,\"623\":1,\"626\":3,\"631\":2,\"633\":2,\"634\":2,\"642\":2,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"733\":1,\"734\":3,\"737\":1,\"742\":2,\"760\":1}}],[\"`school\",{\"1\":{\"557\":9,\"694\":15,\"696\":15,\"706\":2,\"707\":2,\"708\":2,\"709\":3,\"710\":4,\"713\":11}}],[\"`score`\",{\"1\":{\"205\":1,\"281\":2,\"365\":1,\"366\":5,\"521\":1,\"623\":1,\"626\":3,\"631\":2,\"633\":2,\"634\":3,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"683\":4,\"714\":6,\"734\":3,\"742\":1}}],[\"`sys\",{\"1\":{\"370\":1}}],[\"`uid`\",{\"1\":{\"782\":10,\"783\":4,\"788\":10,\"789\":2,\"793\":10,\"794\":2,\"795\":1}}],[\"`url`\",{\"1\":{\"205\":1,\"224\":2,\"227\":2,\"281\":2,\"365\":1,\"366\":5,\"521\":1,\"607\":2,\"623\":1,\"626\":3,\"631\":2,\"633\":2,\"634\":2,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"734\":2,\"738\":1,\"739\":1,\"742\":1}}],[\"`update\",{\"1\":{\"205\":2,\"260\":6,\"262\":2,\"265\":6,\"281\":4,\"365\":2,\"366\":10,\"521\":2,\"623\":2,\"626\":6,\"631\":4,\"633\":4,\"634\":2,\"646\":2,\"647\":2,\"648\":2,\"650\":2,\"651\":2,\"672\":2,\"673\":4,\"682\":2,\"734\":4,\"742\":2}}],[\"`username`\",{\"1\":{\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":3,\"323\":2,\"324\":1,\"327\":1,\"328\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"772\":1,\"774\":1}}],[\"`user\",{\"1\":{\"140\":3,\"144\":4,\"145\":1,\"146\":1,\"147\":1,\"149\":1}}],[\"`easy\",{\"1\":{\"174\":1,\"772\":1,\"774\":1}}],[\"`invalid\",{\"1\":{\"593\":3,\"594\":5,\"595\":7}}],[\"`is\",{\"1\":{\"205\":1,\"281\":2,\"365\":1,\"366\":5,\"521\":1,\"623\":1,\"626\":3,\"631\":2,\"633\":2,\"634\":2,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"734\":2,\"742\":1}}],[\"`idcount`\",{\"1\":{\"648\":1}}],[\"`id\",{\"1\":{\"174\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":3,\"323\":2,\"324\":1,\"327\":1,\"328\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"642\":2,\"772\":1,\"774\":1}}],[\"`id`\",{\"1\":{\"23\":1,\"34\":2,\"35\":8,\"36\":2,\"38\":4,\"39\":7,\"40\":2,\"41\":7,\"42\":7,\"140\":6,\"144\":6,\"145\":3,\"146\":3,\"147\":3,\"149\":5,\"167\":2,\"168\":10,\"169\":2,\"171\":4,\"172\":7,\"173\":2,\"174\":10,\"175\":7,\"185\":29,\"186\":3,\"196\":2,\"205\":1,\"214\":5,\"220\":12,\"221\":3,\"223\":9,\"232\":1,\"233\":2,\"234\":1,\"235\":4,\"237\":6,\"238\":1,\"249\":1,\"250\":3,\"251\":2,\"252\":5,\"254\":1,\"260\":5,\"262\":1,\"265\":6,\"278\":5,\"280\":3,\"281\":6,\"285\":5,\"292\":2,\"293\":3,\"295\":2,\"296\":3,\"306\":3,\"307\":2,\"308\":3,\"309\":3,\"310\":1,\"314\":1,\"315\":4,\"316\":2,\"323\":3,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"350\":2,\"351\":2,\"352\":3,\"353\":1,\"355\":1,\"356\":1,\"359\":2,\"360\":1,\"361\":1,\"363\":2,\"365\":1,\"366\":3,\"370\":1,\"397\":7,\"417\":3,\"418\":2,\"419\":2,\"420\":1,\"482\":1,\"517\":4,\"521\":2,\"557\":17,\"562\":1,\"565\":6,\"566\":1,\"572\":3,\"573\":2,\"574\":3,\"579\":3,\"581\":1,\"587\":1,\"588\":2,\"589\":1,\"590\":4,\"593\":1,\"594\":1,\"595\":1,\"606\":2,\"607\":3,\"615\":3,\"616\":3,\"620\":1,\"621\":1,\"622\":3,\"623\":2,\"626\":8,\"631\":9,\"633\":2,\"634\":2,\"642\":12,\"645\":4,\"646\":4,\"647\":7,\"648\":10,\"650\":3,\"651\":3,\"666\":11,\"667\":10,\"672\":6,\"673\":13,\"679\":3,\"681\":3,\"682\":6,\"683\":8,\"694\":17,\"696\":17,\"706\":2,\"707\":2,\"708\":3,\"709\":3,\"710\":4,\"713\":13,\"714\":14,\"724\":6,\"733\":4,\"734\":2,\"738\":3,\"739\":4,\"742\":1,\"744\":4,\"757\":5,\"758\":8,\"759\":8,\"760\":6,\"764\":2,\"765\":2,\"772\":2,\"774\":2,\"782\":10,\"783\":10,\"788\":10,\"789\":6,\"793\":10,\"794\":6,\"795\":3}}],[\"`icon`\",{\"1\":{\"149\":1}}],[\"`route`\",{\"1\":{\"149\":1}}],[\"`role\",{\"1\":{\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"149\":2}}],[\"`relation\",{\"1\":{\"140\":6}}],[\"`alias`\",{\"1\":{\"666\":1}}],[\"`area`\",{\"1\":{\"314\":1,\"315\":6,\"316\":1}}],[\"`age`\",{\"1\":{\"237\":3,\"565\":3,\"724\":1,\"764\":1,\"765\":1}}],[\"`address\",{\"1\":{\"214\":8,\"220\":25}}],[\"`address`\",{\"1\":{\"174\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":3,\"254\":1,\"323\":2,\"324\":1,\"327\":1,\"328\":1,\"581\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"694\":2,\"696\":2,\"706\":1,\"713\":1,\"772\":1,\"774\":1}}],[\"`addr`\",{\"1\":{\"144\":2}}],[\"`account`\",{\"1\":{\"23\":1,\"186\":2}}],[\"`city\",{\"1\":{\"712\":4}}],[\"`city`\",{\"1\":{\"144\":2,\"314\":1,\"315\":6,\"316\":1}}],[\"`company\",{\"1\":{\"724\":3,\"764\":1,\"765\":1}}],[\"`code`\",{\"1\":{\"712\":8}}],[\"`content`\",{\"1\":{\"174\":1,\"205\":1,\"281\":2,\"350\":1,\"351\":2,\"352\":2,\"363\":2,\"365\":1,\"366\":9,\"521\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"626\":3,\"631\":4,\"633\":4,\"634\":3,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"734\":2,\"742\":1,\"758\":1,\"759\":1,\"760\":1}}],[\"`class\",{\"1\":{\"557\":4,\"694\":7,\"696\":7,\"706\":1,\"707\":2,\"708\":1,\"709\":2,\"710\":4,\"713\":7}}],[\"`custom\",{\"1\":{\"254\":1,\"581\":1}}],[\"`createtime`\",{\"1\":{\"666\":1}}],[\"`create\",{\"1\":{\"23\":5,\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":5,\"39\":2,\"40\":3,\"41\":1,\"42\":4,\"140\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":2,\"167\":1,\"168\":4,\"169\":1,\"170\":1,\"171\":5,\"172\":2,\"173\":3,\"174\":3,\"175\":4,\"185\":5,\"186\":2,\"205\":2,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":3,\"260\":4,\"265\":2,\"278\":2,\"280\":1,\"281\":4,\"285\":3,\"293\":3,\"296\":3,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"323\":2,\"324\":1,\"327\":1,\"328\":1,\"359\":2,\"360\":1,\"361\":1,\"362\":1,\"365\":2,\"366\":10,\"397\":2,\"417\":1,\"418\":2,\"419\":1,\"482\":1,\"521\":2,\"562\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"593\":1,\"594\":1,\"595\":1,\"606\":1,\"622\":1,\"623\":2,\"626\":6,\"631\":5,\"633\":4,\"634\":2,\"642\":3,\"645\":1,\"646\":2,\"647\":3,\"648\":2,\"650\":3,\"651\":3,\"666\":11,\"667\":4,\"670\":1,\"672\":3,\"673\":13,\"679\":3,\"681\":1,\"682\":2,\"733\":1,\"734\":4,\"737\":7,\"742\":3,\"744\":2,\"757\":4,\"758\":5,\"759\":1,\"760\":1,\"764\":1,\"765\":1,\"772\":1,\"774\":1,\"782\":10,\"783\":6,\"788\":10,\"789\":4,\"793\":10,\"794\":4,\"795\":1}}],[\"`teacher\",{\"1\":{\"694\":1,\"696\":1,\"709\":1,\"710\":1,\"713\":1}}],[\"`tenant\",{\"1\":{\"260\":2,\"265\":6}}],[\"`title2`\",{\"1\":{\"310\":1,\"562\":1}}],[\"`title`\",{\"1\":{\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":5,\"39\":2,\"40\":3,\"41\":2,\"42\":2,\"167\":1,\"168\":4,\"169\":1,\"170\":1,\"171\":5,\"172\":2,\"173\":3,\"174\":2,\"175\":2,\"185\":6,\"186\":2,\"205\":1,\"260\":4,\"262\":1,\"265\":3,\"278\":2,\"280\":2,\"281\":4,\"285\":3,\"293\":3,\"296\":3,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"355\":1,\"359\":2,\"360\":1,\"361\":1,\"362\":1,\"365\":1,\"366\":5,\"397\":3,\"417\":3,\"418\":1,\"419\":1,\"482\":1,\"521\":1,\"562\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2,\"606\":1,\"615\":12,\"616\":4,\"620\":2,\"621\":2,\"622\":2,\"623\":2,\"626\":4,\"631\":3,\"633\":2,\"634\":3,\"642\":2,\"645\":1,\"646\":2,\"647\":2,\"648\":1,\"650\":1,\"651\":1,\"666\":5,\"672\":18,\"673\":19,\"679\":1,\"681\":1,\"682\":3,\"683\":2,\"714\":3,\"733\":1,\"734\":3,\"742\":1,\"744\":2,\"757\":4,\"758\":4,\"759\":4,\"760\":3}}],[\"`topic\",{\"1\":{\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"562\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2}}],[\"`top`\",{\"1\":{\"205\":1,\"281\":2,\"365\":1,\"366\":5,\"521\":1,\"623\":1,\"626\":3,\"631\":2,\"633\":2,\"634\":1,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"734\":2,\"742\":1}}],[\"`t\",{\"1\":{\"23\":2,\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":2,\"39\":2,\"40\":2,\"41\":2,\"42\":4,\"144\":8,\"145\":3,\"146\":3,\"147\":3,\"149\":5,\"167\":1,\"168\":5,\"169\":1,\"170\":1,\"171\":2,\"172\":2,\"173\":2,\"174\":4,\"175\":4,\"185\":13,\"186\":5,\"196\":2,\"205\":1,\"221\":1,\"223\":3,\"224\":1,\"227\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":3,\"237\":4,\"238\":1,\"281\":4,\"285\":1,\"292\":1,\"293\":2,\"295\":1,\"296\":2,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"362\":1,\"365\":1,\"366\":3,\"397\":3,\"418\":2,\"482\":1,\"517\":2,\"521\":1,\"562\":1,\"565\":4,\"566\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":3,\"593\":1,\"594\":1,\"595\":1,\"606\":1,\"607\":3,\"615\":3,\"616\":2,\"620\":1,\"621\":1,\"622\":2,\"623\":1,\"631\":6,\"633\":2,\"634\":1,\"642\":4,\"650\":2,\"651\":2,\"666\":6,\"667\":2,\"672\":2,\"673\":6,\"679\":1,\"712\":6,\"714\":6,\"724\":6,\"733\":2,\"734\":1,\"737\":1,\"738\":2,\"739\":2,\"742\":1,\"744\":2,\"757\":3,\"758\":4,\"759\":4,\"760\":2,\"764\":2,\"765\":2,\"772\":1,\"774\":1,\"782\":10,\"783\":6}}],[\"查看详情\",{\"1\":{\"827\":1,\"828\":1,\"829\":1,\"830\":1,\"831\":1,\"832\":1,\"833\":1,\"834\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"843\":1,\"844\":1,\"845\":1,\"846\":1}}],[\"查看是否引入sql\",{\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"查询结果大于1条\",{\"1\":{\"814\":1}}],[\"查询企业存条件是企业所有用户平均年龄大于18\",{\"0\":{\"765\":1}}],[\"查询企业存在用户成年的\",{\"0\":{\"764\":1}}],[\"查询企业id和企业下有多少个姓李的用户年龄总和\",{\"1\":{\"724\":1}}],[\"查询企业id和企业下有多少个姓李的用户数\",{\"1\":{\"724\":1}}],[\"查询企业id和企业下有多少个用户\",{\"1\":{\"724\":1}}],[\"查询映射到对象blogentitytest2在原来的查询结果上忽略blogentity\",{\"1\":{\"721\":1}}],[\"查询学生表\",{\"1\":{\"713\":1}}],[\"查询学生叫做小明的并且获取小明的所在班级和家庭地址\",{\"1\":{\"134\":1}}],[\"查询学校班级的同时附带查询出班级的学生\",{\"1\":{\"703\":1}}],[\"查询sqlquerymap\",{\"0\":{\"657\":1,\"752\":1}}],[\"查询sqlquery\",{\"0\":{\"654\":1,\"749\":1}}],[\"查询某一张表的所有字段\",{\"0\":{\"650\":1}}],[\"查询b表的id字段的count时的lambda表达式为\",{\"1\":{\"642\":1}}],[\"查询聚合id\",{\"1\":{\"604\":1}}],[\"查询基础表信息\",{\"1\":{\"604\":1}}],[\"查询对应的时间函数年份月份进行分组并且取3个月内的\",{\"1\":{\"737\":1}}],[\"查询对分组结果进行筛选\",{\"1\":{\"601\":1}}],[\"查询对象\",{\"0\":{\"22\":1,\"399\":1,\"629\":1},\"1\":{\"601\":1}}],[\"查询分组\",{\"1\":{\"601\":1}}],[\"查询allfields任然不会查询必须要手动指定查询\",{\"1\":{\"557\":1}}],[\"查询添加astracking或者\",{\"1\":{\"417\":1}}],[\"查询多条数据\",{\"0\":{\"403\":1}}],[\"查询第一条数据没有的情况下返回new\",{\"1\":{\"403\":1}}],[\"查询第一条数据没有的情况下返回null\",{\"1\":{\"401\":1}}],[\"查询第一条数据且不为null\",{\"0\":{\"402\":1}}],[\"查询第一条数据且仅存在至多一条数据\",{\"1\":{\"401\":1,\"402\":1}}],[\"查询第一条数据\",{\"0\":{\"401\":1}}],[\"查询返回符合条件的可迭代结果集\",{\"1\":{\"399\":1}}],[\"查询返回符合条件的分页结果\",{\"1\":{\"399\":1}}],[\"查询返回符合条件的所有数据\",{\"1\":{\"399\":1}}],[\"查询返回第一条数据\",{\"1\":{\"399\":4}}],[\"查询过滤租户id\",{\"1\":{\"265\":1}}],[\"查询使用astracking使当前查询结果添加到追踪上下文\",{\"1\":{\"242\":1}}],[\"查询语句采用手机号列解密\",{\"1\":{\"233\":1,\"588\":1}}],[\"查询数据移除jdbc\",{\"1\":{\"272\":1}}],[\"查询数据\",{\"0\":{\"233\":1,\"588\":1}}],[\"查询每个用户和前3个最早创建的角色\",{\"1\":{\"148\":1}}],[\"查询用户小明下面的菜单\",{\"1\":{\"149\":1}}],[\"查询用户下面存在的任意角色不大于2022年创建的\",{\"1\":{\"147\":1}}],[\"查询用户下面存在角色是xx员\",{\"1\":{\"146\":1}}],[\"查询用户下面存在角色是收货员的用户\",{\"1\":{\"145\":1}}],[\"查询用户叫做小明的返回用户的姓名地址和角色数量\",{\"1\":{\"144\":1}}],[\"查询用户叫做小明的返回小明的姓名和小明所在地址\",{\"1\":{\"144\":1}}],[\"查询用户的历史书籍里面是否有一本名称包含小学的书\",{\"1\":{\"140\":1}}],[\"查询用户的书籍是否包含小学\",{\"1\":{\"140\":1}}],[\"查询杭州或绍兴的用户\",{\"1\":{\"144\":1}}],[\"查询历史书籍\",{\"1\":{\"140\":1}}],[\"查询老师的书籍是否包含老师字样的书籍\",{\"1\":{\"140\":1}}],[\"查询课程这个课程是一班的\",{\"1\":{\"137\":1}}],[\"查询班级并且连带查询每个班级最先入学的前5位学生\",{\"1\":{\"697\":1}}],[\"查询班级叫做一班的并且返回对应的vo并且会自动根据vo会拉取相应的数据\",{\"1\":{\"138\":1}}],[\"查询班级叫做一班的和班级下面的年龄最大的前三位学生并且返回学生的家庭地址包括班级下的老师\",{\"1\":{\"136\":1}}],[\"查询班级叫做一班的和班级下面的学生并且返回学生的家庭地址包括班级下的老师\",{\"1\":{\"135\":1}}],[\"查询班级下面的所有老师和学生\",{\"1\":{\"710\":1}}],[\"查询班级下面老师的有姓金的并且获取班级和老师\",{\"1\":{\"133\":1}}],[\"查询班级下面存在学生为男生的平均年龄小于等于\",{\"1\":{\"132\":1}}],[\"查询班级下面存在学生平均年龄小于等于\",{\"1\":{\"132\":1}}],[\"查询班级下面存在学生姓金的有且只有\",{\"1\":{\"131\":1}}],[\"查询班级下面存在学生姓金的班级\",{\"1\":{\"129\":1}}],[\"查询班级下面存在学生家地址是绍兴市的班级有哪些\",{\"1\":{\"130\":1}}],[\"查询班级下面不存在学生姓金的班级\",{\"1\":{\"129\":1}}],[\"查询\",{\"0\":{\"102\":1,\"178\":1,\"237\":1,\"315\":1,\"557\":1,\"565\":1,\"593\":1,\"596\":1},\"1\":{\"264\":1,\"265\":1,\"278\":1,\"280\":1,\"323\":1,\"601\":1}}],[\"查询t表的所有除了id和title\",{\"1\":{\"42\":1,\"175\":1}}],[\"查询所有并且将其他表字段查询出来\",{\"1\":{\"735\":1}}],[\"查询所有字段忽略其中一个\",{\"0\":{\"651\":1}}],[\"查询所有\",{\"1\":{\"38\":1}}],[\"=new\",{\"1\":{\"809\":1}}],[\"=null\",{\"1\":{\"200\":1,\"201\":1,\"260\":1,\"265\":1,\"515\":6,\"620\":1,\"773\":1,\"774\":1}}],[\"=simple\",{\"1\":{\"740\":1}}],[\"=>\",{\"1\":{\"396\":1}}],[\"==0\",{\"1\":{\"672\":1}}],[\"==1\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"==\",{\"1\":{\"260\":5,\"262\":4,\"265\":1,\"306\":2,\"308\":4,\"313\":3,\"572\":2,\"574\":4,\"642\":1,\"742\":3,\"809\":8,\"814\":8}}],[\"==>\",{\"1\":{\"23\":4,\"34\":2,\"35\":8,\"36\":2,\"37\":2,\"38\":4,\"39\":4,\"40\":4,\"41\":2,\"42\":2,\"140\":6,\"167\":2,\"168\":10,\"169\":2,\"170\":2,\"171\":4,\"172\":4,\"173\":4,\"174\":4,\"175\":2,\"205\":4,\"214\":8,\"220\":22,\"232\":2,\"233\":2,\"234\":2,\"235\":4,\"249\":2,\"250\":4,\"251\":2,\"252\":6,\"260\":8,\"262\":2,\"265\":10,\"278\":8,\"280\":5,\"281\":4,\"285\":7,\"306\":4,\"307\":2,\"308\":4,\"309\":4,\"310\":2,\"314\":2,\"315\":12,\"316\":4,\"323\":4,\"324\":2,\"325\":6,\"327\":4,\"328\":6,\"351\":6,\"352\":6,\"353\":2,\"355\":4,\"356\":2,\"359\":2,\"360\":11,\"361\":3,\"362\":2,\"363\":6,\"365\":2,\"366\":6,\"397\":4,\"417\":6,\"418\":4,\"419\":4,\"482\":2,\"517\":2,\"521\":2,\"562\":2,\"572\":4,\"573\":2,\"574\":4,\"579\":4,\"587\":2,\"588\":2,\"589\":2,\"590\":4,\"615\":6,\"616\":2,\"626\":6,\"631\":4,\"633\":4,\"642\":4,\"645\":2,\"646\":2,\"647\":2,\"648\":2,\"650\":2,\"651\":2,\"655\":1,\"656\":2,\"658\":1,\"659\":2,\"661\":1,\"662\":2,\"667\":6,\"673\":12,\"679\":1,\"681\":2,\"682\":4,\"683\":2,\"694\":12,\"696\":12,\"706\":3,\"707\":3,\"708\":3,\"709\":5,\"710\":7,\"712\":10,\"713\":17,\"737\":2,\"738\":2,\"739\":2,\"742\":2,\"744\":4,\"750\":1,\"751\":2,\"753\":1,\"754\":2,\"757\":2,\"758\":2,\"759\":2,\"760\":2,\"772\":2,\"774\":2,\"782\":20,\"783\":12,\"788\":20,\"789\":8,\"793\":20,\"794\":8,\"795\":4}}],[\"=\",{\"1\":{\"21\":1,\"22\":4,\"23\":2,\"24\":2,\"25\":7,\"34\":10,\"35\":8,\"36\":2,\"37\":2,\"38\":2,\"39\":2,\"40\":1,\"41\":3,\"42\":4,\"60\":1,\"74\":1,\"110\":4,\"111\":7,\"112\":9,\"116\":4,\"122\":2,\"123\":1,\"129\":5,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":2,\"140\":23,\"144\":12,\"145\":4,\"146\":3,\"147\":4,\"148\":1,\"149\":8,\"152\":18,\"157\":1,\"167\":9,\"168\":10,\"169\":2,\"170\":2,\"171\":4,\"172\":5,\"173\":1,\"174\":6,\"175\":4,\"179\":6,\"180\":2,\"181\":1,\"182\":6,\"183\":3,\"184\":5,\"185\":36,\"186\":7,\"191\":4,\"192\":1,\"196\":9,\"200\":4,\"201\":5,\"214\":7,\"219\":7,\"220\":22,\"221\":1,\"223\":10,\"224\":1,\"227\":9,\"231\":5,\"232\":2,\"233\":2,\"234\":8,\"235\":6,\"236\":16,\"237\":7,\"238\":1,\"243\":1,\"249\":2,\"250\":8,\"251\":5,\"252\":12,\"254\":3,\"257\":2,\"260\":16,\"262\":10,\"265\":23,\"271\":9,\"272\":4,\"273\":9,\"274\":22,\"278\":13,\"280\":6,\"281\":7,\"284\":6,\"285\":13,\"292\":2,\"293\":4,\"295\":2,\"296\":4,\"300\":1,\"304\":2,\"306\":8,\"307\":5,\"308\":19,\"309\":8,\"310\":14,\"311\":2,\"313\":24,\"314\":5,\"315\":12,\"316\":12,\"323\":4,\"324\":9,\"325\":11,\"327\":8,\"328\":12,\"350\":3,\"351\":6,\"352\":17,\"353\":5,\"354\":1,\"355\":3,\"356\":4,\"358\":4,\"362\":4,\"363\":6,\"365\":2,\"366\":20,\"368\":1,\"369\":5,\"370\":1,\"374\":3,\"375\":4,\"376\":5,\"377\":11,\"385\":2,\"386\":2,\"387\":2,\"388\":3,\"389\":4,\"396\":1,\"397\":13,\"400\":1,\"411\":3,\"412\":1,\"417\":13,\"418\":3,\"419\":9,\"420\":4,\"426\":1,\"429\":3,\"430\":2,\"460\":5,\"466\":4,\"468\":1,\"471\":1,\"479\":1,\"480\":2,\"482\":5,\"485\":2,\"486\":4,\"487\":1,\"491\":2,\"493\":5,\"498\":2,\"499\":1,\"505\":6,\"507\":8,\"508\":3,\"509\":2,\"515\":1,\"517\":14,\"521\":2,\"522\":7,\"523\":3,\"525\":3,\"526\":2,\"530\":3,\"548\":1,\"556\":11,\"557\":10,\"561\":2,\"562\":14,\"564\":16,\"565\":7,\"566\":1,\"570\":2,\"572\":8,\"573\":5,\"574\":19,\"578\":2,\"579\":8,\"581\":3,\"586\":5,\"587\":2,\"588\":2,\"589\":8,\"590\":6,\"592\":14,\"593\":1,\"594\":2,\"595\":2,\"606\":1,\"607\":5,\"608\":2,\"615\":10,\"616\":5,\"620\":3,\"621\":5,\"622\":7,\"623\":6,\"626\":10,\"631\":21,\"632\":13,\"633\":7,\"634\":25,\"641\":4,\"642\":11,\"645\":4,\"646\":4,\"647\":6,\"648\":6,\"649\":2,\"650\":4,\"651\":4,\"655\":1,\"656\":1,\"658\":1,\"659\":1,\"661\":1,\"662\":1,\"666\":29,\"667\":15,\"669\":7,\"672\":22,\"673\":18,\"679\":1,\"681\":1,\"682\":5,\"683\":3,\"686\":5,\"689\":2,\"690\":4,\"691\":1,\"694\":18,\"696\":18,\"697\":1,\"703\":1,\"705\":34,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"712\":11,\"713\":7,\"714\":11,\"724\":6,\"731\":1,\"732\":1,\"733\":2,\"734\":4,\"735\":2,\"737\":2,\"738\":6,\"739\":4,\"742\":5,\"744\":4,\"750\":1,\"751\":1,\"753\":1,\"754\":1,\"756\":1,\"757\":5,\"758\":8,\"759\":8,\"760\":6,\"764\":3,\"765\":2,\"771\":5,\"772\":2,\"773\":1,\"774\":2,\"781\":6,\"782\":8,\"783\":12,\"787\":6,\"788\":8,\"789\":10,\"793\":8,\"794\":10,\"795\":3,\"796\":3,\"797\":16,\"798\":5,\"803\":2,\"804\":3,\"805\":4,\"807\":2,\"809\":15,\"814\":9,\"816\":1,\"827\":1,\"840\":1}}],[\"预览\",{\"0\":{\"19\":1}}],[\"959225\",{\"1\":{\"783\":1}}],[\"9e57\",{\"1\":{\"662\":1}}],[\"971\",{\"1\":{\"631\":4}}],[\"9100\",{\"1\":{\"389\":2}}],[\"9000\",{\"1\":{\"389\":2}}],[\"9300\",{\"1\":{\"389\":1}}],[\"9200\",{\"1\":{\"389\":1}}],[\"99\",{\"1\":{\"362\":1,\"368\":1,\"369\":1}}],[\"997\",{\"1\":{\"356\":3}}],[\"999\",{\"1\":{\"355\":2,\"356\":1,\"362\":3,\"368\":2,\"369\":2,\"374\":2,\"375\":2,\"376\":2,\"377\":4}}],[\"944\",{\"1\":{\"285\":1}}],[\"9876543210\",{\"1\":{\"250\":2,\"252\":2}}],[\"98\",{\"1\":{\"38\":2,\"171\":2,\"196\":1}}],[\"9\",{\"0\":{\"137\":1},\"1\":{\"18\":1,\"208\":1,\"306\":3,\"308\":2,\"309\":1,\"310\":1,\"360\":1,\"419\":2,\"528\":1,\"562\":1,\"572\":3,\"574\":2,\"579\":1,\"672\":2,\"782\":2,\"783\":2,\"788\":2,\"793\":2}}],[\"现在做到了非常强大\",{\"1\":{\"18\":1}}],[\"说明\",{\"1\":{\"18\":1,\"33\":1,\"101\":1,\"116\":1,\"127\":1,\"148\":1,\"152\":4,\"153\":1,\"155\":2,\"157\":2,\"165\":2,\"166\":4,\"167\":1,\"193\":1,\"205\":1,\"217\":1,\"224\":1,\"226\":1,\"227\":2,\"230\":2,\"235\":1,\"257\":1,\"274\":1,\"275\":1,\"364\":1,\"367\":1,\"395\":1,\"396\":1,\"397\":1,\"403\":1,\"417\":1,\"429\":1,\"453\":1,\"460\":1,\"466\":1,\"493\":1,\"545\":1,\"585\":2,\"590\":1,\"618\":1,\"619\":1,\"632\":1,\"640\":1,\"663\":1,\"668\":1,\"703\":1,\"707\":1,\"709\":1,\"713\":2,\"729\":1,\"771\":1,\"806\":1}}],[\"一些列方法都有对应的重载\",{\"1\":{\"772\":1}}],[\"一块and和13\",{\"1\":{\"672\":1}}],[\"一句话很简单or内部全部用or链接\",{\"1\":{\"672\":1}}],[\"一类是其他api\",{\"1\":{\"672\":1}}],[\"一般用于范围比如时间\",{\"1\":{\"771\":4}}],[\"一般用于查询时可以少写很多判断\",{\"1\":{\"631\":1}}],[\"一般用于继承父类需要忽略父类的属性\",{\"1\":{\"425\":1}}],[\"一般用户无需设置\",{\"1\":{\"469\":1}}],[\"一般主要没有智能提示\",{\"1\":{\"450\":1}}],[\"一般设置为最少最少\",{\"1\":{\"407\":1}}],[\"一般我们创建springboot项目有两种一种是单模块\",{\"1\":{\"156\":1}}],[\"一种是多模块\",{\"1\":{\"156\":1}}],[\"一次sql查询\",{\"1\":{\"137\":1}}],[\"一班\",{\"1\":{\"135\":1,\"136\":1,\"137\":2,\"138\":1,\"694\":2,\"696\":2,\"703\":1}}],[\"一对一自定义sql\",{\"1\":{\"713\":1}}],[\"一对一自定义列\",{\"1\":{\"713\":1}}],[\"一对一查询启用追踪并且对子查询逻辑删除禁用\",{\"1\":{\"713\":1}}],[\"一对一说明\",{\"0\":{\"698\":1}}],[\"一对一用户地址表\",{\"1\":{\"152\":1}}],[\"一对一\",{\"1\":{\"100\":1,\"107\":1,\"108\":2,\"127\":1,\"695\":1,\"697\":1,\"713\":1}}],[\"一对多无论是否存在多的一方最终都会填充集合\",{\"1\":{\"707\":1}}],[\"一对多说明\",{\"0\":{\"700\":1}}],[\"一对多\",{\"1\":{\"100\":1,\"107\":1,\"108\":2,\"439\":1,\"556\":1,\"695\":1,\"697\":1,\"705\":1,\"713\":1}}],[\"一个拥有\",{\"1\":{\"831\":1}}],[\"一个老师也可以交多个班级\",{\"1\":{\"694\":1,\"696\":1}}],[\"一个老师也可以教多个班级\",{\"1\":{\"128\":1}}],[\"一个字段排序\",{\"0\":{\"675\":1}}],[\"一个相对比较全的查询\",{\"0\":{\"652\":1}}],[\"一个是自己手动进行select的column一个是加入返回对象\",{\"1\":{\"715\":1}}],[\"一个是通过object对象来实现动态查询\",{\"1\":{\"627\":1}}],[\"一个是动态条件来构建where\",{\"1\":{\"627\":1}}],[\"一个班级多个学生\",{\"1\":{\"556\":1,\"705\":1}}],[\"一个班级有多个老师\",{\"1\":{\"128\":1,\"694\":1,\"696\":1}}],[\"一个中文占用长度\",{\"1\":{\"219\":1}}],[\"一个用户拥有多本书籍\",{\"1\":{\"152\":1}}],[\"一个好的orm应该是dsl+nodsl\",{\"1\":{\"127\":1}}],[\"一个租户一个库\",{\"1\":{\"100\":1,\"107\":1}}],[\"一个人或许能走的更快\",{\"1\":{\"1\":1}}],[\"一款好用的助手插件可以帮助我们节省大量的时间去编写处理重复性劳动\",{\"1\":{\"534\":1}}],[\"一款高性能\",{\"1\":{\"94\":1}}],[\"一款没有group\",{\"1\":{\"18\":1}}],[\"一款兼具dsl的操控性和object\",{\"1\":{\"18\":1}}],[\">build即可再test目录看到我们生成的文件\",{\"1\":{\"807\":1}}],[\">integer\",{\"1\":{\"729\":2}}],[\">a\",{\"1\":{\"647\":1,\"648\":1}}],[\">30\",{\"1\":{\"592\":2,\"593\":1,\"594\":2,\"595\":3}}],[\">quicktipsetting设置\",{\"1\":{\"529\":1}}],[\">field\",{\"1\":{\"308\":1,\"574\":1}}],[\">c\",{\"1\":{\"223\":4,\"230\":1,\"231\":1,\"585\":1,\"586\":1}}],[\">groupkeys\",{\"1\":{\"185\":1}}],[\">r\",{\"1\":{\"148\":1}}],[\">y\",{\"1\":{\"135\":1,\"136\":2,\"703\":2,\"712\":1}}],[\">t1\",{\"1\":{\"683\":1,\"758\":1,\"759\":1}}],[\">t\",{\"1\":{\"133\":1,\"168\":1,\"366\":3,\"369\":5,\"616\":1,\"622\":1,\"669\":1,\"758\":1,\"759\":1}}],[\">s\",{\"1\":{\"152\":2,\"713\":1}}],[\">stu\",{\"1\":{\"132\":2}}],[\">select\",{\"1\":{\"111\":1,\"171\":1,\"172\":1}}],[\">>>>>>>testplusupdate\",{\"1\":{\"389\":10}}],[\">>>>>>>testpluspaginate\",{\"1\":{\"388\":10}}],[\">>>>>>>testplusselecttop10000\",{\"1\":{\"387\":10}}],[\">>>>>>>testplusselecttop10000withlambda\",{\"1\":{\"387\":10}}],[\">>>>>>>testplusselecttop10\",{\"1\":{\"386\":10}}],[\">>>>>>>testplusselecttop10withlambda\",{\"1\":{\"386\":10}}],[\">>>>>>>testplusselectone\",{\"1\":{\"385\":10}}],[\">>>>>>>testplusselectonewithlambda\",{\"1\":{\"385\":10}}],[\">>>>>>>testeasyupdate\",{\"1\":{\"389\":10}}],[\">>>>>>>testeasypaginate\",{\"1\":{\"388\":10}}],[\">>>>>>>testeasyselecttop10000\",{\"1\":{\"387\":10}}],[\">>>>>>>testeasyselecttop10\",{\"1\":{\"386\":10}}],[\">>>>>>>testeasyselectone\",{\"1\":{\"385\":10}}],[\">>>>>>>testflexupdate\",{\"1\":{\"389\":10}}],[\">>>>>>>testflexpaginate\",{\"1\":{\"388\":10}}],[\">>>>>>>testflexselecttop10000\",{\"1\":{\"387\":10}}],[\">>>>>>>testflexselecttop10\",{\"1\":{\"386\":10}}],[\">>>>>>>testflexselectone\",{\"1\":{\"385\":10}}],[\">>\",{\"1\":{\"117\":4,\"140\":1,\"284\":2,\"306\":1,\"485\":2,\"493\":4,\"572\":1,\"809\":2}}],[\">x\",{\"1\":{\"112\":1,\"236\":2,\"289\":1,\"315\":2,\"564\":2,\"592\":2,\"694\":3,\"696\":3,\"697\":1,\"712\":1,\"724\":1}}],[\">new\",{\"1\":{\"38\":2,\"39\":1,\"40\":1,\"42\":1,\"171\":1,\"173\":1,\"335\":2,\"341\":1,\"342\":2,\"812\":1}}],[\">o>\",{\"1\":{\"533\":1}}],[\">o\",{\"1\":{\"25\":5,\"34\":2,\"102\":2,\"127\":3,\"132\":1,\"140\":3,\"167\":2,\"284\":3,\"285\":1,\"315\":4,\"325\":2,\"334\":1,\"335\":5,\"338\":1,\"339\":2,\"341\":3,\"342\":3,\"375\":1,\"385\":1,\"386\":1,\"387\":1,\"389\":1,\"482\":1,\"485\":3,\"620\":1,\"621\":1,\"622\":1,\"648\":2,\"713\":5,\"758\":2,\"759\":2,\"760\":3,\"783\":3,\"789\":3,\"794\":3,\"795\":1}}],[\">=0\",{\"1\":{\"592\":2,\"593\":1,\"594\":2,\"595\":3}}],[\">=\",{\"1\":{\"23\":2,\"38\":2,\"39\":2,\"40\":2,\"171\":2,\"172\":2,\"173\":2,\"196\":2,\"407\":1,\"482\":1,\"606\":1,\"616\":1,\"631\":2,\"633\":1,\"634\":2,\"737\":2,\"758\":1,\"759\":1,\"760\":1,\"771\":1}}],[\">\",{\"1\":{\"17\":3,\"23\":1,\"25\":1,\"30\":6,\"31\":5,\"34\":3,\"35\":1,\"36\":1,\"37\":2,\"38\":6,\"39\":8,\"40\":4,\"41\":4,\"42\":6,\"44\":8,\"110\":6,\"111\":3,\"112\":5,\"120\":2,\"121\":4,\"123\":1,\"129\":9,\"130\":2,\"131\":2,\"132\":2,\"133\":4,\"134\":3,\"135\":4,\"136\":4,\"137\":3,\"138\":1,\"140\":7,\"144\":6,\"145\":2,\"146\":3,\"147\":2,\"148\":2,\"149\":7,\"152\":21,\"157\":8,\"158\":3,\"163\":9,\"167\":6,\"168\":1,\"169\":1,\"170\":2,\"171\":9,\"172\":12,\"173\":3,\"174\":5,\"175\":6,\"176\":3,\"180\":1,\"181\":1,\"182\":8,\"183\":6,\"184\":17,\"185\":37,\"186\":7,\"214\":2,\"220\":8,\"223\":9,\"227\":1,\"231\":2,\"235\":3,\"236\":10,\"237\":9,\"260\":7,\"262\":4,\"265\":4,\"271\":1,\"272\":9,\"274\":4,\"281\":5,\"289\":2,\"292\":2,\"293\":4,\"295\":2,\"296\":4,\"306\":9,\"308\":4,\"313\":3,\"315\":9,\"335\":4,\"340\":3,\"376\":1,\"377\":2,\"388\":1,\"395\":6,\"397\":11,\"417\":1,\"422\":3,\"453\":3,\"455\":11,\"460\":5,\"466\":4,\"471\":1,\"481\":1,\"487\":3,\"491\":1,\"493\":1,\"496\":2,\"497\":4,\"499\":1,\"504\":2,\"505\":2,\"508\":1,\"513\":1,\"519\":3,\"522\":1,\"523\":1,\"526\":1,\"528\":2,\"530\":2,\"548\":1,\"549\":2,\"556\":7,\"557\":4,\"564\":10,\"565\":9,\"572\":9,\"574\":4,\"586\":2,\"590\":3,\"592\":5,\"594\":1,\"595\":2,\"606\":3,\"607\":8,\"608\":6,\"614\":8,\"615\":12,\"616\":4,\"626\":8,\"631\":9,\"634\":1,\"641\":12,\"642\":10,\"645\":2,\"646\":3,\"647\":2,\"648\":2,\"649\":10,\"650\":2,\"651\":2,\"652\":21,\"666\":26,\"667\":6,\"669\":14,\"670\":3,\"672\":8,\"673\":11,\"679\":1,\"681\":1,\"682\":3,\"683\":3,\"694\":13,\"696\":13,\"697\":1,\"703\":4,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":2,\"712\":4,\"713\":6,\"714\":5,\"724\":6,\"729\":1,\"733\":1,\"734\":4,\"735\":6,\"737\":5,\"738\":3,\"739\":4,\"740\":1,\"742\":2,\"744\":5,\"757\":1,\"758\":1,\"759\":1,\"760\":1,\"764\":4,\"765\":2,\"771\":1,\"772\":1,\"773\":1,\"774\":2,\"797\":1,\"798\":1,\"801\":1,\"804\":2,\"809\":7,\"816\":1}}],[\">user\",{\"1\":{\"102\":2,\"724\":2}}],[\">u\",{\"1\":{\"16\":2,\"697\":1,\"765\":1}}],[\"v|ph\",{\"1\":{\"669\":2}}],[\"v\",{\"1\":{\"631\":2}}],[\"vm\",{\"1\":{\"517\":1}}],[\"vzwyp6h+ybpq==biv0eblaxjvau53mcrcjkq==3t589p9ntva5g7yy6tw1za==cbmpqpgcbpxq9znkj6efog==7tbmww5dxwjhmnuxffo2bq==87ezckwnyfik+labulm\",{\"1\":{\"220\":2}}],[\"v+index模式\",{\"1\":{\"209\":1}}],[\"v键值对拥有最高效的性能\",{\"1\":{\"209\":1}}],[\"var\",{\"1\":{\"515\":6,\"517\":5}}],[\"varchar\",{\"1\":{\"311\":8,\"354\":2,\"358\":2,\"412\":2,\"506\":6,\"756\":2}}],[\"variable\",{\"1\":{\"60\":1,\"827\":1}}],[\"value传递常量值会议参数形式体现在片段上\",{\"1\":{\"668\":1}}],[\"valuefilter\",{\"1\":{\"631\":5}}],[\"value表示需要排序是不是asc\",{\"1\":{\"623\":1}}],[\"value2\",{\"1\":{\"607\":1}}],[\"value1\",{\"1\":{\"607\":5}}],[\"value10强类型\",{\"1\":{\"185\":1}}],[\"valuecompanylicenseextra\",{\"1\":{\"311\":2,\"314\":6}}],[\"valuecompanylicense\",{\"1\":{\"311\":2,\"314\":7}}],[\"valuecompanyaddress\",{\"1\":{\"311\":2,\"314\":7}}],[\"valuecompany\",{\"1\":{\"311\":1,\"314\":2,\"315\":12}}],[\"valueconvert\",{\"1\":{\"230\":2,\"231\":1,\"236\":2,\"556\":1,\"564\":2,\"585\":2,\"586\":1,\"592\":1}}],[\"valueconvertermap\",{\"1\":{\"117\":2,\"493\":2}}],[\"valueconverter<object\",{\"1\":{\"309\":1,\"579\":1}}],[\"valueconverter<enum<\",{\"1\":{\"308\":1,\"574\":1}}],[\"valueconverter<ienum<\",{\"1\":{\"306\":1,\"572\":1}}],[\"valueconverter<\",{\"1\":{\"117\":1,\"493\":1}}],[\"valueconverter\",{\"1\":{\"100\":1,\"107\":1,\"302\":1,\"559\":1,\"576\":1}}],[\"value==null\",{\"1\":{\"227\":1,\"631\":1}}],[\"valuestring\",{\"1\":{\"227\":3}}],[\"values\",{\"1\":{\"205\":1,\"214\":1,\"220\":1,\"232\":1,\"236\":1,\"238\":1,\"249\":1,\"254\":1,\"260\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"314\":1,\"323\":1,\"327\":1,\"328\":1,\"351\":3,\"359\":2,\"360\":1,\"361\":1,\"362\":1,\"363\":3,\"365\":1,\"366\":21,\"368\":1,\"369\":2,\"370\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"468\":2,\"506\":6,\"562\":1,\"564\":1,\"566\":1,\"572\":1,\"574\":1,\"579\":1,\"581\":1,\"587\":1,\"782\":10,\"788\":10,\"793\":10}}],[\"valueobject\",{\"1\":{\"311\":3}}],[\"valueobject对象\",{\"1\":{\"100\":1,\"107\":1}}],[\"valueof\",{\"1\":{\"132\":2,\"201\":1,\"306\":3,\"358\":1,\"365\":1,\"366\":1,\"530\":1,\"572\":3,\"592\":1,\"631\":1,\"633\":1,\"738\":1,\"742\":2,\"765\":1,\"782\":1,\"788\":1,\"793\":1}}],[\"valueupdateatomictrack\",{\"0\":{\"194\":1},\"1\":{\"196\":1,\"426\":1}}],[\"valueupdateatomictrackmap\",{\"1\":{\"117\":2,\"493\":2}}],[\"valueupdateatomictrack<\",{\"1\":{\"117\":1,\"493\":1}}],[\"value\",{\"1\":{\"111\":5,\"112\":3,\"140\":3,\"152\":3,\"196\":3,\"223\":3,\"227\":10,\"231\":3,\"236\":4,\"289\":3,\"306\":1,\"307\":1,\"308\":3,\"425\":1,\"426\":1,\"430\":1,\"431\":1,\"480\":1,\"482\":2,\"524\":1,\"525\":2,\"556\":2,\"564\":4,\"572\":1,\"573\":1,\"574\":3,\"586\":3,\"592\":1,\"631\":6,\"666\":3,\"668\":1,\"669\":2,\"704\":1,\"705\":8,\"712\":2,\"713\":1,\"731\":1,\"796\":1,\"797\":1}}],[\"vue\",{\"0\":{\"79\":1,\"845\":1}}],[\"vuepress\",{\"0\":{\"58\":1,\"825\":1},\"1\":{\"7\":1,\"54\":2,\"56\":2,\"57\":1,\"58\":2,\"59\":1,\"83\":1,\"89\":1,\"821\":2,\"823\":2,\"824\":1,\"825\":2,\"826\":1,\"849\":1}}],[\"visitend\",{\"1\":{\"313\":1}}],[\"visitmethodinsn\",{\"1\":{\"313\":1}}],[\"visitmethod\",{\"1\":{\"313\":1}}],[\"view\",{\"1\":{\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1}}],[\"via\",{\"1\":{\"57\":1}}],[\"vo转换\",{\"1\":{\"641\":1}}],[\"vo==null\",{\"1\":{\"505\":2}}],[\"vo>\",{\"1\":{\"505\":6}}],[\"vo对象使用只需要定义关联关系\",{\"1\":{\"713\":3}}],[\"vo对象不需要\",{\"1\":{\"425\":1}}],[\"vo对象\",{\"1\":{\"307\":1,\"573\":1}}],[\"vo对象直接返回\",{\"1\":{\"100\":1,\"107\":1}}],[\"void\",{\"1\":{\"34\":1,\"122\":1,\"167\":1,\"192\":1,\"200\":1,\"201\":1,\"230\":3,\"231\":3,\"236\":6,\"254\":1,\"260\":7,\"262\":3,\"265\":3,\"271\":2,\"273\":4,\"274\":7,\"284\":1,\"313\":2,\"397\":1,\"411\":2,\"481\":1,\"485\":1,\"486\":2,\"487\":1,\"498\":1,\"505\":1,\"508\":1,\"521\":5,\"522\":4,\"545\":1,\"547\":1,\"549\":1,\"556\":3,\"564\":6,\"581\":1,\"585\":3,\"586\":3,\"592\":3,\"601\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"634\":1,\"781\":1,\"787\":1,\"796\":1,\"797\":2,\"805\":1,\"807\":2,\"809\":3,\"815\":1}}],[\"vo\",{\"1\":{\"33\":1,\"127\":1,\"138\":2,\"174\":1,\"505\":8,\"640\":1,\"731\":2}}],[\"versionuuidstrategy\",{\"0\":{\"435\":1},\"1\":{\"432\":1}}],[\"versionuuidstrategy列对象为string\",{\"1\":{\"322\":1}}],[\"versiontimestampstrategy\",{\"1\":{\"432\":1}}],[\"versiontimestampstrategy列对象为long\",{\"1\":{\"322\":1}}],[\"versionlongstrategy\",{\"0\":{\"434\":1},\"1\":{\"432\":1}}],[\"versionlongstrategy列对象为long\",{\"1\":{\"322\":1}}],[\"versionintstrategy\",{\"0\":{\"433\":1},\"1\":{\"432\":1}}],[\"versionintstrategy列对象为int\",{\"1\":{\"322\":1}}],[\"version版本建议大于1\",{\"1\":{\"395\":1}}],[\"version为当system\",{\"1\":{\"322\":1}}],[\"version为当uuid\",{\"1\":{\"322\":1}}],[\"version为当前version+1\",{\"1\":{\"322\":2}}],[\"version=xxxxasdasd\",{\"1\":{\"435\":1}}],[\"version=xxxxxxasd\",{\"1\":{\"435\":1}}],[\"version=1\",{\"1\":{\"433\":1,\"434\":1}}],[\"version=2\",{\"1\":{\"433\":1,\"434\":1}}],[\"version=\",{\"1\":{\"157\":1,\"519\":1}}],[\"versionstrategymap\",{\"1\":{\"117\":3,\"493\":3}}],[\"versionstrategy>\",{\"1\":{\"117\":2,\"493\":2}}],[\"version<\",{\"1\":{\"115\":1,\"158\":1,\"453\":1,\"455\":1,\"460\":1,\"463\":1,\"465\":1,\"466\":1,\"478\":1,\"490\":1}}],[\"version\",{\"0\":{\"431\":1},\"1\":{\"17\":1,\"30\":4,\"31\":3,\"44\":2,\"115\":1,\"117\":1,\"120\":2,\"121\":4,\"157\":1,\"158\":1,\"163\":3,\"167\":1,\"176\":1,\"323\":2,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"395\":3,\"453\":3,\"455\":2,\"460\":5,\"463\":1,\"465\":1,\"466\":4,\"483\":1,\"490\":1,\"493\":1,\"496\":2,\"497\":4,\"504\":1}}],[\"version>latest\",{\"1\":{\"115\":1,\"453\":1,\"455\":1,\"460\":1,\"463\":1,\"465\":1,\"466\":1,\"490\":1}}],[\"version>\",{\"1\":{\"17\":2,\"30\":7,\"31\":6,\"44\":5,\"115\":2,\"120\":3,\"121\":5,\"157\":8,\"158\":3,\"163\":6,\"167\":2,\"176\":2,\"309\":1,\"313\":1,\"395\":6,\"453\":4,\"455\":5,\"460\":6,\"463\":2,\"465\":2,\"466\":5,\"478\":5,\"490\":2,\"496\":3,\"497\":5,\"504\":8,\"513\":5,\"514\":1,\"519\":14,\"579\":1,\"801\":5}}],[\"86f1\",{\"1\":{\"661\":1}}],[\"865\",{\"1\":{\"633\":2}}],[\"880\",{\"1\":{\"633\":1}}],[\"8<\",{\"1\":{\"519\":1,\"801\":2}}],[\"8081\",{\"1\":{\"780\":1,\"783\":6,\"786\":1,\"789\":12,\"792\":1,\"793\":30,\"794\":12,\"795\":6}}],[\"8080\",{\"1\":{\"124\":1,\"157\":1,\"481\":1,\"500\":1}}],[\"80甚至100\",{\"1\":{\"469\":1}}],[\"8并且没有超时那么会log\",{\"1\":{\"407\":1}}],[\"836\",{\"1\":{\"23\":1}}],[\"835\",{\"1\":{\"23\":1}}],[\"8\",{\"0\":{\"136\":1},\"1\":{\"17\":1,\"18\":1,\"27\":1,\"34\":1,\"124\":1,\"157\":2,\"158\":1,\"160\":1,\"167\":2,\"176\":1,\"204\":1,\"348\":1,\"360\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":1,\"519\":5,\"535\":2,\"672\":2,\"683\":1,\"713\":3,\"780\":1,\"781\":1,\"782\":2,\"783\":1,\"786\":1,\"787\":1,\"788\":2,\"792\":1,\"793\":2,\"801\":1,\"805\":1}}],[\"bc51\",{\"1\":{\"661\":1}}],[\"bbb\",{\"1\":{\"631\":1}}],[\"bb\",{\"1\":{\"626\":4}}],[\"b线程想要获取下一个也需要a线程释放或者等到datasource\",{\"1\":{\"407\":1}}],[\"b线程也获取一个\",{\"1\":{\"407\":1}}],[\"b之间相隔多少天\",{\"1\":{\"290\":1}}],[\"biconsumer<t1\",{\"1\":{\"641\":2}}],[\"birthday\",{\"1\":{\"236\":2,\"564\":2}}],[\"bigdecimal版本防止溢出\",{\"1\":{\"182\":1}}],[\"bigdecimal\",{\"1\":{\"132\":2,\"182\":6,\"205\":6,\"365\":5,\"366\":9,\"600\":2,\"601\":1,\"613\":1,\"629\":2,\"631\":3,\"632\":2,\"633\":2,\"634\":4,\"635\":1,\"731\":2,\"732\":2,\"742\":3,\"765\":1}}],[\"b2\",{\"1\":{\"185\":34,\"186\":9,\"281\":6,\"642\":10}}],[\"b1\",{\"1\":{\"174\":2,\"185\":4,\"281\":4,\"650\":2,\"651\":2,\"667\":4}}],[\"block\",{\"1\":{\"531\":4}}],[\"block并且会生成对应的\",{\"1\":{\"529\":1}}],[\"blogpartitionentityvoproxy\",{\"1\":{\"734\":2}}],[\"blogpartitionentityvo\",{\"1\":{\"734\":1}}],[\"blog1\",{\"1\":{\"673\":1}}],[\"bloggroupidandname\",{\"1\":{\"642\":6}}],[\"bloggroupidandnameproxy\",{\"1\":{\"642\":1}}],[\"blogqueryrequest\",{\"1\":{\"634\":19}}],[\"blogquery2request\",{\"1\":{\"632\":1,\"633\":4}}],[\"blogquery1request\",{\"1\":{\"629\":1,\"631\":4}}],[\"blogentities\",{\"1\":{\"626\":2,\"646\":1,\"655\":1,\"656\":1,\"750\":1,\"751\":1}}],[\"blogentityvo2\",{\"1\":{\"732\":1,\"735\":1}}],[\"blogentityvo1\",{\"1\":{\"185\":4,\"731\":1}}],[\"blogentityqueryable\",{\"1\":{\"714\":2}}],[\"blogentity表的id字段\",{\"1\":{\"642\":1}}],[\"blogentityproxy\",{\"1\":{\"608\":1}}],[\"blogentitytest2\",{\"1\":{\"600\":1}}],[\"blogentitytest\",{\"1\":{\"227\":2}}],[\"blogentity\",{\"1\":{\"174\":1,\"179\":12,\"180\":2,\"181\":1,\"182\":6,\"183\":3,\"184\":4,\"185\":10,\"186\":2,\"227\":2,\"281\":4,\"288\":5,\"289\":14,\"365\":2,\"366\":6,\"607\":2,\"608\":2,\"616\":4,\"620\":4,\"621\":4,\"622\":5,\"623\":3,\"626\":8,\"631\":8,\"633\":2,\"634\":1,\"642\":2,\"645\":2,\"646\":4,\"647\":4,\"648\":4,\"649\":13,\"650\":1,\"651\":1,\"655\":1,\"656\":1,\"667\":1,\"672\":1,\"673\":11,\"682\":5,\"683\":7,\"714\":8,\"718\":1,\"734\":2,\"735\":2,\"737\":1,\"738\":1,\"739\":1,\"742\":4,\"750\":1,\"751\":1,\"758\":3,\"759\":3,\"760\":5}}],[\"blogsortjoinrequest\",{\"1\":{\"622\":7}}],[\"blogsortmultirequest\",{\"1\":{\"621\":7}}],[\"blogsortrequest\",{\"1\":{\"620\":7,\"621\":4,\"622\":4}}],[\"blogs\",{\"1\":{\"180\":2,\"658\":1,\"659\":1,\"753\":1,\"754\":1}}],[\"blog`\",{\"1\":{\"174\":1,\"185\":5,\"186\":2,\"205\":1,\"224\":1,\"227\":1,\"281\":4,\"365\":1,\"366\":3,\"521\":1,\"607\":2,\"616\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"631\":5,\"633\":2,\"634\":1,\"642\":2,\"650\":1,\"651\":1,\"667\":2,\"672\":1,\"673\":2,\"714\":3,\"733\":1,\"734\":1,\"737\":1,\"738\":1,\"739\":1,\"742\":1,\"758\":1,\"759\":1,\"760\":1}}],[\"blogtest\",{\"1\":{\"111\":8}}],[\"blog\",{\"1\":{\"54\":1,\"179\":6,\"205\":3,\"206\":1,\"365\":19,\"366\":25,\"626\":4,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"655\":2,\"656\":2,\"658\":2,\"659\":2,\"661\":2,\"662\":2,\"673\":1,\"682\":2,\"683\":2,\"742\":17,\"745\":1,\"746\":1,\"750\":2,\"751\":2,\"753\":2,\"754\":2}}],[\"blue\",{\"1\":{\"83\":1}}],[\"b\",{\"1\":{\"68\":1,\"174\":2,\"180\":3,\"181\":3,\"182\":12,\"183\":17,\"184\":20,\"185\":8,\"250\":2,\"251\":2,\"281\":4,\"288\":15,\"289\":39,\"290\":1,\"407\":2,\"528\":1,\"607\":8,\"642\":1,\"647\":2,\"648\":2,\"650\":2,\"651\":2,\"666\":4,\"667\":2,\"722\":2,\"734\":9,\"738\":2,\"739\":2,\"756\":1}}],[\"beetlsql\",{\"1\":{\"596\":1}}],[\"benchmark\",{\"1\":{\"384\":1,\"390\":1}}],[\"begintime\",{\"1\":{\"797\":8}}],[\"begintransaction\",{\"1\":{\"410\":1,\"411\":1,\"522\":2}}],[\"begin\",{\"1\":{\"196\":1,\"243\":2,\"245\":1,\"246\":1,\"250\":1,\"251\":1,\"252\":4,\"316\":1,\"365\":2,\"366\":2,\"417\":1,\"742\":3,\"797\":1}}],[\"bean\",{\"1\":{\"117\":5,\"123\":3,\"192\":2,\"479\":1,\"485\":2,\"486\":3,\"491\":1,\"493\":6,\"499\":3,\"505\":1,\"523\":3,\"547\":1,\"815\":1}}],[\"beans\",{\"1\":{\"117\":2,\"493\":2}}],[\"besides\",{\"1\":{\"83\":1}}],[\"beforearg\",{\"1\":{\"270\":1,\"271\":6,\"273\":6,\"274\":12}}],[\"before\",{\"1\":{\"81\":1}}],[\"be\",{\"1\":{\"57\":1}}],[\"baz\",{\"0\":{\"332\":1,\"858\":1},\"1\":{\"331\":1,\"853\":1,\"857\":1}}],[\"bar\",{\"0\":{\"329\":1,\"853\":1,\"855\":1},\"1\":{\"330\":1,\"856\":1}}],[\"baidu\",{\"1\":{\"314\":2,\"315\":1,\"316\":1}}],[\"batch\",{\"1\":{\"205\":1,\"483\":2}}],[\"batch批处理\",{\"0\":{\"203\":1}}],[\"baseentity\",{\"1\":{\"649\":4,\"809\":26}}],[\"base64\",{\"1\":{\"228\":1,\"229\":3,\"230\":2,\"231\":2,\"232\":1,\"233\":1,\"234\":1,\"235\":3,\"583\":1,\"584\":3,\"585\":2,\"586\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":3}}],[\"base64encryptionstrategy\",{\"1\":{\"191\":1,\"219\":2,\"491\":1,\"523\":1}}],[\"basic\",{\"1\":{\"117\":1,\"493\":1}}],[\"basically\",{\"1\":{\"54\":1}}],[\"badge\",{\"1\":{\"83\":3}}],[\"back\",{\"1\":{\"52\":1,\"84\":1}}],[\"businessexception\",{\"1\":{\"812\":6,\"814\":9}}],[\"busy\",{\"1\":{\"483\":1}}],[\"but\",{\"1\":{\"83\":1}}],[\"button\",{\"1\":{\"52\":1,\"84\":1}}],[\"build>\",{\"1\":{\"157\":1,\"455\":1,\"519\":1,\"801\":1}}],[\"builder\",{\"1\":{\"123\":25,\"140\":4,\"284\":2,\"485\":2,\"491\":23,\"493\":23,\"499\":25,\"523\":3,\"620\":2,\"621\":2,\"622\":2,\"623\":2,\"634\":2,\"796\":1,\"797\":6,\"809\":3}}],[\"build\",{\"1\":{\"17\":1,\"34\":1,\"123\":2,\"158\":1,\"167\":2,\"271\":1,\"396\":1,\"397\":1,\"460\":1,\"466\":1,\"471\":1,\"491\":1,\"493\":1,\"499\":2,\"517\":1,\"519\":2,\"523\":2,\"548\":1,\"798\":1,\"816\":1}}],[\"breadcrumb\",{\"1\":{\"52\":1,\"84\":1}}],[\"box\",{\"1\":{\"738\":1}}],[\"book`\",{\"1\":{\"140\":3}}],[\"booktype\",{\"1\":{\"140\":2}}],[\"books\",{\"1\":{\"140\":4,\"152\":5}}],[\"booknavigateextrafilterstrategy用来添加导航属性额外条件\",{\"1\":{\"140\":1}}],[\"booknavigateextrafilterstrategy\",{\"1\":{\"140\":4}}],[\"book\",{\"1\":{\"140\":8,\"152\":17,\"669\":6}}],[\"boolean>\",{\"1\":{\"623\":5}}],[\"boolean类型的属性true表示删除\",{\"1\":{\"279\":1}}],[\"boolean\",{\"1\":{\"34\":1,\"122\":2,\"167\":1,\"174\":1,\"181\":1,\"205\":9,\"230\":1,\"231\":1,\"236\":2,\"250\":1,\"251\":1,\"260\":2,\"262\":1,\"265\":1,\"271\":1,\"273\":1,\"274\":2,\"278\":6,\"279\":2,\"281\":3,\"306\":1,\"313\":2,\"327\":3,\"328\":5,\"350\":1,\"365\":3,\"366\":9,\"429\":2,\"430\":4,\"498\":2,\"521\":3,\"522\":2,\"556\":3,\"564\":4,\"572\":1,\"585\":3,\"586\":3,\"592\":3,\"600\":2,\"601\":2,\"613\":1,\"616\":1,\"620\":1,\"621\":1,\"622\":1,\"626\":3,\"629\":1,\"631\":6,\"632\":1,\"633\":2,\"634\":1,\"642\":1,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"667\":1,\"673\":2,\"731\":2,\"732\":2,\"737\":1,\"738\":1,\"739\":1,\"742\":1,\"758\":1,\"759\":1,\"760\":1,\"805\":1,\"809\":4}}],[\"bootstrapper\",{\"1\":{\"517\":1}}],[\"boot可以自行实现或者使用控制台日志logfactory\",{\"1\":{\"468\":1}}],[\"boot下默认是com\",{\"1\":{\"468\":1}}],[\"boot下用\",{\"1\":{\"417\":1}}],[\"boot初始化\",{\"0\":{\"460\":1,\"465\":1,\"466\":1}}],[\"boot的项目进行了aop的封装\",{\"1\":{\"417\":1}}],[\"boot环境下直接使用\",{\"1\":{\"252\":3}}],[\"boot环境\",{\"0\":{\"243\":1}}],[\"boot工程\",{\"0\":{\"115\":1,\"463\":1,\"490\":1}}],[\"boot\",{\"0\":{\"242\":1,\"470\":1,\"471\":1},\"1\":{\"12\":1,\"117\":1,\"120\":3,\"121\":3,\"157\":4,\"456\":1,\"492\":1,\"496\":3,\"497\":3,\"504\":7}}],[\"boot<\",{\"1\":{\"12\":1,\"117\":1,\"120\":3,\"121\":3,\"157\":4,\"492\":1,\"496\":3,\"497\":3,\"504\":4}}],[\"bo之类的无需实现该接口只需要添加注解\",{\"1\":{\"33\":1}}],[\"byte\",{\"1\":{\"219\":1,\"613\":2}}],[\"by`\",{\"1\":{\"205\":2,\"260\":5,\"262\":1,\"265\":4,\"281\":4,\"365\":2,\"366\":10,\"521\":2,\"623\":2,\"626\":6,\"631\":4,\"633\":4,\"634\":2,\"646\":2,\"647\":2,\"648\":2,\"650\":2,\"651\":2,\"672\":2,\"673\":4,\"682\":2,\"734\":4,\"742\":2}}],[\"by\",{\"1\":{\"18\":1,\"38\":2,\"39\":2,\"40\":1,\"42\":2,\"52\":1,\"57\":1,\"59\":1,\"111\":2,\"117\":1,\"171\":2,\"172\":2,\"173\":1,\"175\":2,\"185\":10,\"206\":1,\"237\":3,\"293\":1,\"296\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"397\":2,\"493\":1,\"565\":3,\"595\":1,\"606\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"634\":1,\"642\":2,\"648\":1,\"666\":2,\"669\":20,\"679\":1,\"683\":2,\"714\":3,\"733\":1,\"734\":4,\"737\":6,\"742\":1,\"804\":1}}],[\"报错\",{\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"wait\",{\"1\":{\"483\":1}}],[\"warn\",{\"1\":{\"481\":1,\"483\":1,\"521\":1}}],[\"warn打印警告信息\",{\"1\":{\"407\":1}}],[\"warning进行日志输出\",{\"1\":{\"468\":1}}],[\"warningcolumnmiss\",{\"1\":{\"468\":1}}],[\"warningbusy\",{\"1\":{\"122\":2,\"407\":1,\"469\":1,\"498\":2}}],[\"warning\",{\"1\":{\"60\":1,\"483\":2}}],[\"webconfiguration\",{\"1\":{\"479\":1}}],[\"web<\",{\"1\":{\"120\":1,\"121\":1,\"157\":1,\"478\":1,\"496\":1,\"497\":1,\"504\":1}}],[\"we\",{\"1\":{\"330\":1,\"551\":1}}],[\"wmhrmy6r4m7ir0km\",{\"1\":{\"249\":1}}],[\"w3\",{\"1\":{\"157\":1,\"519\":1}}],[\"www\",{\"1\":{\"157\":1,\"314\":2,\"316\":1,\"517\":1,\"519\":1}}],[\"workerid\",{\"1\":{\"201\":1}}],[\"words\",{\"1\":{\"67\":1}}],[\"word\",{\"1\":{\"65\":1,\"771\":6}}],[\"world\",{\"1\":{\"34\":1,\"125\":1,\"167\":1,\"480\":1,\"481\":1,\"482\":1,\"501\":1,\"517\":2}}],[\"writing\",{\"1\":{\"58\":1,\"59\":1,\"82\":1}}],[\"writereplace\",{\"1\":{\"313\":1}}],[\"writenullstringasempty\",{\"1\":{\"309\":1,\"579\":1}}],[\"writenulllistasempty\",{\"1\":{\"309\":1,\"579\":1}}],[\"writemapnullvalue\",{\"1\":{\"309\":1,\"579\":1}}],[\"write\",{\"1\":{\"54\":1,\"55\":1,\"83\":1}}],[\"while\",{\"1\":{\"797\":1}}],[\"which\",{\"1\":{\"57\":1,\"117\":1,\"493\":1}}],[\"when需要实现多个条件而不是单一条件\",{\"1\":{\"616\":1}}],[\"when\",{\"1\":{\"237\":1,\"374\":1,\"375\":1,\"376\":2,\"377\":4,\"565\":1,\"592\":4,\"593\":2,\"594\":4,\"595\":6,\"614\":1,\"615\":6,\"616\":2,\"679\":2}}],[\"where与where之间采用and链接\",{\"1\":{\"774\":1}}],[\"where过滤\",{\"1\":{\"697\":1}}],[\"where默认提供了and和or关键字并且提供了泛型版本所以用户可以通过and和or来进行组合对应的条件\",{\"1\":{\"672\":1}}],[\"wheremerge\",{\"1\":{\"652\":1}}],[\"where存在两种重载\",{\"1\":{\"644\":1}}],[\"wherecolumns\",{\"1\":{\"420\":1,\"783\":1,\"789\":1,\"794\":1}}],[\"where路由到过多的表就会报错\",{\"1\":{\"407\":1,\"469\":1}}],[\"where表达式更新\",{\"1\":{\"325\":1}}],[\"whereid\",{\"1\":{\"260\":2,\"262\":1,\"265\":2,\"278\":1,\"280\":1,\"356\":1,\"419\":2}}],[\"where条件值\",{\"1\":{\"230\":1,\"585\":1}}],[\"wherepredicate<object>\",{\"1\":{\"260\":1,\"265\":1}}],[\"wherepredicate<t>\",{\"1\":{\"223\":4}}],[\"wherepredicate\",{\"1\":{\"223\":5,\"260\":2}}],[\"wherebyids\",{\"1\":{\"505\":2}}],[\"wherebyid主键更新\",{\"1\":{\"325\":1}}],[\"wherebyid\",{\"1\":{\"34\":2,\"35\":2,\"167\":2,\"168\":3,\"179\":4,\"196\":1,\"214\":1,\"220\":1,\"233\":1,\"234\":1,\"235\":1,\"250\":2,\"251\":1,\"252\":2,\"265\":1,\"278\":1,\"280\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"323\":1,\"325\":1,\"328\":2,\"355\":1,\"356\":1,\"505\":2,\"532\":6,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"588\":1,\"589\":1,\"590\":1,\"601\":1,\"652\":4,\"691\":1,\"812\":2,\"813\":2}}],[\"where第一个参数表示后面的条件是否需要追加上去\",{\"1\":{\"25\":1}}],[\"whereobjectqueryexecutor\",{\"1\":{\"545\":1,\"638\":1}}],[\"whereobject\",{\"1\":{\"24\":1,\"601\":1,\"633\":2,\"634\":1,\"652\":2}}],[\"where\",{\"0\":{\"761\":1},\"1\":{\"16\":3,\"23\":3,\"25\":6,\"34\":5,\"35\":5,\"36\":2,\"37\":3,\"38\":4,\"39\":4,\"40\":3,\"41\":2,\"100\":1,\"102\":2,\"107\":1,\"110\":3,\"111\":2,\"112\":3,\"129\":7,\"130\":1,\"131\":2,\"132\":3,\"133\":3,\"134\":1,\"135\":1,\"136\":1,\"137\":2,\"138\":1,\"140\":9,\"144\":8,\"145\":5,\"146\":5,\"147\":4,\"149\":8,\"152\":17,\"167\":5,\"168\":6,\"169\":2,\"170\":3,\"171\":6,\"172\":6,\"173\":3,\"174\":3,\"180\":1,\"181\":1,\"182\":4,\"183\":3,\"184\":4,\"185\":18,\"186\":4,\"193\":1,\"195\":4,\"196\":2,\"214\":5,\"220\":18,\"221\":1,\"223\":6,\"224\":1,\"227\":1,\"230\":1,\"233\":1,\"234\":1,\"235\":3,\"237\":8,\"250\":2,\"251\":1,\"252\":3,\"260\":3,\"262\":1,\"265\":5,\"272\":2,\"278\":4,\"280\":2,\"281\":4,\"285\":5,\"292\":2,\"293\":4,\"295\":2,\"296\":4,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"315\":12,\"316\":2,\"323\":1,\"324\":1,\"325\":5,\"327\":1,\"328\":2,\"335\":3,\"338\":2,\"339\":2,\"340\":2,\"341\":4,\"342\":4,\"352\":3,\"353\":1,\"355\":2,\"356\":1,\"385\":2,\"386\":2,\"387\":2,\"388\":2,\"389\":2,\"397\":5,\"407\":2,\"417\":4,\"418\":2,\"419\":2,\"420\":1,\"422\":1,\"433\":1,\"434\":1,\"435\":1,\"468\":2,\"469\":2,\"482\":2,\"517\":3,\"521\":1,\"530\":2,\"531\":2,\"532\":8,\"556\":2,\"557\":6,\"565\":8,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"585\":1,\"588\":1,\"589\":1,\"590\":3,\"594\":2,\"595\":2,\"601\":1,\"606\":2,\"608\":1,\"615\":6,\"616\":2,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"626\":6,\"631\":7,\"633\":2,\"634\":1,\"641\":2,\"642\":4,\"645\":2,\"646\":2,\"647\":4,\"648\":4,\"649\":8,\"650\":1,\"651\":1,\"652\":2,\"656\":2,\"659\":2,\"661\":2,\"662\":2,\"663\":3,\"666\":14,\"667\":12,\"669\":4,\"672\":4,\"673\":13,\"681\":3,\"682\":3,\"683\":3,\"694\":23,\"696\":23,\"703\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":2,\"710\":3,\"712\":6,\"713\":6,\"714\":4,\"724\":11,\"733\":2,\"734\":4,\"735\":2,\"737\":4,\"738\":6,\"739\":5,\"742\":2,\"744\":4,\"751\":2,\"754\":2,\"756\":1,\"757\":2,\"758\":10,\"759\":8,\"760\":6,\"764\":5,\"765\":3,\"772\":2,\"773\":1,\"774\":3,\"783\":8,\"789\":6,\"794\":6,\"795\":3}}],[\"withinitial\",{\"1\":{\"522\":1}}],[\"withversion\",{\"1\":{\"325\":1,\"328\":1}}],[\"with\",{\"1\":{\"60\":1,\"83\":2,\"117\":1,\"493\":1,\"641\":3,\"809\":5}}],[\"without\",{\"1\":{\"16\":1}}],[\"will\",{\"1\":{\"57\":1,\"592\":2}}],[\"华为云\",{\"1\":{\"15\":1}}],[\"u==null\",{\"1\":{\"812\":1}}],[\"u=query\",{\"1\":{\"812\":2,\"813\":2}}],[\"uid\",{\"1\":{\"782\":2,\"788\":2,\"793\":2}}],[\"uid模2进行分表\",{\"1\":{\"779\":1}}],[\"uid=1使用逻辑删除框架默认实现该功能\",{\"1\":{\"468\":1}}],[\"uid=1\",{\"1\":{\"468\":1}}],[\"uisort\",{\"0\":{\"623\":1},\"1\":{\"623\":4}}],[\"ultimate\",{\"1\":{\"535\":10}}],[\"upper\",{\"1\":{\"468\":2,\"483\":2}}],[\"updatable\",{\"1\":{\"196\":1,\"220\":2,\"234\":1,\"235\":1,\"250\":1,\"251\":1,\"252\":1,\"260\":2,\"262\":1,\"265\":2,\"272\":2,\"280\":1,\"285\":1,\"316\":2,\"324\":1,\"325\":3,\"352\":5,\"389\":1,\"417\":1,\"419\":2,\"522\":6,\"589\":1,\"590\":1,\"666\":1,\"783\":2,\"789\":2,\"794\":2}}],[\"update也会过滤\",{\"1\":{\"430\":1}}],[\"updatewrapper\",{\"1\":{\"389\":5}}],[\"update命令默认采用sqlexecutestrategyenum\",{\"1\":{\"352\":1}}],[\"updatestrategy\",{\"1\":{\"468\":1}}],[\"updatestrategyenum\",{\"1\":{\"419\":2}}],[\"updatestrategy表示sql的执行策略\",{\"1\":{\"352\":1}}],[\"updatesetinterceptor\",{\"0\":{\"261\":1},\"1\":{\"256\":1,\"262\":1,\"809\":1}}],[\"updateignore并且updatesetintrackdiff\",{\"1\":{\"468\":1}}],[\"updateignore\",{\"0\":{\"429\":1},\"1\":{\"396\":1,\"429\":3,\"430\":3,\"556\":1,\"592\":1,\"809\":5}}],[\"updateignore如果你需要不返回的话\",{\"1\":{\"350\":1}}],[\"updateignore除非手动指定更新也是可以的\",{\"1\":{\"348\":1}}],[\"update的时候也可以\",{\"1\":{\"275\":1}}],[\"update的set自定义\",{\"1\":{\"189\":1}}],[\"updatetime\",{\"1\":{\"262\":4,\"809\":6}}],[\"updateby同理\",{\"1\":{\"809\":1}}],[\"updatebyquery\",{\"1\":{\"389\":1}}],[\"updateby\",{\"1\":{\"262\":4,\"809\":6}}],[\"updatebatchthreshold\",{\"1\":{\"204\":1,\"348\":1,\"468\":1}}],[\"updateable\",{\"1\":{\"104\":4,\"105\":1}}],[\"update语法方言\",{\"1\":{\"100\":1,\"107\":1}}],[\"update\",{\"0\":{\"352\":1},\"1\":{\"52\":1,\"84\":1,\"189\":2,\"196\":2,\"220\":2,\"230\":3,\"234\":1,\"235\":1,\"250\":1,\"252\":1,\"260\":2,\"262\":1,\"265\":2,\"278\":2,\"280\":1,\"285\":2,\"316\":2,\"324\":1,\"325\":3,\"327\":1,\"328\":2,\"348\":1,\"352\":3,\"366\":3,\"369\":2,\"376\":1,\"377\":2,\"389\":1,\"407\":1,\"417\":3,\"418\":1,\"419\":2,\"420\":1,\"422\":2,\"433\":1,\"434\":1,\"435\":1,\"469\":1,\"483\":2,\"585\":3,\"589\":1,\"590\":1,\"661\":2,\"662\":2,\"666\":2,\"783\":2,\"789\":2,\"794\":2}}],[\"upddeletableteable\",{\"1\":{\"105\":1}}],[\"uxufduophc3qv7yzgkayhg==\",{\"1\":{\"220\":1}}],[\"u011624157\",{\"1\":{\"206\":1}}],[\"uuidprimarykey\",{\"1\":{\"200\":1}}],[\"uuidprimarykeygenerator\",{\"0\":{\"200\":1},\"1\":{\"200\":2}}],[\"uuid\",{\"1\":{\"200\":1,\"269\":1,\"661\":1,\"662\":1}}],[\"uuid等其他一系列id的自定义生成\",{\"1\":{\"100\":1}}],[\"utcnow\",{\"1\":{\"290\":1,\"294\":1}}],[\"utf8mb4\",{\"1\":{\"506\":1}}],[\"utf\",{\"1\":{\"157\":1,\"519\":1}}],[\"util\",{\"1\":{\"117\":1,\"493\":1,\"613\":1}}],[\"url列上所以无法自动映射\",{\"1\":{\"718\":1}}],[\"url映射到my\",{\"1\":{\"718\":1}}],[\"url在bean层面拥有一样的属性名称一样的属性类型\",{\"1\":{\"718\":1}}],[\"url和blogentitytest2\",{\"1\":{\"718\":1}}],[\"url\",{\"1\":{\"123\":1,\"124\":1,\"157\":1,\"499\":1,\"500\":1,\"523\":1,\"600\":2,\"607\":4,\"634\":1,\"732\":1,\"738\":1,\"739\":1,\"780\":1,\"781\":3,\"786\":1,\"787\":3,\"792\":1}}],[\"url>\",{\"1\":{\"15\":2,\"519\":1}}],[\"using\",{\"1\":{\"56\":1,\"59\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"517\":1}}],[\"usecursorfetch=true\",{\"1\":{\"740\":1}}],[\"useinterceptor\",{\"1\":{\"601\":2}}],[\"uselogicdelete互相作用and\",{\"1\":{\"275\":1}}],[\"uselogicdelete\",{\"1\":{\"275\":1}}],[\"useproxy\",{\"1\":{\"103\":1,\"104\":1,\"105\":1}}],[\"use\",{\"1\":{\"54\":1,\"60\":1,\"83\":2,\"250\":1,\"251\":1,\"252\":2,\"323\":1,\"506\":1,\"682\":2,\"683\":2}}],[\"usedatabaseconfigure\",{\"1\":{\"34\":1,\"123\":1,\"167\":1,\"271\":1,\"397\":1,\"460\":1,\"466\":1,\"471\":1,\"491\":1,\"493\":1,\"499\":1,\"517\":1,\"523\":1,\"548\":1,\"798\":1,\"816\":1}}],[\"usestrictmode\",{\"1\":{\"618\":1}}],[\"usestdoutlogging\",{\"1\":{\"34\":1,\"167\":1,\"397\":1,\"468\":1,\"517\":1}}],[\"usessl=false\",{\"1\":{\"34\":1,\"124\":1,\"157\":1,\"167\":1,\"204\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"user>\",{\"1\":{\"807\":1}}],[\"userrepository\",{\"1\":{\"807\":1}}],[\"userproxy>\",{\"1\":{\"807\":1}}],[\"userlabels\",{\"1\":{\"554\":1}}],[\"userextra\",{\"1\":{\"237\":4,\"238\":8,\"554\":2,\"565\":4,\"566\":8}}],[\"useragecolumnvaluesqlconverter\",{\"1\":{\"236\":1,\"564\":1}}],[\"userbookproxy>\",{\"1\":{\"152\":1}}],[\"userbook\",{\"1\":{\"152\":4}}],[\"userinhz\",{\"1\":{\"144\":1}}],[\"userid=currentuser\",{\"1\":{\"809\":1}}],[\"userid=userid\",{\"1\":{\"260\":1,\"284\":1}}],[\"userid\",{\"1\":{\"111\":1,\"140\":3,\"152\":9,\"260\":3,\"262\":2,\"284\":3,\"809\":9}}],[\"username=null\",{\"1\":{\"631\":1}}],[\"username=username\",{\"1\":{\"233\":1,\"588\":1}}],[\"username5\",{\"1\":{\"328\":1}}],[\"username4\",{\"1\":{\"327\":1}}],[\"username1\",{\"1\":{\"249\":2,\"252\":1,\"323\":1,\"324\":1}}],[\"usernameandaddrandrolecount\",{\"1\":{\"144\":1}}],[\"usernameandaddr\",{\"1\":{\"144\":1}}],[\"username\",{\"1\":{\"123\":1,\"124\":1,\"157\":1,\"231\":1,\"232\":2,\"234\":1,\"323\":1,\"327\":1,\"328\":1,\"481\":1,\"483\":1,\"499\":1,\"500\":1,\"517\":1,\"523\":1,\"586\":1,\"587\":2,\"589\":1,\"631\":1,\"780\":1,\"781\":3,\"786\":1,\"787\":3,\"792\":1}}],[\"userstatus\",{\"1\":{\"554\":1}}],[\"userstatusenum\",{\"1\":{\"554\":1}}],[\"users\",{\"1\":{\"110\":3,\"111\":2,\"112\":1,\"140\":2,\"149\":3,\"185\":1,\"724\":3,\"764\":2,\"765\":1,\"782\":2,\"788\":2,\"793\":2}}],[\"user`\",{\"1\":{\"23\":2,\"140\":2,\"144\":3,\"145\":1,\"146\":1,\"147\":1,\"149\":1,\"174\":1,\"185\":7,\"186\":2,\"285\":4,\"724\":3,\"764\":1,\"765\":1,\"772\":1,\"774\":1}}],[\"user\",{\"1\":{\"16\":2,\"21\":1,\"102\":2,\"140\":1,\"144\":4,\"145\":1,\"146\":1,\"147\":1,\"149\":5,\"152\":22,\"185\":21,\"214\":4,\"219\":1,\"220\":11,\"231\":1,\"232\":9,\"233\":1,\"234\":1,\"235\":2,\"237\":4,\"238\":1,\"249\":1,\"250\":2,\"251\":1,\"252\":3,\"323\":2,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"334\":1,\"385\":2,\"386\":2,\"387\":2,\"389\":1,\"468\":4,\"506\":3,\"507\":1,\"565\":4,\"566\":1,\"586\":1,\"587\":9,\"588\":1,\"589\":1,\"590\":2,\"631\":1,\"670\":3,\"724\":2,\"807\":2,\"809\":5}}],[\"u\",{\"1\":{\"16\":2,\"152\":10,\"237\":16,\"565\":16,\"697\":1,\"764\":2,\"765\":1}}],[\"union或者union\",{\"1\":{\"756\":1}}],[\"unionall\",{\"1\":{\"601\":1,\"760\":1}}],[\"union\",{\"0\":{\"756\":1},\"1\":{\"601\":3,\"756\":2,\"757\":3,\"758\":3,\"759\":3,\"760\":1}}],[\"uniquefield\",{\"1\":{\"505\":4}}],[\"uncommitted\",{\"1\":{\"410\":1}}],[\"unshardinginitializer\",{\"1\":{\"425\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"306\":1,\"572\":1,\"592\":1}}],[\"unsatisfied\",{\"1\":{\"117\":1,\"493\":1}}],[\"unsatisfieddependencyexception\",{\"1\":{\"117\":1,\"493\":1}}],[\"unknown\",{\"1\":{\"227\":1,\"517\":1}}],[\"underlined表示采用下划线userage将对应数据库user\",{\"1\":{\"468\":1}}],[\"underlinednameconversion\",{\"1\":{\"123\":1,\"397\":1,\"471\":1,\"491\":1,\"493\":1,\"499\":1,\"523\":1,\"545\":1}}],[\"underlined\",{\"1\":{\"12\":1,\"115\":1,\"157\":1,\"465\":1,\"468\":3,\"470\":1,\"483\":2,\"490\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"unable\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"run\",{\"1\":{\"508\":1,\"781\":1,\"787\":1}}],[\"runtimeexception\",{\"1\":{\"308\":2,\"313\":2,\"411\":1,\"510\":3,\"574\":2,\"742\":1,\"783\":1,\"789\":1,\"794\":1,\"812\":1,\"814\":5}}],[\"runtime\",{\"1\":{\"308\":1,\"505\":1,\"524\":1,\"574\":1,\"802\":1}}],[\"runtimetimeexception\",{\"1\":{\"140\":1}}],[\"runtimecontext\",{\"1\":{\"116\":4,\"191\":4,\"230\":3,\"231\":6,\"236\":13,\"254\":1,\"257\":2,\"284\":2,\"304\":2,\"486\":5,\"493\":4,\"556\":7,\"561\":2,\"564\":13,\"570\":2,\"578\":2,\"581\":1,\"585\":3,\"586\":6,\"592\":7,\"798\":3}}],[\"r>\",{\"1\":{\"227\":4,\"729\":1}}],[\"rybvyx8k\",{\"1\":{\"220\":2}}],[\"ray\",{\"0\":{\"553\":1,\"862\":1},\"1\":{\"552\":1,\"854\":1,\"861\":1}}],[\"ravjwp3bdch88opbixhna==ytwmfv6jykhytlkcp3xxvw==\",{\"1\":{\"220\":4}}],[\"rank2\",{\"1\":{\"669\":6}}],[\"rank1\",{\"1\":{\"669\":6}}],[\"rank\",{\"1\":{\"669\":12}}],[\"rand\",{\"1\":{\"666\":4}}],[\"random\",{\"1\":{\"417\":1}}],[\"randomuuid\",{\"1\":{\"200\":1,\"269\":1,\"322\":1,\"661\":1,\"662\":1}}],[\"rangeopen\",{\"1\":{\"771\":1}}],[\"rangeopenclosed\",{\"1\":{\"771\":1}}],[\"rangeclosedopen\",{\"1\":{\"771\":1}}],[\"rangeclosed\",{\"1\":{\"23\":1,\"25\":1,\"631\":2,\"771\":1}}],[\"range\",{\"1\":{\"22\":2,\"632\":2,\"634\":2}}],[\"r−i​\",{\"1\":{\"74\":1,\"840\":1}}],[\"r−i+1\",{\"1\":{\"74\":1,\"840\":1}}],[\"r+i=1∑r​ωi\",{\"1\":{\"74\":1,\"840\":1}}],[\"richer\",{\"1\":{\"59\":1}}],[\"rightjoin\",{\"1\":{\"601\":1}}],[\"rightpad\",{\"1\":{\"289\":4}}],[\"right\",{\"1\":{\"22\":1,\"64\":1,\"632\":1,\"634\":1,\"771\":8}}],[\"r\",{\"1\":{\"38\":6,\"39\":6,\"40\":4,\"41\":4,\"42\":4,\"110\":7,\"140\":6,\"148\":1,\"172\":4,\"205\":1,\"608\":4,\"666\":8,\"734\":4}}],[\"rollback\",{\"1\":{\"410\":1}}],[\"role\",{\"1\":{\"145\":2,\"146\":2,\"147\":2,\"149\":3}}],[\"role`\",{\"1\":{\"144\":2,\"145\":2,\"146\":2,\"147\":2,\"149\":2}}],[\"roleids\",{\"1\":{\"112\":1}}],[\"roles\",{\"1\":{\"111\":2,\"112\":5,\"127\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":4}}],[\"roundenv\",{\"1\":{\"805\":2}}],[\"roundenvironment\",{\"1\":{\"805\":1}}],[\"round\",{\"1\":{\"294\":1}}],[\"routedescriptorfactory\",{\"1\":{\"545\":1}}],[\"routecontextfactory\",{\"1\":{\"545\":1}}],[\"route\",{\"1\":{\"111\":1,\"483\":2}}],[\"root\",{\"1\":{\"34\":2,\"124\":2,\"157\":3,\"167\":2,\"397\":2,\"481\":3,\"483\":3,\"500\":2,\"517\":2,\"780\":2,\"781\":2,\"786\":2,\"787\":2,\"792\":2,\"806\":1}}],[\"rows\",{\"1\":{\"270\":1,\"601\":1,\"666\":1}}],[\"row\",{\"1\":{\"9\":2,\"483\":1,\"734\":2}}],[\"rownumber\",{\"1\":{\"9\":1}}],[\"rewritecontextfactory\",{\"1\":{\"545\":1}}],[\"rewritebatchedstatements=true开启后性能将会大幅提升\",{\"1\":{\"360\":1}}],[\"rewritebatchedstatements=true\",{\"1\":{\"34\":1,\"124\":1,\"157\":1,\"167\":1,\"204\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"removetracking\",{\"1\":{\"522\":2}}],[\"remove\",{\"1\":{\"522\":1}}],[\"removebehavior\",{\"1\":{\"272\":6}}],[\"regexp\",{\"1\":{\"669\":6}}],[\"registerlistener\",{\"1\":{\"410\":1}}],[\"regarded\",{\"1\":{\"81\":1}}],[\"refreshcache\",{\"1\":{\"508\":1}}],[\"reflectutils\",{\"1\":{\"505\":1}}],[\"reflectiveoperationexception\",{\"1\":{\"313\":1}}],[\"ref\",{\"1\":{\"313\":1,\"507\":2}}],[\"retentionpolicy\",{\"1\":{\"308\":1,\"505\":1,\"524\":1,\"574\":1,\"802\":1}}],[\"retention\",{\"1\":{\"308\":1,\"505\":1,\"524\":1,\"574\":1,\"802\":1}}],[\"return\",{\"1\":{\"110\":1,\"117\":2,\"122\":5,\"123\":3,\"125\":1,\"140\":3,\"152\":2,\"172\":1,\"185\":3,\"192\":1,\"200\":1,\"201\":1,\"219\":2,\"223\":4,\"227\":8,\"260\":6,\"262\":2,\"265\":2,\"271\":1,\"273\":1,\"274\":2,\"284\":6,\"306\":15,\"308\":12,\"309\":4,\"310\":3,\"313\":12,\"335\":1,\"417\":1,\"479\":1,\"480\":1,\"482\":2,\"485\":6,\"486\":1,\"487\":1,\"491\":1,\"493\":3,\"498\":5,\"499\":3,\"501\":1,\"505\":5,\"509\":1,\"521\":2,\"522\":22,\"523\":4,\"524\":1,\"525\":1,\"526\":6,\"530\":5,\"547\":2,\"548\":1,\"556\":2,\"562\":3,\"564\":2,\"572\":15,\"574\":12,\"579\":4,\"585\":1,\"586\":2,\"592\":5,\"626\":2,\"631\":6,\"642\":1,\"650\":1,\"651\":1,\"666\":2,\"686\":7,\"689\":4,\"690\":1,\"734\":1,\"744\":2,\"781\":2,\"782\":1,\"783\":2,\"787\":2,\"788\":1,\"789\":2,\"793\":1,\"794\":2,\"795\":1,\"796\":2,\"797\":2,\"798\":1,\"803\":3,\"804\":3,\"805\":3,\"807\":2,\"809\":7,\"812\":2,\"814\":9,\"815\":1}}],[\"receiver\",{\"1\":{\"229\":1,\"584\":1}}],[\"requirenonnull\",{\"1\":{\"522\":3}}],[\"requiredargsconstructor\",{\"1\":{\"509\":1,\"526\":1,\"782\":1,\"788\":1,\"793\":1,\"809\":1}}],[\"requiredexception\",{\"1\":{\"100\":1,\"107\":1}}],[\"required\",{\"1\":{\"34\":1,\"167\":1,\"532\":2,\"601\":1}}],[\"requestbody\",{\"1\":{\"526\":1}}],[\"request\",{\"1\":{\"273\":1,\"274\":1,\"526\":2}}],[\"requestmapping\",{\"1\":{\"125\":1,\"501\":1,\"509\":1,\"526\":6,\"782\":1,\"788\":1,\"793\":1}}],[\"resultclass\",{\"1\":{\"729\":4}}],[\"resultset\",{\"1\":{\"608\":1}}],[\"result\",{\"1\":{\"505\":2,\"631\":2,\"650\":4,\"651\":4}}],[\"restcontroller\",{\"1\":{\"125\":1,\"501\":1,\"509\":1,\"526\":1,\"782\":1,\"788\":1,\"793\":1}}],[\"resources>\",{\"1\":{\"801\":1}}],[\"resources<\",{\"1\":{\"801\":1}}],[\"resource>\",{\"1\":{\"801\":2}}],[\"resource或者try\",{\"1\":{\"740\":1}}],[\"resource\",{\"1\":{\"117\":1,\"493\":1}}],[\"release\",{\"1\":{\"196\":1,\"243\":1,\"245\":1,\"250\":1,\"251\":1,\"252\":1,\"316\":1,\"417\":1,\"805\":1}}],[\"releaseconnection\",{\"1\":{\"122\":1,\"498\":1}}],[\"relative\",{\"1\":{\"83\":1}}],[\"relationgroupsize\",{\"1\":{\"468\":1}}],[\"relationlogicdelete\",{\"1\":{\"275\":1}}],[\"relationteacherproxy>\",{\"1\":{\"140\":1}}],[\"relationteacher\",{\"1\":{\"140\":3}}],[\"relationtypeenum\",{\"1\":{\"111\":5,\"140\":3,\"152\":3,\"556\":1,\"705\":8,\"712\":2,\"713\":5}}],[\"relationuserproxy>\",{\"1\":{\"140\":1}}],[\"relationuser\",{\"1\":{\"140\":4}}],[\"relationmappingtypeenum\",{\"1\":{\"112\":3}}],[\"relation\",{\"1\":{\"18\":1,\"140\":3,\"483\":1}}],[\"repo\",{\"1\":{\"801\":3,\"805\":2,\"806\":3}}],[\"repositories>\",{\"1\":{\"519\":1}}],[\"repository>\",{\"1\":{\"519\":1}}],[\"repository\",{\"0\":{\"86\":1,\"87\":1},\"1\":{\"15\":2,\"157\":1}}],[\"repo1\",{\"1\":{\"519\":1}}],[\"replaceparser\",{\"1\":{\"313\":1}}],[\"replace\",{\"1\":{\"289\":4,\"313\":1}}],[\"replaceall\",{\"1\":{\"200\":1,\"322\":1}}],[\"replaceservicefactory\",{\"1\":{\"487\":1}}],[\"replaceservice\",{\"1\":{\"123\":3,\"271\":1,\"274\":4,\"397\":1,\"471\":1,\"491\":3,\"493\":3,\"499\":3,\"523\":3,\"545\":46,\"548\":1,\"549\":2,\"816\":1}}],[\"repeatable\",{\"1\":{\"410\":1}}],[\"repeat\",{\"1\":{\"122\":1,\"498\":1}}],[\"reader\",{\"1\":{\"313\":2}}],[\"read\",{\"1\":{\"55\":1,\"56\":1,\"58\":1,\"410\":3}}],[\"腾讯云\",{\"1\":{\"15\":1}}],[\"文章标题列表\",{\"1\":{\"850\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"849\":1}}],[\"文字\",{\"1\":{\"820\":2}}],[\"文字段落\",{\"1\":{\"820\":24}}],[\"文件夹的图片\",{\"1\":{\"849\":1}}],[\"文件放置在一起\",{\"1\":{\"849\":1}}],[\"文件生成页面\",{\"1\":{\"821\":1}}],[\"文件\",{\"1\":{\"15\":1,\"821\":1}}],[\"文档主题\",{\"0\":{\"7\":1}}],[\"xiaolan\",{\"1\":{\"782\":4,\"788\":4,\"793\":4}}],[\"xiaohong\",{\"1\":{\"782\":4,\"788\":4,\"793\":4}}],[\"xiaoming1\",{\"1\":{\"260\":2,\"262\":1,\"265\":3}}],[\"xiaoming\",{\"1\":{\"260\":3,\"782\":5,\"788\":5,\"793\":5}}],[\"x1\",{\"1\":{\"694\":1,\"696\":1}}],[\"xjm<\",{\"1\":{\"519\":1}}],[\"xplugin\",{\"1\":{\"455\":1}}],[\"xuejiaming\",{\"1\":{\"230\":1,\"260\":1,\"262\":1,\"522\":1}}],[\"xuejm\",{\"1\":{\"94\":1}}],[\"xuejmnet\",{\"1\":{\"94\":1,\"126\":1,\"158\":1,\"160\":1,\"384\":1,\"390\":1,\"806\":3}}],[\"xsd\",{\"1\":{\"157\":2,\"519\":2}}],[\"xsi\",{\"1\":{\"157\":1,\"519\":1}}],[\"xsi=\",{\"1\":{\"157\":1,\"519\":1}}],[\"x版本都可以直接升级上来\",{\"1\":{\"49\":1}}],[\"xx公司\",{\"1\":{\"724\":6}}],[\"xx路\",{\"1\":{\"694\":5,\"696\":5}}],[\"xxx1\",{\"1\":{\"666\":2}}],[\"xxx\",{\"1\":{\"185\":2,\"366\":2,\"411\":2,\"523\":2,\"626\":1,\"666\":4}}],[\"xxxx\",{\"1\":{\"15\":1}}],[\"xxxxxxx\",{\"1\":{\"232\":2,\"234\":1,\"587\":2,\"589\":1}}],[\"xxxxx\",{\"1\":{\"15\":1}}],[\"xx\",{\"1\":{\"39\":2,\"172\":6,\"185\":1,\"650\":1,\"651\":1,\"722\":1,\"739\":1}}],[\"x\",{\"1\":{\"39\":2,\"49\":1,\"112\":1,\"135\":2,\"136\":2,\"137\":2,\"148\":2,\"149\":2,\"172\":6,\"195\":2,\"236\":10,\"237\":6,\"265\":1,\"289\":5,\"315\":8,\"564\":10,\"565\":6,\"592\":2,\"626\":3,\"641\":12,\"669\":20,\"694\":19,\"696\":19,\"697\":1,\"703\":2,\"712\":5,\"724\":1,\"738\":2,\"739\":2,\"744\":2,\"771\":12}}],[\"xml引入sql\",{\"1\":{\"161\":1}}],[\"xmlschema\",{\"1\":{\"157\":1,\"519\":1}}],[\"xmlns\",{\"1\":{\"157\":1,\"519\":1}}],[\"xmlns=\",{\"1\":{\"157\":1,\"519\":1}}],[\"xml如下\",{\"1\":{\"157\":1}}],[\"xml\",{\"1\":{\"15\":1,\"157\":1,\"519\":1}}],[\"这是脚注内容\",{\"1\":{\"846\":1}}],[\"这是我们最终的java对象\",{\"1\":{\"796\":1}}],[\"这一篇文章我们讲解了如何使用java代码来实现数据库列的加密解密\",{\"1\":{\"584\":1}}],[\"这样我们就完成了新增自动填充创建信息和修改信息\",{\"1\":{\"809\":1}}],[\"这样我们就完成了对象的分片配置\",{\"1\":{\"797\":1}}],[\"这样我们就实现了对应的值类型转换和枚举的转换\",{\"1\":{\"309\":1,\"579\":1}}],[\"这样我们就将结构化主表字段增加了额外字段\",{\"1\":{\"111\":1}}],[\"这次我们采用抽象来实现\",{\"1\":{\"284\":1}}],[\"这种情况下updateby和updatetime并不会自动添加到生成的sql里面\",{\"1\":{\"260\":1}}],[\"这套api支持sql模式的增删改查和join\",{\"1\":{\"151\":1}}],[\"这边设置继承baseentity的对象\",{\"1\":{\"809\":1}}],[\"这边简单的使用编译时注解来完成代理功能\",{\"1\":{\"799\":1}}],[\"这边限制vo对象返回topic的id其他都是blog的属性\",{\"1\":{\"732\":1}}],[\"这边以nameconversion作为例子来演示我们如何替换掉默认的框架行为\",{\"1\":{\"546\":1}}],[\"这边以mysql为例\",{\"1\":{\"453\":1,\"460\":1,\"466\":1}}],[\"这边使用的是version=2也可以使用version+1但是其实是一样的因为where后面限定了version=1\",{\"1\":{\"433\":1,\"434\":1}}],[\"这边提供两种解决方案\",{\"1\":{\"301\":1,\"558\":1,\"567\":1,\"575\":1}}],[\"这边采用不存在的id\",{\"1\":{\"285\":1}}],[\"这边采用阿里巴巴密文字段检索方案\",{\"1\":{\"215\":1}}],[\"这边可以通过setstate来传递参数\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"这边我们新建一个租户拦截器\",{\"1\":{\"265\":1}}],[\"这边easy\",{\"1\":{\"210\":1,\"417\":1,\"814\":1}}],[\"这边给出如何自行处理实现类starter\",{\"1\":{\"117\":1,\"493\":1}}],[\"这边建议推荐使用\",{\"1\":{\"28\":1}}],[\"这两个注解仅生成文件路径不一样\",{\"1\":{\"33\":1}}],[\"这个sql怎么写\",{\"0\":{\"736\":1}}],[\"这个学生是每个班级年龄最大的三个\",{\"1\":{\"703\":1}}],[\"这个方法属性为id的比较是啥结果都会添加到条件里面\",{\"1\":{\"631\":1}}],[\"这个参数不可以设置的比datasource的pool\",{\"1\":{\"469\":1}}],[\"这个和log不一样\",{\"1\":{\"468\":1}}],[\"这个所有orm都是一样的\",{\"1\":{\"379\":1}}],[\"这个时候我们的updatesetinterceptor拦截就起作用了\",{\"1\":{\"260\":1}}],[\"这个错误是因为eq默认不允许删除不显式指定where\",{\"1\":{\"16\":1}}],[\"这个是因为目前阿里云镜像正在维护\",{\"1\":{\"15\":1}}],[\"这里主要汇总了一些常见的问题\",{\"1\":{\"11\":1}}],[\"f1\",{\"1\":{\"616\":4}}],[\"f\",{\"1\":{\"614\":16,\"615\":12,\"616\":4}}],[\"fhs\",{\"1\":{\"504\":4}}],[\"further\",{\"1\":{\"517\":1}}],[\"fun\",{\"1\":{\"517\":1}}],[\"func<t\",{\"1\":{\"729\":1}}],[\"func接口\",{\"1\":{\"226\":1}}],[\"func能力实现单列的数据库函数\",{\"1\":{\"224\":1}}],[\"function<string\",{\"1\":{\"625\":4}}],[\"function<stream<t>\",{\"1\":{\"601\":1,\"743\":1}}],[\"function<easyentityquery\",{\"1\":{\"522\":2}}],[\"functions\",{\"1\":{\"59\":1}}],[\"function\",{\"1\":{\"51\":1,\"52\":1,\"75\":1}}],[\"fullpropertyname\",{\"1\":{\"313\":2}}],[\"fullname\",{\"1\":{\"237\":10,\"554\":1,\"565\":10}}],[\"fullnamecolumnvaluesqlconverter\",{\"1\":{\"236\":1,\"564\":1}}],[\"fx\",{\"1\":{\"236\":18,\"288\":10,\"289\":26,\"292\":1,\"293\":3,\"295\":1,\"296\":3,\"564\":18,\"592\":10}}],[\"failsafe\",{\"1\":{\"519\":1}}],[\"failed\",{\"1\":{\"206\":1,\"517\":1}}],[\"factory\",{\"1\":{\"117\":2,\"493\":2}}],[\"false多对多必填\",{\"1\":{\"704\":2}}],[\"false表示不删除\",{\"1\":{\"430\":1}}],[\"false表示不报错\",{\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"false表示未被删除\",{\"1\":{\"279\":1,\"430\":1}}],[\"false表示是否使用该条件默认true\",{\"1\":{\"185\":3}}],[\"false\",{\"1\":{\"12\":2,\"174\":1,\"185\":11,\"186\":2,\"205\":9,\"212\":1,\"257\":1,\"268\":1,\"271\":1,\"278\":4,\"281\":4,\"327\":3,\"328\":4,\"348\":1,\"350\":1,\"356\":1,\"365\":6,\"366\":12,\"388\":1,\"407\":1,\"426\":4,\"468\":4,\"469\":1,\"556\":2,\"564\":2,\"586\":1,\"592\":2,\"607\":2,\"616\":1,\"621\":1,\"622\":1,\"623\":2,\"626\":3,\"631\":3,\"632\":1,\"633\":2,\"634\":1,\"642\":1,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"652\":22,\"667\":2,\"672\":1,\"673\":2,\"704\":3,\"733\":1,\"734\":1,\"737\":1,\"738\":1,\"739\":1,\"742\":2,\"758\":1,\"759\":1,\"760\":1,\"772\":1,\"798\":2,\"805\":1,\"809\":2}}],[\"float\",{\"1\":{\"613\":1,\"635\":1}}],[\"flowchart\",{\"0\":{\"72\":1}}],[\"flexaccount\",{\"1\":{\"389\":6}}],[\"flex的优点是快速生成sql\",{\"1\":{\"387\":1}}],[\"flex的性能比较模板增加额外10000次获取来判断反序列化性能\",{\"1\":{\"333\":1}}],[\"flex大概是其3倍\",{\"1\":{\"387\":1}}],[\"flex相近甚至更快\",{\"1\":{\"383\":1}}],[\"flex和mybaits\",{\"1\":{\"383\":1}}],[\"flex\",{\"1\":{\"383\":1,\"384\":1,\"385\":4,\"386\":4,\"387\":3,\"388\":3,\"389\":6}}],[\"flatelement表示放弃当前表的查询比如roles表因为没有条件所以不需要直接展开即可对roles下的users进行筛选\",{\"1\":{\"149\":1}}],[\"flatelement支持多层级穿透\",{\"1\":{\"129\":1}}],[\"flatelement后仅支持但条件判断\",{\"1\":{\"129\":1}}],[\"flatelement\",{\"1\":{\"112\":4,\"129\":1,\"137\":2,\"149\":5,\"152\":1,\"764\":1}}],[\"feature\",{\"0\":{\"329\":1,\"550\":1},\"1\":{\"309\":3,\"330\":1,\"332\":1,\"551\":1,\"553\":1,\"579\":3}}],[\"features\",{\"0\":{\"50\":1,\"52\":1},\"1\":{\"52\":1}}],[\"fetch\",{\"1\":{\"744\":2}}],[\"fetchdirection等等\",{\"1\":{\"741\":1,\"743\":1}}],[\"fetchsize\",{\"1\":{\"741\":1,\"743\":1}}],[\"fetchs\",{\"1\":{\"483\":1}}],[\"fetchproxy\",{\"1\":{\"168\":1,\"185\":1,\"335\":2,\"557\":2,\"666\":1}}],[\"fetcher\",{\"1\":{\"110\":2,\"111\":1,\"112\":1,\"168\":1,\"171\":1,\"174\":2,\"185\":4,\"335\":2,\"366\":1,\"369\":3,\"375\":1,\"376\":1,\"377\":2,\"557\":2,\"601\":1,\"666\":2}}],[\"foo\",{\"0\":{\"550\":1,\"854\":1,\"859\":1},\"1\":{\"551\":1,\"860\":1}}],[\"footnote\",{\"0\":{\"66\":1},\"1\":{\"66\":1,\"80\":1}}],[\"footer\",{\"1\":{\"52\":1,\"84\":1}}],[\"found\",{\"1\":{\"166\":1,\"623\":1,\"735\":1}}],[\"formattail\",{\"1\":{\"797\":1}}],[\"formatdatasource\",{\"1\":{\"797\":1}}],[\"format会拼接到字符串上\",{\"1\":{\"668\":1}}],[\"format\",{\"1\":{\"227\":3,\"290\":1,\"293\":1,\"296\":1,\"666\":15,\"667\":3,\"668\":1,\"670\":5}}],[\"form表单排序\",{\"1\":{\"100\":1,\"107\":1}}],[\"form表单查询\",{\"1\":{\"100\":1,\"107\":1}}],[\"for\",{\"1\":{\"56\":1,\"58\":1,\"83\":3,\"306\":1,\"308\":3,\"358\":1,\"505\":2,\"508\":2,\"517\":1,\"530\":1,\"572\":1,\"574\":3,\"621\":1,\"622\":1,\"623\":1,\"634\":1,\"673\":1,\"742\":1,\"781\":2,\"782\":1,\"787\":2,\"788\":1,\"793\":1}}],[\"following\",{\"1\":{\"52\":1}}],[\"fixshardinginitializer\",{\"1\":{\"191\":1,\"491\":1,\"523\":1}}],[\"firstname\",{\"1\":{\"236\":2,\"564\":2}}],[\"firstnotnull\",{\"1\":{\"179\":1,\"356\":1,\"399\":2,\"417\":1,\"532\":2,\"783\":2,\"789\":2,\"794\":2,\"795\":1,\"812\":1,\"813\":2}}],[\"first\",{\"1\":{\"183\":1,\"223\":4,\"641\":3,\"679\":3}}],[\"firstornull\",{\"1\":{\"34\":2,\"35\":2,\"167\":2,\"168\":3,\"179\":1,\"196\":1,\"214\":3,\"220\":8,\"233\":1,\"234\":1,\"235\":1,\"250\":2,\"251\":1,\"252\":2,\"260\":1,\"265\":1,\"278\":1,\"285\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"323\":1,\"334\":1,\"385\":1,\"399\":2,\"417\":1,\"419\":2,\"505\":2,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"588\":1,\"589\":1,\"590\":1,\"601\":1,\"645\":1,\"673\":4,\"772\":1,\"773\":1,\"774\":1,\"812\":1}}],[\"finally来关闭资源\",{\"1\":{\"399\":1}}],[\"finally\",{\"1\":{\"196\":1,\"243\":1,\"250\":1,\"251\":1,\"252\":1,\"316\":1,\"417\":1,\"525\":1,\"526\":1,\"740\":1}}],[\"final\",{\"1\":{\"122\":1,\"223\":2,\"227\":4,\"231\":1,\"273\":1,\"274\":2,\"284\":1,\"306\":1,\"308\":2,\"313\":5,\"485\":1,\"498\":1,\"509\":1,\"522\":3,\"526\":1,\"572\":1,\"574\":2,\"586\":1,\"592\":2,\"623\":1,\"631\":2,\"686\":5,\"689\":2,\"690\":3,\"782\":1,\"788\":1,\"793\":1,\"803\":2,\"804\":3,\"809\":4,\"812\":2,\"814\":1}}],[\"findbyid\",{\"1\":{\"505\":2}}],[\"findbyids\",{\"1\":{\"505\":2}}],[\"findfirst\",{\"1\":{\"308\":1,\"574\":1,\"744\":1}}],[\"findinset\",{\"1\":{\"223\":4}}],[\"findnotnull\",{\"1\":{\"179\":1,\"532\":2}}],[\"findornull\",{\"1\":{\"35\":1,\"168\":1,\"179\":1}}],[\"find\",{\"0\":{\"222\":1},\"1\":{\"15\":1,\"221\":1,\"223\":6}}],[\"field>\",{\"1\":{\"308\":1,\"574\":1}}],[\"field\",{\"1\":{\"308\":5,\"505\":1,\"517\":1,\"574\":5}}],[\"fields\",{\"1\":{\"110\":1,\"111\":1,\"112\":7}}],[\"fieldnameconstants\",{\"1\":{\"110\":2,\"111\":1}}],[\"fillsetterexpression\",{\"1\":{\"641\":3}}],[\"fillone\",{\"1\":{\"641\":2}}],[\"fillmany\",{\"1\":{\"640\":1,\"641\":3}}],[\"fill\",{\"0\":{\"640\":1}}],[\"filter\",{\"0\":{\"692\":1,\"695\":1},\"1\":{\"100\":1,\"107\":1,\"308\":1,\"574\":1,\"615\":2}}],[\"filterconfigure\",{\"1\":{\"23\":1,\"631\":5,\"744\":1}}],[\"filer\",{\"1\":{\"805\":3}}],[\"filenotfoundexception\",{\"1\":{\"313\":2}}],[\"filed\",{\"1\":{\"308\":6,\"574\":6}}],[\"file\",{\"1\":{\"54\":1,\"111\":2,\"313\":1,\"804\":1}}],[\"files\",{\"0\":{\"75\":1},\"1\":{\"54\":2,\"83\":1}}],[\"file的需要插件支持\",{\"1\":{\"33\":1}}],[\"frames\",{\"1\":{\"313\":1}}],[\"free\",{\"1\":{\"83\":1}}],[\"freesql\",{\"1\":{\"18\":1,\"596\":1}}],[\"frontmatter\",{\"1\":{\"52\":1,\"56\":3,\"82\":1,\"84\":1,\"819\":1,\"823\":3,\"848\":1,\"850\":1}}],[\"from\",{\"1\":{\"17\":1,\"23\":2,\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":2,\"39\":3,\"40\":2,\"41\":1,\"42\":2,\"54\":1,\"100\":1,\"107\":1,\"140\":6,\"144\":5,\"145\":3,\"146\":3,\"147\":3,\"149\":5,\"157\":1,\"158\":1,\"167\":2,\"168\":5,\"169\":1,\"170\":1,\"171\":2,\"172\":3,\"173\":2,\"174\":2,\"175\":2,\"185\":12,\"186\":2,\"214\":3,\"220\":8,\"221\":1,\"223\":3,\"224\":1,\"227\":1,\"229\":2,\"230\":2,\"231\":1,\"233\":2,\"235\":2,\"237\":4,\"250\":1,\"251\":1,\"252\":2,\"260\":1,\"265\":3,\"278\":2,\"280\":2,\"281\":2,\"285\":2,\"292\":1,\"293\":2,\"295\":1,\"296\":2,\"306\":1,\"307\":1,\"308\":3,\"309\":1,\"315\":6,\"323\":1,\"334\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":3,\"341\":2,\"342\":2,\"350\":2,\"353\":1,\"355\":2,\"356\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"397\":2,\"418\":1,\"468\":1,\"482\":1,\"517\":2,\"521\":1,\"532\":8,\"557\":9,\"565\":4,\"572\":1,\"573\":1,\"574\":3,\"579\":1,\"584\":2,\"585\":2,\"586\":1,\"588\":2,\"590\":2,\"593\":1,\"594\":1,\"595\":1,\"606\":1,\"607\":3,\"615\":3,\"616\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"626\":3,\"631\":4,\"633\":2,\"634\":1,\"642\":2,\"645\":1,\"646\":1,\"647\":2,\"648\":2,\"650\":1,\"651\":1,\"655\":2,\"656\":2,\"658\":2,\"659\":2,\"666\":5,\"667\":12,\"669\":5,\"672\":2,\"673\":6,\"679\":1,\"681\":2,\"682\":2,\"683\":3,\"694\":12,\"696\":12,\"706\":2,\"707\":2,\"708\":2,\"709\":3,\"710\":4,\"712\":6,\"713\":11,\"714\":5,\"722\":2,\"724\":6,\"729\":3,\"733\":2,\"734\":2,\"737\":2,\"738\":4,\"739\":4,\"742\":1,\"744\":2,\"750\":2,\"751\":2,\"753\":2,\"754\":2,\"756\":3,\"757\":4,\"758\":4,\"759\":4,\"760\":3,\"764\":2,\"765\":2,\"772\":1,\"774\":1,\"783\":4,\"789\":2,\"794\":2,\"795\":2}}],[\"o1\",{\"1\":{\"669\":2}}],[\"owner\",{\"1\":{\"313\":1}}],[\"ow2\",{\"1\":{\"313\":1}}],[\"o==null\",{\"1\":{\"309\":1,\"579\":1}}],[\"odaul359snxsbyzqma05xa==496uk1pkxubdvpq0a7q0uq==pvhc30osr7k27xkn36fp4g==+ta\",{\"1\":{\"249\":1,\"252\":1}}],[\"oldvalue\",{\"1\":{\"200\":2,\"201\":2}}],[\"object的一个属性对应数据库查询的多列\",{\"1\":{\"634\":1}}],[\"object的一个属性对应数据库查询的一列\",{\"1\":{\"632\":1}}],[\"object值类型对象\",{\"1\":{\"311\":1}}],[\"object>格式返回\",{\"1\":{\"748\":1}}],[\"object>\",{\"1\":{\"269\":1,\"271\":2,\"273\":2,\"274\":4,\"370\":1,\"420\":1,\"612\":1,\"735\":1,\"755\":1}}],[\"object>>\",{\"1\":{\"185\":1,\"650\":1,\"651\":1,\"658\":1,\"659\":1,\"735\":1,\"753\":1,\"754\":1}}],[\"objectsortbuilder\",{\"0\":{\"619\":1},\"1\":{\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"634\":1}}],[\"objectsort\",{\"0\":{\"618\":1},\"1\":{\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"634\":1}}],[\"objectsortqueryexecutor\",{\"1\":{\"545\":1}}],[\"objects\",{\"1\":{\"140\":3,\"308\":1,\"522\":3,\"574\":1,\"622\":1,\"783\":1,\"789\":1,\"794\":1}}],[\"object\",{\"1\":{\"125\":1,\"200\":2,\"201\":2,\"227\":3,\"260\":4,\"262\":2,\"265\":2,\"273\":1,\"274\":1,\"308\":1,\"309\":2,\"417\":2,\"482\":1,\"501\":1,\"509\":1,\"522\":3,\"525\":1,\"526\":5,\"574\":1,\"579\":2,\"601\":2,\"631\":3,\"642\":1,\"704\":1,\"782\":1,\"783\":2,\"788\":1,\"789\":2,\"793\":1,\"794\":2,\"795\":1,\"798\":1,\"809\":2,\"812\":3}}],[\"override\",{\"1\":{\"122\":4,\"140\":1,\"200\":2,\"201\":2,\"219\":2,\"223\":2,\"227\":4,\"231\":3,\"236\":6,\"254\":1,\"260\":9,\"262\":5,\"265\":5,\"271\":3,\"273\":4,\"274\":6,\"284\":4,\"306\":7,\"308\":3,\"309\":2,\"310\":2,\"313\":5,\"485\":4,\"498\":4,\"505\":5,\"508\":1,\"521\":7,\"522\":20,\"547\":2,\"548\":1,\"556\":5,\"562\":2,\"564\":8,\"572\":7,\"574\":3,\"579\":2,\"581\":1,\"586\":5,\"592\":6,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"631\":2,\"634\":1,\"686\":3,\"689\":2,\"690\":1,\"781\":1,\"787\":1,\"796\":3,\"797\":4,\"798\":1,\"803\":3,\"804\":3,\"805\":4,\"809\":10,\"814\":5,\"815\":1}}],[\"over\",{\"1\":{\"93\":1,\"669\":13,\"734\":2}}],[\"offset表示跳过多少条\",{\"1\":{\"601\":1}}],[\"offset\",{\"1\":{\"601\":1,\"631\":1,\"714\":1}}],[\"ofnullable\",{\"1\":{\"308\":1,\"574\":1}}],[\"ofb\",{\"1\":{\"216\":3}}],[\"of\",{\"1\":{\"38\":2,\"39\":5,\"40\":1,\"41\":1,\"42\":1,\"52\":1,\"77\":1,\"83\":1,\"84\":1,\"110\":2,\"111\":1,\"117\":1,\"140\":1,\"144\":2,\"147\":1,\"152\":1,\"171\":5,\"172\":10,\"173\":1,\"174\":2,\"175\":1,\"184\":8,\"185\":10,\"237\":2,\"238\":1,\"314\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"388\":1,\"493\":1,\"565\":2,\"566\":1,\"605\":1,\"606\":3,\"607\":6,\"608\":2,\"642\":4,\"666\":3,\"667\":1,\"724\":3,\"737\":2,\"738\":1,\"739\":1,\"742\":1,\"758\":1,\"759\":1,\"760\":1,\"796\":1,\"797\":1}}],[\"out\",{\"1\":{\"34\":1,\"167\":1,\"306\":1,\"308\":1,\"309\":1,\"521\":13,\"572\":1,\"574\":1,\"579\":1,\"781\":1,\"787\":1}}],[\"operation\",{\"1\":{\"517\":1}}],[\"operations\",{\"1\":{\"14\":2}}],[\"opensource<\",{\"1\":{\"504\":4}}],[\"opcode==opcodes\",{\"1\":{\"313\":1}}],[\"opcode\",{\"1\":{\"313\":1}}],[\"opcodes\",{\"1\":{\"313\":2}}],[\"optional<topic>\",{\"1\":{\"744\":1}}],[\"optional<field>\",{\"1\":{\"308\":4,\"574\":4}}],[\"optional\",{\"1\":{\"308\":4,\"574\":4}}],[\"options\",{\"1\":{\"84\":1,\"631\":1}}],[\"optionconfigure\",{\"1\":{\"34\":1,\"123\":1,\"167\":1,\"271\":1,\"397\":1,\"471\":1,\"491\":1,\"493\":1,\"499\":1,\"523\":1,\"548\":1,\"798\":1,\"816\":1}}],[\"op\",{\"1\":{\"34\":3,\"167\":3,\"271\":2,\"397\":3,\"471\":3,\"548\":3,\"798\":10,\"816\":3}}],[\"o\",{\"1\":{\"23\":6,\"25\":11,\"34\":6,\"35\":2,\"36\":2,\"37\":6,\"38\":18,\"39\":20,\"40\":13,\"102\":2,\"127\":3,\"132\":1,\"140\":3,\"167\":6,\"168\":2,\"169\":2,\"170\":6,\"171\":33,\"172\":36,\"173\":11,\"182\":8,\"185\":7,\"214\":4,\"220\":16,\"223\":15,\"227\":2,\"284\":3,\"285\":1,\"292\":5,\"293\":11,\"295\":5,\"296\":11,\"309\":2,\"315\":16,\"325\":2,\"334\":1,\"335\":20,\"338\":1,\"339\":2,\"340\":7,\"341\":6,\"342\":8,\"375\":1,\"376\":2,\"377\":4,\"385\":1,\"386\":1,\"387\":1,\"388\":2,\"389\":1,\"397\":29,\"417\":2,\"482\":1,\"485\":3,\"505\":6,\"508\":2,\"530\":2,\"533\":1,\"579\":2,\"606\":8,\"607\":6,\"608\":14,\"614\":1,\"620\":1,\"621\":1,\"622\":1,\"626\":5,\"631\":12,\"645\":2,\"647\":4,\"648\":6,\"649\":4,\"652\":68,\"663\":3,\"666\":49,\"669\":14,\"672\":26,\"673\":18,\"681\":2,\"697\":2,\"706\":2,\"707\":2,\"708\":2,\"709\":2,\"710\":4,\"712\":4,\"713\":17,\"714\":2,\"735\":2,\"737\":14,\"738\":6,\"739\":7,\"742\":4,\"744\":10,\"757\":2,\"758\":4,\"759\":4,\"760\":5,\"772\":2,\"773\":2,\"774\":4,\"783\":3,\"789\":3,\"794\":3,\"795\":1,\"809\":6}}],[\"onconstructor\",{\"1\":{\"509\":1,\"526\":1,\"782\":1,\"788\":1,\"793\":1,\"809\":2}}],[\"onconflictthen\",{\"0\":{\"373\":1},\"1\":{\"374\":1,\"375\":1,\"376\":1,\"377\":2}}],[\"onconflictdoupdate\",{\"0\":{\"369\":1},\"1\":{\"369\":3}}],[\"onconflictdonothing\",{\"0\":{\"368\":1},\"1\":{\"368\":1}}],[\"onduplicatekeyupdate\",{\"0\":{\"366\":1},\"1\":{\"366\":4}}],[\"onduplicatekeyignore\",{\"0\":{\"365\":1},\"1\":{\"365\":1}}],[\"only\",{\"1\":{\"348\":1,\"351\":2,\"352\":4,\"363\":2,\"370\":1,\"419\":2,\"422\":1,\"468\":1,\"483\":5}}],[\"one\",{\"1\":{\"706\":1,\"708\":1,\"713\":4}}],[\"onevent\",{\"1\":{\"274\":2,\"487\":1,\"549\":1}}],[\"onexecuteafter\",{\"1\":{\"268\":1,\"271\":1,\"273\":1,\"274\":2}}],[\"onexecutebefore\",{\"1\":{\"268\":1,\"271\":1,\"273\":1,\"274\":2}}],[\"onetomany\",{\"0\":{\"707\":1},\"1\":{\"140\":3,\"152\":1,\"556\":1,\"697\":1,\"705\":2,\"712\":2,\"713\":1}}],[\"onetoone\",{\"0\":{\"706\":1},\"1\":{\"111\":2,\"152\":2,\"697\":1,\"705\":1,\"713\":1}}],[\"on\",{\"1\":{\"14\":1,\"41\":2,\"42\":2,\"52\":1,\"144\":3,\"174\":3,\"175\":2,\"185\":6,\"186\":3,\"235\":1,\"281\":2,\"366\":3,\"368\":1,\"369\":2,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"397\":1,\"531\":3,\"590\":1,\"607\":2,\"616\":1,\"622\":1,\"626\":1,\"631\":4,\"642\":2,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"663\":1,\"667\":2,\"669\":1,\"682\":2,\"683\":2,\"694\":3,\"696\":3,\"714\":3,\"733\":1,\"758\":1,\"759\":1}}],[\"or条件主要分为两大类一类是entityquery\",{\"1\":{\"672\":1}}],[\"or条件\",{\"0\":{\"672\":1}}],[\"originalserivce\",{\"1\":{\"549\":1}}],[\"orelse\",{\"1\":{\"308\":1,\"574\":1}}],[\"orm的性能主要有3部分组成\",{\"1\":{\"379\":1}}],[\"orm\",{\"1\":{\"127\":1,\"596\":2}}],[\"orcale\",{\"1\":{\"123\":1,\"499\":1}}],[\"or\",{\"1\":{\"54\":1,\"100\":1,\"107\":1,\"144\":2,\"152\":1,\"385\":3,\"386\":3,\"387\":3,\"397\":2,\"632\":1,\"634\":4,\"642\":1,\"666\":6,\"672\":13,\"673\":24}}],[\"order`\",{\"1\":{\"788\":10,\"789\":4}}],[\"orderentity\",{\"1\":{\"782\":7,\"783\":10,\"788\":7,\"789\":10,\"793\":9,\"794\":17,\"795\":7}}],[\"orderentities\",{\"1\":{\"782\":3,\"788\":3,\"793\":3}}],[\"ordershardingtablecontroller\",{\"1\":{\"793\":1}}],[\"ordershardingtable\",{\"1\":{\"793\":1}}],[\"ordershardingdatasourcecontroller\",{\"1\":{\"788\":1}}],[\"ordershardingdatasource\",{\"1\":{\"788\":1}}],[\"ordershardingdatasourceandtablecontroller\",{\"1\":{\"782\":1}}],[\"ordershardingdatasourceandtable\",{\"1\":{\"782\":1}}],[\"orders\",{\"1\":{\"621\":1,\"622\":1,\"634\":1}}],[\"orders=new\",{\"1\":{\"621\":1,\"622\":1,\"634\":1}}],[\"order\",{\"1\":{\"38\":2,\"40\":1,\"42\":2,\"171\":2,\"173\":1,\"175\":2,\"185\":3,\"237\":2,\"257\":1,\"293\":1,\"296\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"397\":2,\"565\":2,\"595\":1,\"600\":1,\"620\":1,\"621\":4,\"622\":5,\"623\":1,\"629\":1,\"631\":2,\"632\":1,\"634\":4,\"663\":1,\"666\":2,\"669\":13,\"679\":1,\"697\":1,\"714\":1,\"729\":1,\"731\":1,\"732\":1,\"734\":2,\"737\":3,\"742\":1,\"782\":10,\"783\":6,\"791\":3}}],[\"orderby方法内部这个片段不会生效需要调用executesql也就是o\",{\"1\":{\"663\":1}}],[\"orderby需调用executesql\",{\"1\":{\"663\":1}}],[\"orderbymerge同理\",{\"1\":{\"649\":1}}],[\"orderbymodeenum\",{\"1\":{\"183\":2,\"237\":1,\"565\":1,\"679\":2}}],[\"orderbyobject\",{\"1\":{\"620\":1,\"621\":1,\"622\":1,\"623\":2,\"634\":1}}],[\"orderbydynamic\",{\"1\":{\"601\":1}}],[\"orderbydescmerge\",{\"1\":{\"652\":2}}],[\"orderbydesc\",{\"1\":{\"293\":1,\"296\":1,\"652\":2}}],[\"orderbyascmerge\",{\"1\":{\"652\":2}}],[\"orderbyasc\",{\"1\":{\"397\":3,\"652\":2,\"742\":1}}],[\"orderby\",{\"1\":{\"38\":2,\"40\":1,\"42\":2,\"136\":1,\"148\":1,\"171\":4,\"173\":1,\"175\":2,\"183\":3,\"185\":2,\"237\":2,\"334\":1,\"335\":2,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"531\":2,\"565\":2,\"595\":1,\"601\":1,\"619\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"634\":1,\"666\":1,\"679\":1,\"697\":1,\"703\":1,\"728\":1,\"737\":1}}],[\"org\",{\"1\":{\"12\":6,\"117\":8,\"123\":1,\"157\":4,\"492\":6,\"493\":2,\"499\":1,\"517\":2,\"519\":5,\"801\":2}}],[\"oracle生成\",{\"1\":{\"679\":1}}],[\"oracledatabaseconfiguration\",{\"1\":{\"123\":1,\"493\":1,\"499\":1}}],[\"oracledatasource\",{\"1\":{\"123\":3,\"499\":3}}],[\"oracle\",{\"1\":{\"9\":4,\"372\":2}}],[\"jupiter\",{\"1\":{\"519\":1}}],[\"jupiter<\",{\"1\":{\"519\":1}}],[\"junit\",{\"1\":{\"519\":1}}],[\"junit5<\",{\"1\":{\"519\":1}}],[\"jetbrains\",{\"1\":{\"519\":3}}],[\"jvmtarget>\",{\"1\":{\"519\":1}}],[\"jvmtarget>11<\",{\"1\":{\"519\":1}}],[\"jdk20\",{\"1\":{\"474\":1}}],[\"jdk17\",{\"1\":{\"474\":1}}],[\"jdk11\",{\"1\":{\"474\":1}}],[\"jdk8<\",{\"1\":{\"519\":1}}],[\"jdk8\",{\"1\":{\"474\":1}}],[\"jdbc的sql的antlr解析采用自带的表达式解析性能高效\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"jdbcstreamresult<blogentity>\",{\"1\":{\"742\":1}}],[\"jdbc连接字符串不能加\",{\"1\":{\"740\":1}}],[\"jdbcurl\",{\"1\":{\"481\":1,\"483\":1,\"517\":1}}],[\"jdbc结果集映射到bean是否使用属性严格模式\",{\"1\":{\"468\":1}}],[\"jdbcexecuteafterarg\",{\"0\":{\"270\":1},\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"jdbcexecutebeforearg\",{\"0\":{\"269\":1},\"1\":{\"270\":1,\"271\":2,\"273\":2,\"274\":4}}],[\"jdbcexecutorlistener\",{\"0\":{\"268\":1},\"1\":{\"271\":2,\"273\":2,\"274\":4,\"545\":1}}],[\"jdbc<\",{\"1\":{\"120\":1,\"121\":1,\"496\":1,\"497\":1}}],[\"jdbctypehandler\",{\"0\":{\"299\":1}}],[\"jdbctypehandlermanager\",{\"0\":{\"298\":1},\"1\":{\"300\":3,\"545\":1}}],[\"jdbctypehandlermap\",{\"1\":{\"117\":2,\"493\":2}}],[\"jdbctypehandler>\",{\"1\":{\"117\":1,\"493\":1}}],[\"jdbc执行监听器\",{\"0\":{\"267\":1},\"1\":{\"100\":1,\"107\":1}}],[\"jdbc\",{\"1\":{\"34\":2,\"123\":1,\"124\":2,\"157\":2,\"167\":2,\"204\":1,\"206\":1,\"272\":6,\"379\":1,\"397\":2,\"481\":2,\"483\":2,\"499\":1,\"500\":2,\"517\":2,\"780\":2,\"781\":2,\"786\":2,\"787\":2,\"792\":2}}],[\"json属性\",{\"0\":{\"575\":1}}],[\"json属性private\",{\"1\":{\"554\":1}}],[\"jsonwriter\",{\"1\":{\"309\":3,\"579\":3}}],[\"json\",{\"1\":{\"309\":2,\"579\":2}}],[\"json对象\",{\"0\":{\"309\":1,\"579\":1}}],[\"jsonconverter\",{\"1\":{\"191\":1,\"304\":1,\"309\":2,\"310\":4,\"491\":1,\"523\":1,\"561\":1,\"562\":4,\"578\":1,\"579\":2}}],[\"json或者数组\",{\"1\":{\"100\":1,\"107\":1}}],[\"join分页\",{\"0\":{\"682\":1}}],[\"join多表下的sql\",{\"1\":{\"669\":1}}],[\"join多表查询\",{\"0\":{\"41\":1,\"174\":1}}],[\"jointable\",{\"1\":{\"667\":2}}],[\"join自定义sql表\",{\"1\":{\"667\":1}}],[\"join2表以上\",{\"0\":{\"649\":1}}],[\"join匿名表\",{\"1\":{\"647\":1}}],[\"join动态排序\",{\"0\":{\"622\":1}}],[\"join一张表就有两张表\",{\"1\":{\"619\":1}}],[\"join需要编写完\",{\"1\":{\"531\":1}}],[\"join需要的表进行参数提取\",{\"1\":{\"397\":1}}],[\"join处理\",{\"1\":{\"529\":1}}],[\"join写法\",{\"1\":{\"397\":2}}],[\"join\",{\"0\":{\"648\":1},\"1\":{\"41\":1,\"42\":2,\"144\":3,\"174\":2,\"175\":2,\"185\":6,\"186\":3,\"235\":1,\"281\":2,\"289\":4,\"397\":1,\"590\":1,\"607\":2,\"616\":1,\"622\":1,\"626\":1,\"631\":4,\"642\":2,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"663\":1,\"667\":2,\"669\":1,\"682\":2,\"683\":2,\"694\":3,\"696\":3,\"714\":3,\"733\":1,\"758\":2,\"759\":1}}],[\"job\",{\"1\":{\"12\":1,\"483\":1}}],[\"january\",{\"1\":{\"82\":1}}],[\"jar\",{\"1\":{\"12\":6,\"117\":6,\"492\":6}}],[\"java并发更新\",{\"1\":{\"783\":1,\"789\":1}}],[\"javalanguageshardingcomparer\",{\"1\":{\"545\":1}}],[\"java类\",{\"1\":{\"396\":1}}],[\"java实体对象\",{\"1\":{\"354\":1,\"358\":1,\"412\":1,\"756\":1}}],[\"java版本实现\",{\"0\":{\"312\":1}}],[\"java的lambda版本需要自行实现\",{\"1\":{\"311\":1}}],[\"java对象数据库值转换\",{\"0\":{\"301\":1}}],[\"java对象\",{\"0\":{\"716\":1},\"1\":{\"231\":1,\"586\":1}}],[\"javaencryptionstrategy\",{\"1\":{\"191\":1,\"192\":1,\"491\":1,\"523\":1}}],[\"java高级开发\",{\"1\":{\"152\":7}}],[\"java函数数据库封装支持各个数据库\",{\"1\":{\"100\":1,\"107\":1}}],[\"java<\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"120\":1,\"121\":1,\"157\":1,\"163\":1,\"395\":1,\"478\":1,\"496\":1,\"497\":1,\"504\":1,\"513\":1,\"519\":1}}],[\"javadoc\",{\"1\":{\"14\":1}}],[\"java\",{\"1\":{\"12\":7,\"117\":8,\"492\":7,\"493\":1,\"517\":1,\"613\":2,\"799\":1}}],[\"n\",{\"1\":{\"804\":33}}],[\"nio\",{\"1\":{\"783\":6,\"789\":12,\"793\":30,\"794\":12,\"795\":6}}],[\"nickname=\",{\"1\":{\"631\":1}}],[\"nickname\",{\"1\":{\"389\":1,\"631\":3}}],[\"n+1ivzajsilsqenjfa==hs33w1ujdlk1efb0nyhorw==bidnryo+cm5gy0r913ftoa==2rp6ha8xqx2oihtro4ni2g==i6gg2qdr60qx1eq186lagq==9g+7mmp9u30kpofb+xcz+a==\",{\"1\":{\"249\":1,\"252\":1}}],[\"native\",{\"1\":{\"115\":1,\"157\":1,\"465\":1,\"470\":1,\"474\":1,\"483\":1,\"490\":1,\"669\":3,\"670\":1}}],[\"navigatepropertytype\",{\"1\":{\"140\":1}}],[\"navigatebuilder\",{\"1\":{\"140\":1}}],[\"navigateextrafilterstrategy\",{\"1\":{\"140\":1}}],[\"navigateflat\",{\"1\":{\"112\":3}}],[\"navigate\",{\"0\":{\"439\":1,\"704\":1},\"1\":{\"111\":5,\"140\":3,\"152\":3,\"556\":1,\"705\":8,\"712\":2,\"713\":5}}],[\"navbar\",{\"1\":{\"52\":1,\"84\":1}}],[\"namestartzhang\",{\"1\":{\"694\":1,\"696\":1}}],[\"name=越城区\",{\"1\":{\"712\":1}}],[\"name=绍兴市\",{\"1\":{\"712\":1}}],[\"name=浙江省\",{\"1\":{\"712\":1}}],[\"name=江苏省\",{\"1\":{\"712\":1}}],[\"name=老师2\",{\"1\":{\"709\":2}}],[\"name=老师1\",{\"1\":{\"709\":1}}],[\"name=班级3\",{\"1\":{\"707\":1,\"709\":1}}],[\"name=班级2\",{\"1\":{\"707\":1,\"708\":1,\"709\":1}}],[\"name=班级1\",{\"1\":{\"707\":1,\"708\":2,\"709\":1}}],[\"name=学生3\",{\"1\":{\"706\":1,\"707\":1,\"708\":1}}],[\"name=学生2\",{\"1\":{\"706\":1,\"707\":1,\"708\":1}}],[\"name=学生1\",{\"1\":{\"706\":1,\"707\":1,\"708\":1}}],[\"name=null\",{\"1\":{\"315\":2}}],[\"name=mycompany1\",{\"1\":{\"315\":3}}],[\"name=123\",{\"1\":{\"309\":1,\"579\":1}}],[\"name2\",{\"1\":{\"220\":3,\"370\":1}}],[\"name1\",{\"1\":{\"214\":2,\"370\":1,\"420\":1}}],[\"name是一样的\",{\"1\":{\"185\":1}}],[\"name之类的错误请排查lombok是否生效\",{\"1\":{\"166\":1}}],[\"nameconversion\",{\"1\":{\"123\":1,\"397\":1,\"425\":1,\"468\":1,\"471\":1,\"487\":1,\"491\":1,\"493\":1,\"499\":1,\"523\":1,\"545\":1,\"547\":2,\"548\":2}}],[\"name`\",{\"1\":{\"23\":1,\"185\":3,\"186\":4,\"237\":39,\"238\":2,\"565\":39,\"566\":2}}],[\"name>\",{\"1\":{\"15\":2,\"157\":1,\"519\":1}}],[\"name\",{\"1\":{\"12\":1,\"21\":1,\"22\":1,\"23\":1,\"25\":2,\"34\":2,\"110\":7,\"111\":6,\"112\":5,\"115\":1,\"117\":1,\"124\":1,\"129\":5,\"131\":1,\"133\":2,\"134\":1,\"135\":1,\"136\":1,\"137\":2,\"138\":1,\"140\":5,\"144\":4,\"145\":1,\"146\":1,\"149\":4,\"152\":15,\"157\":3,\"167\":2,\"185\":1,\"192\":1,\"219\":1,\"254\":2,\"257\":2,\"260\":2,\"262\":1,\"265\":1,\"266\":1,\"309\":2,\"310\":4,\"311\":3,\"313\":6,\"334\":1,\"335\":8,\"340\":3,\"341\":3,\"342\":3,\"350\":1,\"370\":1,\"385\":2,\"386\":2,\"387\":2,\"389\":1,\"396\":1,\"397\":4,\"420\":1,\"465\":1,\"468\":1,\"470\":1,\"479\":1,\"481\":1,\"483\":3,\"485\":1,\"486\":1,\"490\":1,\"493\":1,\"500\":1,\"506\":2,\"507\":2,\"509\":2,\"532\":6,\"547\":1,\"548\":1,\"556\":1,\"557\":1,\"562\":4,\"579\":2,\"581\":2,\"592\":5,\"601\":2,\"631\":1,\"669\":6,\"694\":7,\"696\":7,\"703\":1,\"705\":3,\"712\":3,\"713\":3,\"724\":5,\"738\":1,\"780\":2,\"781\":1,\"782\":30,\"783\":18,\"786\":2,\"787\":1,\"788\":31,\"789\":12,\"792\":2,\"793\":30,\"794\":12,\"795\":6,\"807\":5,\"809\":1}}],[\"num\",{\"1\":{\"734\":3,\"738\":1}}],[\"number>\",{\"1\":{\"306\":2,\"308\":1,\"572\":2,\"574\":1}}],[\"numbercalcenum\",{\"1\":{\"236\":2,\"564\":2}}],[\"numbercalc\",{\"1\":{\"236\":2,\"564\":2}}],[\"number\",{\"1\":{\"9\":2,\"236\":2,\"306\":4,\"308\":3,\"483\":1,\"564\":2,\"572\":4,\"574\":3,\"631\":1,\"734\":2}}],[\"null最前最后\",{\"0\":{\"679\":1}}],[\"nullproperty\",{\"1\":{\"666\":2}}],[\"null列\",{\"1\":{\"352\":1}}],[\"null列插入所以只会生成一列\",{\"1\":{\"351\":1,\"363\":1}}],[\"null表示被删除\",{\"1\":{\"279\":2}}],[\"null表示未被删除\",{\"1\":{\"279\":2,\"430\":2}}],[\"nulls\",{\"1\":{\"183\":2,\"237\":1,\"565\":1,\"679\":4}}],[\"nullordefault\",{\"1\":{\"39\":1,\"111\":1,\"172\":1,\"288\":4,\"295\":1,\"296\":2,\"666\":5}}],[\"null\",{\"0\":{\"773\":1},\"1\":{\"25\":4,\"214\":4,\"220\":8,\"227\":1,\"237\":1,\"260\":5,\"262\":4,\"265\":1,\"269\":1,\"270\":2,\"285\":6,\"306\":6,\"308\":10,\"309\":2,\"311\":9,\"313\":7,\"348\":1,\"351\":10,\"352\":10,\"354\":4,\"358\":4,\"363\":10,\"370\":2,\"374\":1,\"375\":1,\"399\":2,\"410\":1,\"412\":4,\"419\":4,\"420\":1,\"422\":1,\"468\":2,\"483\":5,\"506\":7,\"522\":4,\"565\":1,\"572\":6,\"574\":10,\"579\":2,\"626\":1,\"642\":4,\"646\":1,\"647\":1,\"648\":1,\"679\":2,\"681\":2,\"682\":2,\"683\":2,\"714\":3,\"756\":4,\"758\":2,\"759\":2,\"771\":2,\"809\":8,\"812\":1,\"814\":8}}],[\"nointerceptor\",{\"1\":{\"601\":2}}],[\"normal\",{\"1\":{\"592\":2,\"594\":1,\"595\":1}}],[\"nop\",{\"1\":{\"517\":1}}],[\"nopadding\",{\"1\":{\"216\":5}}],[\"noear<\",{\"1\":{\"478\":1}}],[\"noversionerror\",{\"1\":{\"468\":1}}],[\"noversionerror默认为true当对象有version字段并且更新修改不存在version字段将会报错\",{\"1\":{\"319\":1}}],[\"noversionignore\",{\"1\":{\"325\":2,\"328\":1}}],[\"no`\",{\"1\":{\"314\":1,\"315\":6,\"316\":1,\"782\":10,\"783\":4,\"788\":10,\"789\":2,\"793\":10,\"794\":2,\"795\":1}}],[\"none\",{\"1\":{\"129\":2}}],[\"no\",{\"1\":{\"117\":1,\"206\":1,\"311\":1,\"396\":1,\"397\":2,\"483\":1,\"493\":1,\"517\":1}}],[\"nosuchbeandefinitionexception\",{\"1\":{\"117\":1,\"493\":1}}],[\"now\",{\"1\":{\"23\":2,\"24\":2,\"25\":2,\"37\":2,\"170\":2,\"184\":2,\"232\":1,\"236\":2,\"237\":7,\"249\":1,\"260\":3,\"262\":4,\"284\":4,\"290\":1,\"294\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"323\":1,\"327\":1,\"328\":1,\"358\":1,\"362\":1,\"368\":1,\"369\":1,\"485\":4,\"562\":1,\"564\":2,\"565\":7,\"572\":1,\"574\":1,\"579\":1,\"587\":1,\"592\":2,\"593\":2,\"594\":4,\"595\":6,\"631\":4,\"633\":3,\"634\":2,\"649\":4,\"667\":1,\"673\":5,\"737\":2,\"782\":1,\"783\":2,\"788\":1,\"789\":2,\"793\":1,\"794\":2,\"795\":1,\"796\":1,\"797\":1,\"809\":6}}],[\"notexists\",{\"1\":{\"771\":1}}],[\"notin\",{\"1\":{\"771\":1}}],[\"notlikematchright\",{\"1\":{\"652\":2,\"771\":1}}],[\"notlikematchleft\",{\"1\":{\"652\":2,\"771\":1}}],[\"notlike\",{\"1\":{\"652\":2,\"666\":1,\"771\":1}}],[\"notallowed\",{\"1\":{\"619\":1}}],[\"nothing\",{\"1\":{\"368\":1}}],[\"notnull异常\",{\"1\":{\"402\":1}}],[\"notnull\",{\"1\":{\"230\":13,\"510\":3,\"585\":13}}],[\"notnulloremptyvaluefilter\",{\"1\":{\"23\":1,\"631\":7,\"744\":1}}],[\"not\",{\"0\":{\"767\":1,\"769\":1},\"1\":{\"15\":1,\"214\":10,\"220\":20,\"279\":2,\"311\":1,\"348\":1,\"351\":1,\"352\":2,\"354\":3,\"358\":4,\"363\":1,\"370\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"412\":3,\"419\":1,\"468\":1,\"483\":4,\"506\":8,\"623\":1,\"626\":1,\"632\":2,\"634\":2,\"642\":1,\"646\":1,\"647\":1,\"648\":1,\"666\":1,\"681\":2,\"682\":2,\"683\":2,\"714\":3,\"756\":3,\"758\":2,\"759\":2,\"761\":2,\"771\":5}}],[\"ne\",{\"1\":{\"608\":1,\"652\":2,\"666\":1,\"667\":1,\"672\":1,\"771\":1}}],[\"net\",{\"1\":{\"206\":1,\"745\":1,\"746\":1}}],[\"nested\",{\"1\":{\"117\":1,\"493\":1}}],[\"need\",{\"1\":{\"56\":1}}],[\"nextint\",{\"1\":{\"385\":3,\"386\":3,\"387\":3,\"417\":1}}],[\"nextid\",{\"1\":{\"201\":1,\"809\":2}}],[\"nextversion\",{\"1\":{\"322\":1}}],[\"next\",{\"1\":{\"52\":1,\"322\":4}}],[\"nexus\",{\"1\":{\"15\":2}}],[\"newcontent\",{\"1\":{\"662\":1}}],[\"newcontent=\",{\"1\":{\"661\":1,\"662\":1}}],[\"newcachedthreadpool线程池\",{\"1\":{\"469\":1}}],[\"newcachedthreadpool\",{\"1\":{\"407\":2}}],[\"newtitle\",{\"1\":{\"417\":2}}],[\"new\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"34\":5,\"39\":1,\"40\":1,\"41\":1,\"55\":1,\"103\":2,\"104\":2,\"105\":2,\"110\":1,\"116\":9,\"117\":2,\"122\":2,\"123\":2,\"140\":1,\"167\":4,\"171\":1,\"172\":3,\"173\":1,\"174\":1,\"175\":1,\"185\":7,\"191\":24,\"192\":2,\"214\":1,\"220\":1,\"223\":2,\"227\":5,\"230\":1,\"231\":2,\"232\":1,\"238\":1,\"249\":1,\"257\":1,\"260\":1,\"271\":2,\"272\":3,\"273\":1,\"274\":2,\"284\":2,\"304\":1,\"306\":3,\"308\":6,\"309\":2,\"310\":6,\"313\":10,\"314\":4,\"323\":1,\"327\":1,\"328\":1,\"335\":2,\"340\":1,\"351\":3,\"352\":5,\"353\":2,\"358\":2,\"362\":1,\"363\":3,\"365\":3,\"366\":3,\"368\":1,\"369\":1,\"370\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"385\":2,\"386\":2,\"387\":2,\"388\":2,\"389\":3,\"397\":3,\"399\":3,\"411\":3,\"417\":1,\"420\":1,\"460\":5,\"466\":4,\"471\":1,\"485\":1,\"486\":1,\"487\":1,\"491\":21,\"493\":13,\"498\":2,\"499\":2,\"505\":1,\"508\":1,\"522\":1,\"523\":23,\"547\":1,\"548\":1,\"556\":2,\"561\":1,\"562\":6,\"566\":1,\"570\":1,\"572\":3,\"574\":6,\"578\":1,\"579\":2,\"585\":1,\"586\":2,\"587\":1,\"592\":2,\"608\":1,\"620\":1,\"621\":3,\"622\":3,\"623\":4,\"631\":2,\"633\":2,\"634\":3,\"641\":1,\"642\":3,\"650\":1,\"651\":1,\"666\":3,\"686\":2,\"690\":1,\"691\":1,\"731\":1,\"734\":1,\"735\":1,\"742\":3,\"781\":3,\"782\":2,\"783\":1,\"787\":3,\"788\":2,\"789\":1,\"793\":2,\"794\":1,\"797\":3,\"798\":4,\"805\":1,\"812\":1,\"814\":9,\"815\":1,\"816\":1}}],[\"<include>\",{\"1\":{\"801\":1}}],[\"<includes>\",{\"1\":{\"801\":1}}],[\"<id>test\",{\"1\":{\"519\":1}}],[\"<id>tencent\",{\"1\":{\"15\":1}}],[\"<id>compile<\",{\"1\":{\"519\":1}}],[\"<id>mavencentral<\",{\"1\":{\"519\":1}}],[\"<id>kapt<\",{\"1\":{\"514\":1,\"519\":1}}],[\"<id>huawei\",{\"1\":{\"15\":1}}],[\"<directory>target\",{\"1\":{\"801\":1}}],[\"<directory>src\",{\"1\":{\"801\":1}}],[\"<description>springbootdemo<\",{\"1\":{\"157\":1}}],[\"<dependencymanagement>\",{\"1\":{\"801\":1}}],[\"<dependency>\",{\"1\":{\"12\":1,\"30\":7,\"31\":6,\"44\":5,\"115\":1,\"117\":1,\"120\":6,\"121\":8,\"157\":8,\"158\":1,\"163\":6,\"309\":1,\"313\":1,\"395\":6,\"453\":3,\"455\":1,\"460\":5,\"463\":1,\"465\":1,\"466\":4,\"478\":5,\"490\":1,\"492\":1,\"496\":6,\"497\":8,\"504\":12,\"513\":5,\"519\":8,\"579\":1,\"801\":6}}],[\"<dependencies>\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"120\":1,\"121\":1,\"157\":1,\"163\":1,\"455\":1,\"496\":1,\"497\":1,\"504\":1,\"519\":1,\"801\":2}}],[\"<>\",{\"1\":{\"634\":1,\"642\":1,\"666\":1,\"667\":2,\"672\":1,\"771\":1}}],[\"<source>1\",{\"1\":{\"801\":1}}],[\"<sourcedirectory>src\",{\"1\":{\"519\":1}}],[\"<scope>provided<\",{\"1\":{\"801\":1}}],[\"<scope>test<\",{\"1\":{\"120\":1,\"121\":1,\"496\":1,\"497\":1,\"504\":1,\"519\":2}}],[\"<scope>compile<\",{\"1\":{\"30\":4,\"31\":3,\"157\":1,\"478\":1}}],[\"<resource>\",{\"1\":{\"801\":2}}],[\"<resources>\",{\"1\":{\"801\":1}}],[\"<repository>\",{\"1\":{\"519\":1}}],[\"<repositories>\",{\"1\":{\"519\":1}}],[\"<relativepath\",{\"1\":{\"157\":1}}],[\"<kotlin\",{\"1\":{\"519\":2}}],[\"<goal>test\",{\"1\":{\"519\":1}}],[\"<goal>compile<\",{\"1\":{\"519\":1}}],[\"<goal>kapt<\",{\"1\":{\"514\":1,\"519\":1}}],[\"<goals>\",{\"1\":{\"514\":1,\"519\":3}}],[\"<groupid>mysql<\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"120\":1,\"121\":1,\"157\":1,\"163\":1,\"395\":1,\"478\":1,\"496\":1,\"497\":1,\"504\":1,\"513\":1,\"519\":1}}],[\"<groupid>com\",{\"1\":{\"17\":1,\"30\":5,\"31\":4,\"44\":3,\"115\":1,\"120\":2,\"121\":4,\"157\":4,\"158\":2,\"163\":4,\"167\":1,\"176\":1,\"309\":1,\"395\":4,\"453\":3,\"455\":2,\"460\":5,\"463\":1,\"465\":1,\"466\":4,\"478\":2,\"490\":1,\"496\":2,\"497\":4,\"504\":6,\"513\":4,\"514\":1,\"519\":6,\"579\":1,\"801\":4}}],[\"<groupid>org\",{\"1\":{\"12\":1,\"17\":1,\"30\":1,\"31\":1,\"44\":1,\"117\":1,\"120\":3,\"121\":3,\"157\":6,\"158\":1,\"163\":1,\"167\":1,\"176\":1,\"313\":1,\"395\":1,\"455\":2,\"478\":2,\"492\":1,\"496\":3,\"497\":3,\"504\":5,\"519\":5,\"801\":2}}],[\"<exclude>\",{\"1\":{\"801\":1}}],[\"<excludes>\",{\"1\":{\"801\":1}}],[\"<executions>\",{\"1\":{\"519\":1}}],[\"<execution>\",{\"1\":{\"514\":1,\"519\":3}}],[\"<easy\",{\"1\":{\"115\":1,\"453\":1,\"455\":1,\"460\":1,\"463\":1,\"465\":1,\"466\":1,\"490\":1}}],[\"<compilerargs>\",{\"1\":{\"455\":1}}],[\"<configuration>\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"514\":1,\"519\":2,\"801\":1}}],[\"<target>1\",{\"1\":{\"801\":1}}],[\"<trentity>\",{\"1\":{\"641\":2}}],[\"<tresult>\",{\"1\":{\"522\":3}}],[\"<testsourcedirectory>src\",{\"1\":{\"519\":1}}],[\"<t>\",{\"1\":{\"310\":1,\"313\":1,\"510\":3,\"562\":1,\"686\":2,\"814\":5}}],[\"<tproxy\",{\"1\":{\"522\":10}}],[\"<tprovider>\",{\"1\":{\"302\":1,\"559\":1,\"568\":1,\"576\":1}}],[\"<tproperty>\",{\"1\":{\"302\":1,\"559\":1,\"568\":1,\"576\":1}}],[\"<t\",{\"1\":{\"227\":2,\"306\":1,\"308\":3,\"572\":1,\"574\":3}}],[\"<build>\",{\"1\":{\"157\":1,\"455\":1,\"519\":1,\"801\":1}}],[\"<mainclass>mainkt<\",{\"1\":{\"519\":1}}],[\"<maven\",{\"1\":{\"157\":4}}],[\"<modelversion>4\",{\"1\":{\"157\":1,\"519\":1}}],[\"<mirrorof>\",{\"1\":{\"15\":2}}],[\"<mirror>\",{\"1\":{\"15\":2}}],[\"<=1\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"<==\",{\"1\":{\"34\":2,\"35\":8,\"36\":2,\"37\":2,\"38\":4,\"40\":4,\"41\":2,\"42\":2,\"167\":2,\"168\":10,\"169\":2,\"170\":2,\"171\":4,\"173\":4,\"174\":2,\"175\":2,\"205\":1,\"214\":4,\"220\":11,\"232\":1,\"233\":2,\"234\":1,\"235\":3,\"249\":1,\"250\":2,\"251\":1,\"252\":3,\"260\":4,\"262\":1,\"265\":5,\"278\":4,\"280\":3,\"285\":5,\"306\":3,\"307\":2,\"308\":3,\"309\":3,\"310\":1,\"314\":1,\"315\":12,\"316\":2,\"323\":2,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"355\":2,\"356\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":1,\"365\":1,\"366\":3,\"397\":4,\"417\":3,\"418\":3,\"419\":2,\"482\":2,\"521\":2,\"562\":1,\"572\":3,\"573\":2,\"574\":3,\"579\":3,\"587\":1,\"588\":2,\"589\":1,\"590\":3,\"615\":6,\"616\":2,\"626\":3,\"631\":4,\"633\":4,\"642\":4,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"650\":2,\"651\":2,\"655\":1,\"656\":1,\"658\":1,\"659\":1,\"661\":1,\"662\":1,\"667\":4,\"673\":12,\"679\":2,\"681\":2,\"682\":2,\"683\":2,\"706\":4,\"707\":4,\"708\":4,\"709\":6,\"710\":8,\"712\":12,\"713\":22,\"737\":2,\"742\":1,\"744\":2,\"750\":1,\"751\":1,\"753\":1,\"754\":1,\"757\":2,\"758\":2,\"759\":2,\"760\":2,\"772\":2,\"774\":2,\"782\":10,\"783\":8,\"788\":10,\"789\":6,\"793\":10,\"794\":6,\"795\":3}}],[\"<=\",{\"1\":{\"23\":2,\"37\":1,\"41\":1,\"140\":1,\"170\":1,\"174\":1,\"616\":1,\"631\":6,\"633\":2,\"634\":2,\"642\":1,\"666\":1,\"673\":5,\"733\":1,\"742\":1,\"771\":9}}],[\"<version>5\",{\"1\":{\"519\":1,\"801\":1}}],[\"<version>latest\",{\"1\":{\"478\":1}}],[\"<version>last\",{\"1\":{\"158\":1}}],[\"<version>9\",{\"1\":{\"313\":1}}],[\"<version>0\",{\"1\":{\"157\":1}}],[\"<version>2\",{\"1\":{\"157\":3,\"309\":1,\"478\":1,\"504\":4,\"519\":2,\"579\":1,\"801\":3}}],[\"<version>1\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"157\":2,\"163\":1,\"395\":1,\"455\":1,\"478\":1,\"504\":2,\"513\":3,\"514\":1,\"519\":9}}],[\"<version>8\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"120\":1,\"121\":1,\"157\":1,\"163\":1,\"395\":1,\"478\":1,\"496\":1,\"497\":1,\"504\":1,\"513\":1,\"519\":1}}],[\"<version>$\",{\"1\":{\"17\":1,\"30\":4,\"31\":3,\"44\":2,\"115\":1,\"120\":2,\"121\":4,\"157\":1,\"158\":1,\"163\":3,\"167\":1,\"176\":1,\"395\":3,\"453\":3,\"455\":3,\"460\":5,\"463\":1,\"465\":1,\"466\":4,\"490\":1,\"496\":2,\"497\":4,\"504\":1}}],[\"<version>3\",{\"1\":{\"17\":1,\"30\":1,\"31\":1,\"44\":1,\"158\":1,\"163\":1,\"167\":1,\"176\":1,\"395\":1,\"478\":1,\"513\":1,\"519\":1,\"801\":1}}],[\"<phase>test\",{\"1\":{\"519\":1}}],[\"<phase>compile<\",{\"1\":{\"519\":1}}],[\"<plugins>\",{\"1\":{\"157\":1,\"455\":1,\"519\":1,\"801\":1}}],[\"<plugin>\",{\"1\":{\"17\":1,\"157\":1,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"519\":4,\"801\":1}}],[\"<packaging>jar<\",{\"1\":{\"519\":1}}],[\"<parent>\",{\"1\":{\"157\":1}}],[\"<path>\",{\"1\":{\"17\":3,\"158\":3,\"167\":3,\"176\":3,\"455\":2,\"514\":1,\"519\":1}}],[\"<proc>none<\",{\"1\":{\"801\":1}}],[\"<project>\",{\"1\":{\"455\":1}}],[\"<project\",{\"1\":{\"157\":1,\"519\":2}}],[\"<properties>\",{\"1\":{\"115\":1,\"157\":1,\"453\":1,\"455\":1,\"460\":1,\"463\":1,\"465\":1,\"466\":1,\"490\":1,\"519\":1}}],[\"<arg>\",{\"1\":{\"455\":1}}],[\"<artifactid>junit\",{\"1\":{\"519\":1}}],[\"<artifactid>exec\",{\"1\":{\"519\":1}}],[\"<artifactid>easy\",{\"1\":{\"504\":4}}],[\"<artifactid>kotlin\",{\"1\":{\"519\":3}}],[\"<artifactid>untitled2<\",{\"1\":{\"519\":1}}],[\"<artifactid>druid\",{\"1\":{\"504\":1}}],[\"<artifactid>druid<\",{\"1\":{\"157\":1}}],[\"<artifactid>asm<\",{\"1\":{\"313\":1}}],[\"<artifactid>fastjson<\",{\"1\":{\"309\":1,\"579\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"157\":1,\"163\":1,\"395\":1,\"455\":1,\"478\":1,\"504\":1}}],[\"<artifactid>hikaricp<\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"163\":1,\"395\":1,\"478\":1,\"513\":1,\"519\":1}}],[\"<artifactid>mysql\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"120\":1,\"121\":1,\"157\":1,\"163\":1,\"395\":1,\"478\":1,\"496\":1,\"497\":1,\"504\":1,\"513\":1,\"519\":1}}],[\"<artifactid>maven\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"519\":2,\"801\":1}}],[\"<artifactid>solon\",{\"1\":{\"478\":1}}],[\"<artifactid>sql\",{\"1\":{\"17\":1,\"30\":4,\"31\":3,\"44\":2,\"115\":1,\"120\":2,\"121\":4,\"157\":3,\"158\":2,\"163\":3,\"167\":1,\"176\":1,\"395\":3,\"453\":3,\"455\":2,\"460\":5,\"463\":1,\"465\":1,\"466\":4,\"478\":1,\"490\":1,\"496\":2,\"497\":4,\"504\":1,\"513\":3,\"514\":1,\"519\":4,\"801\":4}}],[\"<artifactid>springbootdemo<\",{\"1\":{\"157\":1}}],[\"<artifactid>spring\",{\"1\":{\"12\":1,\"117\":1,\"120\":3,\"121\":3,\"157\":4,\"492\":1,\"496\":3,\"497\":3,\"504\":4,\"801\":2}}],[\"<annotationprocessorpaths>\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"514\":1,\"519\":1}}],[\"<name>consoleapp<\",{\"1\":{\"519\":1}}],[\"<name>springbootdemo<\",{\"1\":{\"157\":1}}],[\"<name>huawei\",{\"1\":{\"15\":1}}],[\"<name>tencent\",{\"1\":{\"15\":1}}],[\"<url>https\",{\"1\":{\"15\":2,\"519\":1}}],[\"<\",{\"1\":{\"12\":1,\"15\":6,\"17\":10,\"30\":18,\"31\":15,\"44\":16,\"115\":3,\"117\":1,\"120\":11,\"121\":17,\"147\":1,\"157\":22,\"158\":11,\"163\":19,\"167\":10,\"176\":10,\"309\":1,\"313\":2,\"358\":1,\"395\":15,\"453\":10,\"455\":26,\"460\":16,\"463\":3,\"465\":3,\"466\":13,\"478\":5,\"490\":3,\"492\":1,\"496\":11,\"497\":17,\"504\":16,\"513\":6,\"514\":5,\"519\":33,\"530\":1,\"579\":1,\"642\":1,\"734\":2,\"771\":9,\"781\":1,\"782\":1,\"787\":1,\"788\":1,\"793\":1,\"801\":21}}],[\"1+\",{\"1\":{\"697\":1}}],[\"1就是help\",{\"1\":{\"507\":1}}],[\"1之类的的限制\",{\"1\":{\"399\":2}}],[\"1或者top\",{\"1\":{\"399\":4}}],[\"15全部是or链接\",{\"1\":{\"672\":1}}],[\"15<\",{\"1\":{\"504\":1}}],[\"15\",{\"1\":{\"285\":1,\"418\":1,\"522\":1,\"535\":1,\"672\":2,\"793\":10}}],[\"15+版本框架不需要实现proxytableclass方法\",{\"1\":{\"166\":3}}],[\"133\",{\"1\":{\"772\":1}}],[\"13\",{\"1\":{\"260\":1,\"262\":1,\"285\":1,\"306\":1,\"308\":1,\"359\":1,\"522\":1,\"572\":1,\"574\":1,\"672\":2,\"713\":1,\"794\":1}}],[\"13232323232\",{\"1\":{\"249\":1,\"323\":2,\"324\":1,\"327\":2,\"328\":2}}],[\"13232323321\",{\"1\":{\"220\":1}}],[\"13232456789\",{\"1\":{\"232\":2,\"587\":2}}],[\"134\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"16t12\",{\"1\":{\"667\":1}}],[\"16t14\",{\"1\":{\"37\":1,\"170\":1}}],[\"16t21\",{\"1\":{\"359\":1,\"360\":1,\"361\":1}}],[\"16位秘钥\",{\"1\":{\"219\":1}}],[\"16位向量\",{\"1\":{\"219\":1}}],[\"16\",{\"1\":{\"216\":17,\"219\":1,\"307\":1,\"535\":1,\"573\":1,\"667\":1}}],[\"1l\",{\"1\":{\"184\":2,\"323\":1,\"325\":1,\"327\":1,\"328\":2,\"809\":1}}],[\"12662\",{\"1\":{\"387\":1}}],[\"12969\",{\"1\":{\"387\":1}}],[\"12806\",{\"1\":{\"387\":1}}],[\"12812\",{\"1\":{\"387\":1}}],[\"128\",{\"1\":{\"311\":1,\"407\":1,\"469\":1}}],[\"123xxx\",{\"1\":{\"772\":2,\"773\":1,\"774\":2}}],[\"123321\",{\"1\":{\"757\":2,\"758\":2,\"759\":2,\"760\":2}}],[\"123321123321xxx1\",{\"1\":{\"411\":1}}],[\"123321123321xxx\",{\"1\":{\"411\":1}}],[\"1234\",{\"1\":{\"310\":2,\"562\":2}}],[\"12345678\",{\"1\":{\"232\":2,\"234\":1,\"587\":2,\"589\":1}}],[\"123456789000\",{\"1\":{\"249\":1}}],[\"1234567890abcdef\",{\"1\":{\"219\":1}}],[\"1234567890123456\",{\"1\":{\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":3,\"586\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":3}}],[\"12345678901\",{\"1\":{\"214\":4,\"220\":2}}],[\"12345\",{\"1\":{\"232\":2,\"233\":2,\"234\":2,\"235\":2,\"265\":9,\"310\":2,\"562\":2,\"587\":2,\"588\":2,\"589\":2,\"590\":2}}],[\"1231\",{\"1\":{\"309\":4,\"310\":1,\"562\":1,\"579\":4}}],[\"123\",{\"1\":{\"38\":4,\"39\":6,\"40\":3,\"102\":2,\"171\":6,\"172\":8,\"173\":3,\"180\":1,\"181\":1,\"182\":4,\"183\":3,\"184\":4,\"185\":16,\"186\":4,\"196\":2,\"237\":2,\"260\":13,\"262\":2,\"272\":3,\"281\":4,\"288\":3,\"289\":6,\"293\":1,\"296\":1,\"306\":6,\"307\":2,\"308\":6,\"309\":4,\"310\":4,\"325\":6,\"351\":5,\"352\":13,\"353\":3,\"363\":5,\"370\":1,\"397\":5,\"420\":2,\"521\":1,\"562\":4,\"565\":2,\"572\":6,\"573\":2,\"574\":6,\"579\":4,\"606\":2,\"608\":1,\"614\":4,\"615\":6,\"616\":2,\"626\":6,\"634\":6,\"649\":6,\"666\":4,\"667\":6,\"694\":1,\"696\":1,\"733\":1,\"739\":2,\"758\":2,\"759\":2,\"760\":2,\"812\":2,\"813\":2}}],[\"12\",{\"1\":{\"37\":1,\"41\":1,\"132\":4,\"170\":1,\"174\":1,\"234\":1,\"237\":2,\"289\":3,\"290\":1,\"306\":2,\"308\":2,\"361\":2,\"419\":1,\"521\":1,\"565\":2,\"572\":2,\"574\":2,\"589\":1,\"634\":1,\"667\":3,\"672\":2,\"734\":2}}],[\"12728\",{\"1\":{\"387\":1}}],[\"12721\",{\"1\":{\"387\":1}}],[\"12731\",{\"1\":{\"387\":1}}],[\"12743\",{\"1\":{\"387\":1}}],[\"12779\",{\"1\":{\"387\":1}}],[\"12759\",{\"1\":{\"387\":1}}],[\"127\",{\"1\":{\"34\":1,\"124\":1,\"157\":1,\"167\":1,\"204\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":2,\"740\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"14<\",{\"1\":{\"801\":3}}],[\"14t22\",{\"1\":{\"631\":4,\"633\":3}}],[\"14+有效\",{\"1\":{\"348\":1}}],[\"14\",{\"1\":{\"34\":1,\"42\":1,\"167\":1,\"175\":1,\"672\":3}}],[\"189373\",{\"1\":{\"789\":1}}],[\"187\",{\"1\":{\"389\":2}}],[\"183\",{\"1\":{\"389\":2}}],[\"18t21\",{\"1\":{\"360\":1}}],[\"188\",{\"1\":{\"185\":4}}],[\"18<\",{\"1\":{\"157\":1,\"478\":1,\"504\":1}}],[\"18\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"157\":1,\"163\":1,\"236\":1,\"309\":1,\"388\":6,\"395\":1,\"455\":1,\"478\":1,\"504\":1,\"564\":1,\"579\":1,\"764\":3,\"765\":2}}],[\"180\",{\"1\":{\"23\":3,\"24\":1,\"25\":1,\"389\":2}}],[\"177\",{\"1\":{\"389\":1}}],[\"179\",{\"1\":{\"389\":1}}],[\"176\",{\"1\":{\"389\":1}}],[\"17t21\",{\"1\":{\"360\":1,\"361\":1}}],[\"17\",{\"1\":{\"37\":1,\"170\":1,\"234\":1,\"397\":1,\"482\":1,\"589\":1,\"673\":1}}],[\"17<\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"157\":1,\"163\":1,\"395\":1}}],[\"170029046\",{\"0\":{\"1\":1,\"3\":1,\"91\":1,\"393\":1,\"537\":1},\"1\":{\"18\":1,\"94\":1}}],[\"192705\",{\"1\":{\"782\":1}}],[\"192703\",{\"1\":{\"782\":1}}],[\"192701\",{\"1\":{\"782\":1}}],[\"192698\",{\"1\":{\"782\":1}}],[\"192696\",{\"1\":{\"782\":1}}],[\"192691\",{\"1\":{\"782\":1}}],[\"192693\",{\"1\":{\"782\":1}}],[\"192664\",{\"1\":{\"782\":1}}],[\"192688\",{\"1\":{\"782\":1}}],[\"192684\",{\"1\":{\"782\":1}}],[\"197\",{\"1\":{\"712\":1}}],[\"196\",{\"1\":{\"389\":1}}],[\"19t21\",{\"1\":{\"360\":1}}],[\"19th\",{\"1\":{\"63\":1,\"829\":1}}],[\"19876543210\",{\"1\":{\"220\":1}}],[\"19\",{\"1\":{\"23\":2,\"309\":1,\"388\":1,\"389\":1,\"579\":1,\"757\":1,\"789\":1}}],[\"116355022\",{\"1\":{\"745\":1}}],[\"110\",{\"1\":{\"419\":1}}],[\"110734184\",{\"1\":{\"206\":1}}],[\"115643516\",{\"1\":{\"746\":1}}],[\"115\",{\"1\":{\"418\":1}}],[\"114\",{\"1\":{\"360\":10}}],[\"11xx\",{\"1\":{\"285\":2}}],[\"111\",{\"1\":{\"397\":2,\"614\":4,\"615\":6,\"616\":2}}],[\"111xx\",{\"1\":{\"280\":2}}],[\"1111234\",{\"1\":{\"235\":4,\"590\":4}}],[\"111123456\",{\"1\":{\"234\":2,\"589\":2}}],[\"11t21\",{\"1\":{\"23\":2}}],[\"11\",{\"1\":{\"23\":4,\"37\":3,\"41\":2,\"170\":3,\"174\":2,\"278\":5,\"328\":1,\"672\":2}}],[\"10倍\",{\"1\":{\"385\":1}}],[\"10+\",{\"1\":{\"385\":1,\"386\":1}}],[\"108\",{\"1\":{\"360\":1}}],[\"107\",{\"1\":{\"360\":1,\"417\":1}}],[\"106\",{\"1\":{\"360\":1}}],[\"105\",{\"1\":{\"360\":1}}],[\"104\",{\"1\":{\"360\":1}}],[\"103\",{\"1\":{\"360\":1}}],[\"100l\",{\"1\":{\"557\":1}}],[\"10000\",{\"1\":{\"385\":3,\"386\":3,\"387\":7}}],[\"1000\",{\"1\":{\"271\":1,\"273\":1,\"274\":2,\"469\":1,\"742\":1}}],[\"100\",{\"1\":{\"257\":1,\"278\":1,\"280\":1,\"285\":1,\"359\":1,\"360\":1,\"361\":1,\"385\":3,\"386\":3,\"387\":3,\"388\":3,\"417\":1,\"557\":1,\"607\":2,\"616\":2,\"650\":1,\"651\":1,\"655\":1,\"658\":1,\"742\":2,\"744\":1,\"750\":1,\"753\":1,\"780\":1,\"781\":1,\"782\":1,\"786\":1,\"787\":1,\"788\":1,\"792\":1,\"793\":1}}],[\"109\",{\"1\":{\"232\":1,\"360\":1,\"587\":1}}],[\"10t14\",{\"1\":{\"232\":1,\"233\":1,\"234\":1,\"587\":1,\"588\":1,\"589\":1}}],[\"102\",{\"1\":{\"214\":1,\"220\":3,\"360\":1}}],[\"1024\",{\"1\":{\"204\":2,\"407\":1,\"468\":2,\"469\":1}}],[\"101\",{\"1\":{\"42\":1,\"175\":1,\"285\":1,\"360\":1,\"361\":1,\"482\":1,\"679\":1}}],[\"10\",{\"0\":{\"138\":1},\"1\":{\"23\":2,\"24\":2,\"25\":1,\"35\":1,\"36\":1,\"39\":1,\"127\":1,\"139\":1,\"168\":2,\"169\":1,\"172\":1,\"233\":1,\"310\":1,\"323\":1,\"324\":1,\"358\":1,\"360\":1,\"371\":1,\"384\":1,\"385\":1,\"386\":5,\"387\":1,\"388\":1,\"389\":1,\"419\":2,\"474\":2,\"562\":1,\"588\":1,\"608\":1,\"616\":1,\"641\":1,\"672\":2,\"695\":1,\"758\":1,\"780\":1,\"781\":1,\"782\":1,\"786\":1,\"787\":1,\"788\":1,\"792\":1,\"793\":1,\"798\":2}}],[\"1\",{\"0\":{\"129\":1,\"337\":1,\"355\":1,\"359\":1,\"414\":1},\"1\":{\"18\":2,\"24\":1,\"34\":8,\"35\":14,\"36\":3,\"37\":1,\"38\":2,\"39\":2,\"40\":3,\"41\":4,\"49\":1,\"53\":12,\"60\":1,\"66\":1,\"82\":1,\"111\":1,\"117\":2,\"124\":1,\"127\":1,\"139\":1,\"140\":10,\"144\":2,\"145\":4,\"146\":2,\"147\":4,\"149\":8,\"152\":2,\"157\":3,\"160\":1,\"167\":8,\"168\":18,\"169\":3,\"170\":1,\"171\":4,\"172\":4,\"173\":3,\"174\":4,\"179\":6,\"180\":1,\"181\":1,\"182\":4,\"183\":3,\"184\":6,\"185\":16,\"186\":4,\"196\":3,\"204\":1,\"205\":9,\"214\":11,\"220\":21,\"223\":9,\"231\":2,\"232\":1,\"233\":2,\"234\":1,\"235\":3,\"237\":3,\"238\":2,\"249\":3,\"250\":8,\"251\":2,\"252\":6,\"260\":5,\"262\":1,\"265\":5,\"278\":4,\"280\":1,\"285\":6,\"289\":3,\"292\":2,\"293\":1,\"295\":2,\"296\":1,\"306\":5,\"307\":2,\"308\":4,\"309\":3,\"310\":1,\"314\":3,\"315\":6,\"316\":2,\"323\":7,\"324\":4,\"325\":7,\"327\":6,\"328\":9,\"335\":4,\"338\":2,\"339\":2,\"340\":2,\"341\":4,\"342\":4,\"355\":2,\"356\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":2,\"365\":11,\"366\":21,\"374\":4,\"375\":4,\"376\":4,\"377\":8,\"385\":1,\"397\":1,\"399\":2,\"411\":2,\"417\":3,\"418\":3,\"419\":2,\"469\":1,\"474\":4,\"481\":1,\"483\":1,\"493\":2,\"500\":1,\"506\":5,\"507\":1,\"509\":2,\"517\":6,\"519\":1,\"521\":1,\"528\":1,\"532\":4,\"535\":5,\"562\":1,\"565\":3,\"566\":2,\"572\":5,\"573\":2,\"574\":4,\"579\":3,\"586\":2,\"587\":1,\"588\":2,\"589\":1,\"590\":3,\"592\":4,\"593\":1,\"594\":3,\"595\":4,\"601\":1,\"606\":1,\"608\":2,\"622\":1,\"631\":10,\"633\":6,\"634\":1,\"641\":1,\"645\":2,\"646\":1,\"647\":1,\"648\":1,\"652\":33,\"656\":3,\"659\":3,\"661\":3,\"662\":3,\"666\":17,\"667\":2,\"669\":9,\"670\":1,\"672\":2,\"673\":17,\"679\":2,\"681\":3,\"682\":5,\"683\":3,\"690\":1,\"691\":4,\"694\":10,\"696\":10,\"697\":1,\"706\":1,\"709\":1,\"710\":1,\"712\":3,\"713\":2,\"714\":2,\"733\":1,\"734\":3,\"735\":1,\"740\":1,\"742\":8,\"744\":5,\"751\":3,\"754\":3,\"756\":1,\"758\":4,\"759\":4,\"760\":4,\"764\":2,\"772\":1,\"774\":1,\"780\":1,\"781\":2,\"782\":27,\"783\":25,\"786\":1,\"787\":2,\"788\":21,\"789\":16,\"792\":1,\"793\":15,\"794\":22,\"795\":3,\"796\":4,\"797\":4,\"798\":1,\"812\":1,\"820\":12,\"827\":1,\"832\":1,\"834\":1,\"848\":2}}],[\"1<\",{\"1\":{\"17\":1,\"30\":1,\"31\":1,\"44\":1,\"158\":1,\"163\":1,\"167\":1,\"176\":1,\"395\":1,\"478\":1,\"513\":1,\"519\":1,\"801\":1}}],[\"1=1\",{\"1\":{\"16\":1}}],[\"goals>\",{\"1\":{\"514\":1,\"519\":3}}],[\"goal>\",{\"1\":{\"514\":1,\"519\":3}}],[\"global=true\",{\"1\":{\"503\":2}}],[\"greater\",{\"1\":{\"632\":2,\"634\":2}}],[\"graalvm\",{\"1\":{\"474\":1}}],[\"group分页\",{\"0\":{\"683\":1}}],[\"group的k2\",{\"1\":{\"642\":1}}],[\"group的k1\",{\"1\":{\"642\":1}}],[\"grouper\",{\"1\":{\"642\":1}}],[\"group获取count+sum\",{\"1\":{\"604\":1}}],[\"groupingby\",{\"1\":{\"508\":1}}],[\"groupid>\",{\"1\":{\"12\":1,\"17\":2,\"30\":7,\"31\":6,\"44\":5,\"115\":1,\"117\":1,\"120\":6,\"121\":8,\"157\":11,\"158\":3,\"163\":6,\"167\":2,\"176\":2,\"309\":1,\"313\":1,\"395\":6,\"453\":3,\"455\":4,\"460\":5,\"463\":1,\"465\":1,\"466\":4,\"478\":5,\"490\":1,\"492\":1,\"496\":6,\"497\":8,\"504\":12,\"513\":5,\"514\":1,\"519\":12,\"579\":1,\"801\":6}}],[\"grouptable\",{\"1\":{\"184\":3,\"237\":1,\"565\":1,\"642\":3}}],[\"group感知\",{\"1\":{\"100\":1,\"107\":1}}],[\"groupkeys\",{\"1\":{\"39\":2,\"172\":4,\"184\":4,\"185\":2,\"237\":1,\"565\":1,\"606\":1,\"608\":1,\"642\":1,\"737\":1}}],[\"groupby等方法中使用那么是返回当做一个片段使用无需调用执行sql方法\",{\"1\":{\"663\":1}}],[\"groupby等\",{\"1\":{\"663\":1}}],[\"groupbymerge\",{\"1\":{\"652\":2}}],[\"groupby\",{\"1\":{\"39\":2,\"172\":4,\"184\":4,\"185\":3,\"237\":1,\"334\":1,\"531\":1,\"565\":1,\"601\":1,\"606\":1,\"608\":1,\"642\":2,\"644\":1,\"648\":1,\"683\":1,\"714\":1,\"728\":1,\"737\":1}}],[\"group\",{\"0\":{\"90\":1,\"648\":1},\"1\":{\"18\":1,\"39\":3,\"172\":5,\"184\":20,\"185\":13,\"237\":5,\"483\":1,\"565\":5,\"606\":1,\"608\":3,\"642\":13,\"648\":1,\"683\":2,\"714\":3,\"729\":1,\"733\":1,\"737\":4}}],[\"groups\",{\"1\":{\"15\":1}}],[\"gmail\",{\"1\":{\"388\":1}}],[\"gjcgjgw==uh8putsdsuitj+rlvsnjoa==2epplfmm+o7bmtpj7xh7ca==\",{\"1\":{\"220\":1}}],[\"guide\",{\"1\":{\"82\":2}}],[\"generatekey=true\",{\"1\":{\"199\":1}}],[\"generatedsqlcolumngenerator\",{\"1\":{\"254\":1,\"581\":1}}],[\"generatedkeysqlcolumngenerator\",{\"1\":{\"254\":1,\"581\":1}}],[\"generatedkey\",{\"1\":{\"254\":1,\"362\":1,\"426\":1,\"581\":1}}],[\"generated\",{\"1\":{\"111\":2,\"801\":1,\"804\":1}}],[\"generate\",{\"1\":{\"54\":2}}],[\"ge\",{\"1\":{\"38\":2,\"39\":2,\"40\":1,\"171\":4,\"172\":4,\"173\":1,\"385\":3,\"386\":3,\"387\":3,\"388\":3,\"389\":3,\"482\":1,\"606\":1,\"608\":1,\"616\":1,\"631\":1,\"652\":4,\"758\":1,\"759\":1,\"760\":1,\"771\":1,\"772\":1}}],[\"getloginidasstring\",{\"1\":{\"809\":1}}],[\"getlist\",{\"1\":{\"689\":2,\"691\":1}}],[\"getlicenseno\",{\"1\":{\"315\":1}}],[\"getlicense\",{\"1\":{\"315\":2,\"316\":1}}],[\"getfiler\",{\"1\":{\"805\":1}}],[\"getfunccolumn\",{\"1\":{\"227\":2}}],[\"getorder\",{\"1\":{\"631\":2,\"742\":1}}],[\"getorder不为null是添加查询条件\",{\"1\":{\"631\":2}}],[\"getorders\",{\"1\":{\"621\":2,\"622\":2,\"634\":2}}],[\"getobject来处理获取列可以通过setpropertytype来确定\",{\"1\":{\"608\":1}}],[\"getbydatasource\",{\"1\":{\"522\":2}}],[\"getbegintimetostart\",{\"1\":{\"797\":1}}],[\"getbegintime\",{\"1\":{\"796\":1,\"797\":2}}],[\"getbean\",{\"1\":{\"274\":3}}],[\"getbehavior\",{\"1\":{\"272\":6}}],[\"getbeforearg\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"getnotnull\",{\"1\":{\"814\":4}}],[\"getnexttime\",{\"1\":{\"797\":1}}],[\"getnickname\",{\"1\":{\"389\":3,\"631\":1}}],[\"getnavigatepropertytype\",{\"1\":{\"140\":1}}],[\"getnavigateoption\",{\"1\":{\"140\":3}}],[\"getname\",{\"1\":{\"23\":1,\"25\":4,\"231\":2,\"236\":2,\"308\":1,\"487\":1,\"508\":1,\"556\":1,\"564\":2,\"574\":1,\"586\":2,\"592\":1,\"641\":1,\"807\":1}}],[\"getjdbctypehandlermanager\",{\"1\":{\"300\":1}}],[\"getvalue\",{\"1\":{\"299\":1,\"508\":1,\"623\":1,\"781\":1,\"787\":1}}],[\"gethandlerbyhandlerclass\",{\"1\":{\"298\":1}}],[\"gethandler\",{\"1\":{\"298\":1}}],[\"getquery\",{\"1\":{\"803\":2,\"804\":1}}],[\"getqueryconfiguration\",{\"1\":{\"116\":1,\"191\":1,\"231\":2,\"257\":1,\"284\":1,\"304\":1,\"491\":1,\"493\":1,\"523\":1,\"561\":1,\"570\":1,\"578\":1,\"586\":2,\"592\":1,\"798\":1}}],[\"getquotename\",{\"1\":{\"231\":1,\"586\":1}}],[\"getusername\",{\"1\":{\"385\":1,\"386\":1,\"387\":1,\"389\":3,\"631\":1}}],[\"getuserid\",{\"1\":{\"260\":5,\"262\":4,\"265\":1,\"284\":2,\"809\":6}}],[\"geturl\",{\"1\":{\"227\":2,\"742\":1}}],[\"getupdateby\",{\"1\":{\"260\":1,\"262\":1,\"742\":1,\"809\":1}}],[\"getupdatebatchthreshold\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getupdatetime\",{\"1\":{\"260\":1,\"262\":1,\"742\":1,\"809\":1}}],[\"getupdatestrategy\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getwherepredicate\",{\"1\":{\"223\":3}}],[\"getkey\",{\"1\":{\"219\":2,\"508\":1,\"623\":1,\"781\":1,\"787\":1}}],[\"getapplicationcontext\",{\"1\":{\"803\":2,\"804\":1}}],[\"getabc\",{\"1\":{\"760\":1}}],[\"getareas\",{\"1\":{\"712\":2}}],[\"getavatar\",{\"1\":{\"669\":1}}],[\"getasc\",{\"1\":{\"621\":1,\"622\":1}}],[\"getannotation\",{\"1\":{\"525\":1}}],[\"getallfields\",{\"1\":{\"308\":1,\"574\":1}}],[\"getaggregationtype\",{\"1\":{\"227\":2}}],[\"getaddress\",{\"1\":{\"315\":4}}],[\"getaddresssupportlike\",{\"1\":{\"220\":7}}],[\"getaddressnotsupportlike\",{\"1\":{\"214\":2}}],[\"getaccount\",{\"1\":{\"23\":1,\"25\":4}}],[\"getistop\",{\"1\":{\"742\":1}}],[\"getimplclass\",{\"1\":{\"313\":1}}],[\"getimplmethodkind\",{\"1\":{\"313\":1}}],[\"getimplmethodsignature\",{\"1\":{\"313\":1}}],[\"getimplmethodname\",{\"1\":{\"313\":2}}],[\"getinstancesimplename\",{\"1\":{\"308\":1,\"574\":1}}],[\"getinsertbatchthreshold\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getinsertstrategy\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getiv\",{\"1\":{\"219\":2}}],[\"getidcount\",{\"1\":{\"648\":1}}],[\"getid\",{\"1\":{\"214\":4,\"220\":5,\"223\":3,\"235\":2,\"260\":1,\"262\":1,\"265\":2,\"280\":1,\"285\":1,\"288\":5,\"289\":3,\"292\":2,\"293\":2,\"295\":2,\"296\":2,\"325\":2,\"362\":2,\"369\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"385\":1,\"386\":1,\"387\":1,\"388\":2,\"389\":4,\"417\":1,\"590\":2,\"615\":1,\"616\":3,\"620\":1,\"621\":1,\"622\":3,\"626\":5,\"631\":10,\"642\":5,\"645\":3,\"646\":3,\"647\":5,\"648\":9,\"649\":14,\"652\":42,\"673\":5,\"681\":1,\"682\":4,\"683\":4,\"691\":1,\"713\":1,\"714\":5,\"735\":4,\"742\":1,\"757\":1,\"758\":4,\"759\":4,\"760\":4,\"772\":1,\"773\":1,\"774\":1,\"783\":2,\"789\":2,\"794\":2,\"795\":1,\"807\":1,\"809\":3}}],[\"getgettercaller\",{\"1\":{\"200\":1,\"201\":1}}],[\"gettop\",{\"1\":{\"742\":1}}],[\"gettotalcount\",{\"1\":{\"689\":2,\"691\":1}}],[\"gettotallines\",{\"1\":{\"686\":3}}],[\"gettotal\",{\"1\":{\"686\":2,\"690\":1}}],[\"getter\",{\"1\":{\"592\":1}}],[\"gettenantid\",{\"1\":{\"260\":4,\"265\":3}}],[\"gettrackentitystatenotnull\",{\"1\":{\"522\":2}}],[\"gettrackmanager\",{\"1\":{\"196\":1,\"243\":1,\"250\":1,\"251\":1,\"252\":1,\"316\":1,\"417\":1}}],[\"gettableseparator\",{\"1\":{\"797\":1}}],[\"gettablename\",{\"1\":{\"797\":1}}],[\"gettable\",{\"1\":{\"505\":2}}],[\"gettableroutemanager\",{\"1\":{\"116\":1,\"191\":1,\"486\":1,\"493\":1,\"798\":1}}],[\"gettypeutils\",{\"1\":{\"805\":1}}],[\"gettype\",{\"1\":{\"310\":2,\"508\":1,\"562\":2}}],[\"gettitle\",{\"1\":{\"260\":2,\"262\":2,\"265\":2,\"280\":2,\"293\":2,\"296\":2,\"369\":1,\"614\":2,\"615\":4,\"616\":4,\"620\":1,\"621\":1,\"622\":1,\"626\":1,\"642\":1,\"646\":1,\"649\":4,\"673\":11,\"682\":1,\"683\":1,\"714\":1,\"742\":1}}],[\"getsupportedsourceversion\",{\"1\":{\"805\":1}}],[\"getsupportedannotationtypes\",{\"1\":{\"805\":1}}],[\"getschoolteachers\",{\"1\":{\"709\":1,\"710\":1,\"713\":3}}],[\"getschoolclass\",{\"1\":{\"708\":1,\"713\":6}}],[\"getschoolstudents\",{\"1\":{\"707\":1,\"710\":1,\"713\":3}}],[\"getschoolstudentaddress\",{\"1\":{\"706\":1,\"713\":4}}],[\"getscore\",{\"1\":{\"683\":1,\"714\":1,\"742\":1}}],[\"getsignature\",{\"1\":{\"525\":1}}],[\"getsimplename\",{\"1\":{\"308\":1,\"425\":1,\"574\":1}}],[\"getstreamiterable\",{\"1\":{\"742\":1}}],[\"getstrategy\",{\"1\":{\"284\":1,\"485\":1,\"809\":1}}],[\"getstoreid\",{\"1\":{\"669\":3}}],[\"getstatus\",{\"1\":{\"742\":1,\"783\":2,\"789\":2,\"794\":2}}],[\"getstatuslist\",{\"1\":{\"631\":2}}],[\"getstate\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"getstar\",{\"1\":{\"366\":2,\"616\":2,\"642\":1,\"742\":2,\"760\":1}}],[\"getstart\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"getstars\",{\"1\":{\"172\":1,\"369\":1,\"482\":1,\"758\":1,\"759\":1,\"760\":1}}],[\"getselector\",{\"1\":{\"505\":2}}],[\"getservice\",{\"1\":{\"274\":1,\"487\":4}}],[\"getsetcolumns\",{\"1\":{\"262\":2,\"809\":2}}],[\"getsettercaller\",{\"1\":{\"200\":1,\"201\":1}}],[\"getsqlclientapifactory\",{\"1\":{\"556\":2}}],[\"getsql\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"getsqlparameters\",{\"1\":{\"271\":2,\"273\":2,\"274\":4}}],[\"getsqlnativechainexpressioncontext\",{\"1\":{\"236\":4,\"564\":4,\"592\":2}}],[\"getsqlwherepredicate\",{\"1\":{\"223\":3}}],[\"getshardingexecutetimeoutmillis\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"geterrormessage\",{\"1\":{\"814\":4}}],[\"getelementutils\",{\"1\":{\"805\":1}}],[\"geteasyqueryoption\",{\"1\":{\"797\":1}}],[\"geteasyqueryclient\",{\"1\":{\"522\":2}}],[\"getemail\",{\"1\":{\"388\":1}}],[\"getextra\",{\"1\":{\"315\":1,\"316\":1}}],[\"getexception\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"getexecutorqueuesize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getexecutorcorepoolsize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getexecutormaximumpoolsize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getenable\",{\"1\":{\"631\":1}}],[\"getenumvaluefield\",{\"1\":{\"308\":3,\"574\":3}}],[\"getenumconstants\",{\"1\":{\"306\":1,\"308\":1,\"572\":1,\"574\":1}}],[\"getendtime\",{\"1\":{\"796\":1,\"797\":2}}],[\"getend\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"getentityclass\",{\"1\":{\"140\":2}}],[\"getentitymetadata\",{\"1\":{\"140\":1,\"797\":1,\"814\":4}}],[\"getpublishtimeend\",{\"1\":{\"631\":2}}],[\"getpublishtimebegin\",{\"1\":{\"631\":4}}],[\"getprice\",{\"1\":{\"669\":9}}],[\"getprimarykey\",{\"1\":{\"198\":1,\"200\":2,\"201\":2}}],[\"getprovincecode\",{\"1\":{\"641\":3}}],[\"getprovince\",{\"1\":{\"315\":3}}],[\"getproperty\",{\"1\":{\"621\":1,\"622\":2}}],[\"getpropertytype\",{\"1\":{\"306\":2,\"308\":1,\"572\":2,\"574\":1}}],[\"getpropertynamebyinvokevirtual\",{\"1\":{\"313\":2}}],[\"getpropertynamebyinvokestatic\",{\"1\":{\"313\":2}}],[\"getpropertyname\",{\"1\":{\"140\":1,\"226\":1,\"227\":3,\"230\":1,\"231\":2,\"313\":1,\"585\":1,\"586\":2,\"623\":1}}],[\"getpredicatefilterexpression\",{\"1\":{\"140\":1,\"284\":1,\"485\":1,\"809\":1}}],[\"getphonesupportlike\",{\"1\":{\"220\":5}}],[\"getphonenotsupportlike\",{\"1\":{\"214\":4}}],[\"getphone\",{\"1\":{\"23\":1,\"25\":4,\"235\":2,\"250\":1,\"252\":1,\"325\":3,\"590\":2,\"772\":1,\"773\":1,\"774\":1}}],[\"getruntime\",{\"1\":{\"469\":1}}],[\"getruntimecontext\",{\"1\":{\"116\":1,\"191\":1,\"196\":1,\"231\":1,\"243\":1,\"250\":1,\"251\":1,\"252\":1,\"257\":1,\"284\":1,\"300\":1,\"304\":1,\"316\":1,\"417\":1,\"491\":1,\"493\":1,\"522\":2,\"523\":1,\"561\":1,\"570\":1,\"578\":1,\"586\":1,\"592\":1,\"781\":1,\"787\":1,\"798\":1}}],[\"getresourceasstream\",{\"1\":{\"313\":3}}],[\"getreverseoffsetthreshold\",{\"1\":{\"123\":1,\"499\":1}}],[\"getrelationgroupsize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getmobile\",{\"1\":{\"669\":1}}],[\"getmessage\",{\"1\":{\"623\":1}}],[\"getmethod\",{\"1\":{\"525\":1}}],[\"getmapping\",{\"1\":{\"125\":1,\"417\":1,\"501\":1,\"509\":1,\"782\":1,\"783\":2,\"788\":1,\"789\":2,\"793\":1,\"794\":2,\"795\":1}}],[\"getmaxshardingroutecount\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getmaxshardingquerylimit\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getmulticonnwaittimeoutmillis\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getmyaddress\",{\"1\":{\"110\":1}}],[\"getcanonicalname\",{\"1\":{\"805\":1}}],[\"getcities\",{\"1\":{\"712\":2}}],[\"getclassloader\",{\"1\":{\"313\":1}}],[\"getclass\",{\"1\":{\"308\":1,\"313\":2,\"574\":1,\"809\":1}}],[\"getcreateby\",{\"1\":{\"260\":1,\"262\":1,\"742\":1,\"809\":1}}],[\"getcreatetime\",{\"1\":{\"260\":1,\"262\":1,\"293\":2,\"296\":2,\"369\":1,\"642\":2,\"649\":4,\"652\":8,\"670\":3,\"673\":5,\"742\":2,\"758\":1,\"759\":1,\"760\":1,\"809\":1}}],[\"getcreatetimeend\",{\"1\":{\"23\":1,\"25\":4}}],[\"getcreatetimebegin\",{\"1\":{\"23\":1,\"25\":4}}],[\"getcurrenttrackcontext\",{\"1\":{\"245\":1}}],[\"getcomplexproptype\",{\"1\":{\"309\":1,\"579\":1}}],[\"getcode\",{\"1\":{\"306\":4,\"308\":1,\"309\":1,\"310\":1,\"508\":1,\"562\":1,\"572\":4,\"574\":1,\"579\":1,\"641\":5,\"712\":2,\"812\":1}}],[\"getcontext\",{\"1\":{\"631\":4,\"809\":1}}],[\"getcontext不为空是添加查询条件\",{\"1\":{\"631\":2}}],[\"getcontent\",{\"1\":{\"289\":11,\"366\":2,\"620\":1,\"621\":1,\"622\":1,\"631\":2,\"742\":1,\"758\":1,\"759\":1,\"760\":1}}],[\"getconnection没有设置超时时间所以需要自己定义\",{\"1\":{\"407\":1}}],[\"getconnection\",{\"1\":{\"122\":3,\"407\":1,\"498\":3}}],[\"getcolumnfunction\",{\"1\":{\"226\":1,\"227\":1}}],[\"getdata\",{\"1\":{\"686\":2,\"690\":1,\"812\":1}}],[\"getdatasourcemanager\",{\"1\":{\"486\":1,\"781\":1,\"787\":1}}],[\"getdatasource\",{\"1\":{\"122\":1,\"498\":1}}],[\"getdatasourceunit\",{\"1\":{\"122\":1,\"498\":1}}],[\"getdatasourcename\",{\"1\":{\"122\":1,\"498\":1}}],[\"getdatasourcenotnull\",{\"1\":{\"122\":1,\"498\":1}}],[\"getdatasourceroutemanager\",{\"1\":{\"116\":1,\"191\":1,\"486\":1,\"493\":1}}],[\"getdialect\",{\"1\":{\"231\":1,\"586\":1}}],[\"getdefid\",{\"1\":{\"631\":1}}],[\"getdefaultdatasourcemergepoolsize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getdefaultdatasourcename\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1,\"797\":1}}],[\"getdeclaredmethod\",{\"1\":{\"313\":1}}],[\"getdeleted\",{\"1\":{\"742\":1,\"809\":1}}],[\"getdeletedsqlexpression\",{\"1\":{\"284\":1,\"485\":1,\"809\":2}}],[\"getdeletethrow\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"getdepartname\",{\"1\":{\"23\":1,\"25\":2}}],[\"get\",{\"1\":{\"12\":2,\"117\":2,\"157\":1,\"185\":3,\"271\":1,\"273\":1,\"274\":2,\"308\":4,\"313\":3,\"480\":1,\"482\":2,\"492\":2,\"522\":4,\"574\":4,\"691\":1,\"773\":2,\"774\":1,\"782\":1,\"788\":1,\"793\":1}}],[\"gt等的第一个boolean条件\",{\"1\":{\"631\":1}}],[\"gt\",{\"1\":{\"25\":1,\"146\":1,\"152\":2,\"180\":1,\"181\":1,\"182\":4,\"183\":3,\"184\":6,\"185\":3,\"186\":2,\"237\":1,\"557\":1,\"565\":1,\"652\":2,\"667\":1,\"737\":1,\"764\":2,\"765\":1,\"771\":1}}],[\"gitee\",{\"0\":{\"5\":1,\"87\":1},\"1\":{\"47\":1,\"94\":1}}],[\"github\",{\"0\":{\"4\":1,\"86\":1},\"1\":{\"47\":1,\"94\":1,\"126\":1,\"158\":1,\"160\":1,\"384\":1,\"390\":1,\"775\":1,\"806\":3,\"809\":1}}],[\"3^版本后支持了联级删选\",{\"1\":{\"695\":1}}],[\"3^版本支持value\",{\"1\":{\"311\":1}}],[\"3af23d78\",{\"1\":{\"661\":1}}],[\"3compatible\",{\"1\":{\"535\":3}}],[\"30t23\",{\"1\":{\"419\":1}}],[\"30\",{\"1\":{\"385\":1,\"389\":1,\"673\":1}}],[\"302\",{\"1\":{\"385\":1}}],[\"30000\",{\"1\":{\"407\":1}}],[\"300\",{\"1\":{\"205\":5}}],[\"358198\",{\"1\":{\"783\":1}}],[\"356\",{\"1\":{\"673\":1}}],[\"35\",{\"1\":{\"386\":1,\"388\":1,\"667\":2,\"673\":1}}],[\"354\",{\"1\":{\"385\":1}}],[\"351\",{\"1\":{\"385\":1}}],[\"36\",{\"1\":{\"362\":1,\"386\":1}}],[\"365\",{\"1\":{\"236\":2,\"237\":7,\"564\":2,\"565\":7}}],[\"38\",{\"1\":{\"360\":10,\"386\":1,\"389\":1}}],[\"37\",{\"1\":{\"310\":1,\"385\":1,\"386\":2,\"562\":1,\"633\":3}}],[\"391516\",{\"1\":{\"793\":1}}],[\"391504\",{\"1\":{\"793\":1}}],[\"391492\",{\"1\":{\"793\":1}}],[\"391481\",{\"1\":{\"793\":1}}],[\"391469\",{\"1\":{\"793\":1}}],[\"391457\",{\"1\":{\"793\":1}}],[\"391445\",{\"1\":{\"793\":1}}],[\"391433\",{\"1\":{\"793\":1}}],[\"391420\",{\"1\":{\"793\":1}}],[\"391349\",{\"1\":{\"793\":1}}],[\"3953\",{\"1\":{\"387\":1}}],[\"3975\",{\"1\":{\"387\":1}}],[\"3974\",{\"1\":{\"387\":1}}],[\"3977\",{\"1\":{\"387\":1}}],[\"3985\",{\"1\":{\"387\":1}}],[\"3984\",{\"1\":{\"387\":1}}],[\"3981\",{\"1\":{\"387\":1}}],[\"3969\",{\"1\":{\"387\":1}}],[\"3964\",{\"1\":{\"387\":1}}],[\"3965\",{\"1\":{\"387\":1}}],[\"39\",{\"1\":{\"262\":1,\"385\":2,\"386\":3,\"388\":1}}],[\"3308\",{\"1\":{\"712\":1}}],[\"3309\",{\"1\":{\"712\":1}}],[\"3301\",{\"1\":{\"712\":1}}],[\"3302\",{\"1\":{\"712\":1}}],[\"3303\",{\"1\":{\"712\":1}}],[\"3304\",{\"1\":{\"712\":1}}],[\"3305\",{\"1\":{\"712\":1}}],[\"3307\",{\"1\":{\"712\":1}}],[\"330602\",{\"1\":{\"712\":2}}],[\"3306\",{\"1\":{\"34\":1,\"124\":1,\"157\":1,\"167\":1,\"204\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":1,\"641\":2,\"712\":4,\"740\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"3311\",{\"1\":{\"712\":1}}],[\"3310\",{\"1\":{\"712\":1}}],[\"331\",{\"1\":{\"385\":1}}],[\"33\",{\"1\":{\"233\":1,\"385\":2,\"386\":1,\"388\":1,\"588\":1,\"673\":1,\"712\":2}}],[\"3209\",{\"1\":{\"712\":1}}],[\"3201\",{\"1\":{\"712\":1}}],[\"3202\",{\"1\":{\"712\":1}}],[\"3203\",{\"1\":{\"712\":1}}],[\"3204\",{\"1\":{\"712\":1}}],[\"3205\",{\"1\":{\"712\":1}}],[\"3206\",{\"1\":{\"712\":1}}],[\"3207\",{\"1\":{\"712\":1}}],[\"3208\",{\"1\":{\"712\":1}}],[\"3212\",{\"1\":{\"712\":1}}],[\"3213\",{\"1\":{\"712\":1}}],[\"3210\",{\"1\":{\"712\":1}}],[\"3211\",{\"1\":{\"712\":1}}],[\"321\",{\"1\":{\"385\":1}}],[\"323\",{\"1\":{\"385\":2}}],[\"32\",{\"1\":{\"216\":10,\"232\":1,\"260\":3,\"306\":1,\"308\":1,\"310\":1,\"311\":6,\"354\":1,\"358\":1,\"385\":1,\"386\":2,\"388\":3,\"412\":1,\"506\":2,\"562\":1,\"572\":1,\"574\":1,\"587\":1,\"673\":1,\"712\":2,\"756\":1}}],[\"3种模式可以在一个应用里面共存\",{\"1\":{\"160\":1}}],[\"3+\",{\"1\":{\"137\":1}}],[\"310\",{\"1\":{\"673\":1}}],[\"31后版本支持\",{\"1\":{\"669\":1}}],[\"31^以上版本支持valuefilter\",{\"1\":{\"631\":1}}],[\"31t16\",{\"1\":{\"362\":1}}],[\"315\",{\"1\":{\"327\":1}}],[\"31\",{\"1\":{\"290\":1,\"385\":1,\"388\":3,\"788\":10}}],[\"31<\",{\"1\":{\"120\":1,\"121\":1,\"157\":1,\"478\":1,\"496\":1,\"497\":1,\"504\":1}}],[\"319\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"343\",{\"1\":{\"667\":2}}],[\"34^版本并且插件0\",{\"1\":{\"528\":1}}],[\"34567\",{\"1\":{\"220\":1}}],[\"34\",{\"1\":{\"12\":1,\"23\":2,\"117\":1,\"359\":1,\"385\":3,\"386\":2,\"492\":1,\"673\":1}}],[\"3\",{\"0\":{\"131\":1,\"339\":1,\"357\":1,\"361\":1,\"416\":1,\"417\":1},\"1\":{\"12\":12,\"30\":1,\"31\":1,\"38\":3,\"39\":2,\"40\":3,\"44\":1,\"117\":12,\"136\":1,\"148\":1,\"163\":1,\"171\":5,\"172\":4,\"173\":3,\"206\":1,\"235\":1,\"250\":1,\"260\":1,\"262\":1,\"306\":2,\"307\":1,\"308\":1,\"313\":2,\"323\":1,\"335\":1,\"360\":1,\"395\":1,\"418\":1,\"474\":2,\"478\":1,\"492\":12,\"506\":2,\"509\":1,\"513\":1,\"519\":1,\"522\":1,\"535\":4,\"572\":2,\"573\":1,\"574\":1,\"590\":1,\"592\":4,\"593\":1,\"594\":2,\"595\":3,\"606\":1,\"615\":2,\"626\":2,\"642\":3,\"645\":2,\"646\":2,\"647\":4,\"648\":4,\"667\":1,\"672\":5,\"673\":3,\"682\":4,\"703\":1,\"706\":3,\"707\":3,\"708\":1,\"709\":3,\"710\":3,\"712\":2,\"713\":11,\"737\":4,\"742\":1,\"744\":1,\"772\":1,\"781\":1,\"782\":12,\"783\":2,\"788\":9,\"789\":2,\"793\":3,\"794\":2,\"795\":9,\"801\":1}}],[\"54\",{\"1\":{\"789\":1}}],[\"542\",{\"1\":{\"361\":2}}],[\"53\",{\"1\":{\"673\":1}}],[\"5compatible\",{\"1\":{\"535\":3}}],[\"55\",{\"1\":{\"518\":1}}],[\"552\",{\"1\":{\"362\":1}}],[\"52\",{\"1\":{\"397\":1,\"518\":1,\"782\":10}}],[\"5+\",{\"1\":{\"395\":1}}],[\"5~10+\",{\"1\":{\"389\":1}}],[\"5~10\",{\"1\":{\"388\":1}}],[\"58d24823a88b\",{\"1\":{\"662\":1}}],[\"58734\",{\"1\":{\"517\":1}}],[\"58\",{\"1\":{\"327\":1}}],[\"59\",{\"1\":{\"290\":2,\"797\":2}}],[\"56\",{\"1\":{\"262\":1}}],[\"5mvi8ru5ku2geoquhucr7a==mxfvdfza1ydm7qws03g1ew==82zyfpam7r2nhh8qgev2pa==irtc1xc89axhlz6g2emwtw==u+t8i0lmize62zlylqpchw==z21aullv0tzo5swm8e15sg==o601inwnlolfrspiuivkla==wlisxtg+ajuzry1sf31+eg==\",{\"1\":{\"220\":1}}],[\"5jxqmae3vle3as62ds8z\",{\"1\":{\"220\":3}}],[\"5zy65peb6l65mi0xmdi=\",{\"1\":{\"214\":1}}],[\"5rwz5rgf55yb57un5yw05bic6lak5z+o5yy65z+o5bic5bm\",{\"1\":{\"214\":1}}],[\"57\",{\"1\":{\"252\":1}}],[\"57后也将不会生成该方法\",{\"1\":{\"166\":3}}],[\"572\",{\"1\":{\"12\":1,\"117\":1,\"492\":1,\"673\":1}}],[\"5l\",{\"1\":{\"131\":1,\"146\":1,\"694\":1,\"696\":1}}],[\"512\",{\"1\":{\"348\":2,\"468\":1,\"798\":1}}],[\"51\",{\"1\":{\"23\":2,\"794\":1}}],[\"509650\",{\"1\":{\"788\":1}}],[\"509652\",{\"1\":{\"788\":1}}],[\"509642\",{\"1\":{\"788\":1}}],[\"509645\",{\"1\":{\"788\":1}}],[\"509647\",{\"1\":{\"788\":1}}],[\"509640\",{\"1\":{\"788\":1}}],[\"509637\",{\"1\":{\"788\":1}}],[\"509631\",{\"1\":{\"788\":1}}],[\"509635\",{\"1\":{\"788\":1}}],[\"509610\",{\"1\":{\"788\":1}}],[\"5000\",{\"1\":{\"407\":1,\"469\":1}}],[\"500\",{\"1\":{\"205\":5}}],[\"50\",{\"1\":{\"23\":2,\"354\":1,\"358\":1,\"412\":1,\"506\":4,\"756\":1,\"780\":1,\"783\":2,\"786\":1,\"792\":1}}],[\"5\",{\"0\":{\"133\":1,\"341\":1,\"363\":1,\"419\":1},\"1\":{\"12\":12,\"117\":12,\"131\":1,\"146\":1,\"251\":1,\"328\":3,\"335\":1,\"360\":1,\"385\":1,\"386\":1,\"407\":1,\"469\":1,\"474\":1,\"492\":12,\"631\":2,\"642\":3,\"672\":4,\"679\":1,\"694\":1,\"696\":1,\"697\":1,\"760\":1,\"782\":2,\"787\":1,\"788\":8,\"793\":2,\"794\":1,\"797\":1}}],[\"~\",{\"1\":{\"12\":6,\"117\":6,\"385\":1,\"386\":1,\"474\":2,\"492\":6}}],[\"a67b\",{\"1\":{\"662\":1}}],[\"aa\",{\"1\":{\"626\":4}}],[\"aaaa\",{\"1\":{\"289\":3}}],[\"after\",{\"1\":{\"797\":1}}],[\"afterpropertiesset\",{\"1\":{\"505\":1}}],[\"afterarg\",{\"1\":{\"271\":4,\"273\":4,\"274\":8}}],[\"a线程已经获取了一个connection\",{\"1\":{\"407\":1}}],[\"a比b大多少天\",{\"1\":{\"290\":1}}],[\"abc\",{\"1\":{\"260\":2,\"265\":5,\"666\":2,\"731\":1,\"735\":1,\"759\":1}}],[\"abstract\",{\"1\":{\"809\":1}}],[\"abstractprocessor\",{\"1\":{\"805\":1}}],[\"abstractmonthtableroute<topicshardingtime>\",{\"1\":{\"798\":1}}],[\"abstractshardingmonthinitializer<topicshardingtime>\",{\"1\":{\"796\":1,\"797\":1}}],[\"abstractsupportemojiaesbase64encryptionstrategy\",{\"0\":{\"219\":1},\"1\":{\"219\":1}}],[\"abstractsupportemojiaesbase64encryptionstrategy支持emoji的处理\",{\"1\":{\"217\":1}}],[\"abstractlogicdeletestrategy\",{\"1\":{\"279\":1,\"284\":2,\"485\":1,\"809\":1}}],[\"abstractunsupportemojiaesbase64encryptionstrategy\",{\"0\":{\"218\":1}}],[\"abstractunsupportemojiaesbase64encryptionstrategy抽象类默认仅支持非emoji的列\",{\"1\":{\"217\":1}}],[\"abstractclassgenerator\",{\"1\":{\"12\":3,\"117\":3,\"492\":3}}],[\"abstractclassgenerator$classloaderdata\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"absolute\",{\"1\":{\"83\":1}}],[\"abs\",{\"1\":{\"39\":2,\"172\":2,\"294\":1}}],[\"aggregatepredicatecompare\",{\"1\":{\"652\":2}}],[\"aggregationtype\",{\"1\":{\"227\":2}}],[\"age列\",{\"1\":{\"468\":1}}],[\"age=456\",{\"1\":{\"309\":1,\"579\":1}}],[\"age=18\",{\"1\":{\"236\":1,\"564\":1}}],[\"agesqlfunction\",{\"1\":{\"236\":6,\"564\":6}}],[\"age\",{\"1\":{\"132\":2,\"136\":1,\"236\":1,\"237\":3,\"309\":2,\"310\":4,\"532\":6,\"562\":4,\"564\":1,\"565\":3,\"579\":2,\"703\":1,\"724\":1,\"764\":2,\"765\":1}}],[\"aes\",{\"1\":{\"216\":16,\"229\":3,\"230\":2,\"231\":2,\"232\":1,\"233\":1,\"234\":1,\"235\":3,\"584\":3,\"585\":2,\"586\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":3}}],[\"avatar\",{\"1\":{\"631\":1,\"669\":1}}],[\"availableprocessors\",{\"1\":{\"469\":1}}],[\"available\",{\"1\":{\"117\":1,\"493\":1}}],[\"avgordefault\",{\"1\":{\"601\":1}}],[\"avg\",{\"1\":{\"132\":2,\"182\":1,\"765\":2}}],[\"autoselect\",{\"1\":{\"556\":1}}],[\"auto`\",{\"1\":{\"362\":1,\"397\":1}}],[\"auto\",{\"1\":{\"362\":1,\"368\":1,\"369\":2,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"407\":1,\"469\":1,\"483\":1}}],[\"autowire\",{\"1\":{\"117\":1,\"493\":1}}],[\"autowired\",{\"1\":{\"115\":3,\"125\":1,\"157\":3,\"273\":1,\"465\":3,\"490\":4,\"501\":1,\"505\":1,\"508\":2,\"509\":1,\"525\":1,\"526\":1,\"781\":1,\"782\":1,\"787\":1,\"788\":1,\"793\":1,\"809\":2}}],[\"automatically\",{\"1\":{\"111\":2,\"804\":1}}],[\"author\",{\"1\":{\"82\":1,\"111\":2,\"152\":3,\"260\":1,\"262\":1,\"522\":1,\"804\":1}}],[\"admin\",{\"1\":{\"385\":3,\"386\":3,\"387\":3,\"389\":6}}],[\"adddatasource\",{\"1\":{\"486\":1,\"781\":1,\"787\":1}}],[\"add\",{\"1\":{\"310\":2,\"358\":1,\"505\":1,\"562\":2,\"621\":2,\"622\":2,\"634\":2,\"737\":1,\"782\":3,\"788\":3,\"793\":3,\"797\":1,\"805\":1}}],[\"addservice如果不存在就添加存在就替换\",{\"1\":{\"547\":1,\"815\":1}}],[\"addservice\",{\"1\":{\"273\":2,\"547\":1,\"815\":1}}],[\"addtracking来让需要更新的对象被追踪\",{\"1\":{\"417\":1}}],[\"addtracking\",{\"1\":{\"242\":1,\"247\":1,\"250\":1,\"251\":1,\"252\":3,\"316\":1,\"417\":2,\"522\":2}}],[\"addbatch\",{\"1\":{\"203\":1}}],[\"addroute\",{\"1\":{\"116\":2,\"191\":5,\"486\":2,\"493\":2,\"798\":1}}],[\"address=地址3\",{\"1\":{\"706\":1}}],[\"address=地址2\",{\"1\":{\"706\":1}}],[\"address=地址1\",{\"1\":{\"706\":1}}],[\"address=valuecompanyaddress\",{\"1\":{\"315\":5}}],[\"address=xxxxxxx\",{\"1\":{\"233\":1,\"588\":1}}],[\"addresssupportlike\",{\"1\":{\"219\":1}}],[\"addressnotsupportlike\",{\"1\":{\"219\":1}}],[\"address`\",{\"1\":{\"144\":3,\"694\":2,\"696\":2,\"706\":1,\"713\":1}}],[\"address\",{\"1\":{\"110\":3,\"111\":2,\"130\":1,\"144\":4,\"152\":4,\"174\":1,\"231\":1,\"254\":2,\"311\":1,\"315\":4,\"517\":1,\"581\":2,\"586\":1,\"694\":3,\"696\":3,\"705\":2,\"713\":1}}],[\"addr\",{\"1\":{\"110\":5,\"111\":1,\"144\":2,\"152\":1}}],[\"adapter\",{\"1\":{\"38\":2,\"39\":2,\"40\":1,\"41\":1,\"42\":1,\"517\":1,\"608\":1}}],[\"am\",{\"1\":{\"64\":2}}],[\"a\",{\"1\":{\"55\":1,\"56\":1,\"60\":6,\"65\":1,\"68\":1,\"77\":1,\"83\":2,\"152\":4,\"219\":1,\"289\":6,\"290\":1,\"528\":1,\"607\":8,\"626\":3,\"647\":1,\"648\":1,\"722\":2,\"738\":3,\"739\":2,\"756\":1,\"827\":1}}],[\"accept\",{\"1\":{\"313\":1,\"631\":4}}],[\"access\",{\"1\":{\"313\":1}}],[\"according\",{\"1\":{\"54\":1}}],[\"account\",{\"1\":{\"21\":1,\"22\":1,\"23\":1,\"25\":2,\"385\":2,\"386\":2,\"387\":2,\"388\":1,\"389\":4}}],[\"act0smpmvtnwd\",{\"1\":{\"220\":1}}],[\"active\",{\"1\":{\"157\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"actualtablenameinit\",{\"1\":{\"797\":1}}],[\"actualtablenames\",{\"1\":{\"797\":2}}],[\"actual\",{\"1\":{\"53\":1}}],[\"asalias\",{\"1\":{\"669\":2}}],[\"aspect\",{\"1\":{\"525\":1}}],[\"astable\",{\"1\":{\"370\":1,\"420\":1,\"601\":2,\"625\":5,\"626\":4}}],[\"astracking\",{\"1\":{\"196\":1,\"246\":1,\"250\":1,\"251\":1,\"417\":3,\"601\":1,\"713\":2,\"783\":2,\"789\":2,\"794\":2,\"795\":1}}],[\"asm9\",{\"1\":{\"313\":2}}],[\"asm<\",{\"1\":{\"313\":1}}],[\"asnotracking\",{\"1\":{\"246\":1,\"601\":1}}],[\"aslist\",{\"1\":{\"237\":1,\"284\":1,\"485\":1,\"565\":1,\"631\":2,\"633\":2,\"662\":1,\"667\":2,\"673\":1,\"782\":1,\"788\":1,\"793\":1,\"809\":1}}],[\"assets\",{\"1\":{\"83\":1}}],[\"assertexceptionfactory\",{\"1\":{\"510\":1,\"545\":1,\"814\":1,\"815\":1,\"816\":1}}],[\"assertequals\",{\"1\":{\"214\":5,\"220\":7,\"223\":3,\"250\":2,\"251\":1,\"252\":2,\"292\":1,\"293\":2,\"295\":1,\"296\":2,\"323\":1,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"362\":1,\"623\":3,\"634\":1,\"691\":2,\"714\":3,\"742\":15}}],[\"assertfalse\",{\"1\":{\"250\":1,\"251\":1}}],[\"assertnull\",{\"1\":{\"214\":1,\"220\":1,\"362\":1,\"369\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2}}],[\"assertnotnull\",{\"1\":{\"214\":2,\"220\":7,\"250\":1,\"252\":1,\"323\":1,\"362\":1}}],[\"assert\",{\"1\":{\"214\":8,\"220\":15,\"223\":3,\"250\":4,\"251\":2,\"252\":3,\"292\":1,\"293\":2,\"295\":1,\"296\":2,\"323\":2,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"362\":3,\"369\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"623\":3,\"634\":1,\"691\":2,\"714\":3,\"742\":15}}],[\"assertion的value勾去掉\",{\"1\":{\"14\":1}}],[\"assertslowoperationsareallowed\",{\"1\":{\"14\":1}}],[\"as\",{\"1\":{\"38\":2,\"39\":7,\"41\":3,\"42\":4,\"81\":1,\"110\":2,\"111\":1,\"117\":1,\"144\":5,\"171\":2,\"172\":8,\"174\":5,\"175\":4,\"185\":41,\"224\":1,\"227\":1,\"233\":1,\"235\":1,\"237\":9,\"293\":1,\"296\":1,\"374\":3,\"375\":2,\"376\":3,\"377\":6,\"493\":1,\"557\":7,\"565\":9,\"588\":1,\"590\":1,\"593\":1,\"594\":1,\"595\":1,\"606\":2,\"607\":6,\"615\":3,\"616\":1,\"642\":4,\"648\":2,\"650\":1,\"651\":1,\"666\":9,\"667\":4,\"669\":12,\"683\":2,\"714\":4,\"722\":1,\"724\":6,\"733\":2,\"734\":2,\"735\":1,\"737\":9,\"738\":3,\"739\":4,\"760\":3}}],[\"asc\",{\"1\":{\"38\":4,\"40\":2,\"42\":4,\"148\":1,\"171\":6,\"173\":2,\"175\":4,\"183\":3,\"237\":9,\"335\":2,\"339\":2,\"340\":2,\"341\":2,\"342\":2,\"397\":3,\"565\":9,\"595\":2,\"620\":4,\"621\":2,\"622\":2,\"623\":1,\"634\":2,\"666\":2,\"679\":5,\"697\":1,\"737\":4,\"742\":1}}],[\"anno\",{\"1\":{\"505\":1}}],[\"annotations\",{\"1\":{\"117\":1,\"493\":1,\"805\":2}}],[\"annotationprocessorpaths>\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"514\":1,\"519\":1}}],[\"annotation\",{\"1\":{\"17\":2,\"157\":2,\"158\":2,\"167\":2,\"308\":1,\"525\":1,\"574\":1,\"799\":1,\"805\":1}}],[\"an\",{\"1\":{\"52\":1}}],[\"anyvaluefilter\",{\"1\":{\"631\":4}}],[\"anysqlfunction\",{\"1\":{\"592\":2}}],[\"any就是可以理解为stream查询中的anymatch\",{\"1\":{\"152\":1}}],[\"any\",{\"1\":{\"34\":1,\"129\":2,\"130\":1,\"133\":1,\"140\":3,\"145\":1,\"149\":3,\"152\":3,\"167\":1,\"181\":2,\"601\":1,\"694\":6,\"696\":6,\"764\":1}}],[\"and内部使用or链接那么可以将and视为括号\",{\"1\":{\"673\":1}}],[\"and内部用and链接\",{\"1\":{\"672\":1}}],[\"and\",{\"0\":{\"52\":1,\"63\":1},\"1\":{\"23\":6,\"37\":1,\"38\":2,\"39\":2,\"40\":2,\"41\":1,\"52\":1,\"54\":1,\"55\":2,\"59\":1,\"69\":1,\"82\":1,\"84\":3,\"140\":6,\"144\":1,\"145\":2,\"146\":2,\"147\":1,\"149\":4,\"170\":1,\"171\":2,\"172\":2,\"173\":2,\"174\":1,\"185\":12,\"186\":4,\"193\":1,\"195\":2,\"196\":2,\"221\":1,\"223\":3,\"237\":5,\"265\":5,\"278\":3,\"281\":3,\"285\":3,\"324\":1,\"325\":1,\"327\":2,\"328\":3,\"375\":1,\"389\":3,\"397\":1,\"433\":1,\"434\":1,\"435\":1,\"517\":2,\"521\":1,\"565\":5,\"606\":1,\"607\":2,\"616\":3,\"626\":4,\"631\":14,\"633\":8,\"634\":11,\"642\":4,\"645\":1,\"646\":2,\"647\":2,\"648\":2,\"666\":8,\"667\":4,\"669\":2,\"672\":12,\"673\":12,\"682\":2,\"694\":8,\"696\":8,\"712\":2,\"714\":3,\"724\":2,\"733\":1,\"734\":1,\"737\":1,\"738\":1,\"739\":1,\"742\":1,\"758\":2,\"759\":2,\"760\":1,\"764\":1,\"783\":1,\"789\":1,\"794\":1}}],[\"allargsconstructor\",{\"1\":{\"809\":1}}],[\"all需要表达式queryable<t>都是相同的\",{\"1\":{\"756\":1}}],[\"all查询\",{\"1\":{\"601\":1}}],[\"allcolumn将其改为null\",{\"1\":{\"483\":1}}],[\"allfieldsexclude\",{\"1\":{\"171\":1,\"185\":1,\"666\":1}}],[\"allfields\",{\"1\":{\"110\":2,\"111\":1,\"308\":2,\"377\":1,\"557\":2,\"574\":2}}],[\"allowemptystrings\",{\"1\":{\"632\":1}}],[\"allowed\",{\"1\":{\"619\":1}}],[\"allowedpropertytypes\",{\"1\":{\"284\":1,\"485\":1,\"809\":3}}],[\"allowtypes\",{\"1\":{\"284\":1,\"485\":1}}],[\"allowtypes=new\",{\"1\":{\"284\":1,\"485\":1}}],[\"allowmultiqueries=true\",{\"1\":{\"34\":1,\"124\":1,\"157\":1,\"167\":1,\"360\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"allowdeletestatement\",{\"1\":{\"16\":2,\"348\":1,\"353\":1,\"356\":1,\"795\":1}}],[\"all\",{\"0\":{\"756\":1},\"1\":{\"16\":1,\"209\":1,\"348\":1,\"351\":1,\"352\":1,\"363\":1,\"420\":1,\"468\":2,\"483\":3,\"601\":1,\"756\":1,\"760\":1}}],[\"alias\",{\"1\":{\"666\":2}}],[\"alibaba\",{\"1\":{\"157\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"alibaba<\",{\"1\":{\"157\":1,\"309\":1,\"504\":1,\"579\":1}}],[\"align\",{\"0\":{\"64\":1},\"1\":{\"64\":1}}],[\"aliyun\",{\"1\":{\"15\":1}}],[\"alimaven\",{\"1\":{\"15\":1}}],[\"around\",{\"1\":{\"525\":1}}],[\"array<string>\",{\"1\":{\"517\":1}}],[\"arraylist\",{\"1\":{\"399\":1}}],[\"arraylist<orderentity>\",{\"1\":{\"793\":1}}],[\"arraylist<dsorderentity>\",{\"1\":{\"788\":1}}],[\"arraylist<tdsorderentity>\",{\"1\":{\"782\":1}}],[\"arraylist<topictypejsonvalue>\",{\"1\":{\"310\":1,\"562\":1}}],[\"arraylist<>\",{\"1\":{\"310\":1,\"358\":1,\"403\":1,\"562\":1,\"621\":1,\"622\":1,\"629\":2,\"632\":2,\"634\":3,\"641\":1,\"782\":1,\"788\":1,\"793\":1,\"797\":1}}],[\"array`\",{\"1\":{\"310\":1,\"562\":1}}],[\"array\",{\"1\":{\"310\":2,\"562\":2,\"635\":1}}],[\"arrays\",{\"1\":{\"237\":1,\"284\":1,\"485\":1,\"565\":1,\"631\":2,\"633\":2,\"662\":1,\"667\":2,\"673\":1,\"782\":1,\"788\":1,\"793\":1,\"809\":1}}],[\"argclassproxyname\",{\"1\":{\"804\":1}}],[\"argclassname\",{\"1\":{\"804\":3}}],[\"arguments\",{\"1\":{\"517\":1}}],[\"arg>\",{\"1\":{\"455\":1}}],[\"arg\",{\"1\":{\"271\":2,\"273\":2,\"274\":4}}],[\"args\",{\"1\":{\"34\":1,\"167\":1,\"274\":4,\"397\":1,\"481\":2,\"487\":2,\"508\":1,\"517\":1,\"549\":2,\"781\":1,\"787\":1}}],[\"article\",{\"0\":{\"53\":1},\"1\":{\"53\":1,\"206\":1,\"745\":1,\"746\":1}}],[\"artifact\",{\"1\":{\"15\":1,\"801\":1}}],[\"artifactid>\",{\"1\":{\"12\":1,\"17\":2,\"30\":7,\"31\":6,\"44\":5,\"115\":1,\"117\":1,\"120\":6,\"121\":8,\"157\":11,\"158\":3,\"163\":6,\"167\":2,\"176\":2,\"309\":1,\"313\":1,\"395\":6,\"453\":3,\"455\":4,\"460\":5,\"463\":1,\"465\":1,\"466\":4,\"478\":5,\"490\":1,\"492\":1,\"496\":6,\"497\":8,\"504\":12,\"513\":5,\"514\":1,\"519\":14,\"579\":1,\"801\":7}}],[\"area`\",{\"1\":{\"712\":2}}],[\"areas=\",{\"1\":{\"712\":1}}],[\"areas\",{\"1\":{\"712\":1}}],[\"area=area1\",{\"1\":{\"315\":5}}],[\"area1\",{\"1\":{\"314\":2,\"316\":1}}],[\"area\",{\"1\":{\"111\":1,\"152\":3,\"311\":3,\"712\":4}}],[\"are\",{\"1\":{\"14\":1,\"55\":1,\"82\":1,\"83\":1}}],[\"aptconstant\",{\"1\":{\"804\":1}}],[\"apt\",{\"1\":{\"799\":1,\"805\":2,\"806\":3}}],[\"apt自动生成\",{\"0\":{\"542\":1}}],[\"apt生成代理类\",{\"1\":{\"395\":1}}],[\"apt不会被clear清除\",{\"1\":{\"28\":1}}],[\"applicationcontext\",{\"1\":{\"803\":9,\"804\":8}}],[\"applicationarguments\",{\"1\":{\"508\":1,\"781\":1,\"787\":1}}],[\"applicationrunner\",{\"1\":{\"508\":1,\"781\":1,\"787\":1}}],[\"application\",{\"1\":{\"481\":1}}],[\"apply\",{\"1\":{\"200\":1,\"201\":1,\"223\":4,\"257\":1,\"260\":2,\"262\":1,\"265\":1,\"306\":1,\"522\":1,\"572\":1,\"809\":1}}],[\"applyincrementsqlcolumngenerator\",{\"1\":{\"191\":1}}],[\"applyinterceptor\",{\"1\":{\"116\":1,\"191\":3,\"257\":1,\"260\":1,\"262\":1,\"485\":1,\"486\":1,\"487\":1,\"491\":3,\"493\":1,\"523\":3}}],[\"applyvalueupdateatomictrack\",{\"1\":{\"191\":1,\"485\":1,\"486\":1,\"491\":1,\"523\":1}}],[\"applyvalueconverter\",{\"1\":{\"116\":1,\"191\":3,\"304\":1,\"485\":1,\"486\":1,\"487\":1,\"491\":2,\"493\":1,\"523\":2,\"561\":1,\"570\":1,\"578\":1}}],[\"applygeneratedkeysqlcolumngenerator\",{\"1\":{\"116\":1,\"491\":1,\"493\":1,\"523\":1}}],[\"applycolumnvaluesqlconverter\",{\"1\":{\"116\":1,\"191\":1,\"192\":1,\"231\":1,\"491\":1,\"493\":1,\"523\":1,\"586\":1,\"592\":1}}],[\"applyshardinginitializer\",{\"1\":{\"116\":1,\"191\":5,\"485\":1,\"486\":1,\"491\":5,\"493\":1,\"523\":5,\"798\":1}}],[\"applylogicdeletestrategy\",{\"1\":{\"116\":1,\"191\":1,\"284\":2,\"485\":1,\"486\":1,\"487\":1,\"491\":1,\"493\":1,\"523\":1}}],[\"applyencryptionstrategy\",{\"1\":{\"116\":1,\"191\":4,\"192\":1,\"485\":1,\"486\":1,\"491\":4,\"493\":1,\"523\":4}}],[\"append\",{\"1\":{\"313\":2}}],[\"appendhandler\",{\"1\":{\"298\":1,\"300\":1}}],[\"appcontext\",{\"1\":{\"274\":2}}],[\"app\",{\"1\":{\"274\":11,\"481\":2,\"487\":4,\"549\":4}}],[\"api变化\",{\"0\":{\"644\":1}}],[\"api4kt<\",{\"1\":{\"466\":1}}],[\"api4j<\",{\"1\":{\"44\":1,\"460\":1}}],[\"api4j包\",{\"1\":{\"34\":1}}],[\"api接口选型\",{\"0\":{\"458\":1}}],[\"api模式❗️❗️❗️\",{\"0\":{\"449\":1}}],[\"api说明\",{\"0\":{\"335\":1,\"641\":1}}],[\"api使用\",{\"0\":{\"334\":1}}],[\"api\",{\"0\":{\"244\":1,\"257\":1,\"260\":1,\"262\":1,\"264\":1,\"302\":1,\"321\":1,\"410\":1,\"559\":1,\"568\":1,\"576\":1,\"601\":1,\"625\":1,\"729\":1,\"741\":1,\"743\":1,\"771\":1},\"1\":{\"13\":1,\"30\":1,\"31\":1,\"34\":2,\"43\":1,\"121\":1,\"157\":1,\"162\":1,\"163\":1,\"266\":1,\"395\":1,\"450\":1,\"453\":1,\"455\":4,\"460\":3,\"466\":2,\"497\":1,\"513\":1,\"517\":1,\"519\":1,\"801\":2}}],[\"apache\",{\"1\":{\"6\":1,\"17\":1,\"88\":1,\"157\":3,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"519\":3}}],[\"aop配置\",{\"0\":{\"525\":1}}],[\"aop\",{\"1\":{\"196\":1,\"525\":1}}],[\"aop<\",{\"1\":{\"12\":1,\"117\":1,\"157\":1,\"492\":1,\"504\":1}}],[\"aop组件版本不对\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"attr\",{\"1\":{\"313\":8}}],[\"attrs\",{\"0\":{\"65\":1,\"831\":1}}],[\"at`\",{\"1\":{\"285\":7}}],[\"atomic`\",{\"1\":{\"196\":2}}],[\"atomic\",{\"1\":{\"196\":1}}],[\"at\",{\"1\":{\"12\":6,\"83\":1,\"117\":7,\"492\":6,\"493\":1}}],[\"i1\",{\"1\":{\"782\":3,\"788\":3,\"793\":3}}],[\"ignore那么如果是非track更新那么将会直接忽略\",{\"1\":{\"429\":1}}],[\"ignoreproperties\",{\"1\":{\"425\":1}}],[\"ignore\",{\"1\":{\"365\":1}}],[\"i+100\",{\"1\":{\"358\":1}}],[\"i++\",{\"1\":{\"358\":1,\"530\":1,\"742\":1,\"781\":1,\"782\":1,\"787\":1,\"788\":1,\"793\":1}}],[\"ienum=null\",{\"1\":{\"306\":1,\"572\":1}}],[\"ienum\",{\"1\":{\"306\":6,\"572\":6}}],[\"ienum<certstatusenum>\",{\"1\":{\"592\":1}}],[\"ienum<\",{\"1\":{\"306\":4,\"572\":4}}],[\"ienum<topictypeenum>\",{\"1\":{\"306\":1,\"572\":1}}],[\"ienum<t>>\",{\"1\":{\"306\":1,\"572\":1}}],[\"ienum<tenum>>\",{\"1\":{\"306\":1,\"572\":1}}],[\"ienum<tenum\",{\"1\":{\"306\":1,\"572\":1}}],[\"illegalaccessexception\",{\"1\":{\"308\":2,\"574\":2}}],[\"illegalargumentexception\",{\"1\":{\"227\":1,\"306\":1,\"308\":2,\"572\":1,\"574\":2,\"797\":1}}],[\"illegalstateexception\",{\"1\":{\"12\":1,\"117\":1,\"492\":1,\"735\":1}}],[\"ioexception\",{\"1\":{\"313\":1}}],[\"io\",{\"1\":{\"118\":1,\"494\":1}}],[\"icon\",{\"1\":{\"111\":1}}],[\"ir⋯\",{\"1\":{\"74\":1,\"840\":1}}],[\"image`\",{\"1\":{\"314\":1,\"315\":2,\"316\":1}}],[\"images\",{\"1\":{\"83\":2}}],[\"image\",{\"0\":{\"69\":1},\"1\":{\"311\":1,\"474\":1}}],[\"implementation\",{\"1\":{\"517\":1}}],[\"implements\",{\"1\":{\"21\":1,\"122\":1,\"140\":3,\"152\":5,\"157\":1,\"200\":1,\"201\":1,\"223\":2,\"227\":2,\"231\":1,\"236\":2,\"254\":1,\"260\":2,\"262\":1,\"265\":1,\"271\":1,\"273\":2,\"274\":2,\"306\":3,\"308\":1,\"309\":1,\"310\":2,\"313\":1,\"358\":1,\"362\":1,\"400\":1,\"412\":1,\"498\":1,\"505\":2,\"507\":1,\"508\":1,\"521\":1,\"522\":1,\"547\":2,\"548\":1,\"556\":2,\"562\":2,\"564\":2,\"572\":3,\"574\":1,\"579\":1,\"581\":1,\"586\":1,\"592\":3,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"631\":2,\"634\":1,\"686\":3,\"689\":1,\"690\":1,\"781\":1,\"787\":1,\"803\":1,\"804\":1,\"807\":1,\"809\":2,\"814\":1,\"815\":1}}],[\"impl\",{\"1\":{\"517\":1}}],[\"imports\",{\"1\":{\"804\":1}}],[\"import\",{\"1\":{\"157\":2,\"517\":6}}],[\"important\",{\"1\":{\"56\":1,\"67\":1}}],[\"i\",{\"1\":{\"64\":2,\"83\":2,\"358\":4,\"389\":6,\"530\":4,\"666\":2,\"742\":9,\"781\":4,\"782\":5,\"787\":4,\"788\":5,\"793\":5}}],[\"if\",{\"1\":{\"55\":1,\"56\":1,\"122\":4,\"140\":3,\"200\":1,\"201\":1,\"227\":3,\"260\":6,\"262\":6,\"265\":2,\"271\":2,\"273\":2,\"274\":4,\"306\":5,\"308\":8,\"309\":2,\"313\":8,\"411\":1,\"483\":1,\"498\":4,\"505\":2,\"506\":1,\"522\":1,\"525\":1,\"530\":3,\"572\":5,\"574\":8,\"579\":2,\"620\":1,\"626\":1,\"631\":3,\"641\":1,\"783\":1,\"789\":1,\"794\":1,\"797\":1,\"805\":1,\"809\":11,\"812\":1,\"814\":4}}],[\"ifnullordefault\",{\"1\":{\"227\":1}}],[\"ifnull额外参数等\",{\"1\":{\"227\":1}}],[\"ifnullcolumnfunction\",{\"1\":{\"227\":5}}],[\"ifnull编写\",{\"0\":{\"225\":1}}],[\"ifnull\",{\"1\":{\"39\":1,\"172\":1,\"224\":1,\"227\":6,\"292\":2,\"293\":4,\"294\":1,\"295\":1,\"296\":2,\"666\":15,\"673\":1,\"724\":1,\"765\":1}}],[\"it++++1\",{\"1\":{\"316\":2}}],[\"it编程\",{\"1\":{\"314\":2,\"316\":1}}],[\"itf\",{\"1\":{\"313\":1}}],[\"it\",{\"1\":{\"54\":1,\"56\":1,\"57\":2,\"517\":1,\"669\":14,\"804\":1,\"824\":2}}],[\"item\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"isbank\",{\"1\":{\"673\":1}}],[\"isbefore\",{\"1\":{\"642\":1}}],[\"isblank\",{\"1\":{\"227\":1,\"309\":1,\"579\":1}}],[\"isequal\",{\"1\":{\"642\":1}}],[\"isenum\",{\"1\":{\"308\":1,\"574\":1}}],[\"ismergesubquery\",{\"1\":{\"556\":1,\"564\":1,\"585\":2,\"586\":1,\"592\":1}}],[\"isrealcolumn\",{\"1\":{\"556\":1,\"564\":1,\"585\":2,\"586\":1,\"592\":1}}],[\"isuppercase\",{\"1\":{\"530\":1}}],[\"istop\",{\"1\":{\"600\":1,\"629\":1,\"632\":1,\"634\":1,\"731\":1,\"732\":1}}],[\"istraceenabled\",{\"1\":{\"521\":1}}],[\"isthrowifroutenotmatch\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"isdebugenabled\",{\"1\":{\"521\":1}}],[\"isdefaulttrack\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"ispresent\",{\"1\":{\"308\":2,\"574\":2}}],[\"isprintsql\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"isnull\",{\"1\":{\"284\":1,\"485\":1,\"771\":1,\"772\":1}}],[\"isnoversionerror\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"isnotempty\",{\"1\":{\"641\":1}}],[\"isnotblank\",{\"1\":{\"25\":7,\"525\":1,\"620\":1,\"631\":1}}],[\"isnotnull\",{\"1\":{\"16\":1,\"626\":1,\"642\":1,\"646\":1,\"647\":1,\"648\":1,\"681\":1,\"682\":1,\"683\":1,\"714\":1,\"758\":2,\"759\":2,\"771\":1,\"772\":1}}],[\"isafter\",{\"1\":{\"797\":2}}],[\"isannotationpresent\",{\"1\":{\"308\":1,\"574\":1}}],[\"isassignablefrom\",{\"1\":{\"257\":1,\"260\":2,\"262\":1,\"265\":1,\"306\":1,\"572\":1,\"809\":2}}],[\"isactualtransactionactive\",{\"1\":{\"122\":2,\"498\":2}}],[\"iscomparevalue\",{\"1\":{\"230\":2,\"231\":1,\"236\":3,\"556\":1,\"564\":3,\"585\":2,\"586\":1,\"592\":1}}],[\"isolationlevel\",{\"1\":{\"522\":2}}],[\"iso10126padding\",{\"1\":{\"216\":5}}],[\"isopentransaction\",{\"1\":{\"122\":3,\"498\":3}}],[\"iskeepnativestyle\",{\"1\":{\"123\":1,\"499\":1}}],[\"isstarttimejob\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"issues\",{\"1\":{\"94\":2,\"809\":1}}],[\"isquerylargecolumn\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"iswarningbusy\",{\"1\":{\"122\":1,\"123\":1,\"491\":1,\"493\":1,\"498\":1,\"499\":1}}],[\"is\",{\"1\":{\"52\":1,\"56\":1,\"80\":1,\"81\":1,\"82\":3,\"117\":1,\"227\":1,\"237\":1,\"285\":4,\"493\":1,\"503\":2,\"522\":3,\"565\":1,\"626\":1,\"642\":1,\"646\":1,\"647\":1,\"648\":1,\"679\":2,\"681\":2,\"682\":2,\"683\":2,\"714\":3,\"758\":2,\"759\":2,\"771\":2,\"797\":1}}],[\"idhelper\",{\"1\":{\"809\":2}}],[\"idcount\",{\"1\":{\"642\":1}}],[\"idcard=12345678\",{\"1\":{\"233\":1,\"588\":1}}],[\"idcard\",{\"1\":{\"174\":1,\"231\":1,\"554\":1,\"586\":1}}],[\"id1属性不在blogentity里面所以会进行报错\",{\"1\":{\"623\":1}}],[\"id1\",{\"1\":{\"623\":3}}],[\"id正序\",{\"1\":{\"623\":1}}],[\"ids\",{\"1\":{\"505\":4}}],[\"id4trans\",{\"1\":{\"505\":2,\"507\":2}}],[\"idutil\",{\"1\":{\"201\":1}}],[\"id`\",{\"1\":{\"140\":3,\"144\":5,\"145\":2,\"146\":2,\"147\":2,\"149\":4,\"260\":2,\"265\":6,\"557\":4,\"694\":10,\"696\":10,\"706\":3,\"707\":2,\"708\":1,\"709\":3,\"710\":5,\"713\":10,\"724\":3,\"764\":1,\"765\":1}}],[\"id=b\",{\"1\":{\"739\":1}}],[\"id=a\",{\"1\":{\"738\":1}}],[\"id=address3\",{\"1\":{\"706\":1}}],[\"id=address2\",{\"1\":{\"706\":1}}],[\"id=address1\",{\"1\":{\"706\":1}}],[\"id=teacher2\",{\"1\":{\"709\":2}}],[\"id=teacher1\",{\"1\":{\"709\":1}}],[\"id=class3\",{\"1\":{\"707\":1,\"709\":1}}],[\"id=class2\",{\"1\":{\"707\":1,\"708\":1,\"709\":1}}],[\"id=class1\",{\"1\":{\"707\":1,\"708\":2,\"709\":1}}],[\"id=3\",{\"1\":{\"706\":1,\"707\":1,\"708\":1}}],[\"id=2\",{\"1\":{\"706\":1,\"707\":1,\"708\":1}}],[\"id=1\",{\"1\":{\"706\":1,\"707\":1,\"708\":1}}],[\"id=1231\",{\"1\":{\"309\":1,\"579\":1}}],[\"id=12345\",{\"1\":{\"233\":1,\"588\":1}}],[\"id=123\",{\"1\":{\"196\":1,\"306\":1,\"307\":1,\"308\":1,\"572\":1,\"573\":1,\"574\":1}}],[\"id=null\",{\"1\":{\"315\":2}}],[\"id=my1\",{\"1\":{\"315\":3}}],[\"id=xx\",{\"1\":{\"195\":4}}],[\"id=xxx\",{\"1\":{\"193\":1,\"433\":1,\"434\":1,\"435\":1}}],[\"id=\",{\"1\":{\"100\":1,\"107\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":2,\"342\":2,\"532\":8,\"631\":1,\"656\":2,\"659\":2,\"661\":2,\"662\":2,\"751\":2,\"754\":2,\"756\":1}}],[\"idea插件提供更加高效快速的开发效率和开发体验\",{\"1\":{\"100\":1,\"107\":1}}],[\"idea\",{\"0\":{\"29\":1},\"1\":{\"166\":3,\"396\":1,\"535\":10}}],[\"id\",{\"1\":{\"16\":1,\"21\":1,\"34\":2,\"35\":1,\"36\":1,\"38\":6,\"39\":5,\"40\":4,\"41\":6,\"42\":8,\"65\":1,\"102\":6,\"110\":4,\"111\":7,\"112\":5,\"127\":1,\"140\":2,\"152\":9,\"157\":1,\"166\":1,\"167\":2,\"168\":2,\"169\":1,\"171\":9,\"172\":8,\"173\":2,\"174\":9,\"175\":8,\"184\":2,\"185\":38,\"186\":1,\"196\":1,\"200\":1,\"201\":1,\"219\":1,\"223\":6,\"231\":1,\"237\":3,\"251\":1,\"252\":2,\"254\":1,\"272\":2,\"281\":4,\"284\":1,\"288\":10,\"289\":6,\"306\":1,\"307\":2,\"308\":1,\"309\":1,\"310\":3,\"311\":3,\"323\":2,\"325\":3,\"327\":1,\"328\":3,\"334\":1,\"335\":15,\"338\":1,\"339\":3,\"340\":6,\"341\":7,\"342\":10,\"350\":1,\"354\":2,\"358\":2,\"362\":1,\"369\":2,\"370\":1,\"374\":2,\"375\":3,\"376\":2,\"377\":4,\"385\":2,\"386\":2,\"387\":2,\"388\":1,\"389\":2,\"396\":1,\"397\":10,\"400\":1,\"412\":2,\"420\":2,\"426\":1,\"429\":1,\"430\":1,\"468\":2,\"482\":1,\"505\":7,\"506\":2,\"507\":1,\"509\":2,\"515\":1,\"517\":1,\"532\":14,\"556\":5,\"557\":1,\"562\":3,\"565\":3,\"572\":1,\"573\":2,\"574\":1,\"579\":1,\"581\":1,\"586\":1,\"592\":1,\"606\":1,\"607\":4,\"608\":6,\"615\":2,\"623\":9,\"631\":7,\"634\":1,\"642\":5,\"650\":2,\"651\":2,\"666\":13,\"667\":11,\"669\":14,\"672\":4,\"679\":2,\"705\":11,\"713\":4,\"722\":1,\"724\":3,\"732\":1,\"735\":4,\"738\":5,\"739\":5,\"744\":2,\"756\":2,\"758\":1,\"759\":1,\"796\":1,\"797\":1,\"807\":5,\"809\":1,\"831\":1}}],[\"id>\",{\"1\":{\"15\":2,\"514\":1,\"519\":4}}],[\"inf文件夹在新建services文件夹然后在创建一个javax\",{\"1\":{\"805\":1}}],[\"info打印\",{\"1\":{\"465\":1,\"470\":1}}],[\"info模式打印执行sql信息\",{\"1\":{\"397\":1,\"471\":1,\"548\":1}}],[\"info\",{\"1\":{\"206\":1,\"468\":1}}],[\"information\",{\"0\":{\"82\":1},\"1\":{\"52\":1,\"60\":1,\"82\":1,\"84\":2}}],[\"init\",{\"1\":{\"805\":2}}],[\"inittables\",{\"1\":{\"797\":3}}],[\"initialsize\",{\"1\":{\"781\":1,\"787\":1}}],[\"initial\",{\"1\":{\"780\":1,\"786\":1,\"792\":1}}],[\"initialized\",{\"1\":{\"517\":1}}],[\"initializingbean\",{\"1\":{\"505\":1}}],[\"inner\",{\"1\":{\"607\":1,\"616\":1,\"622\":1,\"626\":1,\"646\":1,\"682\":2,\"683\":2,\"714\":3}}],[\"innerjoin\",{\"0\":{\"646\":1},\"1\":{\"185\":1,\"601\":1,\"607\":1,\"616\":1,\"622\":1,\"626\":1,\"646\":1,\"682\":1,\"683\":1,\"714\":1}}],[\"index+1\",{\"1\":{\"530\":1}}],[\"index\",{\"1\":{\"530\":2}}],[\"indexstr\",{\"1\":{\"365\":7,\"366\":7,\"742\":7}}],[\"inherited\",{\"1\":{\"524\":1}}],[\"inputstream\",{\"1\":{\"313\":3}}],[\"invokestatic\",{\"1\":{\"313\":1}}],[\"invoke\",{\"1\":{\"313\":1}}],[\"invokevirtual\",{\"1\":{\"313\":1}}],[\"invalidtime\",{\"1\":{\"592\":3}}],[\"invalid\",{\"1\":{\"306\":1,\"308\":2,\"572\":1,\"574\":2,\"592\":4}}],[\"inject\",{\"1\":{\"192\":1,\"479\":1,\"485\":1,\"486\":1}}],[\"install\",{\"1\":{\"157\":2}}],[\"instanceof\",{\"1\":{\"227\":1,\"631\":1}}],[\"instance\",{\"1\":{\"157\":1,\"519\":1}}],[\"insert命名默认采用非null列插入\",{\"1\":{\"468\":1}}],[\"insert命令默认采用sqlexecutestrategyenum\",{\"1\":{\"351\":1,\"363\":1}}],[\"insertstrategy\",{\"1\":{\"468\":1}}],[\"insertstrategy表示sql的执行策略\",{\"1\":{\"351\":1,\"363\":1}}],[\"insertignore\",{\"0\":{\"428\":1},\"1\":{\"556\":1,\"592\":1}}],[\"insertbatchthreshold\",{\"1\":{\"204\":1,\"348\":1,\"468\":1}}],[\"insertable\",{\"1\":{\"103\":2,\"205\":1,\"214\":1,\"220\":1,\"232\":1,\"238\":1,\"249\":1,\"254\":1,\"260\":1,\"272\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"314\":1,\"323\":1,\"327\":1,\"328\":1,\"351\":3,\"362\":1,\"363\":3,\"365\":1,\"366\":4,\"368\":1,\"369\":3,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"411\":2,\"522\":4,\"562\":1,\"566\":1,\"572\":1,\"574\":1,\"579\":1,\"581\":1,\"587\":1,\"782\":1,\"788\":1,\"793\":1}}],[\"insertorupdate\",{\"1\":{\"100\":1,\"107\":1,\"364\":1,\"367\":1}}],[\"insert\",{\"0\":{\"351\":1},\"1\":{\"100\":1,\"107\":1,\"205\":1,\"214\":1,\"220\":1,\"230\":1,\"232\":1,\"238\":1,\"249\":1,\"254\":1,\"260\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"314\":1,\"323\":1,\"327\":1,\"328\":1,\"348\":1,\"351\":3,\"359\":2,\"360\":1,\"361\":1,\"362\":1,\"363\":3,\"365\":1,\"366\":3,\"368\":1,\"369\":2,\"370\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"407\":1,\"469\":1,\"483\":2,\"506\":6,\"562\":1,\"566\":1,\"572\":1,\"574\":1,\"579\":1,\"581\":1,\"585\":1,\"587\":1,\"782\":10,\"788\":10,\"793\":10}}],[\"increment`\",{\"1\":{\"254\":1,\"581\":1}}],[\"increment\",{\"1\":{\"254\":1,\"426\":1,\"581\":1}}],[\"incrementsqlcolumngeneratormap\",{\"1\":{\"117\":2,\"493\":2}}],[\"incrementsqlcolumngenerator>\",{\"1\":{\"117\":1,\"493\":1}}],[\"including\",{\"1\":{\"84\":1}}],[\"include>\",{\"1\":{\"801\":1}}],[\"include的后one或者many的第二个参数表示以多少关联属性为一组进行获取\",{\"1\":{\"703\":1}}],[\"include的关联查询单次查询最多支持的关联id\",{\"1\":{\"468\":1}}],[\"include方法内部\",{\"1\":{\"697\":1}}],[\"includeparserengine\",{\"1\":{\"545\":1}}],[\"includeprocessorfactory\",{\"1\":{\"545\":1}}],[\"includes>\",{\"1\":{\"801\":1}}],[\"includes参数说明\",{\"1\":{\"703\":1}}],[\"includes否则框架不会返回对多的那一方\",{\"1\":{\"148\":1}}],[\"includes\",{\"1\":{\"133\":1,\"135\":2,\"136\":2,\"148\":1,\"703\":2}}],[\"include和includes分别获取对一和对多的关系\",{\"1\":{\"133\":1}}],[\"include\",{\"0\":{\"75\":1,\"697\":1},\"1\":{\"127\":3,\"133\":1,\"134\":2,\"135\":1,\"136\":1,\"138\":1,\"694\":1,\"696\":1,\"697\":1,\"703\":2,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":2,\"712\":4,\"713\":6}}],[\"intvalue\",{\"1\":{\"306\":2,\"308\":1,\"572\":2,\"574\":1}}],[\"intoonduplicatekeyignoreonduplicatekeyupdateonconflictdonothingonconflictdoupdate\",{\"1\":{\"378\":1}}],[\"into\",{\"1\":{\"205\":1,\"214\":1,\"220\":1,\"232\":1,\"238\":1,\"249\":1,\"254\":1,\"260\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"314\":1,\"323\":1,\"327\":1,\"328\":1,\"351\":3,\"359\":2,\"360\":1,\"361\":1,\"362\":1,\"363\":3,\"365\":1,\"366\":3,\"368\":1,\"369\":2,\"370\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"468\":2,\"506\":6,\"562\":1,\"566\":1,\"572\":1,\"574\":1,\"579\":1,\"581\":1,\"587\":1,\"782\":10,\"788\":10,\"793\":10}}],[\"introduce\",{\"1\":{\"56\":1}}],[\"introduction\",{\"0\":{\"55\":1,\"330\":1,\"551\":1},\"1\":{\"56\":1}}],[\"intro\",{\"1\":{\"55\":1}}],[\"intellij\",{\"1\":{\"535\":11}}],[\"interval\",{\"1\":{\"737\":3}}],[\"interface\",{\"1\":{\"223\":2,\"230\":1,\"306\":1,\"308\":1,\"505\":1,\"510\":1,\"522\":1,\"524\":1,\"572\":1,\"574\":1,\"585\":1,\"631\":1,\"686\":1,\"689\":1,\"802\":1,\"803\":2,\"807\":1}}],[\"interceptortenantscope\",{\"1\":{\"525\":1}}],[\"interceptor\",{\"0\":{\"257\":1},\"1\":{\"260\":4,\"262\":1,\"265\":5,\"809\":1}}],[\"interceptormap\",{\"1\":{\"117\":4,\"493\":4}}],[\"interceptor>\",{\"1\":{\"117\":2,\"493\":2}}],[\"internalmenus\",{\"1\":{\"111\":2}}],[\"internalroles\",{\"1\":{\"111\":2}}],[\"internaladdress\",{\"1\":{\"111\":4}}],[\"internal\",{\"1\":{\"12\":2,\"117\":2,\"492\":2}}],[\"integerlistentry\",{\"1\":{\"508\":3}}],[\"integernotvalueupdateatomictrack\",{\"1\":{\"195\":1,\"196\":1,\"491\":1,\"523\":1}}],[\"integernotnullvalueupdateatomictrack\",{\"1\":{\"191\":1}}],[\"integerkey\",{\"1\":{\"185\":2}}],[\"integer>>\",{\"1\":{\"39\":1,\"172\":1,\"666\":1,\"724\":1,\"737\":1}}],[\"integer\",{\"0\":{\"611\":1},\"1\":{\"39\":1,\"41\":1,\"111\":1,\"140\":2,\"157\":1,\"172\":1,\"174\":1,\"182\":4,\"185\":3,\"196\":2,\"205\":6,\"260\":2,\"265\":1,\"284\":1,\"285\":1,\"306\":14,\"307\":3,\"308\":9,\"309\":5,\"310\":7,\"354\":1,\"358\":1,\"359\":1,\"360\":10,\"361\":2,\"362\":3,\"365\":2,\"366\":6,\"396\":1,\"400\":1,\"412\":1,\"417\":1,\"418\":1,\"419\":1,\"426\":1,\"429\":1,\"430\":1,\"482\":2,\"507\":1,\"517\":1,\"522\":1,\"554\":1,\"562\":7,\"572\":14,\"573\":3,\"574\":9,\"579\":5,\"592\":3,\"600\":2,\"608\":2,\"613\":1,\"616\":2,\"629\":2,\"631\":4,\"632\":2,\"633\":4,\"634\":2,\"635\":1,\"666\":2,\"731\":1,\"732\":2,\"734\":2,\"737\":2,\"742\":1,\"756\":1,\"759\":1,\"782\":20,\"783\":2,\"788\":20,\"789\":2,\"793\":20,\"794\":2,\"796\":1,\"797\":1}}],[\"intcount\",{\"1\":{\"37\":2,\"39\":2,\"170\":2,\"172\":4,\"182\":1,\"288\":4,\"608\":1}}],[\"int\",{\"1\":{\"37\":1,\"122\":2,\"170\":1,\"182\":1,\"206\":1,\"270\":1,\"313\":2,\"354\":1,\"358\":2,\"412\":1,\"498\":2,\"506\":1,\"515\":5,\"530\":3,\"622\":1,\"642\":1,\"742\":3,\"756\":1,\"781\":1,\"782\":2,\"787\":1,\"788\":2,\"793\":2}}],[\"in\",{\"0\":{\"222\":1,\"768\":1,\"769\":1},\"1\":{\"15\":1,\"16\":1,\"56\":1,\"57\":1,\"58\":1,\"60\":1,\"82\":1,\"83\":1,\"84\":1,\"100\":1,\"107\":1,\"117\":1,\"152\":1,\"221\":1,\"223\":6,\"237\":2,\"493\":1,\"517\":1,\"565\":2,\"623\":1,\"631\":4,\"632\":2,\"633\":2,\"634\":2,\"706\":1,\"707\":1,\"708\":1,\"709\":2,\"710\":3,\"712\":4,\"713\":6,\"761\":2,\"771\":3}}],[\"crudrepository<userproxy\",{\"1\":{\"807\":1}}],[\"crudrepository<sysuserentityproxy\",{\"1\":{\"803\":1}}],[\"crudrepository<tproxy\",{\"1\":{\"803\":1}}],[\"creating\",{\"1\":{\"117\":1,\"493\":1}}],[\"createrequiredexception\",{\"1\":{\"814\":1}}],[\"createfindnotnullexception\",{\"1\":{\"814\":1}}],[\"createfirstnotnullexception\",{\"1\":{\"510\":1,\"814\":1}}],[\"createby\",{\"1\":{\"809\":2}}],[\"createmytime\",{\"1\":{\"732\":1}}],[\"createpageresult\",{\"1\":{\"685\":1,\"686\":1}}],[\"createdatasource\",{\"1\":{\"781\":3,\"787\":3}}],[\"createdatasources\",{\"1\":{\"781\":2,\"787\":2}}],[\"createdatasourceunit\",{\"1\":{\"122\":1,\"498\":1}}],[\"created\",{\"1\":{\"631\":1}}],[\"createqueryable\",{\"1\":{\"556\":2}}],[\"createshardingpageresult\",{\"1\":{\"685\":1,\"686\":1}}],[\"createsinglemoreelementexception\",{\"1\":{\"510\":1,\"814\":1}}],[\"createsinglenotnullexception\",{\"1\":{\"510\":1,\"814\":1}}],[\"createsnowflake\",{\"1\":{\"201\":1}}],[\"createtable\",{\"1\":{\"101\":1,\"102\":3,\"103\":1,\"104\":2,\"105\":2,\"157\":1,\"166\":1,\"397\":4,\"517\":1,\"615\":2,\"744\":2}}],[\"createtime=2023\",{\"1\":{\"233\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"588\":1}}],[\"createtime1\",{\"1\":{\"185\":3}}],[\"createtimeend\",{\"1\":{\"22\":1}}],[\"createtimebegin\",{\"1\":{\"22\":1}}],[\"createtime\",{\"1\":{\"21\":1,\"22\":2,\"23\":1,\"25\":3,\"37\":2,\"38\":4,\"39\":2,\"40\":2,\"41\":1,\"42\":3,\"110\":4,\"111\":3,\"112\":1,\"140\":1,\"147\":1,\"148\":1,\"152\":5,\"157\":1,\"170\":2,\"171\":8,\"172\":4,\"173\":2,\"174\":3,\"175\":3,\"183\":3,\"184\":1,\"185\":13,\"196\":1,\"231\":1,\"284\":1,\"306\":1,\"307\":2,\"308\":1,\"309\":1,\"310\":2,\"354\":1,\"358\":1,\"362\":1,\"369\":2,\"396\":1,\"397\":3,\"400\":1,\"412\":1,\"426\":1,\"429\":1,\"430\":1,\"482\":1,\"562\":2,\"572\":1,\"573\":2,\"574\":1,\"579\":1,\"586\":1,\"592\":1,\"606\":1,\"608\":1,\"622\":3,\"642\":1,\"650\":1,\"651\":1,\"666\":12,\"667\":2,\"679\":1,\"697\":1,\"737\":3,\"756\":1,\"796\":1,\"797\":1,\"809\":2}}],[\"createclass\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"createhelper\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"create\",{\"1\":{\"12\":1,\"54\":1,\"117\":1,\"123\":1,\"260\":1,\"262\":1,\"311\":1,\"354\":2,\"358\":2,\"368\":1,\"369\":6,\"374\":3,\"375\":3,\"376\":3,\"377\":8,\"389\":1,\"412\":2,\"492\":1,\"499\":1,\"506\":3,\"522\":1,\"523\":1,\"756\":2,\"758\":1}}],[\"createentry\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"cities=\",{\"1\":{\"712\":2}}],[\"cities\",{\"1\":{\"712\":1}}],[\"city`\",{\"1\":{\"712\":2}}],[\"citycode=3306\",{\"1\":{\"712\":1}}],[\"citycode\",{\"1\":{\"712\":2}}],[\"cityvo\",{\"1\":{\"641\":3}}],[\"city=city1\",{\"1\":{\"315\":5}}],[\"city1\",{\"1\":{\"314\":2,\"316\":1}}],[\"city\",{\"1\":{\"111\":1,\"144\":2,\"152\":1,\"311\":3,\"641\":7,\"712\":6}}],[\"c三张表查询的时候\",{\"1\":{\"642\":1}}],[\"cc1\",{\"1\":{\"626\":2}}],[\"cc\",{\"1\":{\"626\":2}}],[\"cfg\",{\"1\":{\"481\":1}}],[\"cfb\",{\"1\":{\"216\":3}}],[\"c都拿到1个线程的情况下想要拿到下一个链接需要其中一个释放\",{\"1\":{\"407\":1}}],[\"c分别需要聚合2个分片\",{\"1\":{\"407\":1}}],[\"ce0e0f63113d\",{\"1\":{\"661\":1}}],[\"certstatusenum\",{\"1\":{\"592\":4,\"594\":1,\"595\":1}}],[\"certstatuscolumnvaluesqlconverter\",{\"1\":{\"592\":3}}],[\"certificate`\",{\"1\":{\"593\":1,\"594\":1,\"595\":1}}],[\"certificateproxy>\",{\"1\":{\"592\":1}}],[\"certificate\",{\"1\":{\"592\":2,\"593\":1,\"594\":1,\"595\":1}}],[\"ceiling\",{\"1\":{\"236\":2,\"237\":7,\"564\":2,\"565\":7}}],[\"central\",{\"1\":{\"114\":1,\"457\":1,\"462\":1,\"464\":1,\"475\":1,\"489\":1}}],[\"center\",{\"1\":{\"64\":1}}],[\"c\",{\"1\":{\"223\":12,\"230\":1,\"231\":1,\"528\":1,\"585\":1,\"586\":1,\"592\":4,\"594\":2,\"595\":4,\"666\":19,\"670\":6,\"722\":1,\"734\":2,\"739\":1,\"756\":1}}],[\"chinesecharoccupancylength\",{\"1\":{\"219\":1}}],[\"chars\",{\"1\":{\"530\":5}}],[\"character\",{\"1\":{\"506\":1,\"530\":1}}],[\"characterencoding=utf\",{\"1\":{\"34\":1,\"124\":1,\"157\":1,\"167\":1,\"204\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"char\",{\"1\":{\"185\":4,\"530\":1,\"666\":1}}],[\"chart\",{\"0\":{\"70\":1}}],[\"cbc\",{\"1\":{\"216\":4}}],[\"csdn\",{\"1\":{\"206\":1,\"745\":1,\"746\":1}}],[\"curdate\",{\"1\":{\"737\":2}}],[\"currentuser\",{\"1\":{\"809\":9}}],[\"currentuserhelper\",{\"1\":{\"260\":12,\"262\":4,\"265\":4,\"284\":3,\"285\":1}}],[\"currentdatasource\",{\"1\":{\"522\":4}}],[\"current\",{\"1\":{\"385\":3,\"386\":3,\"387\":3}}],[\"currenttimemillis\",{\"1\":{\"269\":1,\"270\":1,\"322\":1}}],[\"currentthreadtracking\",{\"1\":{\"245\":1}}],[\"currentthreadintransaction\",{\"1\":{\"122\":1,\"498\":1}}],[\"cup\",{\"1\":{\"77\":1}}],[\"custompropertytypehandler\",{\"1\":{\"300\":1}}],[\"custompropertytype\",{\"1\":{\"300\":1}}],[\"custom`\",{\"1\":{\"285\":1}}],[\"customincrement=new\",{\"1\":{\"254\":1,\"581\":1}}],[\"customincrement\",{\"1\":{\"254\":7,\"581\":7}}],[\"customize\",{\"1\":{\"84\":1}}],[\"custom\",{\"0\":{\"60\":1},\"1\":{\"60\":10,\"83\":1,\"254\":1,\"279\":1,\"284\":3,\"285\":3,\"430\":1,\"581\":1,\"809\":1}}],[\"camel\",{\"1\":{\"468\":2,\"483\":2}}],[\"casewhenbuilder\",{\"1\":{\"614\":4,\"615\":3,\"616\":1}}],[\"casewhen\",{\"0\":{\"614\":1},\"1\":{\"614\":8,\"615\":6,\"616\":2,\"662\":1}}],[\"case\",{\"1\":{\"237\":1,\"306\":3,\"468\":2,\"483\":2,\"565\":1,\"572\":3,\"592\":5,\"593\":1,\"594\":2,\"595\":3,\"615\":3,\"616\":1,\"679\":2}}],[\"cast\",{\"1\":{\"185\":4,\"666\":1}}],[\"call\",{\"1\":{\"200\":1,\"201\":1}}],[\"card`\",{\"1\":{\"174\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":3,\"323\":2,\"324\":1,\"327\":1,\"328\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"772\":1,\"774\":1}}],[\"caused\",{\"1\":{\"117\":1,\"493\":1}}],[\"catch\",{\"1\":{\"308\":2,\"313\":2,\"574\":2,\"623\":1,\"742\":1,\"781\":1,\"787\":1}}],[\"category\",{\"1\":{\"82\":1}}],[\"catalog\",{\"0\":{\"51\":1}}],[\"candidate\",{\"1\":{\"117\":1,\"493\":1}}],[\"can\",{\"1\":{\"52\":1,\"54\":2,\"67\":1,\"82\":1,\"83\":1,\"84\":1,\"122\":1,\"353\":1,\"498\":1}}],[\"cache<serializeddescriptor\",{\"1\":{\"313\":1}}],[\"cache提供了三种模式\",{\"1\":{\"209\":1}}],[\"cache包\",{\"1\":{\"208\":1}}],[\"cache实现缓存的便捷使用并且是一个企业级别的延迟双删\",{\"1\":{\"100\":1,\"107\":1}}],[\"cache\",{\"1\":{\"12\":1,\"117\":1,\"492\":1}}],[\"cj\",{\"1\":{\"34\":1,\"124\":1,\"157\":1,\"167\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"clazz\",{\"1\":{\"521\":2}}],[\"classinterfacename\",{\"1\":{\"804\":1}}],[\"classimplname\",{\"1\":{\"804\":2}}],[\"classid=class2\",{\"1\":{\"706\":1,\"707\":1,\"708\":1}}],[\"classid=class1\",{\"1\":{\"706\":2,\"707\":2,\"708\":2}}],[\"classid\",{\"1\":{\"556\":3,\"694\":1,\"696\":1,\"705\":8,\"713\":1}}],[\"class表示分初始化器使用topicshardingtimeshardinginitializer\",{\"1\":{\"797\":1}}],[\"class不需要生成proxy\",{\"1\":{\"731\":1}}],[\"class1\",{\"1\":{\"707\":1,\"708\":1,\"709\":1,\"710\":2,\"713\":4}}],[\"class2\",{\"1\":{\"707\":1,\"708\":1,\"709\":1,\"710\":2,\"713\":4}}],[\"class3\",{\"1\":{\"707\":1,\"709\":1,\"710\":2,\"713\":2}}],[\"classes\",{\"1\":{\"697\":1,\"707\":1,\"709\":1,\"710\":1}}],[\"classer\",{\"1\":{\"306\":3,\"308\":2,\"309\":1,\"310\":1,\"562\":1,\"572\":3,\"574\":2,\"579\":1}}],[\"class`\",{\"1\":{\"557\":5,\"694\":6,\"696\":6,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"713\":4}}],[\"class查看替换框架行为\",{\"1\":{\"402\":1}}],[\"class默认实现类defaultassertexceptionfactory\",{\"1\":{\"402\":1}}],[\"classreader\",{\"1\":{\"313\":4}}],[\"classstream\",{\"1\":{\"313\":2}}],[\"classfilepath\",{\"1\":{\"313\":5}}],[\"classloader\",{\"1\":{\"313\":6}}],[\"classvisitor\",{\"1\":{\"313\":1}}],[\"classname\",{\"1\":{\"308\":2,\"313\":4,\"574\":2}}],[\"class<sysuserentity>\",{\"1\":{\"803\":1}}],[\"class<tr>\",{\"1\":{\"729\":4}}],[\"class<t>\",{\"1\":{\"306\":1,\"308\":2,\"522\":4,\"572\":1,\"574\":2,\"803\":1}}],[\"class<ienum<\",{\"1\":{\"306\":1,\"572\":1}}],[\"class<\",{\"1\":{\"140\":1,\"260\":7,\"262\":4,\"265\":4,\"306\":1,\"505\":4,\"572\":1,\"804\":1,\"809\":4}}],[\"classpath\",{\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"class\",{\"1\":{\"16\":2,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":2,\"34\":7,\"35\":4,\"36\":1,\"37\":2,\"38\":3,\"39\":2,\"40\":1,\"41\":3,\"42\":4,\"100\":1,\"102\":3,\"104\":1,\"105\":1,\"107\":1,\"110\":7,\"111\":13,\"112\":5,\"117\":2,\"122\":3,\"123\":7,\"124\":1,\"125\":1,\"129\":5,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":2,\"138\":2,\"140\":11,\"144\":3,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":3,\"152\":21,\"157\":3,\"166\":1,\"167\":7,\"168\":5,\"169\":1,\"170\":2,\"171\":7,\"172\":6,\"173\":1,\"174\":6,\"175\":4,\"179\":6,\"180\":2,\"181\":1,\"182\":6,\"183\":3,\"184\":4,\"185\":23,\"186\":5,\"192\":1,\"196\":3,\"199\":1,\"200\":3,\"201\":3,\"214\":3,\"219\":6,\"220\":9,\"223\":8,\"227\":5,\"231\":3,\"233\":1,\"234\":1,\"235\":4,\"236\":2,\"237\":4,\"250\":2,\"251\":1,\"252\":2,\"254\":3,\"257\":1,\"260\":7,\"262\":3,\"265\":5,\"271\":3,\"272\":3,\"273\":5,\"274\":17,\"278\":3,\"279\":2,\"280\":3,\"281\":4,\"284\":4,\"285\":2,\"292\":2,\"293\":3,\"295\":2,\"296\":3,\"300\":1,\"302\":1,\"306\":7,\"307\":5,\"308\":6,\"309\":5,\"310\":11,\"311\":5,\"313\":7,\"315\":6,\"323\":1,\"325\":3,\"328\":2,\"335\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"350\":3,\"354\":1,\"355\":1,\"356\":2,\"358\":1,\"362\":1,\"385\":1,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"396\":1,\"397\":3,\"400\":1,\"412\":1,\"417\":2,\"419\":2,\"422\":1,\"425\":3,\"426\":3,\"429\":1,\"430\":1,\"471\":2,\"479\":1,\"480\":1,\"481\":3,\"482\":3,\"483\":2,\"485\":3,\"486\":1,\"487\":8,\"491\":5,\"493\":9,\"498\":3,\"499\":7,\"500\":1,\"501\":1,\"505\":3,\"507\":2,\"508\":2,\"509\":2,\"515\":2,\"517\":2,\"521\":1,\"522\":1,\"523\":6,\"525\":2,\"526\":7,\"530\":2,\"531\":1,\"532\":9,\"545\":91,\"547\":5,\"548\":3,\"549\":5,\"556\":8,\"557\":8,\"562\":11,\"564\":2,\"565\":4,\"568\":1,\"572\":7,\"573\":5,\"574\":6,\"579\":5,\"581\":3,\"586\":3,\"588\":1,\"589\":1,\"590\":4,\"592\":3,\"593\":1,\"594\":1,\"595\":1,\"600\":1,\"606\":1,\"607\":3,\"608\":6,\"615\":4,\"616\":3,\"620\":2,\"621\":3,\"622\":4,\"623\":4,\"626\":5,\"629\":1,\"631\":10,\"632\":1,\"633\":2,\"634\":2,\"641\":7,\"642\":4,\"645\":2,\"646\":3,\"647\":2,\"648\":3,\"649\":6,\"650\":2,\"651\":2,\"652\":7,\"655\":1,\"656\":1,\"666\":13,\"667\":3,\"669\":7,\"672\":2,\"673\":6,\"679\":1,\"681\":1,\"682\":3,\"683\":3,\"686\":3,\"689\":1,\"690\":1,\"691\":1,\"694\":8,\"696\":8,\"697\":1,\"703\":1,\"704\":1,\"705\":10,\"706\":1,\"707\":1,\"708\":1,\"709\":2,\"710\":2,\"712\":5,\"713\":16,\"714\":4,\"724\":3,\"731\":2,\"732\":1,\"734\":3,\"735\":5,\"737\":1,\"738\":2,\"739\":2,\"742\":1,\"750\":1,\"751\":1,\"756\":1,\"757\":3,\"758\":4,\"759\":8,\"760\":4,\"764\":2,\"765\":1,\"772\":1,\"773\":1,\"774\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":2,\"786\":1,\"787\":1,\"788\":1,\"789\":2,\"792\":1,\"793\":1,\"794\":2,\"795\":1,\"796\":3,\"797\":3,\"798\":1,\"803\":2,\"804\":3,\"805\":2,\"807\":1,\"809\":7,\"812\":3,\"813\":3,\"814\":1,\"815\":4,\"816\":2}}],[\"clientqueryable<long>\",{\"1\":{\"556\":2}}],[\"clientqueryable<schoolstudent>\",{\"1\":{\"556\":2}}],[\"client\",{\"1\":{\"517\":1}}],[\"clickhouse\",{\"1\":{\"9\":4}}],[\"clean\",{\"1\":{\"807\":1}}],[\"clean后需要重新build\",{\"1\":{\"446\":1}}],[\"clear\",{\"1\":{\"522\":2,\"525\":1,\"526\":1}}],[\"clears\",{\"1\":{\"16\":1}}],[\"cloneable\",{\"1\":{\"809\":1}}],[\"clonequeryable\",{\"1\":{\"714\":2}}],[\"close来关闭资源\",{\"1\":{\"740\":1}}],[\"close\",{\"1\":{\"410\":1}}],[\"closeeasyconnection\",{\"1\":{\"122\":1,\"498\":1}}],[\"closed\",{\"1\":{\"22\":2,\"122\":1,\"498\":1,\"632\":2,\"634\":2}}],[\"cloud\",{\"1\":{\"15\":1}}],[\"cloud<\",{\"1\":{\"15\":4}}],[\"coffee\",{\"1\":{\"77\":1}}],[\"collectors\",{\"1\":{\"744\":1}}],[\"collect\",{\"1\":{\"508\":3,\"744\":1}}],[\"collection<string>\",{\"1\":{\"797\":1}}],[\"collection<string>>\",{\"1\":{\"797\":1}}],[\"collection<trentity>>\",{\"1\":{\"641\":1}}],[\"collection<t>\",{\"1\":{\"522\":3}}],[\"collection<field>\",{\"1\":{\"308\":1,\"574\":1}}],[\"collections\",{\"1\":{\"117\":10,\"269\":1,\"270\":1,\"493\":10,\"652\":2,\"656\":1,\"659\":1,\"751\":1,\"754\":1}}],[\"color\",{\"1\":{\"69\":1}}],[\"columnkeys\",{\"1\":{\"783\":1,\"789\":1,\"794\":1}}],[\"column永远在左侧\",{\"1\":{\"770\":1}}],[\"columninclude表示单个关联属性的映射\",{\"1\":{\"713\":1}}],[\"columnincludemany\",{\"1\":{\"713\":3}}],[\"columnincludemany自定义返回\",{\"1\":{\"697\":1}}],[\"columninclude\",{\"1\":{\"713\":4}}],[\"columnignore\",{\"0\":{\"427\":1},\"1\":{\"315\":2,\"350\":1,\"507\":2,\"682\":1}}],[\"columnas\",{\"1\":{\"648\":1,\"760\":3}}],[\"columnall\",{\"1\":{\"235\":1,\"315\":2,\"334\":1,\"590\":1,\"626\":1,\"646\":1,\"669\":5,\"682\":1,\"713\":5,\"729\":1,\"735\":1}}],[\"columncount\",{\"1\":{\"556\":2,\"648\":1,\"714\":1}}],[\"column下large的列\",{\"1\":{\"468\":1}}],[\"column上进行手动指定对应的列名\",{\"1\":{\"468\":1}}],[\"column添加updateignore是为了保证大字段被查询出来后如果进行entity全字段更新那么因为title没有被查询所以更新的时候就会把null更新掉\",{\"1\":{\"429\":1}}],[\"columnsum\",{\"1\":{\"683\":1,\"714\":1}}],[\"columns那么将会进行executebatch\",{\"1\":{\"468\":1}}],[\"columns就是说默认生成的sql无论对象是否是null属性都会进行更新\",{\"1\":{\"352\":1}}],[\"columns就是说默认生成的sql如果对象属性为null就不生成insert列\",{\"1\":{\"351\":1,\"363\":1}}],[\"columns\",{\"1\":{\"348\":2,\"351\":2,\"352\":4,\"363\":2,\"370\":1,\"397\":5,\"419\":2,\"420\":1,\"422\":1,\"468\":2,\"483\":8}}],[\"columnsetter\",{\"1\":{\"262\":3,\"809\":4}}],[\"columnsetter<object>\",{\"1\":{\"262\":1,\"809\":1}}],[\"columnfunc\",{\"1\":{\"771\":1}}],[\"columnfuncas\",{\"1\":{\"227\":1}}],[\"columnfunctioncomparableanychainexpression<string>\",{\"1\":{\"666\":1}}],[\"columnfunctionfactory\",{\"1\":{\"545\":1}}],[\"columnfunction的组合仅支持单个数据库列字段的处理\",{\"1\":{\"227\":1}}],[\"columnfunction\",{\"0\":{\"227\":1},\"1\":{\"227\":9}}],[\"columnpropertyfunction\",{\"0\":{\"226\":1},\"1\":{\"227\":4}}],[\"columnmetadata\",{\"1\":{\"200\":5,\"201\":5,\"230\":9,\"231\":10,\"236\":17,\"254\":2,\"306\":10,\"308\":5,\"309\":5,\"556\":7,\"564\":17,\"572\":10,\"574\":5,\"579\":5,\"581\":2,\"585\":9,\"586\":10,\"592\":7}}],[\"column>=x\",{\"1\":{\"195\":2}}],[\"column>=xxx\",{\"1\":{\"193\":1}}],[\"column=column+x\",{\"1\":{\"195\":2}}],[\"column=column+1\",{\"1\":{\"193\":1}}],[\"column=column\",{\"1\":{\"195\":2}}],[\"columnvaluesqlconvertermap\",{\"1\":{\"117\":2,\"493\":2}}],[\"columnvaluesqlconverter>\",{\"1\":{\"117\":1,\"493\":1}}],[\"columnvaluesqlconverter\",{\"0\":{\"230\":1,\"585\":1},\"1\":{\"100\":1,\"107\":1,\"230\":1,\"231\":1,\"236\":2,\"556\":1,\"564\":2,\"585\":1,\"586\":1,\"592\":1}}],[\"column\",{\"0\":{\"426\":1},\"1\":{\"21\":1,\"140\":2,\"152\":5,\"157\":2,\"166\":1,\"196\":2,\"199\":3,\"200\":1,\"201\":1,\"219\":1,\"223\":3,\"227\":8,\"231\":2,\"236\":2,\"254\":1,\"284\":1,\"289\":4,\"293\":1,\"296\":1,\"306\":2,\"307\":2,\"308\":2,\"309\":2,\"310\":6,\"311\":2,\"315\":4,\"348\":1,\"350\":5,\"351\":3,\"352\":3,\"353\":1,\"354\":1,\"358\":1,\"362\":1,\"363\":3,\"366\":4,\"369\":2,\"396\":1,\"397\":2,\"400\":1,\"412\":1,\"426\":2,\"429\":3,\"430\":2,\"482\":1,\"483\":2,\"505\":2,\"507\":2,\"515\":1,\"517\":1,\"556\":2,\"557\":1,\"562\":6,\"564\":2,\"572\":2,\"573\":2,\"574\":2,\"579\":2,\"581\":1,\"586\":2,\"592\":4,\"600\":1,\"615\":3,\"616\":1,\"620\":3,\"621\":3,\"622\":3,\"648\":1,\"652\":10,\"669\":1,\"683\":2,\"705\":5,\"712\":3,\"713\":1,\"714\":2,\"731\":1,\"732\":1,\"735\":1,\"742\":1,\"756\":1,\"759\":1,\"783\":1,\"789\":1,\"794\":1,\"796\":1,\"797\":1,\"809\":1}}],[\"code=code\",{\"1\":{\"812\":1}}],[\"code=330602\",{\"1\":{\"712\":1}}],[\"code=3306\",{\"1\":{\"712\":1}}],[\"code=33\",{\"1\":{\"712\":1}}],[\"code=32\",{\"1\":{\"712\":1}}],[\"code=null\",{\"1\":{\"306\":1,\"572\":1}}],[\"code`\",{\"1\":{\"712\":10}}],[\"codehaus\",{\"1\":{\"519\":1}}],[\"codes\",{\"1\":{\"517\":1}}],[\"code的type=2\",{\"1\":{\"507\":1}}],[\"code的type=1\",{\"1\":{\"507\":1}}],[\"codeoptional\",{\"1\":{\"308\":6,\"574\":6}}],[\"code\",{\"0\":{\"62\":1,\"76\":1},\"1\":{\"60\":1,\"306\":10,\"308\":12,\"506\":7,\"507\":2,\"510\":2,\"519\":2,\"529\":1,\"531\":4,\"572\":10,\"574\":12,\"592\":4,\"712\":3,\"812\":5,\"814\":12}}],[\"coulmns策略\",{\"1\":{\"360\":1}}],[\"could\",{\"1\":{\"15\":1}}],[\"courses\",{\"1\":{\"137\":2}}],[\"countsql\",{\"1\":{\"714\":2}}],[\"count`\",{\"1\":{\"642\":2}}],[\"count就是0等等\",{\"1\":{\"469\":1}}],[\"count等会自动判断是否需要select\",{\"1\":{\"334\":1}}],[\"count数量大于5个\",{\"1\":{\"146\":1}}],[\"count查询\",{\"0\":{\"37\":1,\"170\":1}}],[\"count\",{\"1\":{\"23\":1,\"37\":3,\"39\":4,\"40\":1,\"100\":1,\"107\":1,\"131\":1,\"144\":2,\"146\":2,\"152\":1,\"170\":3,\"172\":5,\"173\":1,\"182\":3,\"184\":7,\"185\":8,\"288\":4,\"483\":1,\"557\":4,\"601\":1,\"606\":2,\"608\":2,\"642\":6,\"648\":1,\"652\":2,\"667\":1,\"681\":1,\"682\":1,\"683\":1,\"694\":2,\"696\":2,\"714\":3,\"722\":1,\"724\":4,\"733\":1,\"738\":2,\"739\":2}}],[\"conn\",{\"1\":{\"483\":1}}],[\"connected\",{\"1\":{\"517\":1}}],[\"connectionmodeenum\",{\"1\":{\"407\":1}}],[\"connectionmode\",{\"1\":{\"407\":1,\"469\":1}}],[\"connectionmanager\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1,\"523\":1,\"545\":1}}],[\"connectionstrategyenum\",{\"1\":{\"122\":1,\"498\":1}}],[\"connection\",{\"1\":{\"122\":2,\"410\":4,\"469\":1,\"483\":2,\"498\":2}}],[\"connector\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"120\":1,\"121\":1,\"157\":1,\"163\":1,\"395\":1,\"478\":1,\"496\":1,\"497\":1,\"504\":1,\"513\":1,\"519\":1}}],[\"conflict\",{\"1\":{\"368\":1,\"369\":2}}],[\"configure0\",{\"1\":{\"796\":1,\"797\":2}}],[\"configureupdate\",{\"1\":{\"260\":3,\"262\":1,\"265\":1,\"809\":1}}],[\"configureinsert\",{\"1\":{\"260\":3,\"262\":1,\"265\":1,\"809\":1}}],[\"configure\",{\"1\":{\"254\":1,\"260\":1,\"262\":2,\"264\":1,\"265\":1,\"272\":6,\"273\":1,\"547\":1,\"581\":1,\"618\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"634\":1,\"797\":1,\"809\":1,\"815\":1}}],[\"configuration\",{\"1\":{\"56\":1,\"116\":8,\"123\":1,\"191\":20,\"192\":4,\"231\":2,\"257\":2,\"284\":3,\"304\":2,\"479\":1,\"485\":8,\"486\":9,\"491\":18,\"493\":9,\"499\":1,\"505\":1,\"523\":19,\"525\":1,\"547\":1,\"561\":2,\"570\":2,\"578\":2,\"586\":2,\"592\":2,\"798\":2,\"815\":1}}],[\"configuration>\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"514\":1,\"519\":2,\"801\":1}}],[\"config\",{\"0\":{\"56\":1,\"81\":1},\"1\":{\"51\":1,\"75\":1,\"82\":1,\"272\":12,\"517\":1}}],[\"concurrentedit\",{\"1\":{\"783\":2,\"789\":2,\"794\":2}}],[\"concurrenthashmap<>\",{\"1\":{\"308\":1,\"522\":1,\"574\":1}}],[\"concat\",{\"1\":{\"236\":8,\"237\":15,\"289\":4,\"294\":1,\"564\":8,\"565\":15}}],[\"concept\",{\"1\":{\"56\":1}}],[\"console\",{\"1\":{\"397\":1}}],[\"consumenull\",{\"1\":{\"641\":2}}],[\"consume\",{\"1\":{\"236\":4,\"564\":4,\"592\":2}}],[\"constvalue\",{\"1\":{\"231\":1,\"586\":1,\"668\":1}}],[\"const\",{\"1\":{\"60\":1,\"827\":1}}],[\"convertlocaldatetime\",{\"1\":{\"798\":1}}],[\"convert\",{\"1\":{\"54\":1,\"425\":1,\"426\":1,\"547\":1,\"548\":1}}],[\"conversion=xxxx\",{\"1\":{\"302\":1,\"568\":1}}],[\"conversion\",{\"1\":{\"12\":1,\"115\":1,\"157\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":4,\"426\":1,\"465\":1,\"470\":1,\"483\":1,\"490\":1,\"562\":4,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"controller\",{\"1\":{\"480\":1,\"482\":1}}],[\"contributors\",{\"1\":{\"52\":1,\"84\":1}}],[\"context<\",{\"1\":{\"801\":2}}],[\"context\",{\"1\":{\"231\":4,\"236\":14,\"274\":3,\"556\":7,\"564\":14,\"586\":4,\"592\":7,\"666\":2,\"801\":1}}],[\"content=\",{\"1\":{\"661\":2,\"662\":2}}],[\"content200\",{\"1\":{\"365\":1,\"366\":2}}],[\"content`\",{\"1\":{\"314\":1,\"315\":2,\"316\":2}}],[\"content400\",{\"1\":{\"205\":1}}],[\"content300\",{\"1\":{\"205\":1}}],[\"content500\",{\"1\":{\"205\":1}}],[\"content1\",{\"1\":{\"185\":2}}],[\"contents\",{\"1\":{\"84\":1}}],[\"content\",{\"0\":{\"83\":1},\"1\":{\"15\":1,\"53\":1,\"57\":1,\"80\":1,\"81\":1,\"174\":1,\"185\":6,\"289\":22,\"311\":1,\"350\":1,\"365\":1,\"366\":2,\"600\":1,\"629\":1,\"631\":6,\"632\":1,\"634\":3,\"732\":1,\"742\":1}}],[\"contain\",{\"1\":{\"84\":1}}],[\"containskey\",{\"1\":{\"773\":1,\"774\":1}}],[\"containsonce\",{\"1\":{\"262\":2,\"809\":2}}],[\"contains\",{\"1\":{\"83\":1}}],[\"container\",{\"0\":{\"60\":1},\"1\":{\"60\":5}}],[\"condition表示是否追加对应的条件\",{\"1\":{\"772\":1}}],[\"conditionalonmissingbean\",{\"1\":{\"117\":1,\"493\":1}}],[\"condition\",{\"1\":{\"22\":2,\"632\":9,\"634\":10,\"641\":1}}],[\"commit\",{\"1\":{\"410\":1,\"411\":1}}],[\"committed\",{\"1\":{\"410\":1}}],[\"comments\",{\"1\":{\"84\":1}}],[\"comment\",{\"1\":{\"52\":1,\"81\":1,\"311\":10,\"354\":5,\"358\":5,\"412\":5,\"506\":9,\"756\":5}}],[\"compile即可\",{\"1\":{\"806\":1}}],[\"compile<\",{\"1\":{\"519\":3}}],[\"compilerargs>\",{\"1\":{\"455\":1}}],[\"compiler\",{\"1\":{\"17\":2,\"157\":4,\"158\":2,\"167\":2,\"176\":1,\"455\":1,\"519\":2,\"801\":1}}],[\"complextype\",{\"1\":{\"309\":3,\"310\":2,\"562\":2,\"579\":3}}],[\"complexproptype\",{\"1\":{\"309\":1,\"310\":4,\"562\":4,\"579\":1}}],[\"computeifabsent\",{\"1\":{\"308\":1,\"313\":1,\"574\":1,\"797\":1}}],[\"compareto\",{\"1\":{\"289\":2,\"742\":2}}],[\"company`\",{\"1\":{\"314\":1,\"315\":6,\"316\":2,\"724\":3,\"764\":1,\"765\":1}}],[\"companyid作为条件限制只允许操作当前企业\",{\"1\":{\"256\":1}}],[\"company\",{\"1\":{\"256\":1,\"311\":4,\"314\":6,\"316\":4,\"724\":3,\"764\":2,\"765\":1}}],[\"component将对应的valueconverter注入即可\",{\"1\":{\"303\":1,\"560\":1,\"569\":1,\"577\":1}}],[\"component注册到了springboot中\",{\"1\":{\"273\":1}}],[\"component\",{\"1\":{\"140\":1,\"190\":1,\"200\":1,\"201\":1,\"231\":1,\"260\":1,\"262\":1,\"273\":2,\"274\":1,\"284\":1,\"508\":1,\"586\":1,\"592\":1,\"781\":1,\"787\":1,\"803\":1,\"804\":1,\"809\":2}}],[\"component如果是solon那么可以查看配置或配置到所有数据源\",{\"1\":{\"116\":1,\"257\":1,\"493\":1}}],[\"com\",{\"1\":{\"15\":3,\"34\":1,\"94\":2,\"111\":8,\"114\":1,\"117\":2,\"124\":1,\"126\":1,\"140\":1,\"157\":4,\"158\":1,\"160\":1,\"167\":1,\"205\":3,\"314\":2,\"315\":1,\"316\":1,\"365\":2,\"366\":4,\"384\":1,\"388\":1,\"390\":1,\"397\":1,\"457\":1,\"462\":1,\"464\":1,\"475\":1,\"481\":2,\"483\":2,\"489\":1,\"493\":2,\"500\":1,\"517\":7,\"525\":1,\"724\":15,\"742\":1,\"764\":4,\"765\":2,\"775\":1,\"780\":2,\"781\":1,\"786\":2,\"787\":1,\"792\":2,\"801\":1,\"805\":1,\"806\":3,\"809\":1}}],[\"core提供了property的api模式\",{\"1\":{\"43\":1,\"162\":1}}],[\"core<\",{\"1\":{\"30\":1,\"31\":1,\"120\":1,\"121\":1,\"496\":1,\"497\":1,\"801\":1}}],[\"core\",{\"1\":{\"12\":10,\"117\":11,\"157\":2,\"483\":1,\"492\":10,\"493\":1,\"517\":3,\"521\":1,\"775\":2}}],[\"cglib\",{\"1\":{\"12\":6,\"117\":6,\"492\":6}}],[\"tdsorderentity\",{\"1\":{\"782\":2,\"783\":7}}],[\"t每个select都是带class的都是将起变成匿名表\",{\"1\":{\"729\":1}}],[\"t6\",{\"1\":{\"652\":1}}],[\"t5\",{\"1\":{\"652\":1}}],[\"t表示topic表\",{\"1\":{\"649\":1}}],[\"tpageresult>\",{\"1\":{\"688\":1}}],[\"tpageresult>接口\",{\"1\":{\"503\":1}}],[\"tproxy>>\",{\"1\":{\"522\":10,\"803\":1}}],[\"t>\",{\"1\":{\"522\":20,\"803\":2}}],[\"t9\",{\"1\":{\"397\":1}}],[\"tc5kw0qzxu0+uuslg==hbidjtimqweebbz5emyrhg==ji18lhiq\",{\"1\":{\"249\":1,\"252\":1}}],[\"t被括号包裹的就是匿名表\",{\"1\":{\"185\":1}}],[\"t4\",{\"1\":{\"144\":3,\"149\":3,\"557\":3,\"607\":4,\"652\":1}}],[\"t3先按逗号分割\",{\"1\":{\"530\":1}}],[\"t3\",{\"1\":{\"144\":2,\"149\":3,\"185\":3,\"186\":3,\"530\":1,\"607\":3,\"631\":5,\"642\":1,\"652\":1}}],[\"tail\",{\"1\":{\"797\":2}}],[\"taspthz7faxkglu8wir4xg==\",{\"1\":{\"220\":1}}],[\"tasklist\",{\"0\":{\"68\":1}}],[\"targetmappingproperty表示中间表的哪个字段和目标表的属性对应\",{\"1\":{\"705\":1}}],[\"targetmappingproperty\",{\"1\":{\"704\":1,\"705\":3}}],[\"targetfield\",{\"1\":{\"505\":4}}],[\"targetfields\",{\"1\":{\"505\":4}}],[\"targetclass\",{\"1\":{\"505\":10}}],[\"target\",{\"1\":{\"308\":1,\"505\":1,\"517\":1,\"524\":1,\"574\":1,\"802\":1}}],[\"target>\",{\"1\":{\"157\":1,\"801\":1}}],[\"target>8<\",{\"1\":{\"157\":1}}],[\"targetproperty\",{\"1\":{\"140\":3,\"152\":3,\"556\":1,\"641\":3,\"704\":1,\"705\":7,\"712\":2}}],[\"tags\",{\"1\":{\"82\":1}}],[\"tabs\",{\"0\":{\"61\":1,\"62\":1}}],[\"tableclass\",{\"1\":{\"803\":3,\"804\":2}}],[\"tableseparator\",{\"1\":{\"797\":2}}],[\"tablesindex\",{\"1\":{\"632\":1}}],[\"table如果后续有新的where\",{\"1\":{\"729\":1}}],[\"table2\",{\"1\":{\"642\":1}}],[\"tableindex\",{\"1\":{\"622\":2,\"632\":1}}],[\"tableindex不在上下文表中那么将会抛错\",{\"1\":{\"619\":1}}],[\"tablenameas\",{\"1\":{\"625\":3}}],[\"tablename\",{\"1\":{\"601\":1,\"625\":2,\"797\":2}}],[\"table`\",{\"1\":{\"370\":1,\"420\":1}}],[\"tablelogicdelete\",{\"1\":{\"275\":1,\"281\":1}}],[\"tableavailable\",{\"1\":{\"230\":3,\"231\":3,\"236\":6,\"254\":1,\"556\":3,\"564\":6,\"581\":1,\"585\":3,\"586\":3,\"592\":3,\"631\":3}}],[\"tablerouteengine\",{\"1\":{\"545\":1}}],[\"tablerouter\",{\"1\":{\"545\":1}}],[\"tableroutemap\",{\"1\":{\"117\":2,\"493\":2}}],[\"tableroutemanager\",{\"1\":{\"116\":3,\"191\":5,\"486\":3,\"493\":3,\"545\":1,\"798\":3}}],[\"tableroute<\",{\"1\":{\"117\":1,\"493\":1}}],[\"table1\",{\"1\":{\"39\":2,\"172\":4,\"184\":4,\"185\":3,\"237\":1,\"397\":7,\"565\":1,\"606\":1,\"608\":1,\"737\":1}}],[\"table\",{\"0\":{\"425\":1},\"1\":{\"16\":1,\"21\":1,\"84\":1,\"140\":2,\"152\":5,\"157\":2,\"195\":4,\"196\":1,\"199\":1,\"200\":1,\"201\":1,\"219\":1,\"230\":6,\"231\":5,\"236\":16,\"254\":2,\"284\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":2,\"311\":3,\"350\":1,\"354\":2,\"358\":2,\"362\":1,\"370\":1,\"396\":1,\"397\":13,\"400\":1,\"412\":2,\"420\":1,\"425\":1,\"426\":1,\"429\":1,\"430\":1,\"433\":1,\"434\":1,\"435\":1,\"482\":1,\"506\":2,\"507\":2,\"515\":1,\"556\":6,\"562\":2,\"564\":16,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"581\":2,\"585\":6,\"586\":5,\"592\":8,\"615\":6,\"631\":5,\"669\":2,\"705\":5,\"712\":3,\"729\":1,\"737\":1,\"738\":2,\"756\":2,\"796\":1,\"797\":1,\"807\":1}}],[\"than\",{\"1\":{\"632\":3,\"634\":3}}],[\"that\",{\"1\":{\"52\":1,\"54\":1}}],[\"threadlocal\",{\"1\":{\"522\":1}}],[\"threadlocal<string>\",{\"1\":{\"522\":1}}],[\"threadlocalrandom\",{\"1\":{\"385\":3,\"386\":3,\"387\":3}}],[\"threshold\",{\"1\":{\"483\":2}}],[\"through\",{\"1\":{\"117\":1,\"493\":1}}],[\"throwable\",{\"1\":{\"521\":1,\"525\":1}}],[\"throwifroutenotmatch\",{\"1\":{\"407\":1,\"469\":1}}],[\"throwifdecryptfail\",{\"1\":{\"219\":1}}],[\"throws\",{\"1\":{\"122\":1,\"206\":1,\"313\":1,\"498\":1,\"505\":1,\"508\":1,\"525\":1,\"781\":1,\"787\":1}}],[\"throw\",{\"1\":{\"115\":1,\"122\":1,\"140\":1,\"157\":1,\"227\":1,\"306\":2,\"308\":4,\"313\":3,\"411\":1,\"465\":1,\"470\":1,\"483\":2,\"490\":1,\"498\":1,\"572\":2,\"574\":4,\"592\":1,\"742\":1,\"781\":1,\"783\":1,\"787\":1,\"789\":1,\"794\":1,\"797\":1,\"812\":1}}],[\"this\",{\"1\":{\"52\":1,\"66\":1,\"80\":1,\"84\":1,\"111\":2,\"122\":1,\"223\":4,\"227\":3,\"273\":1,\"274\":2,\"306\":1,\"308\":1,\"310\":1,\"313\":4,\"498\":1,\"505\":1,\"522\":1,\"562\":1,\"572\":1,\"574\":1,\"592\":2,\"601\":24,\"623\":1,\"625\":2,\"686\":5,\"689\":2,\"690\":4,\"729\":6,\"803\":2,\"804\":3,\"805\":3,\"807\":2,\"812\":4,\"814\":1}}],[\"then\",{\"1\":{\"237\":1,\"374\":1,\"375\":1,\"376\":2,\"377\":4,\"565\":1,\"592\":4,\"593\":2,\"594\":4,\"595\":6,\"615\":6,\"616\":4,\"626\":1,\"631\":1,\"646\":1,\"649\":4,\"679\":2,\"682\":1,\"735\":1,\"758\":1,\"759\":1}}],[\"these\",{\"1\":{\"58\":1}}],[\"them\",{\"1\":{\"54\":1,\"83\":2,\"84\":1}}],[\"theme\",{\"0\":{\"59\":1,\"89\":1},\"1\":{\"7\":1,\"59\":1,\"83\":1,\"84\":1,\"89\":1}}],[\"the\",{\"1\":{\"16\":1,\"52\":4,\"53\":1,\"57\":1,\"59\":1,\"82\":2,\"83\":2,\"517\":1}}],[\"tn表示前面的表\",{\"1\":{\"39\":1,\"172\":3}}],[\"t2\",{\"1\":{\"39\":1,\"111\":4,\"145\":3,\"146\":3,\"147\":3,\"149\":3,\"172\":3,\"185\":21,\"186\":2,\"374\":5,\"375\":5,\"376\":7,\"377\":15,\"397\":1,\"530\":4,\"557\":9,\"607\":4,\"631\":6,\"642\":5,\"649\":10,\"650\":4,\"651\":4,\"652\":1,\"667\":14,\"683\":1,\"694\":9,\"696\":9,\"714\":3,\"724\":9,\"733\":6,\"735\":5,\"759\":5,\"760\":5}}],[\"t1表示blogentity表\",{\"1\":{\"649\":1}}],[\"t10来表示\",{\"1\":{\"642\":1}}],[\"t1\",{\"1\":{\"39\":6,\"41\":11,\"42\":20,\"140\":12,\"144\":10,\"145\":3,\"146\":3,\"147\":3,\"149\":3,\"172\":10,\"174\":15,\"175\":20,\"185\":25,\"186\":8,\"235\":6,\"281\":5,\"374\":2,\"375\":3,\"376\":4,\"377\":9,\"397\":7,\"530\":4,\"590\":6,\"607\":7,\"616\":9,\"622\":5,\"626\":26,\"631\":14,\"642\":17,\"645\":5,\"646\":26,\"647\":2,\"648\":2,\"649\":16,\"650\":3,\"651\":3,\"652\":2,\"667\":2,\"669\":5,\"682\":27,\"683\":19,\"694\":20,\"696\":20,\"714\":29,\"722\":2,\"733\":3,\"734\":19,\"735\":4,\"738\":2,\"739\":3,\"756\":1,\"757\":6,\"758\":13,\"759\":7,\"764\":3,\"765\":3}}],[\"tip\",{\"1\":{\"60\":1}}],[\"title字段的查询映射\",{\"1\":{\"721\":1}}],[\"title0\",{\"1\":{\"672\":2}}],[\"title3\",{\"1\":{\"634\":1}}],[\"title300\",{\"1\":{\"205\":1}}],[\"title999\",{\"1\":{\"362\":1}}],[\"title998\",{\"1\":{\"355\":1}}],[\"title200\",{\"1\":{\"365\":1,\"366\":3}}],[\"title2\",{\"1\":{\"310\":2,\"562\":2,\"634\":1}}],[\"title=topictypejsonvalue\",{\"1\":{\"309\":1,\"579\":1}}],[\"title=title123\",{\"1\":{\"306\":1,\"307\":1,\"308\":1,\"572\":1,\"573\":1,\"574\":1}}],[\"title400\",{\"1\":{\"205\":1}}],[\"title500\",{\"1\":{\"205\":1}}],[\"title123\",{\"1\":{\"306\":2,\"308\":2,\"572\":2,\"574\":2}}],[\"title1\",{\"1\":{\"185\":2,\"426\":1}}],[\"title\",{\"1\":{\"37\":2,\"38\":5,\"39\":2,\"40\":4,\"41\":3,\"42\":3,\"60\":5,\"84\":1,\"157\":1,\"170\":2,\"171\":7,\"172\":4,\"173\":2,\"174\":3,\"175\":3,\"180\":1,\"181\":1,\"182\":4,\"183\":3,\"184\":8,\"185\":10,\"186\":2,\"196\":1,\"272\":1,\"281\":2,\"284\":1,\"306\":1,\"307\":2,\"308\":1,\"309\":1,\"310\":2,\"354\":2,\"358\":2,\"362\":2,\"365\":1,\"366\":1,\"368\":2,\"369\":7,\"374\":4,\"375\":4,\"376\":7,\"377\":13,\"397\":3,\"400\":1,\"412\":2,\"426\":1,\"429\":1,\"430\":1,\"482\":1,\"562\":2,\"572\":1,\"573\":2,\"574\":1,\"579\":1,\"600\":1,\"606\":1,\"608\":1,\"614\":6,\"615\":8,\"620\":1,\"621\":1,\"622\":1,\"623\":2,\"629\":1,\"632\":1,\"634\":2,\"642\":1,\"666\":8,\"672\":16,\"732\":1,\"734\":1,\"735\":1,\"742\":1,\"756\":2,\"759\":1,\"796\":1,\"797\":1}}],[\"timeout\",{\"1\":{\"483\":2}}],[\"timestamp\",{\"1\":{\"279\":1,\"430\":1,\"613\":1}}],[\"timestampdiff\",{\"1\":{\"237\":7,\"565\":7,\"593\":2,\"594\":4,\"595\":6}}],[\"time`\",{\"1\":{\"23\":5,\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":5,\"39\":2,\"40\":3,\"41\":1,\"42\":4,\"140\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":2,\"167\":1,\"168\":4,\"169\":1,\"170\":1,\"171\":5,\"172\":2,\"173\":3,\"174\":3,\"175\":4,\"185\":5,\"186\":2,\"205\":2,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":3,\"260\":5,\"262\":1,\"265\":4,\"278\":2,\"280\":1,\"281\":6,\"285\":3,\"293\":3,\"296\":3,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"323\":2,\"324\":1,\"327\":1,\"328\":1,\"359\":2,\"360\":1,\"361\":1,\"362\":1,\"365\":2,\"366\":10,\"397\":2,\"417\":1,\"418\":2,\"419\":1,\"482\":1,\"521\":3,\"562\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":1,\"593\":4,\"594\":6,\"595\":8,\"606\":1,\"622\":1,\"623\":3,\"626\":9,\"631\":11,\"633\":9,\"634\":5,\"642\":3,\"645\":1,\"646\":3,\"647\":4,\"648\":3,\"650\":4,\"651\":4,\"666\":11,\"667\":4,\"670\":1,\"672\":3,\"673\":15,\"679\":3,\"681\":1,\"682\":3,\"733\":1,\"734\":6,\"737\":7,\"742\":4,\"744\":2,\"757\":4,\"758\":5,\"759\":1,\"760\":1,\"764\":1,\"765\":1,\"772\":1,\"774\":1,\"782\":10,\"783\":6,\"788\":10,\"789\":4,\"793\":10,\"794\":4,\"795\":1}}],[\"time\",{\"1\":{\"12\":1,\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":2,\"40\":2,\"41\":1,\"42\":1,\"52\":1,\"84\":1,\"93\":1,\"167\":1,\"168\":5,\"169\":1,\"170\":1,\"171\":2,\"173\":2,\"174\":1,\"175\":1,\"184\":1,\"233\":1,\"235\":1,\"260\":1,\"262\":1,\"279\":1,\"285\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"315\":6,\"354\":1,\"358\":1,\"368\":1,\"369\":6,\"374\":3,\"375\":3,\"376\":3,\"377\":8,\"397\":2,\"412\":1,\"418\":1,\"430\":1,\"482\":1,\"483\":1,\"521\":1,\"522\":1,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"588\":1,\"590\":1,\"613\":1,\"615\":3,\"616\":1,\"631\":2,\"633\":2,\"642\":2,\"650\":1,\"651\":1,\"667\":2,\"673\":6,\"679\":1,\"706\":2,\"707\":2,\"708\":2,\"709\":3,\"710\":4,\"712\":6,\"713\":11,\"737\":1,\"742\":1,\"744\":2,\"756\":1,\"757\":1,\"758\":2,\"759\":1,\"760\":1,\"772\":1,\"774\":1,\"783\":4,\"789\":2,\"794\":2,\"795\":1,\"796\":1,\"797\":3,\"809\":5}}],[\"template\",{\"1\":{\"804\":1}}],[\"tentity\",{\"1\":{\"601\":1}}],[\"tenum\",{\"1\":{\"306\":1,\"572\":1}}],[\"tenantid=tenantid\",{\"1\":{\"260\":1}}],[\"tenantid\",{\"1\":{\"260\":4,\"265\":1}}],[\"tencent\",{\"1\":{\"15\":1}}],[\"teacher1\",{\"1\":{\"709\":1,\"710\":1,\"713\":1}}],[\"teacher2\",{\"1\":{\"709\":1,\"710\":1,\"713\":1}}],[\"teacherid\",{\"1\":{\"705\":4}}],[\"teacher`\",{\"1\":{\"140\":1,\"694\":2,\"696\":2,\"709\":2,\"710\":2,\"713\":2}}],[\"teacher\",{\"1\":{\"133\":2,\"140\":2,\"306\":2,\"308\":1,\"572\":2,\"574\":1,\"705\":2}}],[\"tex\",{\"0\":{\"74\":1,\"840\":1}}],[\"text\",{\"1\":{\"53\":26,\"66\":1,\"83\":1}}],[\"test依赖repo\",{\"1\":{\"801\":1}}],[\"test4\",{\"1\":{\"526\":2}}],[\"testsourcedirectory>\",{\"1\":{\"519\":1}}],[\"testcontroller\",{\"1\":{\"480\":1,\"482\":1}}],[\"test123\",{\"1\":{\"417\":1}}],[\"test12398\",{\"1\":{\"417\":1}}],[\"test1239\",{\"1\":{\"417\":1}}],[\"test12364\",{\"1\":{\"417\":1}}],[\"test1\",{\"1\":{\"411\":2,\"526\":2}}],[\"testusermysql\",{\"1\":{\"417\":2}}],[\"testusermysql1\",{\"1\":{\"411\":10}}],[\"testusermysql0\",{\"1\":{\"411\":4,\"417\":2}}],[\"testinsert\",{\"1\":{\"389\":6}}],[\"test3\",{\"1\":{\"237\":4,\"526\":2,\"565\":4}}],[\"test2\",{\"1\":{\"237\":2,\"238\":2,\"526\":2,\"565\":2,\"566\":2}}],[\"test`\",{\"1\":{\"174\":1,\"350\":2,\"351\":3,\"352\":3,\"353\":1,\"363\":3,\"772\":1,\"774\":1}}],[\"testdb\",{\"1\":{\"123\":1,\"499\":1}}],[\"test<\",{\"1\":{\"120\":1,\"121\":1,\"496\":1,\"497\":1,\"504\":1}}],[\"test\",{\"1\":{\"34\":1,\"111\":8,\"124\":1,\"125\":2,\"140\":1,\"157\":1,\"167\":1,\"200\":1,\"201\":1,\"204\":1,\"266\":1,\"350\":1,\"411\":1,\"480\":1,\"481\":2,\"482\":1,\"483\":1,\"500\":1,\"501\":2,\"517\":1,\"519\":2,\"525\":1,\"526\":2,\"669\":6,\"801\":1}}],[\"typeelement>\",{\"1\":{\"805\":1}}],[\"typeutils\",{\"1\":{\"805\":2}}],[\"typename\",{\"1\":{\"507\":2,\"509\":2}}],[\"typereference\",{\"1\":{\"310\":2,\"562\":2}}],[\"typereference<t>\",{\"1\":{\"310\":1,\"562\":1}}],[\"typereference<list<topictypejsonvalue>>\",{\"1\":{\"310\":2,\"562\":2}}],[\"types\",{\"1\":{\"308\":2,\"574\":2,\"805\":1}}],[\"typecast\",{\"1\":{\"306\":2,\"308\":1,\"572\":2,\"574\":1}}],[\"typed=true\",{\"1\":{\"192\":1,\"479\":1,\"485\":1,\"486\":1}}],[\"type`\",{\"1\":{\"140\":2,\"306\":4,\"307\":2,\"308\":4,\"309\":4,\"310\":1,\"562\":1,\"572\":4,\"573\":2,\"574\":4,\"579\":4}}],[\"type=2的书籍是老师的书籍\",{\"1\":{\"140\":1}}],[\"type=2\",{\"1\":{\"140\":1}}],[\"type=1\",{\"1\":{\"140\":1}}],[\"type\",{\"1\":{\"22\":2,\"117\":1,\"157\":1,\"306\":1,\"307\":2,\"308\":3,\"309\":1,\"310\":6,\"493\":1,\"506\":2,\"507\":4,\"509\":2,\"562\":6,\"572\":1,\"573\":2,\"574\":3,\"579\":1,\"632\":10,\"634\":10,\"780\":1,\"786\":1,\"792\":1,\"802\":1}}],[\"t\",{\"1\":{\"21\":1,\"38\":15,\"39\":10,\"40\":10,\"41\":13,\"42\":25,\"55\":1,\"56\":1,\"122\":1,\"133\":1,\"140\":12,\"144\":14,\"145\":5,\"146\":5,\"147\":5,\"149\":6,\"152\":5,\"157\":1,\"168\":1,\"171\":15,\"172\":10,\"173\":10,\"174\":19,\"175\":25,\"185\":39,\"186\":19,\"196\":1,\"200\":1,\"201\":1,\"214\":28,\"219\":1,\"220\":75,\"221\":4,\"223\":12,\"224\":3,\"227\":3,\"231\":2,\"235\":15,\"237\":12,\"249\":1,\"250\":10,\"251\":9,\"252\":19,\"260\":14,\"262\":1,\"265\":16,\"272\":6,\"278\":19,\"280\":9,\"281\":40,\"284\":1,\"285\":20,\"292\":3,\"293\":4,\"295\":3,\"296\":4,\"306\":10,\"307\":8,\"308\":11,\"309\":8,\"310\":2,\"323\":11,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"334\":1,\"340\":1,\"341\":2,\"342\":2,\"353\":1,\"354\":2,\"355\":2,\"356\":1,\"358\":2,\"359\":2,\"360\":1,\"361\":1,\"362\":1,\"366\":3,\"368\":1,\"369\":7,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"396\":1,\"397\":13,\"400\":1,\"412\":2,\"417\":3,\"418\":6,\"419\":2,\"425\":1,\"426\":1,\"429\":1,\"430\":1,\"468\":4,\"482\":1,\"498\":1,\"515\":1,\"521\":19,\"522\":13,\"530\":2,\"556\":4,\"557\":19,\"562\":2,\"565\":12,\"572\":10,\"573\":8,\"574\":11,\"579\":8,\"586\":2,\"590\":15,\"592\":1,\"606\":5,\"607\":7,\"608\":4,\"614\":5,\"615\":25,\"616\":12,\"622\":8,\"626\":52,\"631\":37,\"642\":24,\"645\":11,\"646\":10,\"647\":29,\"648\":28,\"649\":16,\"650\":19,\"651\":19,\"652\":39,\"655\":4,\"656\":6,\"658\":4,\"659\":6,\"661\":2,\"662\":2,\"666\":47,\"667\":22,\"669\":16,\"679\":3,\"681\":10,\"682\":15,\"683\":13,\"694\":26,\"696\":26,\"712\":3,\"713\":39,\"714\":11,\"724\":12,\"733\":5,\"734\":21,\"735\":4,\"737\":10,\"738\":5,\"739\":7,\"744\":2,\"750\":4,\"751\":6,\"753\":4,\"754\":6,\"756\":5,\"757\":15,\"758\":22,\"759\":19,\"760\":11,\"764\":5,\"765\":5,\"791\":2,\"796\":1,\"797\":1,\"803\":1,\"804\":1,\"807\":1}}],[\"trentity>\",{\"1\":{\"641\":1}}],[\"tresult>\",{\"1\":{\"522\":2}}],[\"tresult\",{\"1\":{\"522\":2}}],[\"tr>\",{\"1\":{\"601\":1,\"743\":1}}],[\"trimend\",{\"1\":{\"289\":4}}],[\"trimstart\",{\"1\":{\"289\":4}}],[\"trim\",{\"1\":{\"289\":4}}],[\"trygetentityquery\",{\"1\":{\"522\":17}}],[\"try\",{\"1\":{\"196\":1,\"243\":1,\"250\":1,\"251\":1,\"252\":1,\"308\":2,\"313\":2,\"316\":1,\"411\":1,\"417\":1,\"525\":1,\"526\":1,\"574\":2,\"623\":1,\"742\":1,\"781\":1,\"787\":1}}],[\"transport\",{\"1\":{\"517\":1}}],[\"transpojo\",{\"1\":{\"507\":1}}],[\"transmap\",{\"1\":{\"508\":3}}],[\"transtype\",{\"1\":{\"507\":2}}],[\"trans的限制\",{\"1\":{\"505\":1}}],[\"trans依赖\",{\"1\":{\"504\":1}}],[\"trans\",{\"1\":{\"503\":2,\"504\":4,\"506\":2,\"507\":2}}],[\"trans来实现数据字典的自动获取\",{\"1\":{\"503\":1}}],[\"trans扩展\",{\"0\":{\"503\":1}}],[\"transactional内开启easy\",{\"1\":{\"411\":1}}],[\"transactional也会让事务失效\",{\"1\":{\"411\":1}}],[\"transactional注解\",{\"1\":{\"411\":1}}],[\"transactionbehavior\",{\"1\":{\"410\":1}}],[\"transactionlistener\",{\"1\":{\"410\":1}}],[\"transaction\",{\"1\":{\"122\":1,\"410\":6,\"411\":3,\"498\":1,\"522\":1}}],[\"transactionsynchronizationmanager\",{\"1\":{\"122\":2,\"498\":2}}],[\"trace\",{\"1\":{\"481\":1,\"483\":1,\"521\":1}}],[\"traceid1\",{\"1\":{\"744\":2}}],[\"traceid\",{\"1\":{\"269\":1,\"744\":1}}],[\"track设置为true那么查询不需要加astracking\",{\"1\":{\"417\":1}}],[\"track设置为了true那么以下用法查询的数据会被追踪被视为正确的用法\",{\"1\":{\"417\":1}}],[\"track未配置或者配置为false时以下不使用astracking的查询结果不会被追踪所有视为错误用法\",{\"1\":{\"417\":1}}],[\"trackmanager\",{\"0\":{\"245\":1},\"1\":{\"196\":4,\"243\":4,\"250\":4,\"251\":4,\"252\":4,\"316\":4,\"417\":4,\"545\":1}}],[\"track\",{\"1\":{\"12\":2,\"115\":1,\"157\":1,\"249\":1,\"250\":2,\"251\":1,\"252\":3,\"422\":1,\"483\":1}}],[\"true来全局将单引号默认替换为双引号\",{\"1\":{\"669\":1}}],[\"true防止在全列更新后导致未查询结果也被更新为null\",{\"1\":{\"468\":1}}],[\"true那么在track下更新那么还是有效的\",{\"1\":{\"429\":1}}],[\"true表示如果对应的属性没有添加注解或者没有指定valueconverter\",{\"1\":{\"306\":2,\"572\":2}}],[\"true表示报错\",{\"1\":{\"115\":1,\"157\":1,\"490\":1}}],[\"true\",{\"1\":{\"12\":2,\"16\":2,\"21\":1,\"34\":2,\"115\":5,\"140\":2,\"152\":5,\"157\":6,\"167\":2,\"185\":3,\"196\":1,\"200\":1,\"201\":1,\"219\":4,\"231\":1,\"254\":2,\"257\":2,\"271\":1,\"273\":1,\"274\":2,\"278\":2,\"284\":1,\"300\":1,\"306\":2,\"307\":1,\"308\":3,\"309\":1,\"310\":2,\"311\":2,\"313\":1,\"327\":1,\"328\":2,\"348\":1,\"350\":1,\"353\":1,\"354\":1,\"358\":1,\"359\":1,\"362\":3,\"396\":1,\"397\":2,\"400\":1,\"407\":3,\"411\":1,\"412\":1,\"426\":3,\"429\":1,\"430\":1,\"465\":4,\"468\":7,\"469\":2,\"470\":4,\"471\":2,\"482\":1,\"483\":3,\"490\":4,\"507\":2,\"515\":1,\"521\":3,\"523\":2,\"548\":2,\"556\":2,\"557\":1,\"562\":2,\"572\":2,\"573\":1,\"574\":3,\"579\":1,\"581\":2,\"586\":2,\"592\":1,\"618\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":2,\"631\":3,\"632\":1,\"634\":3,\"641\":1,\"669\":1,\"704\":1,\"705\":5,\"712\":3,\"732\":1,\"756\":1,\"780\":1,\"786\":1,\"792\":1,\"795\":1,\"796\":1,\"797\":1,\"798\":1,\"809\":3,\"816\":2}}],[\"token这边采用stputil\",{\"1\":{\"809\":1}}],[\"tool\",{\"1\":{\"799\":1}}],[\"tomap\",{\"0\":{\"735\":1},\"1\":{\"735\":1}}],[\"tomany\",{\"1\":{\"112\":3}}],[\"toresult\",{\"1\":{\"690\":1}}],[\"tobean数据库表20列\",{\"0\":{\"382\":1}}],[\"tobean就是resultset到bean对象的过程消耗的时间\",{\"1\":{\"379\":1}}],[\"tojsonstring\",{\"1\":{\"309\":1,\"579\":1}}],[\"toupper\",{\"1\":{\"289\":4}}],[\"tolowercase\",{\"1\":{\"530\":2}}],[\"tolowercasefirstone\",{\"1\":{\"313\":2}}],[\"tolower\",{\"1\":{\"289\":4}}],[\"tolist2\",{\"1\":{\"517\":1}}],[\"tolist获取多条数据\",{\"1\":{\"403\":1}}],[\"tolist对查询结果进行多条数据返回\",{\"1\":{\"399\":1}}],[\"tolist\",{\"1\":{\"23\":1,\"25\":2,\"34\":1,\"36\":1,\"38\":2,\"39\":2,\"41\":1,\"42\":2,\"110\":3,\"111\":2,\"112\":3,\"127\":1,\"129\":5,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":2,\"138\":1,\"140\":3,\"144\":3,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":3,\"152\":12,\"167\":1,\"169\":1,\"171\":4,\"172\":4,\"174\":2,\"175\":2,\"180\":2,\"183\":3,\"184\":4,\"185\":11,\"186\":2,\"237\":4,\"272\":1,\"278\":1,\"280\":1,\"281\":2,\"285\":1,\"315\":6,\"335\":2,\"386\":1,\"387\":1,\"397\":3,\"399\":1,\"482\":1,\"505\":2,\"508\":1,\"509\":1,\"517\":1,\"526\":5,\"557\":5,\"565\":4,\"593\":1,\"594\":1,\"595\":1,\"601\":1,\"606\":1,\"607\":1,\"608\":2,\"615\":3,\"616\":1,\"626\":3,\"631\":2,\"633\":2,\"641\":2,\"642\":2,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"666\":6,\"667\":1,\"672\":2,\"673\":2,\"679\":1,\"694\":7,\"696\":7,\"697\":1,\"703\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"712\":2,\"713\":6,\"724\":3,\"734\":1,\"735\":1,\"737\":1,\"738\":1,\"739\":1,\"757\":1,\"758\":1,\"759\":1,\"760\":1,\"764\":2,\"765\":1}}],[\"todo\",{\"1\":{\"243\":1,\"805\":1}}],[\"toset\",{\"1\":{\"744\":1}}],[\"toshardingpageresult\",{\"1\":{\"601\":1}}],[\"tosql性能附带双列tobean\",{\"0\":{\"381\":1}}],[\"tosql就是表达式到字符串sql的过程消耗的时间\",{\"1\":{\"379\":1}}],[\"tosql\",{\"1\":{\"223\":3,\"227\":1,\"292\":1,\"293\":2,\"295\":1,\"296\":2,\"350\":2,\"601\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":2,\"631\":3,\"634\":1,\"669\":5,\"714\":3}}],[\"tostreamresult\",{\"1\":{\"399\":1,\"742\":1}}],[\"tostreamresult对查询结果进行迭代器模式返回\",{\"1\":{\"399\":1}}],[\"tostring\",{\"1\":{\"196\":1,\"200\":1,\"227\":2,\"231\":1,\"269\":1,\"306\":1,\"307\":2,\"308\":1,\"309\":1,\"310\":2,\"311\":4,\"313\":3,\"322\":1,\"508\":1,\"556\":1,\"557\":1,\"562\":2,\"572\":1,\"573\":2,\"574\":1,\"579\":1,\"586\":1,\"661\":1,\"662\":1,\"705\":5,\"712\":3,\"713\":2,\"731\":1,\"732\":1}}],[\"tostr\",{\"1\":{\"185\":4,\"666\":2}}],[\"tochararray\",{\"1\":{\"530\":1}}],[\"toc\",{\"1\":{\"84\":1,\"850\":1}}],[\"total>1\",{\"1\":{\"530\":1}}],[\"total\",{\"1\":{\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":2,\"40\":2,\"41\":1,\"42\":1,\"167\":1,\"168\":5,\"169\":1,\"170\":1,\"171\":2,\"173\":2,\"174\":1,\"175\":1,\"205\":1,\"214\":4,\"220\":11,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"249\":1,\"250\":2,\"251\":1,\"252\":3,\"260\":4,\"262\":1,\"265\":5,\"278\":4,\"280\":3,\"285\":4,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"314\":1,\"315\":6,\"316\":2,\"323\":2,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"355\":2,\"356\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":1,\"365\":1,\"366\":3,\"397\":2,\"417\":3,\"418\":2,\"419\":2,\"482\":1,\"521\":1,\"530\":2,\"562\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":2,\"615\":3,\"616\":1,\"626\":3,\"631\":2,\"633\":2,\"642\":2,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"655\":1,\"656\":1,\"658\":1,\"659\":1,\"661\":1,\"662\":1,\"667\":2,\"673\":6,\"679\":1,\"681\":2,\"682\":2,\"683\":2,\"685\":2,\"686\":14,\"689\":5,\"706\":2,\"707\":2,\"708\":2,\"709\":3,\"710\":4,\"712\":6,\"713\":11,\"737\":1,\"750\":1,\"751\":1,\"753\":1,\"754\":1,\"757\":1,\"758\":1,\"759\":1,\"760\":1,\"772\":1,\"774\":1,\"782\":10,\"783\":4,\"788\":10,\"789\":4,\"793\":10,\"794\":4,\"795\":2}}],[\"toplic\",{\"1\":{\"531\":1}}],[\"top`\",{\"1\":{\"205\":1,\"281\":2,\"365\":1,\"366\":5,\"521\":1,\"623\":1,\"626\":3,\"631\":2,\"633\":2,\"634\":2,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"673\":2,\"682\":1,\"734\":2,\"742\":1}}],[\"top\",{\"1\":{\"52\":1,\"84\":1,\"600\":1,\"731\":1,\"732\":1}}],[\"topicunion\",{\"1\":{\"759\":5,\"760\":6}}],[\"topicgenerickey\",{\"1\":{\"691\":1}}],[\"topicgrouptestdto\",{\"1\":{\"648\":4}}],[\"topicpageresult\",{\"1\":{\"681\":1}}],[\"topicproxy>\",{\"1\":{\"157\":1,\"358\":1,\"400\":1,\"412\":1}}],[\"topicproxy如果您没有安装插件那么就是在编写好上述代码后进行build会在target目录生成\",{\"1\":{\"157\":1}}],[\"topicproxy\",{\"1\":{\"38\":1,\"39\":2,\"40\":2,\"42\":1,\"102\":1,\"171\":1,\"172\":4,\"173\":2,\"175\":1,\"397\":3,\"517\":2,\"615\":4,\"666\":5,\"744\":2}}],[\"topic>\",{\"1\":{\"667\":1}}],[\"topicrequest\",{\"1\":{\"652\":2}}],[\"topic表的id字段\",{\"1\":{\"642\":1}}],[\"topictestproxy\",{\"1\":{\"397\":2}}],[\"topictypetitle2complextype\",{\"1\":{\"310\":2,\"562\":2}}],[\"topictypetest2\",{\"1\":{\"308\":6,\"574\":6}}],[\"topictypetest1\",{\"1\":{\"306\":6,\"572\":6}}],[\"topictypearrayjson\",{\"1\":{\"310\":4,\"562\":4}}],[\"topictype=9\",{\"1\":{\"309\":1,\"579\":1}}],[\"topictype=classer\",{\"1\":{\"306\":1,\"308\":1,\"572\":1,\"574\":1}}],[\"topictypejsonvalue1\",{\"1\":{\"310\":8,\"562\":8}}],[\"topictypejsonvalues\",{\"1\":{\"310\":4,\"562\":4}}],[\"topictypejsonvalue\",{\"1\":{\"309\":8,\"310\":14,\"562\":14,\"579\":8}}],[\"topictypejson\",{\"1\":{\"309\":6,\"579\":6}}],[\"topictype2\",{\"1\":{\"308\":7,\"574\":7}}],[\"topictype1=teacher\",{\"1\":{\"307\":1,\"573\":1}}],[\"topictype1\",{\"1\":{\"306\":7,\"307\":1,\"309\":7,\"310\":8,\"562\":8,\"572\":7,\"573\":1,\"579\":7}}],[\"topictypeenum\",{\"1\":{\"306\":8,\"307\":1,\"308\":4,\"309\":1,\"310\":1,\"562\":1,\"572\":8,\"573\":1,\"574\":4,\"579\":1}}],[\"topictype\",{\"1\":{\"196\":1,\"306\":1,\"307\":3,\"308\":1,\"309\":1,\"310\":2,\"562\":2,\"572\":1,\"573\":3,\"574\":1,\"579\":1}}],[\"topictypevo\",{\"1\":{\"174\":1,\"306\":2,\"307\":5,\"308\":2,\"309\":2,\"572\":2,\"573\":5,\"574\":2,\"579\":2}}],[\"topicautoproxy\",{\"1\":{\"397\":2}}],[\"topicautoproxy>\",{\"1\":{\"362\":1}}],[\"topicauto\",{\"1\":{\"362\":10,\"368\":7,\"369\":13,\"374\":8,\"375\":8,\"376\":8,\"377\":16}}],[\"topic=new\",{\"1\":{\"356\":1}}],[\"topicinterceptor2\",{\"1\":{\"260\":2,\"262\":2,\"265\":4}}],[\"topicinterceptor1\",{\"1\":{\"260\":2,\"265\":2}}],[\"topicinterceptor\",{\"1\":{\"260\":34,\"262\":19,\"265\":11}}],[\"topicvalueupdateatomictrack\",{\"1\":{\"196\":6}}],[\"topicvoproxy\",{\"1\":{\"38\":1,\"41\":1,\"171\":1,\"174\":1}}],[\"topicvo\",{\"1\":{\"38\":1,\"41\":1,\"171\":2,\"174\":1}}],[\"topics\",{\"1\":{\"358\":2,\"397\":2,\"422\":1,\"647\":1,\"648\":1}}],[\"topicshardingdatasourceroute\",{\"1\":{\"191\":1}}],[\"topicshardingdatasourcetimetableroute\",{\"1\":{\"191\":1}}],[\"topicshardingdatasourcetimedatasourceroute\",{\"1\":{\"116\":1,\"191\":1,\"493\":1}}],[\"topicshardingtime\",{\"1\":{\"796\":1,\"797\":1}}],[\"topicshardingtimetableroute\",{\"1\":{\"191\":1,\"798\":2}}],[\"topicshardingtimeshardinginitializer\",{\"1\":{\"191\":1,\"491\":1,\"523\":1,\"796\":2,\"797\":2,\"798\":1}}],[\"topicshardingtableroute\",{\"1\":{\"116\":1,\"191\":1,\"493\":1}}],[\"topicshardingshardinginitializer\",{\"1\":{\"191\":1,\"491\":1,\"523\":1}}],[\"topicstars\",{\"1\":{\"111\":2}}],[\"topic`\",{\"1\":{\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":2,\"39\":2,\"40\":2,\"41\":2,\"42\":4,\"167\":1,\"168\":5,\"169\":1,\"170\":1,\"171\":2,\"172\":2,\"173\":2,\"174\":2,\"175\":4,\"185\":1,\"186\":1,\"221\":1,\"223\":3,\"235\":1,\"292\":1,\"293\":2,\"295\":1,\"296\":2,\"397\":2,\"418\":2,\"482\":1,\"517\":2,\"590\":1,\"606\":1,\"607\":1,\"615\":3,\"616\":1,\"622\":1,\"631\":1,\"642\":2,\"650\":1,\"651\":1,\"666\":6,\"672\":1,\"673\":4,\"679\":1,\"714\":3,\"733\":1,\"738\":1,\"739\":1,\"744\":2,\"757\":3,\"758\":3,\"759\":3,\"760\":1}}],[\"topic3\",{\"1\":{\"34\":1,\"35\":1,\"167\":1,\"168\":1,\"673\":1}}],[\"topic2\",{\"1\":{\"34\":1,\"35\":2,\"167\":1,\"168\":2,\"673\":1}}],[\"topic1interceptor\",{\"1\":{\"191\":1,\"491\":1,\"523\":1}}],[\"topic1\",{\"1\":{\"34\":1,\"35\":1,\"167\":1,\"168\":2}}],[\"topic\",{\"1\":{\"34\":9,\"35\":8,\"36\":1,\"37\":2,\"38\":2,\"39\":2,\"40\":1,\"41\":2,\"42\":4,\"102\":5,\"111\":1,\"157\":2,\"167\":9,\"168\":10,\"169\":1,\"170\":2,\"171\":5,\"172\":7,\"173\":1,\"174\":2,\"175\":4,\"185\":2,\"186\":1,\"196\":3,\"223\":6,\"235\":2,\"260\":4,\"262\":1,\"265\":5,\"272\":15,\"278\":4,\"280\":3,\"284\":1,\"285\":4,\"292\":3,\"293\":9,\"295\":3,\"296\":9,\"306\":3,\"307\":3,\"308\":4,\"309\":3,\"310\":3,\"354\":3,\"355\":3,\"356\":9,\"358\":11,\"359\":2,\"360\":1,\"361\":1,\"362\":2,\"368\":1,\"369\":2,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"396\":2,\"397\":1,\"400\":2,\"412\":3,\"417\":10,\"419\":10,\"422\":1,\"425\":2,\"426\":2,\"429\":2,\"430\":2,\"482\":4,\"515\":2,\"517\":4,\"526\":5,\"530\":3,\"532\":18,\"562\":3,\"572\":3,\"573\":3,\"574\":4,\"579\":3,\"590\":2,\"606\":1,\"607\":1,\"614\":2,\"615\":9,\"616\":8,\"622\":2,\"626\":5,\"631\":5,\"642\":2,\"645\":6,\"646\":4,\"647\":4,\"648\":6,\"649\":12,\"650\":1,\"651\":1,\"652\":57,\"666\":8,\"667\":8,\"672\":1,\"673\":21,\"679\":1,\"681\":4,\"682\":5,\"683\":4,\"714\":2,\"735\":5,\"738\":1,\"739\":1,\"756\":3,\"757\":4,\"758\":8,\"759\":7,\"760\":2,\"796\":1,\"797\":1}}],[\"topageresult对查询结果进行分页查询\",{\"1\":{\"399\":1}}],[\"topageresult\",{\"1\":{\"24\":1,\"40\":1,\"173\":1,\"388\":1,\"399\":1,\"601\":1,\"641\":1,\"667\":1,\"681\":1,\"682\":1,\"683\":1,\"690\":1,\"691\":1}}],[\"to\",{\"1\":{\"12\":1,\"52\":1,\"54\":3,\"55\":1,\"56\":1,\"58\":1,\"83\":1,\"84\":1,\"117\":1,\"229\":1,\"231\":1,\"232\":1,\"234\":1,\"235\":2,\"492\":1,\"517\":3,\"584\":1,\"586\":1,\"587\":1,\"589\":1,\"590\":2}}],[\"l4\",{\"1\":{\"265\":1,\"325\":2}}],[\"l3\",{\"1\":{\"220\":1,\"265\":1,\"325\":2}}],[\"l2\",{\"1\":{\"220\":3,\"234\":1,\"250\":2,\"251\":2,\"252\":2,\"260\":1,\"262\":1,\"265\":1,\"324\":2,\"325\":2,\"327\":2,\"328\":4,\"589\":1}}],[\"l1\",{\"1\":{\"214\":2,\"220\":2,\"235\":1,\"249\":1,\"260\":1,\"265\":1,\"419\":2,\"590\":1}}],[\"l\",{\"1\":{\"196\":1,\"232\":1,\"260\":1,\"278\":2,\"280\":2,\"285\":2,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"314\":1,\"323\":2,\"327\":2,\"328\":2,\"351\":3,\"352\":5,\"353\":2,\"355\":1,\"356\":2,\"362\":2,\"363\":3,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"417\":1,\"562\":1,\"572\":1,\"574\":1,\"579\":1,\"587\":1,\"661\":1,\"662\":1,\"782\":1,\"788\":1,\"793\":1}}],[\"less\",{\"1\":{\"632\":1,\"634\":1}}],[\"lenordefault\",{\"1\":{\"601\":1}}],[\"length==0\",{\"1\":{\"530\":1}}],[\"length>0\",{\"1\":{\"306\":1,\"572\":1}}],[\"length\",{\"1\":{\"289\":4,\"530\":1}}],[\"level\",{\"1\":{\"481\":2,\"483\":2}}],[\"least\",{\"1\":{\"117\":1,\"493\":1}}],[\"learner\",{\"1\":{\"55\":1}}],[\"le\",{\"1\":{\"37\":2,\"41\":1,\"132\":2,\"140\":1,\"170\":2,\"174\":1,\"389\":3,\"616\":1,\"642\":1,\"652\":2,\"666\":1,\"673\":5,\"742\":1,\"771\":1}}],[\"left1\",{\"1\":{\"631\":1}}],[\"leftenable\",{\"1\":{\"631\":1}}],[\"leftenable=true\",{\"1\":{\"631\":1}}],[\"leftpad\",{\"1\":{\"289\":4}}],[\"leftjoinmerge\",{\"1\":{\"652\":5}}],[\"leftjoin第二个lambda入参参数个数和join使用的表个数一样\",{\"1\":{\"344\":1}}],[\"leftjoin\",{\"0\":{\"645\":1},\"1\":{\"41\":1,\"42\":2,\"102\":2,\"111\":1,\"152\":1,\"174\":2,\"175\":2,\"185\":6,\"186\":3,\"235\":1,\"281\":2,\"397\":1,\"531\":1,\"590\":1,\"601\":1,\"607\":1,\"631\":4,\"642\":2,\"645\":1,\"647\":1,\"648\":1,\"649\":4,\"650\":1,\"651\":1,\"652\":1,\"667\":1,\"669\":1,\"735\":2,\"758\":1,\"759\":1}}],[\"left\",{\"1\":{\"22\":1,\"41\":1,\"42\":2,\"144\":3,\"174\":2,\"175\":2,\"185\":6,\"186\":3,\"235\":1,\"281\":2,\"397\":1,\"590\":1,\"607\":1,\"631\":4,\"632\":1,\"634\":1,\"642\":2,\"645\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"667\":2,\"669\":1,\"694\":3,\"696\":3,\"733\":1,\"758\":1,\"759\":1,\"771\":8}}],[\"latestsupported\",{\"1\":{\"805\":1}}],[\"large\",{\"1\":{\"350\":4,\"351\":3,\"352\":3,\"353\":1,\"363\":3,\"426\":1,\"429\":2,\"483\":1,\"732\":1}}],[\"large=true\",{\"1\":{\"348\":1,\"350\":1,\"429\":1,\"430\":1}}],[\"lastname\",{\"1\":{\"236\":2,\"564\":2}}],[\"last\",{\"1\":{\"183\":1,\"237\":1,\"385\":1,\"386\":1,\"387\":1,\"565\":1,\"679\":2}}],[\"last或者first支持所有数据库自动实现对应方言\",{\"1\":{\"183\":1}}],[\"layout\",{\"0\":{\"52\":1},\"1\":{\"52\":1}}],[\"lambda强类型模式\",{\"1\":{\"615\":1}}],[\"lambdashortname\",{\"1\":{\"530\":1}}],[\"lambda的编写是复杂的是最麻烦的\",{\"1\":{\"528\":1}}],[\"lambda的类访问器\",{\"1\":{\"313\":1}}],[\"lambda属性\",{\"1\":{\"458\":1}}],[\"lambda<\",{\"1\":{\"455\":2,\"460\":1}}],[\"lambda依赖\",{\"1\":{\"455\":1}}],[\"lambda依赖后写好配置即可\",{\"1\":{\"455\":1}}],[\"lambda表达式树\",{\"1\":{\"450\":1,\"642\":1}}],[\"lambda表达式树模式下\",{\"1\":{\"729\":3}}],[\"lambda表达式树模式的用户请看后面的select\",{\"1\":{\"602\":1}}],[\"lambda表达式树模式无需进行额外的构建\",{\"1\":{\"454\":1}}],[\"lambda表达式树模式\",{\"0\":{\"454\":1},\"1\":{\"450\":1,\"602\":1}}],[\"lambdaupdatewrapper\",{\"1\":{\"389\":1}}],[\"lambdaupdatewrapper<>\",{\"1\":{\"389\":1}}],[\"lambdaupdatewrapper<plusaccount>\",{\"1\":{\"389\":1}}],[\"lambda模式\",{\"1\":{\"315\":1,\"450\":1}}],[\"lambda模式的api\",{\"1\":{\"34\":1}}],[\"lambdacache\",{\"1\":{\"313\":3}}],[\"lambdaparser\",{\"1\":{\"313\":1}}],[\"lambda解析器自定义\",{\"1\":{\"313\":1}}],[\"lambda方法访问器\",{\"1\":{\"313\":1}}],[\"lambdaentityexpressionbuilder\",{\"1\":{\"260\":2,\"265\":2}}],[\"lambda\",{\"1\":{\"44\":1,\"288\":1,\"289\":1,\"450\":1,\"601\":15}}],[\"lambdaquerywrapper<>\",{\"1\":{\"388\":1}}],[\"lambdaquerywrapper<plusaccount>\",{\"1\":{\"388\":1}}],[\"lambdaquery\",{\"0\":{\"43\":1}}],[\"lang\",{\"1\":{\"12\":1,\"117\":2,\"492\":1,\"493\":1}}],[\"lt\",{\"1\":{\"25\":1,\"147\":1,\"152\":1,\"652\":2,\"734\":2,\"771\":1}}],[\"line\",{\"1\":{\"83\":1}}],[\"linkedhashmap<string\",{\"1\":{\"797\":1}}],[\"linkedhashmap<>\",{\"1\":{\"370\":1,\"797\":1}}],[\"links\",{\"1\":{\"83\":2}}],[\"link\",{\"1\":{\"52\":2,\"60\":1,\"111\":8}}],[\"list4\",{\"1\":{\"666\":1}}],[\"list3\",{\"1\":{\"666\":1}}],[\"list2\",{\"1\":{\"281\":1,\"666\":2,\"713\":1}}],[\"listen\",{\"1\":{\"272\":6}}],[\"listen行为\",{\"1\":{\"272\":4}}],[\"list1w\",{\"0\":{\"387\":1}}],[\"list1\",{\"1\":{\"185\":4,\"186\":1,\"281\":1,\"641\":1,\"650\":1,\"651\":1,\"713\":5}}],[\"listx=\",{\"1\":{\"138\":1}}],[\"list\",{\"0\":{\"386\":1},\"1\":{\"34\":1,\"36\":1,\"38\":2,\"39\":2,\"41\":1,\"42\":2,\"129\":5,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"152\":7,\"167\":1,\"169\":1,\"171\":4,\"172\":4,\"174\":1,\"175\":2,\"183\":3,\"184\":4,\"185\":6,\"186\":1,\"237\":4,\"272\":1,\"397\":1,\"508\":2,\"509\":2,\"517\":1,\"557\":5,\"565\":4,\"593\":1,\"594\":1,\"595\":1,\"606\":1,\"607\":1,\"608\":2,\"615\":3,\"616\":1,\"635\":1,\"641\":1,\"642\":2,\"666\":2,\"667\":1,\"672\":2,\"673\":1,\"679\":1,\"689\":5,\"703\":1,\"712\":1,\"724\":3,\"734\":1,\"735\":1,\"737\":1,\"738\":1,\"739\":1,\"757\":1,\"758\":1,\"759\":1,\"760\":1,\"764\":2,\"765\":1}}],[\"list<area>\",{\"1\":{\"712\":1}}],[\"list<blogpartitionentityvo>\",{\"1\":{\"734\":1}}],[\"list<bloggroupidandname>\",{\"1\":{\"642\":2}}],[\"list<blogentityvo1>\",{\"1\":{\"185\":4}}],[\"list<blogentity>\",{\"1\":{\"180\":2,\"183\":3,\"185\":1,\"281\":2,\"608\":1,\"626\":3,\"631\":2,\"633\":2,\"646\":1,\"647\":1,\"648\":1,\"655\":1,\"656\":1,\"672\":1,\"750\":1,\"751\":1}}],[\"list<company>\",{\"1\":{\"764\":2,\"765\":1}}],[\"list<city>\",{\"1\":{\"641\":1,\"712\":1}}],[\"list<certificate>\",{\"1\":{\"593\":1,\"594\":1,\"595\":1}}],[\"list<province>\",{\"1\":{\"641\":1,\"712\":2}}],[\"list<integer>\",{\"1\":{\"629\":2,\"632\":2,\"634\":2}}],[\"list<internalmenus>\",{\"1\":{\"111\":1}}],[\"list<internalroles>\",{\"1\":{\"111\":2}}],[\"list<t>\",{\"1\":{\"685\":2,\"686\":8,\"689\":1}}],[\"list<tentity>\",{\"1\":{\"601\":1,\"689\":3}}],[\"list<topicunion>\",{\"1\":{\"759\":1,\"760\":1}}],[\"list<topictypejsonvalue>\",{\"1\":{\"310\":2,\"562\":2}}],[\"list<topictypevo>\",{\"1\":{\"174\":1}}],[\"list<topic>\",{\"1\":{\"34\":1,\"36\":1,\"38\":2,\"39\":1,\"41\":1,\"42\":1,\"167\":1,\"169\":1,\"171\":4,\"172\":3,\"174\":1,\"175\":1,\"272\":1,\"358\":1,\"397\":3,\"526\":1,\"615\":3,\"616\":1,\"666\":5,\"672\":1,\"673\":2,\"679\":1,\"757\":1,\"758\":1}}],[\"list<helpcode>>\",{\"1\":{\"508\":2}}],[\"list<helpcode>\",{\"1\":{\"508\":1}}],[\"list<\",{\"1\":{\"505\":4}}],[\"list<valuecompany>\",{\"1\":{\"315\":6}}],[\"list<long>\",{\"1\":{\"686\":2}}],[\"list<logicdeltopiccustom>\",{\"1\":{\"285\":1}}],[\"list<logicdeltopic>\",{\"1\":{\"278\":1,\"280\":1}}],[\"list<list<sqlparameter>>\",{\"1\":{\"269\":1,\"270\":1,\"271\":1,\"273\":1,\"274\":2}}],[\"list<userlabels>\",{\"1\":{\"554\":1}}],[\"list<userextra>\",{\"1\":{\"237\":3,\"565\":3}}],[\"list<userbook>\",{\"1\":{\"152\":1}}],[\"list<map<string\",{\"1\":{\"185\":1,\"650\":1,\"651\":1,\"658\":1,\"659\":1,\"735\":1,\"753\":1,\"754\":1}}],[\"list<draft2<double\",{\"1\":{\"666\":1}}],[\"list<draft2<string\",{\"1\":{\"144\":1,\"184\":4,\"606\":1,\"607\":1,\"667\":1,\"724\":3,\"738\":1}}],[\"list<draft4<string\",{\"1\":{\"185\":2}}],[\"list<draft3<integer\",{\"1\":{\"42\":1,\"175\":1,\"237\":1,\"565\":1,\"737\":1}}],[\"list<draft3<string\",{\"1\":{\"39\":1,\"144\":1,\"172\":1,\"185\":2,\"608\":1,\"739\":1}}],[\"list<relationteacher>\",{\"1\":{\"140\":1}}],[\"list<relationuser>\",{\"1\":{\"140\":2}}],[\"list<relationbook>\",{\"1\":{\"140\":3}}],[\"list<sortconfig>\",{\"1\":{\"621\":1,\"622\":1}}],[\"list<schoolteachervo>\",{\"1\":{\"713\":1}}],[\"list<schoolteacher>\",{\"1\":{\"705\":1}}],[\"list<schoolstudentvo>\",{\"1\":{\"713\":4}}],[\"list<schoolstudent>\",{\"1\":{\"134\":1,\"556\":1,\"694\":1,\"696\":1,\"705\":1,\"706\":1,\"708\":1,\"713\":1}}],[\"list<schoolclassaggregatepropvo>\",{\"1\":{\"557\":2}}],[\"list<schoolclassaggregateprop>\",{\"1\":{\"557\":3}}],[\"list<schoolclassvo>\",{\"1\":{\"138\":1,\"713\":2}}],[\"list<schoolclass>\",{\"1\":{\"129\":5,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"135\":1,\"136\":1,\"694\":6,\"696\":6,\"697\":1,\"703\":1,\"705\":1,\"707\":1,\"709\":1,\"710\":1}}],[\"list<schoolcourse>\",{\"1\":{\"137\":2}}],[\"list<sysmenu>\",{\"1\":{\"112\":2,\"149\":3}}],[\"list<sysuserflatdto>\",{\"1\":{\"112\":1}}],[\"list<sysuserdto>\",{\"1\":{\"110\":3}}],[\"list<sysuser>\",{\"1\":{\"23\":1,\"25\":2,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"152\":7,\"185\":1,\"186\":2,\"509\":1}}],[\"list<string>\",{\"1\":{\"112\":3,\"634\":1,\"673\":1,\"782\":1,\"788\":1,\"793\":1}}],[\"list<structsysuserdto>\",{\"1\":{\"111\":2}}],[\"limitsql\",{\"1\":{\"714\":2}}],[\"limit等一系列处理\",{\"1\":{\"697\":1}}],[\"limit表示获取多少条\",{\"1\":{\"601\":1}}],[\"limit是替换前面的操作多次limit获取最后一次\",{\"1\":{\"342\":1}}],[\"limit\",{\"1\":{\"23\":1,\"34\":1,\"35\":2,\"40\":1,\"100\":1,\"107\":1,\"136\":1,\"140\":3,\"144\":1,\"145\":2,\"146\":1,\"147\":1,\"148\":1,\"149\":4,\"167\":1,\"168\":3,\"173\":1,\"214\":3,\"220\":8,\"233\":1,\"235\":1,\"250\":1,\"251\":1,\"252\":2,\"260\":1,\"265\":1,\"278\":1,\"285\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"323\":1,\"385\":1,\"386\":3,\"387\":3,\"418\":1,\"483\":1,\"521\":1,\"532\":2,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"588\":1,\"590\":1,\"601\":1,\"607\":2,\"631\":2,\"645\":1,\"652\":1,\"667\":1,\"673\":4,\"681\":1,\"682\":1,\"683\":1,\"694\":5,\"696\":5,\"697\":1,\"703\":1,\"714\":2,\"764\":1,\"772\":1,\"774\":1,\"783\":4,\"789\":2,\"794\":2,\"795\":1}}],[\"like`\",{\"1\":{\"214\":18,\"220\":48}}],[\"likematchright\",{\"1\":{\"146\":1,\"220\":1,\"652\":2,\"771\":1}}],[\"likematchleft\",{\"1\":{\"129\":5,\"131\":1,\"133\":2,\"185\":2,\"220\":1,\"652\":2,\"694\":1,\"696\":1,\"724\":2,\"771\":1}}],[\"like\",{\"1\":{\"23\":8,\"25\":7,\"34\":2,\"37\":3,\"38\":4,\"39\":4,\"40\":3,\"41\":2,\"110\":3,\"111\":2,\"112\":3,\"130\":1,\"137\":2,\"138\":1,\"140\":6,\"146\":1,\"152\":11,\"167\":2,\"170\":3,\"171\":6,\"172\":6,\"173\":3,\"174\":2,\"180\":1,\"181\":1,\"182\":4,\"183\":3,\"184\":4,\"185\":18,\"186\":4,\"214\":2,\"220\":10,\"237\":8,\"281\":4,\"389\":6,\"397\":3,\"565\":8,\"606\":2,\"615\":6,\"616\":2,\"631\":6,\"632\":1,\"633\":2,\"634\":4,\"649\":4,\"652\":2,\"666\":1,\"669\":6,\"673\":18,\"694\":17,\"696\":17,\"724\":8,\"771\":7,\"772\":1,\"773\":1,\"774\":1}}],[\"license=valuecompanylicense\",{\"1\":{\"315\":5}}],[\"license1\",{\"1\":{\"314\":2,\"316\":1}}],[\"licensecontent=it编程\",{\"1\":{\"315\":1}}],[\"licensecontent\",{\"1\":{\"311\":2}}],[\"licenseimage=www\",{\"1\":{\"315\":1}}],[\"licenseimage\",{\"1\":{\"311\":2}}],[\"licensedeadline=null\",{\"1\":{\"315\":2}}],[\"licensedeadline=2023\",{\"1\":{\"315\":3}}],[\"licensedeadline\",{\"1\":{\"311\":2}}],[\"licenseno=license1\",{\"1\":{\"315\":5}}],[\"licenseno\",{\"1\":{\"311\":2,\"315\":1}}],[\"license\",{\"0\":{\"88\":1},\"1\":{\"6\":1,\"88\":1,\"93\":1,\"311\":5,\"315\":2}}],[\"lower\",{\"1\":{\"468\":1,\"483\":1}}],[\"localtime\",{\"1\":{\"613\":1}}],[\"locale\",{\"1\":{\"612\":1,\"748\":1,\"755\":1}}],[\"localhost\",{\"1\":{\"481\":1}}],[\"localdate\",{\"1\":{\"279\":1,\"613\":1}}],[\"localdatetime>>\",{\"1\":{\"185\":3}}],[\"localdatetime\",{\"1\":{\"21\":1,\"22\":2,\"23\":6,\"24\":2,\"25\":2,\"37\":3,\"38\":4,\"39\":4,\"40\":3,\"41\":2,\"42\":1,\"110\":2,\"111\":3,\"112\":1,\"140\":3,\"147\":4,\"152\":5,\"157\":1,\"170\":3,\"171\":6,\"172\":6,\"173\":3,\"174\":2,\"175\":1,\"184\":1,\"196\":1,\"205\":6,\"231\":1,\"232\":2,\"234\":1,\"238\":1,\"249\":2,\"252\":1,\"260\":6,\"262\":5,\"265\":2,\"279\":1,\"284\":6,\"285\":2,\"306\":3,\"307\":2,\"308\":3,\"309\":3,\"310\":4,\"311\":2,\"314\":2,\"316\":1,\"323\":2,\"324\":1,\"327\":2,\"328\":2,\"354\":1,\"358\":2,\"359\":1,\"360\":10,\"361\":2,\"362\":3,\"365\":2,\"366\":6,\"368\":1,\"369\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"396\":1,\"400\":1,\"412\":1,\"417\":1,\"418\":1,\"419\":1,\"426\":1,\"429\":1,\"430\":1,\"482\":1,\"485\":4,\"562\":4,\"566\":1,\"572\":3,\"573\":2,\"574\":3,\"579\":3,\"586\":1,\"587\":2,\"589\":1,\"592\":1,\"600\":1,\"606\":1,\"608\":1,\"613\":1,\"629\":2,\"631\":8,\"632\":2,\"633\":6,\"634\":4,\"635\":1,\"642\":6,\"649\":4,\"666\":1,\"667\":2,\"673\":10,\"732\":2,\"742\":2,\"756\":1,\"758\":2,\"759\":2,\"760\":2,\"782\":11,\"783\":4,\"788\":11,\"789\":4,\"793\":11,\"794\":4,\"795\":1,\"796\":5,\"797\":8,\"798\":2,\"809\":9}}],[\"local\",{\"1\":{\"279\":2,\"430\":2}}],[\"lookup\",{\"1\":{\"157\":1,\"460\":1}}],[\"logger\",{\"1\":{\"481\":1,\"483\":1,\"517\":1}}],[\"logging\",{\"1\":{\"468\":1,\"481\":1,\"483\":1,\"517\":3,\"521\":1}}],[\"logclass\",{\"1\":{\"468\":1}}],[\"log\",{\"1\":{\"465\":1,\"470\":1,\"483\":1,\"505\":2,\"521\":2}}],[\"logic\",{\"1\":{\"278\":4,\"280\":3,\"284\":1,\"285\":4}}],[\"logicdeltopiccustom\",{\"1\":{\"284\":1,\"285\":4}}],[\"logicdeltopic\",{\"1\":{\"278\":6,\"280\":6,\"285\":4}}],[\"logicdeltopics\",{\"1\":{\"278\":1,\"280\":1,\"285\":1}}],[\"logicdeletebuilder\",{\"1\":{\"284\":2,\"485\":2,\"809\":3}}],[\"logicdelete可以让整个实体以该字段作为逻辑删除字段\",{\"1\":{\"277\":1}}],[\"logicdeletestrategyenum\",{\"1\":{\"284\":1,\"429\":1,\"430\":1,\"809\":1}}],[\"logicdeletestrategymap\",{\"1\":{\"117\":2,\"493\":2}}],[\"logicdeletestrategy>\",{\"1\":{\"117\":1,\"493\":1}}],[\"logicdelete\",{\"0\":{\"277\":1,\"430\":1},\"1\":{\"100\":1,\"107\":1,\"284\":1,\"429\":1,\"430\":1,\"809\":1}}],[\"logslowsqllistener\",{\"1\":{\"271\":2,\"273\":3,\"274\":6}}],[\"logy\",{\"1\":{\"74\":2,\"840\":2}}],[\"logfactory\",{\"1\":{\"34\":1,\"167\":1,\"397\":1,\"517\":2}}],[\"longquery\",{\"1\":{\"738\":2}}],[\"long类型的属性\",{\"1\":{\"279\":1}}],[\"longnotvalueupdateatomictrack\",{\"1\":{\"195\":1}}],[\"long>>\",{\"1\":{\"144\":1,\"184\":3,\"606\":1,\"724\":2,\"739\":1}}],[\"long\",{\"1\":{\"37\":1,\"170\":1,\"182\":1,\"196\":1,\"214\":1,\"220\":3,\"232\":1,\"234\":1,\"235\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"260\":3,\"262\":1,\"265\":4,\"269\":1,\"270\":1,\"271\":1,\"273\":1,\"274\":2,\"278\":2,\"279\":2,\"280\":2,\"285\":2,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"314\":1,\"323\":2,\"324\":3,\"325\":5,\"327\":5,\"328\":8,\"351\":3,\"352\":5,\"353\":2,\"355\":1,\"356\":2,\"362\":1,\"363\":3,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"417\":1,\"419\":2,\"430\":1,\"556\":3,\"557\":1,\"562\":1,\"572\":1,\"574\":1,\"579\":1,\"587\":1,\"589\":1,\"590\":1,\"601\":5,\"613\":1,\"661\":1,\"662\":1,\"666\":1,\"685\":6,\"686\":12,\"689\":4,\"690\":8,\"694\":1,\"696\":1,\"714\":1,\"738\":1,\"782\":1,\"788\":1,\"793\":1,\"809\":1}}],[\"lombok\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1,\"395\":1}}],[\"loadadd\",{\"1\":{\"481\":1}}],[\"loadingcache\",{\"1\":{\"12\":4,\"117\":4,\"492\":4}}],[\"load\",{\"1\":{\"12\":1,\"117\":1,\"492\":1,\"517\":1}}],[\"❗️❗️❗️\",{\"0\":{\"11\":1,\"334\":1,\"467\":1}}],[\"何谓对象关系查询\",{\"1\":{\"10\":1}}],[\"何谓orm对象关系映射\",{\"1\":{\"10\":1}}],[\"🔥联级筛选include\",{\"0\":{\"695\":1}}],[\"🔥联级额外筛选extra\",{\"0\":{\"692\":1}}],[\"🔥🔥🔥\",{\"0\":{\"108\":1}}],[\"🔥\",{\"0\":{\"18\":1}}],[\"🔥对象关系查询\",{\"0\":{\"10\":1}}],[\"🔔交流qq群\",{\"0\":{\"392\":1,\"536\":1}}],[\"🔔qq\",{\"0\":{\"90\":1}}],[\"🔔\",{\"0\":{\"1\":1,\"2\":1}}],[\"efcore\",{\"1\":{\"596\":1}}],[\"efcore匹敌\",{\"1\":{\"450\":1}}],[\"err\",{\"1\":{\"521\":3}}],[\"errormessage\",{\"1\":{\"814\":12}}],[\"error\",{\"1\":{\"117\":1,\"313\":1,\"483\":1,\"493\":1,\"505\":2,\"521\":2}}],[\"ekgy\",{\"1\":{\"249\":1,\"252\":1}}],[\"ecb\",{\"1\":{\"216\":3}}],[\"echarts\",{\"0\":{\"71\":1,\"837\":1}}],[\"elementutils\",{\"1\":{\"805\":2}}],[\"elements\",{\"1\":{\"805\":1}}],[\"elementtype\",{\"1\":{\"308\":2,\"505\":2,\"524\":1,\"574\":2,\"802\":1}}],[\"elq\",{\"1\":{\"642\":1}}],[\"elseend\",{\"1\":{\"614\":4,\"615\":3,\"616\":1}}],[\"else\",{\"1\":{\"122\":1,\"140\":1,\"237\":1,\"313\":2,\"498\":1,\"565\":1,\"592\":2,\"593\":1,\"594\":2,\"595\":3,\"615\":3,\"616\":1,\"679\":2,\"809\":1}}],[\"elapsed>=3\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"elapsed\",{\"1\":{\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":2,\"40\":2,\"41\":1,\"42\":1,\"167\":1,\"168\":5,\"169\":1,\"170\":1,\"171\":2,\"173\":2,\"174\":1,\"175\":1,\"233\":1,\"235\":1,\"271\":1,\"273\":1,\"274\":2,\"285\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"315\":6,\"397\":2,\"418\":1,\"482\":1,\"521\":1,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"588\":1,\"590\":1,\"615\":3,\"616\":1,\"631\":2,\"633\":2,\"642\":2,\"650\":1,\"651\":1,\"667\":2,\"673\":6,\"679\":1,\"706\":2,\"707\":2,\"708\":2,\"709\":3,\"710\":4,\"712\":6,\"713\":11,\"737\":1,\"742\":1,\"744\":2,\"757\":1,\"758\":1,\"759\":1,\"760\":1,\"772\":1,\"774\":1,\"783\":4,\"789\":2,\"794\":2,\"795\":1}}],[\"embedded\",{\"1\":{\"317\":1}}],[\"embeddable值类型值对象\",{\"1\":{\"317\":1}}],[\"embeddable\",{\"1\":{\"100\":1,\"107\":1}}],[\"emptyjdbcexecutorlistener\",{\"1\":{\"545\":1}}],[\"empty\",{\"1\":{\"308\":1,\"574\":1}}],[\"emptylist\",{\"1\":{\"269\":1,\"270\":1}}],[\"emptymap\",{\"1\":{\"117\":10,\"493\":10}}],[\"e\",{\"1\":{\"83\":2,\"274\":6,\"308\":4,\"313\":4,\"487\":2,\"521\":2,\"549\":2,\"574\":4,\"742\":2,\"781\":2,\"787\":2}}],[\"each\",{\"1\":{\"56\":1}}],[\"easily\",{\"1\":{\"54\":1}}],[\"easydynamicorderbyconfiguration\",{\"1\":{\"601\":1}}],[\"easydatasourceconnectionfactory\",{\"1\":{\"122\":3,\"498\":3,\"545\":1}}],[\"easydatasource\",{\"1\":{\"122\":3,\"498\":3}}],[\"easyincludeprocessorfactory\",{\"1\":{\"545\":1}}],[\"easyjdbctypehandlermanager\",{\"1\":{\"545\":1}}],[\"easyassertmessage内容\",{\"1\":{\"813\":1}}],[\"easyassertmessage\",{\"1\":{\"532\":1,\"813\":1}}],[\"easyassertmessage注解实现默认错误消息\",{\"1\":{\"532\":1}}],[\"easyalias但是全局配置了o\",{\"1\":{\"530\":1}}],[\"easyalias对应的那个还是用\",{\"1\":{\"530\":1}}],[\"easyalias的对象添加lambda入参别名\",{\"1\":{\"530\":1}}],[\"easyalias那么可以在tools\",{\"1\":{\"529\":1}}],[\"easyalias\",{\"0\":{\"529\":1},\"1\":{\"152\":1,\"530\":1,\"532\":1}}],[\"easymultientityquery\",{\"1\":{\"522\":2,\"523\":2,\"525\":4,\"526\":9}}],[\"easymaputil\",{\"1\":{\"308\":1,\"574\":1,\"797\":1}}],[\"easytransrunner\",{\"1\":{\"508\":1}}],[\"easytranseasyqueryconfig\",{\"1\":{\"505\":1}}],[\"easytimejobmanager\",{\"1\":{\"487\":1,\"545\":1}}],[\"easyktquery\",{\"1\":{\"465\":2,\"466\":2,\"533\":1}}],[\"easylambdaqueryclient\",{\"1\":{\"460\":3}}],[\"easylambdautil\",{\"1\":{\"227\":2,\"313\":1}}],[\"easyversionstrategy\",{\"0\":{\"322\":1}}],[\"easyobjectutil\",{\"1\":{\"306\":2,\"308\":1,\"572\":2,\"574\":1}}],[\"easycollectionutil\",{\"1\":{\"641\":2}}],[\"easyconnection==null\",{\"1\":{\"122\":1,\"498\":1}}],[\"easyconnection\",{\"1\":{\"122\":4,\"498\":4}}],[\"easyconnectionfactory\",{\"1\":{\"122\":3,\"498\":3,\"545\":1}}],[\"easyclassutil\",{\"1\":{\"308\":3,\"574\":3}}],[\"easyclient\",{\"1\":{\"292\":1,\"295\":1}}],[\"easybehaviorenum\",{\"1\":{\"272\":6}}],[\"easyshardingpageresult<t>\",{\"1\":{\"686\":2}}],[\"easysqlutil\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"easystringutil\",{\"1\":{\"25\":7,\"227\":1,\"309\":1,\"313\":2,\"525\":1,\"579\":1,\"620\":1,\"631\":1}}],[\"easyprepareparser\",{\"1\":{\"545\":1}}],[\"easyproxyuery\",{\"1\":{\"460\":1,\"466\":1}}],[\"easyproxyquery\",{\"1\":{\"34\":2,\"102\":2,\"103\":1,\"104\":2,\"105\":2,\"115\":2,\"157\":3,\"166\":1,\"167\":2,\"397\":5,\"460\":1,\"465\":2,\"466\":1,\"490\":2,\"517\":2,\"615\":1,\"744\":2}}],[\"easypageresultprovider\",{\"1\":{\"545\":1,\"685\":1,\"686\":1}}],[\"easypageresult<tentity>\",{\"1\":{\"690\":1}}],[\"easypageresult<t>\",{\"1\":{\"686\":4}}],[\"easypageresult<topic>\",{\"1\":{\"40\":1,\"173\":1,\"667\":1,\"681\":1}}],[\"easypageresult<blogentity>\",{\"1\":{\"682\":1,\"683\":1}}],[\"easypageresult<province>\",{\"1\":{\"641\":1}}],[\"easypageresult<sysuser>\",{\"1\":{\"24\":1}}],[\"easywherecondition也可以自己实现\",{\"1\":{\"636\":1}}],[\"easywherecondition的tableindex或者tablesindex\",{\"1\":{\"635\":1}}],[\"easywherecondition\",{\"0\":{\"444\":1},\"1\":{\"22\":8,\"632\":21,\"634\":25}}],[\"easyentityquery的直接select\",{\"1\":{\"731\":1}}],[\"easyentityquery2\",{\"1\":{\"523\":2}}],[\"easyentityquery>\",{\"1\":{\"522\":2,\"523\":1}}],[\"easyentityquery接口为entityquery暴露给用户的crudapi接口\",{\"1\":{\"161\":1}}],[\"easyentityquery对象因为泛型感知已经知晓proxy所以可以直接通过class来获取查询\",{\"1\":{\"102\":1}}],[\"easyentityquery\",{\"1\":{\"16\":2,\"23\":1,\"24\":1,\"25\":2,\"34\":8,\"35\":4,\"36\":1,\"37\":2,\"38\":2,\"39\":2,\"40\":1,\"41\":1,\"42\":2,\"102\":2,\"103\":1,\"104\":2,\"105\":2,\"110\":3,\"111\":2,\"112\":3,\"115\":2,\"123\":2,\"125\":2,\"129\":5,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":2,\"138\":1,\"140\":3,\"144\":3,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":3,\"152\":15,\"157\":3,\"166\":1,\"167\":8,\"168\":5,\"169\":1,\"170\":2,\"171\":4,\"172\":4,\"173\":1,\"174\":2,\"175\":2,\"179\":6,\"180\":2,\"181\":1,\"182\":6,\"183\":3,\"184\":4,\"185\":11,\"186\":2,\"237\":4,\"238\":1,\"272\":6,\"281\":2,\"335\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"366\":1,\"369\":2,\"460\":2,\"490\":2,\"499\":2,\"501\":2,\"509\":3,\"522\":14,\"523\":5,\"532\":8,\"533\":1,\"557\":5,\"565\":4,\"566\":1,\"593\":1,\"594\":1,\"595\":1,\"606\":1,\"607\":1,\"608\":2,\"631\":1,\"642\":1,\"650\":1,\"651\":1,\"666\":7,\"667\":3,\"672\":2,\"679\":1,\"694\":7,\"696\":7,\"697\":1,\"703\":1,\"724\":3,\"734\":1,\"735\":1,\"737\":1,\"738\":2,\"739\":2,\"764\":2,\"765\":1,\"798\":1,\"803\":7,\"804\":7}}],[\"easy\",{\"0\":{\"99\":1,\"106\":1,\"482\":1,\"503\":1},\"1\":{\"4\":1,\"5\":1,\"8\":1,\"12\":2,\"17\":2,\"18\":1,\"30\":8,\"31\":6,\"34\":1,\"44\":4,\"86\":1,\"87\":1,\"94\":3,\"98\":1,\"111\":12,\"114\":1,\"115\":4,\"117\":2,\"120\":4,\"121\":8,\"124\":1,\"137\":1,\"140\":1,\"151\":1,\"157\":8,\"158\":3,\"163\":6,\"167\":3,\"176\":2,\"188\":1,\"193\":1,\"197\":1,\"203\":1,\"204\":1,\"205\":3,\"208\":1,\"209\":1,\"210\":1,\"217\":1,\"220\":1,\"226\":1,\"228\":1,\"241\":1,\"253\":1,\"256\":1,\"275\":1,\"282\":1,\"284\":1,\"285\":2,\"301\":1,\"311\":1,\"318\":1,\"333\":1,\"365\":2,\"366\":4,\"370\":1,\"379\":1,\"380\":2,\"384\":1,\"385\":1,\"386\":1,\"387\":1,\"388\":2,\"389\":1,\"390\":1,\"391\":1,\"395\":8,\"409\":1,\"420\":1,\"450\":1,\"453\":7,\"455\":4,\"457\":1,\"460\":11,\"462\":1,\"463\":3,\"464\":1,\"465\":4,\"466\":9,\"468\":2,\"470\":1,\"473\":1,\"475\":1,\"478\":1,\"481\":1,\"483\":2,\"489\":1,\"490\":4,\"493\":2,\"496\":4,\"497\":8,\"500\":1,\"503\":2,\"504\":2,\"506\":2,\"511\":1,\"513\":3,\"514\":1,\"517\":6,\"519\":4,\"520\":1,\"521\":1,\"533\":1,\"535\":1,\"544\":1,\"558\":1,\"567\":1,\"575\":1,\"580\":1,\"583\":1,\"596\":1,\"609\":1,\"614\":1,\"617\":1,\"624\":1,\"636\":1,\"640\":1,\"642\":1,\"643\":1,\"653\":1,\"662\":1,\"674\":1,\"680\":1,\"684\":1,\"692\":1,\"695\":1,\"697\":1,\"715\":1,\"722\":1,\"727\":1,\"740\":1,\"742\":1,\"748\":1,\"756\":1,\"761\":1,\"770\":1,\"775\":1,\"778\":2,\"780\":2,\"781\":1,\"784\":2,\"786\":2,\"787\":1,\"790\":2,\"792\":2,\"801\":4,\"804\":1,\"809\":2}}],[\"easyqueryfirstnotnullexception\",{\"1\":{\"813\":2}}],[\"easyqueryorderbyinvalidoperationexception\",{\"1\":{\"623\":1}}],[\"easyqueryoption\",{\"1\":{\"122\":7,\"487\":1,\"498\":7,\"797\":3}}],[\"easyquerytransdiver\",{\"1\":{\"505\":6}}],[\"easyquerytrack那么默认就会调用astracking\",{\"1\":{\"468\":1}}],[\"easyquerytrack注解即可开启\",{\"1\":{\"417\":1}}],[\"easyquerytrack注解\",{\"1\":{\"252\":3}}],[\"easyquerytrack注解的本质就是trackmanager\",{\"1\":{\"243\":1}}],[\"easyquerytrack注解还是不会启用所以建议开启这个如果需要只需要额外添加注解即可\",{\"1\":{\"115\":1,\"157\":1}}],[\"easyquerytrack\",{\"0\":{\"445\":1},\"1\":{\"196\":1,\"242\":1,\"417\":2,\"783\":2,\"789\":2,\"794\":2}}],[\"easyquery1\",{\"1\":{\"493\":1}}],[\"easyqueryaccount\",{\"1\":{\"385\":3,\"386\":3,\"387\":3,\"388\":2,\"389\":7}}],[\"easyquery提供了单条修改\",{\"1\":{\"412\":1}}],[\"easyquery提供了单条插入和批量插入数据的方法\",{\"1\":{\"358\":1}}],[\"easyquery提供了内置物理删除和逻辑删除\",{\"1\":{\"354\":1}}],[\"easyquerybuilderconfiguration\",{\"1\":{\"274\":2,\"487\":1,\"549\":1}}],[\"easyquerybootstrapper\",{\"1\":{\"34\":1,\"123\":1,\"167\":1,\"271\":1,\"397\":1,\"460\":1,\"466\":1,\"471\":1,\"491\":1,\"493\":1,\"499\":1,\"517\":2,\"523\":1,\"548\":1,\"798\":1,\"816\":1}}],[\"easyqueryproperties\",{\"1\":{\"123\":24,\"491\":22,\"493\":22,\"499\":24}}],[\"easyqueryconfiguration\",{\"1\":{\"123\":1,\"499\":1}}],[\"easyqueryclient\",{\"1\":{\"34\":5,\"115\":2,\"123\":8,\"157\":2,\"167\":4,\"223\":2,\"271\":1,\"314\":1,\"315\":3,\"397\":3,\"460\":6,\"465\":2,\"466\":5,\"471\":2,\"490\":2,\"491\":4,\"493\":3,\"499\":8,\"505\":13,\"517\":2,\"522\":1,\"523\":4,\"545\":1,\"548\":2,\"615\":1,\"798\":3,\"816\":2}}],[\"easyqueryexception\",{\"1\":{\"122\":1,\"498\":1,\"781\":1,\"787\":1}}],[\"easyquerydatasource\",{\"1\":{\"122\":1,\"498\":1,\"545\":1}}],[\"easyquerystarterautoconfiguration\",{\"1\":{\"117\":1,\"493\":1}}],[\"easyqueryinitializeoption\",{\"1\":{\"117\":8,\"493\":8}}],[\"easyquery目前除了基础的增删改查外未来还将支持分库分表\",{\"1\":{\"96\":1}}],[\"easyquery官方qq群\",{\"0\":{\"91\":1,\"393\":1,\"537\":1},\"1\":{\"18\":1}}],[\"easyquery\",{\"0\":{\"3\":1,\"94\":1,\"247\":1},\"1\":{\"34\":1,\"97\":4,\"116\":1,\"189\":2,\"191\":1,\"196\":3,\"205\":1,\"214\":4,\"220\":11,\"223\":1,\"227\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":2,\"235\":2,\"243\":1,\"249\":1,\"250\":5,\"251\":4,\"252\":4,\"254\":1,\"257\":1,\"260\":4,\"262\":1,\"265\":5,\"278\":4,\"280\":3,\"284\":1,\"285\":4,\"293\":2,\"296\":2,\"300\":1,\"304\":1,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"315\":3,\"316\":4,\"323\":2,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"350\":2,\"351\":3,\"352\":5,\"353\":2,\"355\":1,\"356\":3,\"362\":1,\"363\":3,\"365\":1,\"366\":3,\"368\":1,\"369\":1,\"370\":1,\"385\":2,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"411\":3,\"417\":5,\"419\":4,\"420\":1,\"460\":2,\"482\":3,\"490\":2,\"491\":3,\"493\":2,\"508\":3,\"523\":1,\"533\":1,\"561\":1,\"562\":1,\"570\":1,\"572\":2,\"573\":1,\"574\":2,\"578\":1,\"579\":2,\"581\":1,\"586\":1,\"587\":1,\"588\":1,\"589\":2,\"590\":2,\"592\":1,\"615\":1,\"616\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":2,\"626\":3,\"631\":3,\"633\":2,\"634\":1,\"641\":3,\"645\":1,\"646\":1,\"647\":2,\"648\":2,\"649\":2,\"652\":1,\"655\":1,\"656\":1,\"658\":1,\"659\":1,\"661\":1,\"662\":1,\"669\":5,\"673\":6,\"681\":1,\"682\":1,\"683\":1,\"691\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"712\":2,\"713\":6,\"714\":1,\"735\":1,\"742\":1,\"750\":1,\"751\":1,\"753\":1,\"754\":1,\"757\":3,\"758\":3,\"759\":3,\"760\":2,\"772\":1,\"773\":1,\"774\":1,\"781\":3,\"782\":3,\"783\":4,\"787\":3,\"788\":3,\"789\":4,\"793\":3,\"794\":4,\"795\":2,\"798\":1}}],[\"edition\",{\"1\":{\"669\":6}}],[\"edit\",{\"1\":{\"52\":1,\"783\":2,\"789\":2,\"794\":2}}],[\"edt\",{\"1\":{\"14\":1}}],[\"equal\",{\"1\":{\"632\":4,\"634\":5}}],[\"equalsandhashcode\",{\"1\":{\"309\":1,\"310\":1,\"311\":3,\"562\":1,\"579\":1}}],[\"equals\",{\"1\":{\"140\":3,\"308\":1,\"313\":2,\"574\":1,\"622\":1,\"626\":1,\"631\":1,\"783\":1,\"789\":1,\"794\":1}}],[\"eq\",{\"1\":{\"34\":2,\"35\":1,\"36\":1,\"41\":1,\"42\":2,\"102\":4,\"111\":1,\"126\":1,\"131\":1,\"132\":1,\"134\":1,\"135\":1,\"136\":1,\"140\":2,\"144\":4,\"145\":1,\"149\":4,\"152\":7,\"158\":1,\"160\":1,\"167\":2,\"168\":1,\"169\":1,\"174\":2,\"175\":2,\"184\":1,\"185\":13,\"186\":3,\"214\":1,\"220\":2,\"223\":3,\"235\":2,\"237\":3,\"260\":1,\"265\":1,\"272\":2,\"281\":2,\"285\":1,\"292\":1,\"293\":2,\"295\":1,\"296\":2,\"315\":6,\"325\":2,\"335\":3,\"338\":1,\"339\":1,\"340\":1,\"341\":2,\"342\":2,\"385\":3,\"386\":3,\"387\":3,\"388\":1,\"397\":5,\"417\":1,\"422\":2,\"517\":2,\"526\":2,\"556\":2,\"565\":3,\"590\":2,\"594\":1,\"595\":1,\"607\":2,\"608\":1,\"614\":8,\"615\":6,\"616\":3,\"622\":1,\"626\":4,\"631\":12,\"641\":2,\"642\":1,\"645\":2,\"646\":2,\"647\":3,\"648\":3,\"649\":14,\"650\":1,\"651\":1,\"652\":10,\"666\":14,\"667\":2,\"669\":1,\"672\":19,\"673\":8,\"682\":2,\"683\":1,\"694\":1,\"696\":1,\"703\":1,\"712\":2,\"714\":1,\"735\":4,\"738\":2,\"739\":2,\"740\":1,\"744\":2,\"757\":1,\"758\":3,\"759\":3,\"760\":2,\"771\":1,\"772\":2,\"773\":1,\"774\":1,\"783\":2,\"789\":2,\"794\":2,\"795\":1,\"805\":2,\"809\":1}}],[\"exec\",{\"1\":{\"783\":6,\"789\":12,\"793\":30,\"794\":12,\"795\":6}}],[\"executor\",{\"1\":{\"483\":3,\"782\":30,\"783\":12,\"788\":30}}],[\"executorqueuesize\",{\"1\":{\"407\":1,\"469\":1}}],[\"executorcorepoolsize\",{\"1\":{\"407\":1,\"469\":1}}],[\"executorcorepoolsize值大\",{\"1\":{\"407\":1}}],[\"executormaximumpoolsize\",{\"1\":{\"407\":1,\"469\":1}}],[\"executesql\",{\"1\":{\"663\":2}}],[\"executescope\",{\"1\":{\"522\":2,\"526\":1}}],[\"execute\",{\"1\":{\"206\":1,\"353\":1,\"483\":1}}],[\"executebatch方法会返回一个int数组\",{\"1\":{\"206\":1}}],[\"executebatch\",{\"1\":{\"203\":1,\"206\":1}}],[\"executerows\",{\"1\":{\"16\":2,\"196\":1,\"205\":1,\"214\":1,\"220\":3,\"232\":1,\"234\":1,\"235\":1,\"238\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"254\":1,\"260\":3,\"262\":1,\"265\":4,\"272\":5,\"278\":2,\"280\":2,\"285\":2,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"314\":1,\"316\":2,\"323\":1,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"351\":3,\"352\":5,\"353\":2,\"355\":1,\"356\":2,\"362\":1,\"363\":3,\"365\":1,\"366\":4,\"368\":1,\"369\":3,\"370\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"389\":1,\"411\":2,\"417\":1,\"419\":2,\"420\":1,\"422\":2,\"426\":2,\"562\":1,\"566\":1,\"572\":1,\"574\":1,\"579\":1,\"581\":1,\"587\":1,\"589\":1,\"590\":1,\"666\":1,\"782\":1,\"783\":2,\"788\":1,\"789\":2,\"793\":1,\"794\":2,\"795\":1}}],[\"executioncontextfactory\",{\"1\":{\"545\":1}}],[\"executions>\",{\"1\":{\"519\":1}}],[\"execution>\",{\"1\":{\"514\":1,\"519\":3}}],[\"execution\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"525\":1}}],[\"excludes>\",{\"1\":{\"801\":1}}],[\"exclude>\",{\"1\":{\"801\":1}}],[\"excluded\",{\"1\":{\"369\":4}}],[\"exceptions\",{\"1\":{\"313\":1}}],[\"exception\",{\"1\":{\"117\":1,\"270\":2,\"271\":2,\"273\":2,\"274\":4,\"493\":1,\"505\":1,\"508\":1,\"623\":3,\"781\":2,\"787\":2}}],[\"excerpt\",{\"1\":{\"81\":1}}],[\"extraeasyentityquerymap\",{\"1\":{\"522\":2}}],[\"extra=null\",{\"1\":{\"315\":4}}],[\"extra=valuecompanylicenseextra\",{\"1\":{\"315\":1}}],[\"extra\",{\"1\":{\"311\":1,\"315\":1,\"523\":3}}],[\"extra`\",{\"1\":{\"237\":4,\"238\":1,\"565\":4,\"566\":1}}],[\"extrafilter\",{\"1\":{\"140\":3}}],[\"extends\",{\"1\":{\"59\":1,\"122\":2,\"219\":1,\"284\":1,\"306\":2,\"308\":3,\"310\":1,\"313\":2,\"485\":1,\"498\":2,\"505\":8,\"522\":21,\"562\":1,\"572\":2,\"574\":3,\"686\":1,\"734\":1,\"796\":1,\"797\":1,\"798\":1,\"803\":3,\"805\":2,\"807\":1,\"809\":1,\"812\":1}}],[\"extended\",{\"1\":{\"58\":1}}],[\"extensions\",{\"1\":{\"57\":1,\"58\":2}}],[\"extension\",{\"0\":{\"57\":1},\"1\":{\"117\":1,\"493\":1}}],[\"expr\",{\"1\":{\"729\":1}}],[\"expreesion传入当前表的属性表达式或者制定表的\",{\"1\":{\"668\":1}}],[\"expressed\",{\"1\":{\"117\":1,\"493\":1}}],[\"expressionfactory\",{\"1\":{\"545\":1}}],[\"expressionbuilderfactory\",{\"1\":{\"545\":1}}],[\"expressiondeletable<tproxy\",{\"1\":{\"522\":1}}],[\"expressionupdatable<tproxy\",{\"1\":{\"522\":1}}],[\"expressiontree<\",{\"1\":{\"455\":1}}],[\"expressionmethodvisitor\",{\"1\":{\"313\":3}}],[\"expressionclassvisitor\",{\"1\":{\"313\":6}}],[\"expression\",{\"1\":{\"16\":1,\"152\":2,\"223\":3,\"230\":1,\"231\":2,\"289\":3,\"556\":2,\"585\":1,\"586\":2,\"663\":6,\"666\":21,\"668\":1,\"669\":12,\"670\":3,\"734\":6}}],[\"expected\",{\"1\":{\"117\":1,\"493\":1}}],[\"exists\",{\"0\":{\"766\":1,\"767\":1},\"1\":{\"140\":3,\"144\":1,\"145\":2,\"146\":1,\"147\":1,\"149\":4,\"152\":1,\"506\":1,\"694\":5,\"696\":5,\"761\":1,\"764\":1,\"771\":1}}],[\"exists等子查询\",{\"1\":{\"100\":1,\"107\":1}}],[\"exists=\",{\"1\":{\"34\":1,\"167\":1}}],[\"en$\",{\"1\":{\"669\":2}}],[\"english\",{\"1\":{\"612\":1,\"748\":1,\"755\":1}}],[\"engine<\",{\"1\":{\"519\":1}}],[\"entities\",{\"1\":{\"522\":6}}],[\"entityexpressionexecutor\",{\"1\":{\"545\":2}}],[\"entity对象生成\",{\"0\":{\"541\":1}}],[\"entitystate\",{\"1\":{\"522\":1}}],[\"entitydeletable<tproxy\",{\"1\":{\"522\":2}}],[\"entityupdatable<tproxy\",{\"1\":{\"522\":2}}],[\"entityupdateexpressionbuilder\",{\"1\":{\"260\":4,\"262\":6,\"265\":2,\"809\":8}}],[\"entity操作比如update对象\",{\"1\":{\"407\":1}}],[\"entityinsertable<tproxy\",{\"1\":{\"522\":2}}],[\"entityinsertexpressionbuilder\",{\"1\":{\"260\":4,\"262\":2,\"265\":2,\"809\":3}}],[\"entityinterceptor\",{\"0\":{\"259\":1},\"1\":{\"256\":1,\"260\":2,\"262\":1,\"265\":1,\"809\":1}}],[\"entityclass\",{\"1\":{\"257\":1,\"260\":9,\"262\":7,\"265\":5,\"306\":1,\"522\":8,\"572\":1,\"809\":10}}],[\"entitymetadatamanager\",{\"1\":{\"545\":1,\"814\":10}}],[\"entitymetadata\",{\"1\":{\"140\":4,\"797\":3,\"814\":12}}],[\"entityporxy的模块添加sql\",{\"1\":{\"126\":1,\"158\":1}}],[\"entityproxy那么只需要升级对应的框架版本和插件版本然后重新clean即可\",{\"1\":{\"538\":1}}],[\"entityproxy那么生成路径则在\",{\"1\":{\"33\":1}}],[\"entityproxy注解\",{\"1\":{\"453\":1}}],[\"entityproxy注解的模块下使用sql\",{\"1\":{\"166\":1}}],[\"entityproxy或者\",{\"1\":{\"155\":1}}],[\"entityproxy配合sql\",{\"1\":{\"33\":1}}],[\"entityproxy这个注解会在当前类同级包下创建一个proxy包并且生成对应的代理对象用来操作\",{\"1\":{\"33\":1}}],[\"entityproxy+sql\",{\"1\":{\"28\":1}}],[\"entityproxy\",{\"0\":{\"446\":1},\"1\":{\"21\":2,\"28\":1,\"33\":1,\"38\":1,\"41\":1,\"110\":1,\"140\":2,\"152\":5,\"157\":1,\"171\":1,\"174\":1,\"396\":1,\"515\":1,\"592\":1,\"734\":1,\"807\":1}}],[\"entityproxy请确定是否引入sql\",{\"1\":{\"13\":1}}],[\"entity模式\",{\"0\":{\"121\":1}}],[\"entity和proxy的api区别\",{\"0\":{\"101\":1}}],[\"entityquery使用expression\",{\"1\":{\"666\":1}}],[\"entityquery支持函数区分\",{\"1\":{\"535\":1}}],[\"entityqueryable<\",{\"1\":{\"804\":1}}],[\"entityqueryable<sysuserentityproxy\",{\"1\":{\"803\":1}}],[\"entityqueryable<sysuserproxy\",{\"1\":{\"185\":1}}],[\"entityqueryable<topicproxy\",{\"1\":{\"667\":1}}],[\"entityqueryable<tproxy\",{\"1\":{\"522\":2,\"803\":1}}],[\"entityquery新版本请跳转\",{\"1\":{\"364\":1,\"367\":1}}],[\"entityquery\",{\"0\":{\"28\":1,\"161\":1,\"543\":1,\"663\":1},\"1\":{\"466\":2,\"522\":12,\"642\":1}}],[\"entity其中每个api都有自己的特点\",{\"1\":{\"27\":1,\"160\":1}}],[\"entityfileproxy那么升级完框架和插件版本后需要重新调用插件的autocompile让生成的代理文件重新生成一遍\",{\"1\":{\"538\":1}}],[\"entityfileproxy那么这个依赖可以省略\",{\"1\":{\"453\":1}}],[\"entityfileproxy或者\",{\"1\":{\"33\":1}}],[\"entityfileproxy这个注解会在当前类同级包下创建一个proxy包并且生成对应的代理对象用来操作\",{\"1\":{\"33\":1}}],[\"entityfileproxy\",{\"0\":{\"447\":1},\"1\":{\"28\":1,\"155\":1,\"358\":1,\"362\":1,\"400\":1,\"412\":1,\"556\":1}}],[\"entityfileproxy换成\",{\"1\":{\"21\":1}}],[\"entityfileproxy请确认是否引用插件\",{\"1\":{\"13\":1}}],[\"entity\",{\"1\":{\"18\":1,\"30\":2,\"31\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"111\":8,\"140\":1,\"163\":2,\"200\":4,\"201\":4,\"230\":1,\"247\":1,\"260\":7,\"262\":4,\"265\":3,\"288\":1,\"289\":1,\"417\":1,\"517\":1,\"522\":12,\"585\":1,\"623\":1,\"809\":7}}],[\"entry<string\",{\"1\":{\"623\":1,\"781\":1,\"787\":1}}],[\"entry<integer\",{\"1\":{\"508\":1}}],[\"entryset\",{\"1\":{\"508\":1,\"623\":1,\"781\":1,\"787\":1}}],[\"enum<\",{\"1\":{\"308\":2,\"574\":2}}],[\"enum<t>\",{\"1\":{\"308\":1,\"574\":1}}],[\"enum<t>>\",{\"1\":{\"308\":3,\"574\":3}}],[\"enum\",{\"1\":{\"306\":2,\"308\":5,\"572\":2,\"574\":5,\"592\":1}}],[\"enumconstant\",{\"1\":{\"308\":3,\"574\":3}}],[\"enumconstants\",{\"1\":{\"306\":3,\"308\":2,\"572\":3,\"574\":2}}],[\"enumconverter\",{\"1\":{\"116\":1,\"191\":1,\"306\":3,\"307\":1,\"491\":1,\"493\":1,\"523\":1,\"570\":1,\"572\":3,\"573\":1}}],[\"enumclass\",{\"1\":{\"306\":2,\"308\":9,\"572\":2,\"574\":9}}],[\"enumdeserializer\",{\"1\":{\"306\":3,\"572\":3}}],[\"enumvalue的字段\",{\"1\":{\"308\":1,\"574\":1}}],[\"enumvaluedeserializer\",{\"1\":{\"308\":3,\"574\":3}}],[\"enumvalue\",{\"1\":{\"306\":3,\"308\":12,\"572\":3,\"574\":12,\"592\":2}}],[\"enumvalueautoconverter<ienum<\",{\"1\":{\"306\":1,\"572\":1}}],[\"enumvalueautoconverter第一个泛型参数\",{\"1\":{\"306\":1,\"572\":1}}],[\"enumvalueautoconverter\",{\"1\":{\"302\":1,\"306\":1,\"568\":1,\"572\":1}}],[\"enumvalueconverter\",{\"1\":{\"191\":1,\"308\":2,\"574\":2}}],[\"encryptwordminlength\",{\"1\":{\"219\":1}}],[\"encrypt\",{\"1\":{\"211\":1,\"229\":1,\"231\":1,\"232\":1,\"234\":1,\"235\":2,\"584\":1,\"586\":1,\"587\":1,\"589\":1,\"590\":2}}],[\"encryption`\",{\"1\":{\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":2}}],[\"encryptionstrategy\",{\"0\":{\"211\":1,\"437\":1}}],[\"encryptionstrategymap\",{\"1\":{\"117\":2,\"493\":2}}],[\"encryptionstrategy>\",{\"1\":{\"117\":1,\"493\":1}}],[\"encryption\",{\"0\":{\"53\":1,\"212\":1,\"436\":1},\"1\":{\"51\":1,\"75\":1,\"214\":4,\"219\":5,\"220\":11,\"231\":1,\"586\":1}}],[\"encoding=\",{\"1\":{\"157\":1,\"519\":1}}],[\"endtime\",{\"1\":{\"797\":4}}],[\"end\",{\"1\":{\"83\":1,\"237\":1,\"270\":1,\"565\":1,\"592\":2,\"593\":1,\"594\":2,\"595\":3,\"615\":3,\"616\":1,\"679\":2,\"797\":1}}],[\"enrich\",{\"1\":{\"58\":1}}],[\"enhancement\",{\"0\":{\"58\":1,\"59\":1,\"69\":1}}],[\"enhance\",{\"0\":{\"54\":1},\"1\":{\"51\":1,\"59\":1,\"75\":1,\"826\":1}}],[\"enhancer\",{\"1\":{\"12\":4,\"117\":4,\"492\":4}}],[\"enablelogicdelete\",{\"1\":{\"275\":2,\"601\":1}}],[\"enable\",{\"1\":{\"12\":3,\"115\":1,\"157\":1,\"257\":1,\"268\":1,\"271\":1,\"273\":1,\"274\":2,\"465\":1,\"470\":1,\"490\":1,\"503\":2,\"631\":2,\"780\":1,\"786\":1,\"792\":1}}],[\"es等其余数据库在适配中\",{\"1\":{\"483\":1}}],[\"es\",{\"1\":{\"9\":3,\"372\":1}}],[\"人大金仓kingbasees\",{\"1\":{\"9\":1,\"372\":1}}],[\"dkz97\",{\"1\":{\"745\":1,\"746\":1}}],[\"ds4分别对应分库插入的数据源\",{\"1\":{\"788\":1}}],[\"ds4\",{\"1\":{\"788\":6,\"789\":6}}],[\"ds4一共5个数据源\",{\"1\":{\"785\":1}}],[\"ds4一共4个数据源额外加一个默认数据源一共5个\",{\"1\":{\"781\":1,\"787\":1}}],[\"dsorderentity\",{\"1\":{\"788\":2,\"789\":7}}],[\"ds3\",{\"1\":{\"785\":1,\"788\":6}}],[\"ds1\",{\"1\":{\"782\":9,\"783\":9,\"785\":1,\"788\":6}}],[\"dsname\",{\"1\":{\"781\":2,\"787\":2}}],[\"ds==null\",{\"1\":{\"522\":1}}],[\"ds\",{\"1\":{\"522\":2,\"526\":2,\"781\":2,\"782\":10,\"783\":6,\"787\":2}}],[\"ds2\",{\"1\":{\"491\":1,\"523\":3,\"526\":5,\"782\":9,\"783\":9,\"785\":1,\"788\":6}}],[\"ds0\",{\"1\":{\"407\":1,\"469\":1,\"782\":12,\"788\":7,\"789\":6,\"793\":30,\"794\":12,\"795\":6}}],[\"dsl\",{\"1\":{\"127\":1}}],[\"dual\",{\"1\":{\"374\":1,\"375\":1,\"376\":1,\"377\":2}}],[\"duplicate\",{\"1\":{\"366\":3,\"735\":1}}],[\"duration\",{\"1\":{\"236\":2,\"290\":2,\"564\":2,\"592\":2}}],[\"durationday\",{\"1\":{\"236\":4,\"564\":4,\"592\":4}}],[\"d\",{\"1\":{\"293\":1,\"296\":1,\"666\":7,\"670\":4,\"756\":1}}],[\"dd2\",{\"1\":{\"666\":2}}],[\"dd\",{\"1\":{\"293\":1,\"296\":1,\"666\":12}}],[\"d4omq==kdiasgoxezjk9m+qem\",{\"1\":{\"249\":1}}],[\"dto\",{\"1\":{\"111\":2}}],[\"dynamicmodeenum\",{\"1\":{\"618\":1}}],[\"dynamicmode\",{\"1\":{\"618\":1}}],[\"dynamicdatasourceaspectconfiguration\",{\"1\":{\"525\":1}}],[\"dynamicdatasource\",{\"1\":{\"100\":1,\"107\":1,\"524\":1,\"525\":6,\"526\":3}}],[\"dynamicorderby\",{\"1\":{\"100\":1,\"107\":1}}],[\"dynamicwhere\",{\"1\":{\"100\":1,\"107\":1}}],[\"dotnetcore\",{\"1\":{\"775\":1}}],[\"double\",{\"1\":{\"613\":1,\"635\":1,\"666\":2}}],[\"doument\",{\"0\":{\"89\":1}}],[\"do\",{\"1\":{\"368\":1,\"369\":2}}],[\"documented\",{\"1\":{\"308\":1,\"524\":1,\"574\":1}}],[\"document\",{\"1\":{\"58\":1}}],[\"documentation\",{\"1\":{\"54\":1}}],[\"donate\",{\"1\":{\"77\":1}}],[\"don\",{\"1\":{\"55\":1,\"56\":1,\"804\":1}}],[\"distinct\",{\"1\":{\"601\":1}}],[\"disabling\",{\"0\":{\"52\":1}}],[\"disables\",{\"1\":{\"52\":1}}],[\"disable\",{\"1\":{\"51\":1,\"52\":1,\"75\":1}}],[\"disablelogicdelete\",{\"1\":{\"16\":2,\"275\":1,\"280\":3,\"601\":1,\"713\":2}}],[\"dictionarytransservice\",{\"1\":{\"508\":3}}],[\"dictionary\",{\"1\":{\"507\":2}}],[\"dialect\",{\"1\":{\"231\":3,\"487\":1,\"545\":1,\"586\":3}}],[\"directory>\",{\"1\":{\"801\":2}}],[\"directory\",{\"1\":{\"83\":1}}],[\"different\",{\"1\":{\"54\":1}}],[\"dromara\",{\"1\":{\"809\":1}}],[\"druiddatasourcefactory\",{\"1\":{\"781\":1,\"787\":1}}],[\"druiddatasource\",{\"1\":{\"157\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"druid\",{\"1\":{\"157\":1,\"780\":2,\"786\":2,\"792\":2}}],[\"druid依赖\",{\"1\":{\"157\":1,\"504\":1}}],[\"draft草稿类型需要提供具体类型不然则已jdbc\",{\"1\":{\"608\":1}}],[\"draft\",{\"0\":{\"605\":1},\"1\":{\"39\":1,\"42\":1,\"144\":2,\"172\":1,\"175\":1,\"184\":4,\"185\":4,\"237\":1,\"565\":1,\"605\":1,\"606\":1,\"607\":6,\"608\":1,\"666\":1,\"667\":1,\"724\":3,\"737\":1,\"738\":1,\"739\":1}}],[\"draft10\",{\"1\":{\"39\":1,\"172\":1}}],[\"draft1\",{\"1\":{\"39\":1,\"172\":1}}],[\"driver可能会也可能不会继续处理剩余的命令\",{\"1\":{\"206\":1}}],[\"driverclassname\",{\"1\":{\"123\":1,\"499\":1,\"517\":1,\"523\":1,\"781\":1,\"787\":1}}],[\"driver\",{\"1\":{\"34\":1,\"123\":1,\"124\":2,\"157\":2,\"167\":1,\"397\":1,\"481\":2,\"483\":2,\"499\":1,\"500\":2,\"517\":1,\"780\":2,\"781\":1,\"786\":2,\"787\":1,\"792\":2}}],[\"debug\",{\"1\":{\"313\":1,\"521\":1}}],[\"declaredmethod\",{\"1\":{\"313\":3}}],[\"decrypt\",{\"1\":{\"211\":1,\"229\":2,\"230\":2,\"231\":1,\"233\":1,\"235\":1,\"584\":2,\"585\":2,\"586\":1,\"588\":1,\"590\":1}}],[\"deadline`\",{\"1\":{\"314\":1,\"315\":4,\"316\":1}}],[\"deadline\",{\"1\":{\"311\":1}}],[\"deserialize\",{\"1\":{\"302\":1,\"306\":5,\"308\":3,\"309\":1,\"559\":1,\"568\":1,\"572\":5,\"574\":3,\"576\":1,\"579\":1}}],[\"desc排序\",{\"1\":{\"183\":1}}],[\"description>\",{\"1\":{\"157\":1}}],[\"desc\",{\"1\":{\"38\":4,\"40\":2,\"42\":4,\"136\":1,\"171\":6,\"173\":2,\"175\":4,\"183\":2,\"185\":4,\"293\":1,\"296\":1,\"313\":3,\"621\":1,\"622\":1,\"623\":1,\"666\":2,\"669\":12,\"679\":2,\"703\":1,\"734\":2}}],[\"del\",{\"1\":{\"278\":4,\"280\":3,\"284\":1,\"285\":4,\"327\":2,\"328\":3}}],[\"deletable\",{\"1\":{\"16\":2,\"105\":2,\"265\":2,\"272\":2,\"278\":2,\"280\":1,\"285\":1,\"327\":1,\"328\":2,\"353\":2,\"355\":1,\"356\":2,\"522\":6,\"795\":1}}],[\"deleteby\",{\"1\":{\"809\":4}}],[\"deletetime\",{\"1\":{\"809\":4}}],[\"deletethrow\",{\"1\":{\"468\":1}}],[\"deletethrowerror是easy\",{\"1\":{\"353\":1}}],[\"delete数据将会被改写为update\",{\"1\":{\"430\":1}}],[\"delete对象不会判断这个条件\",{\"1\":{\"407\":1,\"469\":1}}],[\"deletecharat\",{\"1\":{\"313\":1}}],[\"deletelogic\",{\"1\":{\"286\":1}}],[\"deleted=1\",{\"1\":{\"468\":1}}],[\"deleted\",{\"1\":{\"429\":1,\"430\":1,\"809\":2}}],[\"deletedat\",{\"1\":{\"284\":1}}],[\"deleteduser\",{\"1\":{\"284\":2}}],[\"delete的时候也可以转换对应的update\",{\"1\":{\"275\":1}}],[\"delete的条件自定义\",{\"1\":{\"189\":1}}],[\"delete\",{\"0\":{\"353\":1},\"1\":{\"16\":1,\"115\":1,\"157\":1,\"189\":1,\"265\":2,\"279\":1,\"280\":1,\"286\":1,\"348\":1,\"353\":2,\"355\":2,\"356\":1,\"407\":1,\"430\":1,\"465\":1,\"469\":1,\"470\":1,\"483\":1,\"490\":1,\"795\":3,\"809\":5}}],[\"devide\",{\"1\":{\"236\":2,\"564\":2}}],[\"dev\",{\"1\":{\"157\":1}}],[\"def\",{\"1\":{\"631\":3,\"669\":1}}],[\"deftableleft1\",{\"1\":{\"631\":3}}],[\"deftable\",{\"1\":{\"631\":6,\"669\":3}}],[\"defined\",{\"1\":{\"117\":1,\"493\":1}}],[\"default=new\",{\"1\":{\"631\":2}}],[\"default当传入的条件参数值非null且字符串的情况下非空那么才会增加到条件里面\",{\"1\":{\"631\":1}}],[\"default所有的条件都接受\",{\"1\":{\"631\":1}}],[\"defaultassertexceptionfactory\",{\"1\":{\"545\":1}}],[\"defaultaeseasyencryptionstrategy\",{\"1\":{\"116\":1,\"191\":1,\"491\":1,\"493\":1,\"523\":1}}],[\"defaultobjectsortqueryexecutor\",{\"1\":{\"545\":1}}],[\"defaultwhereobjectqueryexecutor\",{\"1\":{\"545\":1,\"638\":1}}],[\"defaultincludeparserengine\",{\"1\":{\"545\":1}}],[\"defaulting\",{\"1\":{\"517\":1}}],[\"defaultcolumnfunctionfactory\",{\"1\":{\"545\":1}}],[\"defaultconfiguration\",{\"1\":{\"192\":1,\"545\":1}}],[\"defaultconnectionmanager\",{\"1\":{\"122\":1,\"498\":1,\"545\":1}}],[\"defaultroutedescriptorfactor\",{\"1\":{\"545\":1}}],[\"defaultroutecontextfactory\",{\"1\":{\"545\":1}}],[\"defaultrewritecontextfactory\",{\"1\":{\"545\":1}}],[\"defaulttablerouteengine\",{\"1\":{\"545\":1}}],[\"defaulttableroutemanager\",{\"1\":{\"545\":1}}],[\"defaulttrackmanager\",{\"1\":{\"545\":1}}],[\"defaulttrack\",{\"1\":{\"468\":1}}],[\"defaultstring\",{\"1\":{\"809\":4}}],[\"defaultshardingpageresult\",{\"1\":{\"686\":1}}],[\"defaultshardingpageresult<t>\",{\"1\":{\"686\":1}}],[\"defaultshardingpageresult<>\",{\"1\":{\"686\":1}}],[\"defaultshardingquerycountmanager\",{\"1\":{\"545\":1}}],[\"defaultsqlparameterprintformat\",{\"1\":{\"545\":1}}],[\"defaultsqlsegmentfactory\",{\"1\":{\"545\":1}}],[\"defaultsqlclientapifactory\",{\"1\":{\"545\":1}}],[\"defaultsqlexpressioninvokefactory\",{\"1\":{\"545\":1}}],[\"defaultschema\",{\"1\":{\"468\":1}}],[\"defaultdialect\",{\"1\":{\"545\":1}}],[\"defaultdatasourcemanager\",{\"1\":{\"545\":1}}],[\"defaultdatasourcemergepoolsize❗️\",{\"1\":{\"469\":1}}],[\"defaultdatasourcemergepoolsize\",{\"1\":{\"407\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"defaultdatasourcerouteengine\",{\"1\":{\"545\":1}}],[\"defaultdatasourceroutemanager\",{\"1\":{\"545\":1}}],[\"defaultdatasourcename\",{\"1\":{\"407\":1,\"469\":1,\"797\":2}}],[\"defaultdatasourceunitfactory\",{\"1\":{\"545\":1}}],[\"defaultdatasourceunit\",{\"1\":{\"122\":1,\"498\":1}}],[\"defaultexecutioncontextfactory\",{\"1\":{\"545\":1}}],[\"defaultentityinterceptor\",{\"1\":{\"809\":1}}],[\"defaultentityexpressionexecutor\",{\"1\":{\"545\":1}}],[\"defaultentitymetadatamanager\",{\"1\":{\"545\":1}}],[\"defaultentityquery\",{\"1\":{\"466\":1}}],[\"defaulteasytimejobmanager\",{\"1\":{\"545\":1}}],[\"defaulteasyconnectionfactory\",{\"1\":{\"545\":1}}],[\"defaulteasydatasourceconnectionfactory\",{\"1\":{\"545\":1}}],[\"defaulteasyshardingexecutorservice\",{\"1\":{\"545\":1}}],[\"defaulteasyprepareparser\",{\"1\":{\"545\":1}}],[\"defaulteasyproxyquery\",{\"1\":{\"34\":1,\"167\":1,\"397\":1,\"460\":1,\"466\":1,\"517\":2}}],[\"defaulteasypageresultprovider\",{\"1\":{\"545\":1,\"686\":1}}],[\"defaulteasyexpressionfactory\",{\"1\":{\"545\":1}}],[\"defaulteasyexpressionbuilderfactory\",{\"1\":{\"545\":1}}],[\"defaulteasyentityquery\",{\"1\":{\"34\":1,\"123\":1,\"167\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"460\":1,\"499\":1,\"523\":1,\"798\":2}}],[\"defaulteasymultientityquery\",{\"1\":{\"522\":2,\"523\":1}}],[\"defaulteasyktquery\",{\"1\":{\"466\":1}}],[\"defaulteasyqueryclient\",{\"1\":{\"545\":1}}],[\"defaulteasyqueryruntimecontext\",{\"1\":{\"545\":1}}],[\"defaulteasyquerydatasource\",{\"1\":{\"545\":1}}],[\"defaulteasyquery\",{\"1\":{\"34\":2,\"460\":1,\"493\":1}}],[\"defaultvalueconverter\",{\"1\":{\"426\":1}}],[\"defaultvalueupdateatomictrack\",{\"1\":{\"195\":1,\"426\":1}}],[\"defaultjdbcstreamresultset\",{\"1\":{\"399\":1}}],[\"defaultpageresult<t>\",{\"1\":{\"686\":1}}],[\"defaultpageresult<>\",{\"1\":{\"686\":1}}],[\"defaultpageresult\",{\"1\":{\"399\":1,\"686\":1}}],[\"defaultmemorycache<>\",{\"1\":{\"313\":1}}],[\"defaultbuilderconfiguration\",{\"1\":{\"34\":1,\"123\":1,\"167\":1,\"271\":1,\"397\":1,\"460\":1,\"466\":1,\"471\":1,\"491\":1,\"493\":1,\"499\":1,\"517\":1,\"523\":1,\"548\":1,\"798\":1,\"816\":1}}],[\"default\",{\"1\":{\"23\":1,\"115\":1,\"157\":1,\"223\":2,\"230\":1,\"468\":1,\"483\":4,\"524\":1,\"585\":1,\"631\":6,\"744\":1,\"809\":1}}],[\"detail\",{\"1\":{\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1}}],[\"details\",{\"0\":{\"331\":1,\"552\":1},\"1\":{\"60\":1,\"206\":1,\"332\":1,\"517\":1,\"553\":1,\"745\":1,\"746\":1}}],[\"demohttps\",{\"1\":{\"806\":3}}],[\"demo地址\",{\"1\":{\"503\":1}}],[\"demo地址https\",{\"1\":{\"126\":1,\"158\":1,\"160\":1}}],[\"democonfiguration\",{\"1\":{\"485\":1,\"486\":1}}],[\"demo数据\",{\"0\":{\"213\":1,\"248\":1,\"258\":1,\"276\":1,\"320\":1}}],[\"demo\",{\"0\":{\"50\":1,\"76\":1},\"1\":{\"51\":1,\"52\":1,\"55\":1,\"75\":1,\"397\":1,\"506\":2}}],[\"deploy\",{\"1\":{\"157\":2}}],[\"deployment\",{\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"dependencymanagement>\",{\"1\":{\"801\":1}}],[\"dependency\",{\"1\":{\"117\":2,\"493\":2}}],[\"dependency>\",{\"1\":{\"12\":1,\"30\":7,\"31\":6,\"44\":5,\"115\":1,\"117\":1,\"120\":6,\"121\":8,\"157\":8,\"158\":1,\"163\":6,\"309\":1,\"313\":1,\"395\":6,\"453\":3,\"455\":1,\"460\":5,\"463\":1,\"465\":1,\"466\":4,\"478\":5,\"490\":1,\"492\":1,\"496\":6,\"497\":8,\"504\":12,\"513\":5,\"519\":8,\"579\":1,\"801\":6}}],[\"dependencies>\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"120\":1,\"121\":1,\"157\":1,\"163\":1,\"455\":1,\"496\":1,\"497\":1,\"504\":1,\"519\":1,\"801\":2}}],[\"departname\",{\"1\":{\"21\":1,\"22\":1,\"23\":1,\"25\":1,\"185\":3,\"186\":2}}],[\"dayofweek\",{\"1\":{\"290\":1}}],[\"dayofyear\",{\"1\":{\"290\":1}}],[\"day\",{\"1\":{\"237\":7,\"290\":1,\"565\":7,\"593\":2,\"594\":4,\"595\":6}}],[\"days\",{\"1\":{\"236\":2,\"290\":1,\"564\":2,\"592\":2}}],[\"dark\",{\"1\":{\"83\":1}}],[\"datetime\",{\"1\":{\"311\":1,\"354\":1,\"358\":1,\"412\":1,\"756\":1}}],[\"datetimesqlformat\",{\"1\":{\"294\":1}}],[\"datetimeformat\",{\"1\":{\"293\":1,\"294\":1,\"296\":1}}],[\"datetimedurationenum\",{\"1\":{\"236\":2,\"290\":1,\"564\":2,\"592\":2}}],[\"date\",{\"1\":{\"82\":1,\"279\":2,\"293\":1,\"296\":1,\"430\":2,\"613\":2,\"666\":7,\"667\":2,\"670\":4,\"737\":1}}],[\"data=data\",{\"1\":{\"812\":1}}],[\"datacenterid\",{\"1\":{\"201\":1}}],[\"datasources\",{\"1\":{\"781\":2,\"787\":2}}],[\"datasourceshardinginitializer\",{\"1\":{\"191\":1,\"491\":1,\"523\":1}}],[\"datasource>\",{\"1\":{\"781\":4,\"787\":4}}],[\"datasource2\",{\"1\":{\"523\":1}}],[\"datasourcefunction\",{\"1\":{\"522\":4}}],[\"datasourcemanager\",{\"1\":{\"486\":3,\"545\":1,\"781\":3,\"787\":3}}],[\"datasourcebuilder\",{\"1\":{\"123\":1,\"499\":1,\"523\":1}}],[\"datasourcename\",{\"1\":{\"122\":4,\"498\":4}}],[\"datasourceutils\",{\"1\":{\"122\":2,\"498\":2}}],[\"datasourceunitfactory\",{\"1\":{\"122\":1,\"123\":1,\"491\":1,\"493\":1,\"498\":1,\"499\":1,\"523\":1,\"545\":1}}],[\"datasourceunit\",{\"1\":{\"122\":3,\"498\":3}}],[\"datasourcewrapper\",{\"1\":{\"122\":1,\"498\":1}}],[\"datasourcerouteengine\",{\"1\":{\"545\":1}}],[\"datasourcerouter\",{\"1\":{\"545\":1}}],[\"datasourceroutemap\",{\"1\":{\"117\":2,\"493\":2}}],[\"datasourceroutemanager\",{\"1\":{\"116\":3,\"191\":4,\"486\":3,\"493\":3,\"545\":1}}],[\"datasourceroute<\",{\"1\":{\"117\":1,\"493\":1}}],[\"datasourceandtableshardinginitializer\",{\"1\":{\"116\":1,\"191\":1,\"491\":1,\"493\":1,\"523\":1}}],[\"datasource\",{\"1\":{\"34\":7,\"122\":7,\"123\":4,\"124\":1,\"157\":1,\"167\":7,\"192\":3,\"271\":1,\"397\":7,\"460\":1,\"466\":1,\"471\":1,\"479\":3,\"485\":3,\"486\":4,\"491\":3,\"493\":3,\"498\":7,\"499\":4,\"500\":1,\"522\":12,\"523\":4,\"548\":1,\"780\":1,\"781\":4,\"786\":1,\"787\":4,\"792\":1,\"797\":2,\"798\":1,\"816\":1}}],[\"data\",{\"1\":{\"16\":1,\"21\":1,\"22\":1,\"38\":1,\"41\":1,\"110\":2,\"111\":8,\"112\":1,\"140\":2,\"152\":5,\"157\":1,\"171\":1,\"174\":1,\"196\":1,\"200\":1,\"201\":1,\"219\":1,\"231\":1,\"254\":1,\"284\":1,\"306\":1,\"307\":2,\"308\":1,\"309\":2,\"310\":3,\"311\":5,\"350\":1,\"354\":1,\"358\":1,\"362\":1,\"396\":1,\"400\":1,\"412\":1,\"425\":1,\"426\":1,\"429\":1,\"430\":1,\"482\":1,\"483\":2,\"507\":2,\"515\":1,\"526\":1,\"556\":1,\"557\":1,\"562\":3,\"572\":1,\"573\":2,\"574\":1,\"579\":2,\"581\":1,\"586\":1,\"592\":1,\"600\":1,\"620\":1,\"621\":2,\"622\":2,\"629\":1,\"632\":1,\"634\":1,\"669\":1,\"685\":2,\"686\":14,\"705\":5,\"712\":3,\"713\":4,\"731\":1,\"732\":1,\"734\":1,\"756\":1,\"759\":1,\"796\":1,\"797\":1,\"809\":1,\"812\":3}}],[\"database这个包所以社区版本的idea无法安装\",{\"1\":{\"535\":1}}],[\"databaseenum\",{\"1\":{\"468\":1}}],[\"database\",{\"1\":{\"12\":1,\"115\":1,\"157\":1,\"465\":1,\"468\":1,\"470\":1,\"483\":1,\"490\":1,\"506\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"danger\",{\"1\":{\"60\":1}}],[\"dameng\",{\"1\":{\"9\":3,\"372\":1,\"483\":1}}],[\"db1queryruntimecontext\",{\"1\":{\"486\":1}}],[\"db1queryconfiguration\",{\"1\":{\"192\":1,\"485\":1,\"486\":1}}],[\"db1datasource\",{\"1\":{\"192\":1,\"479\":1,\"485\":1,\"486\":1}}],[\"db1\",{\"1\":{\"192\":3,\"479\":2,\"481\":1,\"482\":1,\"483\":2,\"485\":3,\"486\":4}}],[\"db\",{\"1\":{\"8\":1,\"192\":1,\"482\":1,\"485\":1,\"486\":2,\"740\":1}}],[\"达梦dameng\",{\"1\":{\"9\":1,\"372\":1}}],[\"h\",{\"1\":{\"666\":2}}],[\"hh\",{\"1\":{\"666\":2}}],[\"html\",{\"1\":{\"517\":1}}],[\"httplogrequest\",{\"1\":{\"273\":10,\"274\":17}}],[\"https\",{\"1\":{\"94\":2,\"114\":1,\"118\":1,\"157\":1,\"206\":1,\"384\":1,\"390\":1,\"457\":1,\"462\":1,\"464\":1,\"475\":1,\"489\":1,\"494\":1,\"745\":1,\"746\":1,\"775\":1,\"801\":1}}],[\"http\",{\"1\":{\"15\":1,\"157\":3,\"205\":3,\"365\":2,\"366\":4,\"481\":1,\"517\":1,\"519\":4,\"742\":1,\"783\":6,\"789\":12,\"793\":30,\"794\":12,\"795\":6}}],[\"hikari\",{\"1\":{\"481\":1,\"483\":1,\"517\":1}}],[\"hikaridatasource\",{\"1\":{\"34\":2,\"167\":2,\"192\":1,\"397\":2,\"479\":1,\"485\":1,\"486\":1,\"517\":9}}],[\"histroy\",{\"1\":{\"140\":2}}],[\"historybooks\",{\"1\":{\"140\":3}}],[\"helpcode\",{\"1\":{\"507\":1,\"508\":5}}],[\"help\",{\"1\":{\"337\":1,\"338\":1,\"339\":1,\"340\":2,\"341\":1,\"342\":1,\"506\":5,\"507\":1}}],[\"helpprovince\",{\"1\":{\"335\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1}}],[\"helpprovinceproxy\",{\"1\":{\"334\":1,\"335\":5,\"340\":1,\"341\":1,\"342\":2}}],[\"hello\",{\"1\":{\"34\":1,\"125\":1,\"167\":1,\"480\":3,\"481\":1,\"482\":3,\"501\":1,\"517\":2}}],[\"here\",{\"1\":{\"83\":1,\"332\":1,\"553\":1}}],[\"having等之后\",{\"1\":{\"728\":1}}],[\"having的原生sql片段是具体表的o\",{\"1\":{\"663\":1}}],[\"havingmerge\",{\"1\":{\"652\":2}}],[\"having都是相同原理\",{\"1\":{\"334\":1}}],[\"having\",{\"1\":{\"65\":1,\"184\":6,\"531\":2,\"601\":1,\"608\":1}}],[\"hasxiaomingclass\",{\"1\":{\"694\":2,\"696\":2}}],[\"hashset<>\",{\"1\":{\"284\":1,\"485\":1,\"805\":1,\"809\":1}}],[\"hashmap<>\",{\"1\":{\"271\":1,\"273\":1,\"274\":2,\"420\":1,\"508\":1,\"523\":1,\"623\":2,\"781\":1,\"787\":1}}],[\"hashmap<string\",{\"1\":{\"271\":1,\"273\":1,\"274\":2,\"420\":1,\"508\":1,\"523\":1,\"623\":2,\"781\":1,\"787\":1}}],[\"has\",{\"1\":{\"58\":1,\"66\":1}}],[\"hour\",{\"1\":{\"290\":1}}],[\"hoq==\",{\"1\":{\"249\":1}}],[\"hoq==56qklsvta6ee9qpwjbysrq==kdiasgoxezjk9m+qem\",{\"1\":{\"249\":3}}],[\"how\",{\"1\":{\"55\":1}}],[\"hope\",{\"1\":{\"7\":1,\"77\":1,\"82\":1,\"89\":1,\"843\":1,\"848\":1}}],[\"huaweicloud\",{\"1\":{\"15\":1}}],[\"h2booktest\",{\"1\":{\"669\":18}}],[\"h2o\",{\"1\":{\"63\":1,\"829\":1}}],[\"h2\",{\"1\":{\"9\":4,\"123\":2,\"372\":2,\"384\":1,\"483\":1,\"499\":2}}],[\"mvnrepository\",{\"1\":{\"801\":1}}],[\"mutlidatasource\",{\"1\":{\"525\":1}}],[\"multidatasourceconfiguration\",{\"1\":{\"523\":1}}],[\"multiconnwaittimeoutmillis\",{\"1\":{\"407\":1,\"469\":1}}],[\"multiply\",{\"1\":{\"365\":1,\"366\":1,\"742\":1}}],[\"multi\",{\"1\":{\"126\":1,\"158\":1,\"160\":1,\"209\":1,\"483\":1,\"522\":5,\"632\":1,\"634\":2}}],[\"mm\",{\"1\":{\"293\":1,\"296\":1,\"666\":16}}],[\"mzcc2dqxidxgrye2rq==n1pxqra9c9lfh5xcy6xj6w==\",{\"1\":{\"249\":1,\"252\":1}}],[\"mtizndu2nzg5mde=\",{\"1\":{\"214\":2}}],[\"m\",{\"1\":{\"185\":5,\"293\":1,\"296\":1,\"666\":7,\"670\":4}}],[\"miss\",{\"1\":{\"483\":1}}],[\"millis\",{\"1\":{\"483\":2}}],[\"michael\",{\"1\":{\"388\":1}}],[\"minordefault\",{\"1\":{\"601\":1}}],[\"minute\",{\"1\":{\"290\":1}}],[\"min\",{\"1\":{\"182\":1,\"221\":1,\"224\":1,\"288\":4,\"469\":1,\"726\":1}}],[\"mirror>\",{\"1\":{\"15\":2}}],[\"mirrors\",{\"1\":{\"15\":2}}],[\"mirrorof>\",{\"1\":{\"15\":2}}],[\"mojo<\",{\"1\":{\"519\":1}}],[\"month\",{\"1\":{\"290\":1,\"737\":9}}],[\"mobile\",{\"1\":{\"229\":1,\"584\":1,\"631\":1,\"669\":1}}],[\"modify\",{\"1\":{\"804\":1}}],[\"mode\",{\"1\":{\"483\":1,\"632\":1,\"634\":4}}],[\"modelversion>\",{\"1\":{\"157\":1,\"519\":1}}],[\"module\",{\"1\":{\"126\":1,\"158\":1,\"160\":1}}],[\"more\",{\"1\":{\"59\":1,\"81\":1,\"847\":1}}],[\"myassertexceptionfactory\",{\"1\":{\"814\":2,\"815\":1,\"816\":1}}],[\"myaddress\",{\"1\":{\"110\":5}}],[\"mybooleanlogicdeletestrategy\",{\"1\":{\"809\":1}}],[\"mybatis\",{\"1\":{\"384\":2,\"385\":3,\"386\":3,\"387\":3,\"388\":4,\"389\":4,\"596\":1}}],[\"mypager<>\",{\"1\":{\"691\":1}}],[\"mypager<tentity>\",{\"1\":{\"690\":1}}],[\"mypager\",{\"1\":{\"690\":2}}],[\"mypageresult<>\",{\"1\":{\"690\":1}}],[\"mypageresult<tentity>\",{\"1\":{\"689\":1}}],[\"mypageresult\",{\"1\":{\"689\":1}}],[\"mynameconversion\",{\"1\":{\"547\":2,\"548\":2}}],[\"myrequest\",{\"1\":{\"526\":2}}],[\"myeq\",{\"1\":{\"493\":1}}],[\"myencryptionstrategy\",{\"1\":{\"191\":1,\"219\":3,\"491\":1,\"523\":1}}],[\"myentityinterceptor\",{\"1\":{\"116\":1,\"191\":1,\"257\":1,\"260\":2,\"262\":2,\"491\":1,\"493\":1,\"523\":1}}],[\"my1\",{\"1\":{\"314\":2,\"316\":2}}],[\"mylambdaparser\",{\"1\":{\"313\":2}}],[\"mylogicdelstrategy\",{\"1\":{\"116\":1,\"191\":1,\"284\":5,\"485\":3,\"486\":1,\"491\":1,\"493\":1,\"523\":1}}],[\"mytype\",{\"1\":{\"310\":2,\"562\":2}}],[\"mytenantinterceptor\",{\"1\":{\"191\":1,\"260\":2,\"265\":2,\"491\":1,\"523\":1}}],[\"mysysoutlogimpl\",{\"1\":{\"521\":2}}],[\"mystarterconfigurer\",{\"1\":{\"273\":1,\"547\":3,\"815\":3}}],[\"mysql不生效\",{\"0\":{\"745\":1}}],[\"mysql不支持指定所以设置了也无效\",{\"1\":{\"373\":1}}],[\"mysql数据库那么需要默认在连接字符串添加配置信息usecursorfetch=true\",{\"1\":{\"740\":1}}],[\"mysql语法\",{\"1\":{\"395\":1}}],[\"mysqlnextid\",{\"1\":{\"254\":3,\"581\":3}}],[\"mysql加密解密\",{\"0\":{\"229\":1,\"584\":1}}],[\"mysqllambdaproviderimpl<>\",{\"1\":{\"223\":1}}],[\"mysqllambdaproviderimpl<topic>\",{\"1\":{\"223\":1}}],[\"mysqllambdaproviderimpl<t>\",{\"1\":{\"223\":1}}],[\"mysqllambdaproviderimpl\",{\"1\":{\"223\":1}}],[\"mysqllambdaprovider<t>\",{\"1\":{\"223\":3}}],[\"mysqlprovider\",{\"1\":{\"223\":4}}],[\"mysqlproviderimpl<>\",{\"1\":{\"223\":1}}],[\"mysqlproviderimpl<topic>\",{\"1\":{\"223\":1}}],[\"mysqlproviderimpl<t>\",{\"1\":{\"223\":1}}],[\"mysqlproviderimpl\",{\"1\":{\"223\":1}}],[\"mysqlprovider<t>\",{\"1\":{\"223\":3}}],[\"mysql需要链接字符串启用批处理参数rewritebatchedstatements=true\",{\"1\":{\"203\":1}}],[\"mysqlaescolumnvaluesqlconverter\",{\"1\":{\"192\":1}}],[\"mysqlaesencryptcolumnvaluesqlconverter\",{\"1\":{\"116\":1,\"191\":1,\"231\":3,\"491\":1,\"493\":1,\"523\":1,\"586\":3}}],[\"mysqldatabaseconfiguration\",{\"1\":{\"34\":1,\"167\":1,\"271\":1,\"397\":1,\"460\":1,\"466\":1,\"471\":1,\"491\":1,\"517\":2,\"523\":1,\"548\":1,\"798\":1,\"816\":1}}],[\"mysql驱动\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"120\":1,\"121\":1,\"157\":1,\"163\":1,\"395\":1,\"496\":1,\"497\":1,\"504\":1,\"513\":1,\"519\":1}}],[\"mysql<\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"120\":1,\"121\":1,\"163\":1,\"395\":1,\"453\":1,\"460\":1,\"466\":1,\"496\":1,\"497\":1,\"513\":1,\"519\":1}}],[\"mysql方言\",{\"0\":{\"364\":1},\"1\":{\"30\":1,\"31\":1,\"44\":1,\"163\":1}}],[\"mysql\",{\"1\":{\"9\":4,\"12\":1,\"34\":2,\"115\":1,\"124\":2,\"157\":3,\"167\":2,\"203\":1,\"204\":3,\"372\":2,\"397\":2,\"465\":1,\"468\":3,\"470\":1,\"481\":2,\"483\":3,\"490\":1,\"500\":2,\"517\":3,\"740\":1,\"780\":3,\"781\":2,\"786\":3,\"787\":2,\"792\":3}}],[\"myconfiguration\",{\"1\":{\"493\":1,\"547\":1,\"815\":1}}],[\"mycontroller\",{\"1\":{\"125\":1,\"501\":1,\"509\":1,\"526\":1}}],[\"mycompany1\",{\"1\":{\"314\":2,\"316\":1}}],[\"mycolumnpropertyfunction\",{\"1\":{\"227\":4}}],[\"my\",{\"1\":{\"125\":1,\"311\":3,\"420\":1,\"501\":1,\"509\":1,\"526\":1,\"600\":1}}],[\"mydatabaseincrementsqlcolumngenerator\",{\"1\":{\"116\":1,\"191\":1,\"254\":2,\"491\":1,\"493\":1,\"523\":1,\"581\":2}}],[\"message\",{\"1\":{\"812\":6}}],[\"memory\",{\"1\":{\"469\":1,\"483\":1}}],[\"mem\",{\"1\":{\"123\":1,\"499\":1}}],[\"merge\",{\"1\":{\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"483\":1}}],[\"mergepoolsize\",{\"1\":{\"122\":4,\"498\":4}}],[\"mermaid\",{\"0\":{\"73\":1,\"839\":1}}],[\"methodsignature\",{\"1\":{\"525\":2}}],[\"methodtype\",{\"1\":{\"480\":1,\"482\":2}}],[\"methodhandles\",{\"1\":{\"460\":1}}],[\"methodhandleinfo\",{\"1\":{\"313\":1}}],[\"methodvisitor\",{\"1\":{\"313\":2}}],[\"methoddesc\",{\"1\":{\"313\":3}}],[\"methodbody=methodbody\",{\"1\":{\"313\":1}}],[\"methodbody\",{\"1\":{\"313\":13}}],[\"method\",{\"1\":{\"117\":1,\"313\":11,\"411\":2,\"450\":1,\"480\":1,\"482\":2,\"493\":1,\"505\":1,\"524\":1,\"525\":3}}],[\"meta\",{\"1\":{\"84\":1}}],[\"menu`\",{\"1\":{\"149\":2}}],[\"menu\",{\"1\":{\"112\":1}}],[\"menuidnames\",{\"1\":{\"112\":1}}],[\"menuids\",{\"1\":{\"112\":2}}],[\"menus\",{\"1\":{\"111\":1,\"112\":4,\"149\":4}}],[\"mr\",{\"1\":{\"77\":1,\"843\":1}}],[\"md\",{\"1\":{\"59\":1,\"826\":1}}],[\"msg\",{\"1\":{\"510\":2,\"814\":12}}],[\"ms\",{\"1\":{\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":2,\"40\":2,\"41\":1,\"42\":1,\"82\":1,\"167\":1,\"168\":5,\"169\":1,\"170\":1,\"171\":2,\"173\":2,\"174\":1,\"175\":1,\"233\":1,\"235\":1,\"250\":1,\"251\":1,\"252\":2,\"285\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"315\":6,\"323\":1,\"397\":2,\"407\":3,\"418\":1,\"469\":1,\"482\":1,\"521\":1,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"588\":1,\"590\":1,\"615\":3,\"616\":1,\"631\":2,\"633\":2,\"642\":2,\"650\":1,\"651\":1,\"667\":2,\"673\":6,\"679\":1,\"682\":2,\"683\":2,\"706\":2,\"707\":2,\"708\":2,\"709\":3,\"710\":4,\"712\":6,\"713\":11,\"737\":1,\"742\":1,\"744\":2,\"757\":1,\"758\":1,\"759\":1,\"760\":1,\"772\":1,\"774\":1,\"783\":4,\"789\":2,\"794\":2,\"795\":1,\"848\":1}}],[\"mssql\",{\"1\":{\"9\":6,\"372\":1,\"483\":2}}],[\"many\",{\"1\":{\"707\":1,\"709\":1,\"710\":2,\"712\":4,\"713\":2}}],[\"manytoone\",{\"0\":{\"708\":1},\"1\":{\"697\":1,\"705\":2,\"713\":2}}],[\"manytomany\",{\"1\":{\"111\":3,\"697\":1,\"705\":3,\"713\":1}}],[\"match\",{\"1\":{\"483\":1}}],[\"matched\",{\"1\":{\"374\":1,\"375\":1,\"376\":2,\"377\":4}}],[\"mathmethodenum\",{\"1\":{\"236\":2,\"564\":2}}],[\"math\",{\"1\":{\"236\":2,\"469\":1,\"564\":2}}],[\"mac就是command+n\",{\"1\":{\"157\":1}}],[\"maxactive\",{\"1\":{\"781\":1,\"787\":1}}],[\"maxordefault\",{\"1\":{\"601\":1}}],[\"maximumpoolsize\",{\"1\":{\"517\":1}}],[\"maximum\",{\"1\":{\"483\":1}}],[\"maxshardingroutecount\",{\"1\":{\"407\":1,\"469\":1}}],[\"maxshardingquerylimit❗️\",{\"1\":{\"469\":1}}],[\"maxshardingquerylimit\",{\"1\":{\"407\":2}}],[\"max等\",{\"1\":{\"221\":1,\"224\":1}}],[\"max\",{\"1\":{\"147\":2,\"182\":1,\"184\":4,\"237\":2,\"288\":4,\"483\":2,\"565\":2,\"608\":1,\"726\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"male\",{\"1\":{\"132\":1}}],[\"map结果返回\",{\"0\":{\"748\":1}}],[\"map返回默认key忽略大小写\",{\"1\":{\"657\":1,\"752\":1}}],[\"maptobeanstrict\",{\"1\":{\"468\":1}}],[\"maptypeproxy\",{\"1\":{\"185\":4,\"735\":1}}],[\"mapupdatable\",{\"1\":{\"420\":1}}],[\"map更新\",{\"0\":{\"420\":1}}],[\"mapproxy\",{\"1\":{\"650\":2,\"651\":2}}],[\"mapper\",{\"1\":{\"385\":2,\"386\":2,\"387\":2,\"388\":2,\"389\":2}}],[\"mappingclass\",{\"1\":{\"704\":1,\"705\":3}}],[\"mappingpath\",{\"1\":{\"112\":3}}],[\"mapping\",{\"1\":{\"111\":2,\"166\":1,\"480\":2,\"482\":3}}],[\"mapinsertable\",{\"1\":{\"370\":1}}],[\"map插入\",{\"0\":{\"370\":1}}],[\"map\",{\"0\":{\"612\":1,\"755\":1},\"1\":{\"185\":10,\"508\":1,\"613\":1,\"623\":1,\"735\":1,\"781\":1,\"787\":1}}],[\"mapkey<integer>\",{\"1\":{\"185\":2}}],[\"mapkey<string>\",{\"1\":{\"185\":4}}],[\"mapkeys\",{\"1\":{\"185\":6}}],[\"map链式结果\",{\"1\":{\"185\":1}}],[\"map<integer\",{\"1\":{\"508\":1}}],[\"map<string\",{\"1\":{\"117\":13,\"269\":1,\"271\":1,\"273\":1,\"274\":2,\"308\":1,\"370\":1,\"493\":13,\"522\":2,\"574\":1,\"623\":2,\"735\":1,\"773\":1,\"774\":1,\"781\":2,\"787\":2}}],[\"map<java\",{\"1\":{\"117\":1,\"493\":1}}],[\"mapstruct\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1}}],[\"mark\",{\"0\":{\"67\":1},\"1\":{\"67\":1}}],[\"markdown\",{\"0\":{\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"821\":1,\"822\":1,\"823\":1,\"824\":1},\"1\":{\"51\":1,\"54\":2,\"55\":3,\"56\":1,\"57\":3,\"58\":2,\"59\":1,\"60\":1,\"75\":1,\"82\":1,\"83\":2,\"818\":1,\"821\":2,\"822\":3,\"823\":1,\"824\":3,\"825\":2,\"826\":1,\"827\":1,\"841\":1,\"848\":1,\"849\":2}}],[\"mainclass>\",{\"1\":{\"519\":1}}],[\"main函数快速开始🔥🔥🔥\",{\"0\":{\"159\":1}}],[\"main\",{\"1\":{\"34\":2,\"167\":2,\"274\":2,\"397\":2,\"481\":3,\"487\":1,\"517\":1,\"519\":1,\"549\":1,\"801\":1}}],[\"maven2\",{\"1\":{\"519\":1}}],[\"maven项目\",{\"0\":{\"477\":1}}],[\"maven\",{\"1\":{\"15\":4,\"17\":1,\"157\":9,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"519\":7}}],[\"peek\",{\"1\":{\"744\":1}}],[\"pjp\",{\"1\":{\"525\":3}}],[\"phase>\",{\"1\":{\"519\":2}}],[\"phone=null\",{\"1\":{\"773\":1,\"774\":1}}],[\"phone=13232456789\",{\"1\":{\"233\":1,\"588\":1}}],[\"phonesupportlike\",{\"1\":{\"219\":1}}],[\"phonenotsupportlike\",{\"1\":{\"219\":1}}],[\"phone\",{\"1\":{\"21\":1,\"22\":1,\"23\":1,\"25\":2,\"185\":23,\"186\":2,\"230\":1,\"231\":1,\"585\":1,\"586\":1,\"773\":6,\"774\":5}}],[\"psvm下\",{\"0\":{\"394\":1}}],[\"p\",{\"1\":{\"388\":2,\"631\":3}}],[\"p2\",{\"1\":{\"220\":2}}],[\"pbnjuykleazzorrnmuupja==igrqqipsftsbjal4l1uvia==act0smpmvtnwd\",{\"1\":{\"220\":2}}],[\"pcbc\",{\"1\":{\"216\":3}}],[\"pkcs5padding\",{\"1\":{\"216\":6}}],[\"publishtimeend\",{\"1\":{\"629\":1,\"631\":2,\"632\":1,\"634\":1}}],[\"publishtimebegin\",{\"1\":{\"629\":1,\"631\":2,\"632\":1,\"634\":1}}],[\"publishtime\",{\"1\":{\"600\":1,\"631\":4,\"632\":2,\"634\":2,\"732\":1}}],[\"public\",{\"1\":{\"15\":2,\"21\":1,\"22\":1,\"34\":2,\"38\":1,\"41\":1,\"83\":1,\"110\":2,\"111\":8,\"112\":1,\"117\":2,\"122\":9,\"123\":4,\"125\":2,\"140\":4,\"152\":5,\"157\":1,\"167\":2,\"171\":1,\"174\":1,\"192\":3,\"196\":1,\"200\":4,\"201\":4,\"219\":4,\"223\":8,\"227\":11,\"230\":1,\"231\":5,\"236\":8,\"254\":3,\"260\":16,\"262\":6,\"265\":6,\"271\":4,\"273\":9,\"274\":16,\"284\":7,\"306\":14,\"307\":2,\"308\":11,\"309\":5,\"310\":6,\"311\":5,\"313\":10,\"350\":1,\"354\":1,\"358\":1,\"362\":1,\"396\":1,\"397\":2,\"400\":1,\"411\":2,\"412\":1,\"417\":1,\"425\":1,\"426\":1,\"429\":1,\"430\":1,\"479\":2,\"480\":2,\"481\":2,\"482\":4,\"485\":6,\"486\":4,\"487\":2,\"491\":1,\"493\":4,\"498\":9,\"499\":4,\"501\":2,\"505\":10,\"507\":2,\"508\":2,\"509\":2,\"510\":1,\"521\":9,\"522\":23,\"523\":4,\"524\":1,\"525\":3,\"526\":7,\"530\":1,\"532\":1,\"547\":6,\"548\":2,\"549\":2,\"556\":7,\"557\":1,\"562\":6,\"564\":10,\"572\":14,\"573\":2,\"574\":11,\"579\":5,\"581\":3,\"585\":1,\"586\":7,\"592\":9,\"600\":1,\"620\":2,\"621\":3,\"622\":3,\"623\":3,\"629\":1,\"631\":7,\"632\":1,\"634\":2,\"669\":1,\"686\":13,\"689\":5,\"690\":4,\"705\":5,\"712\":3,\"713\":4,\"731\":1,\"732\":1,\"734\":1,\"756\":1,\"759\":1,\"781\":2,\"782\":2,\"783\":2,\"787\":2,\"788\":2,\"789\":2,\"793\":2,\"794\":2,\"795\":1,\"796\":3,\"797\":4,\"798\":1,\"802\":1,\"803\":7,\"804\":7,\"805\":5,\"807\":6,\"809\":10,\"812\":6,\"813\":1,\"814\":7,\"815\":4,\"849\":1}}],[\"putall\",{\"1\":{\"522\":1}}],[\"put\",{\"1\":{\"185\":6,\"370\":4,\"420\":3,\"508\":1,\"523\":1,\"623\":4,\"650\":1,\"651\":1,\"781\":1,\"787\":1}}],[\"place\",{\"1\":{\"83\":1}}],[\"playground\",{\"0\":{\"78\":1,\"79\":1}}],[\"plan\",{\"1\":{\"68\":2}}],[\"please\",{\"1\":{\"55\":1,\"58\":1,\"83\":1}}],[\"plusminutes\",{\"1\":{\"797\":1}}],[\"plusmonths\",{\"1\":{\"290\":1,\"737\":1}}],[\"plusaccount\",{\"1\":{\"388\":2,\"389\":10}}],[\"plus的\",{\"1\":{\"383\":1}}],[\"plus的模式\",{\"1\":{\"43\":1,\"46\":1}}],[\"plusyears\",{\"1\":{\"290\":1}}],[\"plus\",{\"1\":{\"290\":1,\"384\":1,\"385\":2,\"386\":2,\"387\":2,\"388\":3,\"389\":3,\"596\":1}}],[\"plusdays\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"358\":1,\"362\":1,\"365\":2,\"366\":2,\"368\":1,\"369\":1,\"742\":2}}],[\"plugin插件在0\",{\"1\":{\"166\":3}}],[\"plugin\",{\"1\":{\"59\":1,\"826\":1}}],[\"plugins>\",{\"1\":{\"157\":1,\"455\":1,\"519\":1,\"801\":1}}],[\"plugins\",{\"1\":{\"57\":1}}],[\"plugins<\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"176\":1,\"455\":1}}],[\"plugin>\",{\"1\":{\"17\":1,\"157\":1,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"519\":4,\"801\":1}}],[\"plugin<\",{\"1\":{\"17\":1,\"157\":1,\"158\":1,\"167\":1,\"176\":1,\"455\":1,\"478\":1,\"519\":4,\"801\":1}}],[\"package\",{\"1\":{\"804\":2}}],[\"packaging>\",{\"1\":{\"519\":1}}],[\"paginate\",{\"1\":{\"388\":1}}],[\"pagetotal\",{\"1\":{\"690\":5}}],[\"pager<tentity\",{\"1\":{\"688\":1,\"690\":1}}],[\"pageresult<topicgenerickey>\",{\"1\":{\"691\":1}}],[\"pageresult<tentity>>\",{\"1\":{\"690\":1}}],[\"pageresult<tentity>\",{\"1\":{\"689\":1,\"690\":1}}],[\"pageresult<t>\",{\"1\":{\"689\":1}}],[\"pageresult1\",{\"1\":{\"641\":1,\"667\":1}}],[\"pageresult\",{\"1\":{\"23\":1,\"24\":1,\"25\":2,\"40\":1,\"173\":1,\"601\":2,\"690\":3,\"691\":3}}],[\"pageindex\",{\"1\":{\"685\":2,\"686\":2,\"690\":7}}],[\"page<plusaccount>\",{\"1\":{\"388\":1}}],[\"pagesize\",{\"1\":{\"388\":3,\"685\":2,\"686\":2,\"690\":7}}],[\"pages\",{\"1\":{\"54\":2}}],[\"page\",{\"0\":{\"81\":1,\"82\":1,\"83\":1,\"84\":1},\"1\":{\"51\":1,\"52\":4,\"56\":1,\"75\":1,\"81\":1,\"82\":2,\"84\":2,\"388\":4,\"682\":1,\"683\":1}}],[\"password\",{\"1\":{\"123\":2,\"124\":1,\"157\":1,\"481\":1,\"483\":1,\"499\":2,\"500\":1,\"517\":1,\"523\":1,\"780\":1,\"781\":3,\"786\":1,\"787\":3,\"792\":1}}],[\"path\",{\"1\":{\"117\":1,\"313\":3,\"493\":1}}],[\"path>\",{\"1\":{\"17\":3,\"158\":3,\"167\":3,\"176\":3,\"455\":2,\"514\":1,\"519\":1}}],[\"partition\",{\"1\":{\"669\":7,\"734\":2}}],[\"parsing\",{\"1\":{\"313\":1}}],[\"parseobject\",{\"1\":{\"309\":1,\"579\":1}}],[\"parsed\",{\"1\":{\"57\":1}}],[\"parent>\",{\"1\":{\"157\":1}}],[\"parent<\",{\"1\":{\"157\":1}}],[\"parenttype\",{\"1\":{\"140\":1}}],[\"parent\",{\"1\":{\"127\":2,\"157\":1}}],[\"params\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"param\",{\"1\":{\"200\":2,\"201\":2,\"230\":8,\"236\":14,\"486\":2,\"521\":1,\"522\":5,\"530\":3,\"564\":14,\"585\":8,\"809\":9}}],[\"parameter+\",{\"1\":{\"530\":1}}],[\"parameter\",{\"1\":{\"117\":1,\"493\":1,\"530\":2}}],[\"parameters\",{\"1\":{\"23\":2,\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":2,\"39\":2,\"40\":2,\"41\":1,\"140\":3,\"167\":1,\"168\":5,\"169\":1,\"170\":1,\"171\":2,\"172\":2,\"173\":2,\"174\":2,\"205\":3,\"214\":4,\"220\":11,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"249\":1,\"250\":2,\"251\":1,\"252\":3,\"260\":4,\"262\":1,\"265\":5,\"278\":4,\"280\":2,\"281\":2,\"285\":3,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"314\":1,\"315\":6,\"316\":2,\"323\":2,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"351\":3,\"352\":3,\"353\":1,\"355\":2,\"356\":1,\"359\":1,\"360\":10,\"361\":2,\"362\":1,\"363\":3,\"365\":1,\"366\":3,\"397\":2,\"417\":3,\"418\":2,\"419\":2,\"482\":1,\"517\":1,\"521\":1,\"562\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":2,\"615\":3,\"616\":1,\"626\":3,\"631\":2,\"633\":2,\"642\":2,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"656\":1,\"659\":1,\"662\":1,\"667\":3,\"673\":6,\"682\":2,\"694\":6,\"696\":6,\"706\":1,\"707\":1,\"708\":1,\"709\":2,\"710\":3,\"712\":4,\"713\":6,\"737\":1,\"738\":1,\"739\":1,\"742\":1,\"744\":2,\"751\":1,\"754\":1,\"757\":1,\"758\":1,\"759\":1,\"760\":1,\"772\":1,\"774\":1,\"782\":10,\"783\":6,\"788\":10,\"789\":4,\"793\":10,\"794\":4,\"795\":2}}],[\"paragraph\",{\"1\":{\"53\":26}}],[\"prcessor模块新建模板\",{\"1\":{\"804\":1}}],[\"preferquerymode\",{\"1\":{\"740\":1}}],[\"predicatefilterinterceptor\",{\"0\":{\"263\":1},\"1\":{\"256\":1,\"260\":1,\"265\":1}}],[\"presentation\",{\"0\":{\"80\":1}}],[\"prev\",{\"1\":{\"52\":1}}],[\"preparing\",{\"1\":{\"23\":2,\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":2,\"39\":2,\"40\":2,\"41\":1,\"42\":2,\"140\":3,\"167\":1,\"168\":5,\"169\":1,\"170\":1,\"171\":2,\"172\":2,\"173\":2,\"174\":2,\"175\":2,\"205\":1,\"214\":4,\"220\":11,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"249\":1,\"250\":2,\"251\":1,\"252\":3,\"260\":4,\"262\":1,\"265\":5,\"278\":4,\"280\":3,\"281\":2,\"285\":4,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":1,\"314\":1,\"315\":6,\"316\":2,\"323\":2,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"351\":3,\"352\":3,\"353\":1,\"355\":2,\"356\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":1,\"363\":3,\"365\":1,\"366\":3,\"397\":2,\"417\":3,\"418\":2,\"419\":2,\"482\":1,\"517\":1,\"521\":1,\"562\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2,\"587\":1,\"588\":1,\"589\":1,\"590\":2,\"615\":3,\"616\":1,\"626\":3,\"631\":2,\"633\":2,\"642\":2,\"645\":1,\"646\":1,\"647\":1,\"648\":1,\"650\":1,\"651\":1,\"655\":1,\"656\":1,\"658\":1,\"659\":1,\"661\":1,\"662\":1,\"667\":3,\"673\":6,\"679\":1,\"681\":2,\"682\":2,\"683\":2,\"694\":6,\"696\":6,\"706\":2,\"707\":2,\"708\":2,\"709\":3,\"710\":4,\"712\":6,\"713\":11,\"737\":1,\"738\":1,\"739\":1,\"742\":1,\"744\":2,\"750\":1,\"751\":1,\"753\":1,\"754\":1,\"757\":1,\"758\":1,\"759\":1,\"760\":1,\"772\":1,\"774\":1,\"782\":10,\"783\":6,\"788\":10,\"789\":4,\"793\":10,\"794\":4,\"795\":2}}],[\"price\",{\"1\":{\"669\":15}}],[\"primary来实现替换\",{\"1\":{\"547\":1}}],[\"primaryket=true\",{\"1\":{\"199\":2}}],[\"primarykeygenerator=uuidprimarykeygenerator\",{\"1\":{\"199\":1}}],[\"primarykeygenerator\",{\"0\":{\"198\":1},\"1\":{\"200\":2,\"201\":2}}],[\"primarykey\",{\"1\":{\"21\":1,\"140\":2,\"152\":5,\"157\":1,\"196\":1,\"200\":3,\"201\":3,\"219\":1,\"231\":1,\"254\":1,\"284\":1,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":2,\"311\":2,\"354\":1,\"358\":1,\"362\":1,\"396\":1,\"400\":1,\"412\":1,\"426\":2,\"429\":1,\"430\":1,\"482\":1,\"507\":2,\"515\":1,\"556\":1,\"557\":1,\"562\":2,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"581\":1,\"586\":1,\"592\":1,\"669\":1,\"705\":5,\"712\":3,\"756\":1,\"796\":1,\"797\":1,\"809\":1}}],[\"primary\",{\"1\":{\"117\":1,\"166\":1,\"311\":1,\"354\":1,\"358\":1,\"412\":1,\"493\":1,\"506\":2,\"547\":1,\"756\":1,\"815\":1}}],[\"printstacktrace\",{\"1\":{\"521\":1}}],[\"printsql\",{\"1\":{\"468\":1}}],[\"print\",{\"1\":{\"115\":1,\"157\":1,\"465\":1,\"470\":1,\"483\":1,\"490\":1}}],[\"println\",{\"1\":{\"34\":1,\"167\":1,\"306\":1,\"308\":1,\"309\":1,\"517\":1,\"521\":15,\"572\":1,\"574\":1,\"579\":1,\"781\":1,\"787\":1}}],[\"private\",{\"1\":{\"21\":6,\"22\":6,\"38\":2,\"41\":3,\"110\":8,\"111\":25,\"112\":6,\"115\":3,\"122\":1,\"125\":1,\"140\":7,\"152\":23,\"157\":8,\"171\":2,\"174\":3,\"196\":5,\"200\":1,\"201\":1,\"219\":6,\"223\":2,\"227\":3,\"231\":7,\"254\":3,\"260\":2,\"273\":2,\"274\":2,\"284\":8,\"306\":6,\"307\":10,\"308\":7,\"309\":7,\"310\":15,\"311\":21,\"313\":9,\"350\":3,\"354\":4,\"358\":4,\"362\":4,\"396\":4,\"400\":4,\"412\":4,\"426\":4,\"429\":5,\"430\":5,\"465\":3,\"482\":5,\"485\":1,\"490\":4,\"498\":1,\"501\":1,\"505\":2,\"507\":9,\"508\":2,\"509\":1,\"522\":4,\"525\":1,\"526\":2,\"545\":1,\"556\":4,\"557\":3,\"562\":15,\"572\":6,\"573\":10,\"574\":7,\"579\":7,\"581\":3,\"586\":7,\"592\":7,\"600\":10,\"620\":2,\"621\":3,\"622\":3,\"623\":1,\"629\":11,\"631\":1,\"632\":11,\"634\":14,\"669\":5,\"686\":5,\"689\":2,\"690\":3,\"705\":18,\"712\":11,\"713\":15,\"731\":5,\"732\":12,\"734\":1,\"756\":4,\"759\":3,\"781\":3,\"782\":1,\"787\":3,\"788\":1,\"793\":1,\"796\":4,\"797\":4,\"803\":2,\"804\":2,\"805\":3,\"807\":2,\"809\":12,\"812\":2,\"814\":1}}],[\"proc>\",{\"1\":{\"801\":1}}],[\"proceed\",{\"1\":{\"525\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"525\":1}}],[\"process\",{\"1\":{\"805\":1}}],[\"processingover\",{\"1\":{\"805\":1}}],[\"processingenv\",{\"1\":{\"805\":5}}],[\"processingenvironment\",{\"1\":{\"805\":1}}],[\"processing\",{\"1\":{\"17\":1,\"158\":1,\"167\":1,\"799\":1,\"805\":1}}],[\"processor这个文件内容填写proxyrepositoryprocessor的全路径类名com\",{\"1\":{\"805\":1}}],[\"processor即可\",{\"1\":{\"166\":1}}],[\"processor<\",{\"1\":{\"17\":1,\"30\":1,\"121\":1,\"157\":1,\"158\":2,\"163\":1,\"167\":1,\"176\":1,\"395\":1,\"453\":1,\"460\":1,\"466\":1,\"497\":1,\"513\":1,\"514\":1,\"519\":2,\"801\":1}}],[\"processor\",{\"1\":{\"17\":2,\"126\":1,\"158\":3,\"167\":2,\"176\":2,\"395\":1,\"453\":1,\"460\":1,\"466\":1,\"801\":3,\"805\":3}}],[\"processors\",{\"1\":{\"17\":2,\"158\":2,\"167\":2,\"469\":1}}],[\"processor包或者在项目maven插件处进行配置\",{\"1\":{\"161\":1}}],[\"processor包即可\",{\"1\":{\"158\":1}}],[\"processor包在build之后会自动生成代理对象\",{\"1\":{\"33\":1}}],[\"processor包因为这样可以保证在其他ide下也能使用并且不依赖插件\",{\"1\":{\"28\":1}}],[\"processor包+插件使用apt\",{\"1\":{\"28\":1}}],[\"processor包\",{\"1\":{\"17\":1,\"33\":1,\"158\":1,\"167\":2}}],[\"processor各个生成的模块都需要\",{\"1\":{\"13\":1}}],[\"produce\",{\"1\":{\"641\":3}}],[\"program\",{\"1\":{\"517\":1}}],[\"profiles\",{\"1\":{\"157\":1}}],[\"protected\",{\"1\":{\"122\":1,\"284\":2,\"485\":2,\"498\":1,\"796\":2,\"797\":2,\"798\":1,\"809\":3}}],[\"provinces\",{\"1\":{\"712\":1}}],[\"province`\",{\"1\":{\"712\":2}}],[\"provincecode=33\",{\"1\":{\"712\":2}}],[\"provincecode\",{\"1\":{\"712\":3}}],[\"province=\",{\"1\":{\"335\":1}}],[\"province=province1\",{\"1\":{\"315\":5}}],[\"province44\",{\"1\":{\"315\":1}}],[\"province4\",{\"1\":{\"315\":1}}],[\"province22\",{\"1\":{\"315\":1}}],[\"province2\",{\"1\":{\"315\":1}}],[\"province11\",{\"1\":{\"315\":1}}],[\"province1\",{\"1\":{\"314\":2,\"315\":13,\"316\":1}}],[\"province\",{\"1\":{\"111\":1,\"152\":1,\"311\":3,\"315\":3,\"335\":3,\"337\":1,\"338\":1,\"339\":1,\"340\":2,\"341\":1,\"342\":1,\"641\":6,\"712\":8}}],[\"provides\",{\"1\":{\"59\":1}}],[\"properties\",{\"1\":{\"781\":11,\"787\":11,\"801\":1}}],[\"properties>\",{\"1\":{\"115\":1,\"157\":1,\"453\":1,\"455\":1,\"460\":1,\"463\":1,\"465\":1,\"466\":1,\"490\":1,\"519\":1}}],[\"property忽略表示对应的主键\",{\"1\":{\"705\":1}}],[\"property属性模式\",{\"1\":{\"615\":1}}],[\"propertytype\",{\"1\":{\"306\":2,\"572\":2}}],[\"propertycolumnconvert\",{\"1\":{\"230\":2,\"231\":1,\"236\":2,\"556\":1,\"564\":2,\"585\":2,\"586\":1,\"592\":1}}],[\"property<t1\",{\"1\":{\"641\":2}}],[\"property<trentity\",{\"1\":{\"641\":2}}],[\"property<t\",{\"1\":{\"227\":2,\"313\":1}}],[\"propertyname\",{\"1\":{\"140\":2,\"227\":9,\"284\":5,\"313\":3,\"485\":5,\"809\":6}}],[\"propertyquery\",{\"0\":{\"46\":1}}],[\"property的api\",{\"1\":{\"34\":1,\"167\":1}}],[\"property\",{\"1\":{\"27\":1,\"160\":1,\"288\":1,\"289\":1,\"313\":5,\"621\":1,\"622\":1,\"631\":4}}],[\"propnames\",{\"1\":{\"632\":1,\"634\":2}}],[\"propname\",{\"1\":{\"22\":2,\"632\":5,\"634\":5}}],[\"project进行生成\",{\"1\":{\"396\":1}}],[\"project>\",{\"1\":{\"157\":1,\"455\":1,\"519\":1}}],[\"projectlombok<\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"157\":1,\"163\":1,\"395\":1,\"455\":1,\"478\":1,\"504\":1}}],[\"project\",{\"1\":{\"17\":1,\"153\":1,\"157\":1,\"158\":1,\"167\":1,\"455\":1,\"519\":1}}],[\"prohibited\",{\"1\":{\"14\":1}}],[\"proxyrepositoryprocessor\",{\"1\":{\"805\":2}}],[\"proxyrepository\",{\"1\":{\"802\":1,\"803\":1,\"805\":2,\"807\":1}}],[\"proxy的代理模式\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"proxy代理模式\",{\"1\":{\"615\":1}}],[\"proxy都可以让你的代码编写有一个质的飞跃和提升\",{\"1\":{\"527\":1}}],[\"proxyentity<tproxy\",{\"1\":{\"522\":10,\"803\":1}}],[\"proxyentityavailable<user\",{\"1\":{\"807\":1}}],[\"proxyentityavailable<userbook\",{\"1\":{\"152\":1}}],[\"proxyentityavailable<certificate\",{\"1\":{\"592\":1}}],[\"proxyentityavailable<schoolclassaggregateprop\",{\"1\":{\"556\":1}}],[\"proxyentityavailable<sysuseraddress\",{\"1\":{\"152\":1}}],[\"proxyentityavailable<sysuser\",{\"1\":{\"21\":1,\"152\":3}}],[\"proxyentityavailable<t\",{\"1\":{\"522\":10,\"803\":1}}],[\"proxyentityavailable<topicauto\",{\"1\":{\"362\":1}}],[\"proxyentityavailable<topic\",{\"1\":{\"157\":1,\"358\":1,\"400\":1,\"412\":1}}],[\"proxyentityavailable<relationteacher\",{\"1\":{\"140\":1}}],[\"proxyentityavailable<relationuser\",{\"1\":{\"140\":1}}],[\"proxyentityavailable这个接口仅数据库对象需要实现\",{\"1\":{\"33\":1}}],[\"proxy和sql\",{\"1\":{\"460\":1,\"466\":1}}],[\"proxy模式\",{\"0\":{\"452\":1}}],[\"proxyproperty\",{\"0\":{\"448\":1}}],[\"proxy则是真正的针对property的模式增加的强类型entity模式的包\",{\"1\":{\"43\":1,\"162\":1}}],[\"proxy<\",{\"1\":{\"30\":1,\"31\":1,\"121\":1,\"157\":1,\"163\":1,\"395\":1,\"453\":1,\"460\":1,\"466\":1,\"497\":1,\"513\":1,\"519\":1,\"801\":2}}],[\"proxy不存在\",{\"0\":{\"17\":1},\"1\":{\"17\":1,\"158\":1,\"167\":1}}],[\"proxy包\",{\"1\":{\"13\":1}}],[\"proxy\",{\"1\":{\"12\":2,\"27\":1,\"34\":2,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"117\":2,\"140\":1,\"492\":2,\"517\":2,\"804\":1}}],[\"pointer\",{\"0\":{\"773\":1}}],[\"poolsize\",{\"1\":{\"486\":1}}],[\"pool\",{\"1\":{\"157\":1,\"483\":3,\"780\":1,\"786\":1,\"792\":1}}],[\"port\",{\"1\":{\"124\":1,\"157\":1,\"500\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"pom\",{\"1\":{\"15\":1,\"157\":2,\"519\":2}}],[\"postgressql\",{\"1\":{\"9\":1,\"372\":1}}],[\"pgsql不生效\",{\"0\":{\"746\":1}}],[\"pgsql数据库那么需要满足fechsize设置需要\",{\"1\":{\"740\":1}}],[\"pgsql那么请查看文档底部问题\",{\"1\":{\"740\":1}}],[\"pgsql方言\",{\"0\":{\"367\":1}}],[\"pgsql的geo数据新增或者自定义数据库函数生成列时\",{\"1\":{\"255\":1,\"582\":1}}],[\"pgsql\",{\"1\":{\"9\":3,\"372\":1,\"483\":1}}],[\"ss\",{\"1\":{\"666\":2}}],[\"slf4j\",{\"1\":{\"505\":2,\"517\":5,\"525\":1}}],[\"slf4jimpl实现如果你是非spring\",{\"1\":{\"468\":1}}],[\"slow\",{\"1\":{\"14\":1}}],[\"slowoperations\",{\"1\":{\"14\":1}}],[\"skip\",{\"1\":{\"313\":2}}],[\"skip>\",{\"1\":{\"157\":2}}],[\"skip>true<\",{\"1\":{\"157\":2}}],[\"switch\",{\"1\":{\"306\":1,\"572\":1,\"592\":1}}],[\"snowflakeprimarykey\",{\"1\":{\"201\":1}}],[\"snowflakeprimarykeygenerator\",{\"1\":{\"201\":2}}],[\"snowflake\",{\"1\":{\"201\":3}}],[\"snapshot<\",{\"1\":{\"157\":1,\"519\":1}}],[\"s1\",{\"1\":{\"185\":27,\"186\":6,\"735\":4}}],[\"s2\",{\"1\":{\"174\":4}}],[\"sample\",{\"1\":{\"777\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"sayhello\",{\"1\":{\"417\":2}}],[\"sa版权协议\",{\"1\":{\"206\":1}}],[\"sa\",{\"1\":{\"123\":1,\"499\":1}}],[\"safely\",{\"1\":{\"60\":1}}],[\"short\",{\"1\":{\"613\":1,\"635\":1}}],[\"should\",{\"1\":{\"54\":1,\"83\":1,\"84\":1}}],[\"shardingvalue\",{\"1\":{\"798\":2}}],[\"shardinginitrunner\",{\"1\":{\"781\":1,\"787\":1}}],[\"shardinginitializer\",{\"1\":{\"425\":1,\"796\":1}}],[\"shardinginitializermap\",{\"1\":{\"117\":2,\"493\":2}}],[\"shardinginitializer>\",{\"1\":{\"117\":1,\"493\":1}}],[\"shardingquerycountmanager\",{\"1\":{\"545\":1}}],[\"shardingcomparer\",{\"1\":{\"545\":1}}],[\"shardingentitybuilder<t>\",{\"1\":{\"797\":1}}],[\"shardingentitybuilder<topicshardingtime>\",{\"1\":{\"796\":1,\"797\":1}}],[\"shardingentityexpressionexecutor\",{\"1\":{\"545\":1}}],[\"shardingexecutorservice\",{\"1\":{\"545\":1}}],[\"shardingexecutetimeoutmillis\",{\"1\":{\"407\":1,\"469\":1}}],[\"shardingextratablekey\",{\"0\":{\"443\":1},\"1\":{\"797\":1}}],[\"shardingextradatasourcekey\",{\"0\":{\"441\":1}}],[\"shardingtablerouter\",{\"1\":{\"545\":1}}],[\"shardingtablekey\",{\"0\":{\"442\":1},\"1\":{\"796\":1,\"797\":1}}],[\"shardingdatasourcerouter\",{\"1\":{\"545\":1}}],[\"shardingdatasourcekey\",{\"0\":{\"440\":1}}],[\"shardingfetchsize\",{\"1\":{\"469\":1}}],[\"sharding\",{\"1\":{\"124\":1,\"483\":4,\"500\":1,\"775\":2,\"782\":30,\"783\":12,\"788\":30,\"796\":1,\"797\":1}}],[\"shareconnection\",{\"1\":{\"122\":1,\"498\":1}}],[\"s\",{\"1\":{\"82\":1,\"110\":18,\"111\":8,\"112\":10,\"129\":10,\"130\":2,\"131\":2,\"132\":4,\"133\":7,\"134\":6,\"135\":6,\"136\":6,\"137\":4,\"138\":2,\"144\":15,\"145\":2,\"146\":2,\"147\":2,\"148\":2,\"149\":7,\"152\":14,\"185\":10,\"186\":4,\"227\":5,\"308\":2,\"309\":3,\"397\":2,\"487\":5,\"521\":10,\"556\":4,\"557\":6,\"574\":2,\"579\":3,\"623\":3,\"666\":2,\"694\":15,\"696\":15,\"703\":6,\"713\":1,\"729\":2,\"735\":2}}],[\"scf4j\",{\"1\":{\"804\":1}}],[\"score\",{\"1\":{\"600\":1,\"629\":1,\"631\":1,\"632\":1,\"634\":2,\"731\":1,\"732\":1,\"734\":1}}],[\"scope>\",{\"1\":{\"30\":4,\"31\":3,\"120\":1,\"121\":1,\"157\":1,\"478\":1,\"496\":1,\"497\":1,\"504\":1,\"519\":2,\"801\":1}}],[\"schema\",{\"1\":{\"425\":1}}],[\"schemalocation=\",{\"1\":{\"157\":1,\"519\":1}}],[\"scheme\",{\"1\":{\"69\":1}}],[\"schoolteachervo\",{\"1\":{\"713\":1}}],[\"schoolteacher\",{\"1\":{\"705\":1,\"709\":3}}],[\"schoolteachers=\",{\"1\":{\"709\":3}}],[\"schoolteachers=null\",{\"1\":{\"707\":3,\"708\":3}}],[\"schoolteachers\",{\"1\":{\"133\":2,\"135\":1,\"136\":1,\"694\":1,\"696\":1,\"703\":1,\"705\":1,\"713\":1}}],[\"school\",{\"1\":{\"556\":1,\"705\":5}}],[\"schoolcourses\",{\"1\":{\"137\":1}}],[\"schoolcourse\",{\"1\":{\"137\":1}}],[\"schoolclass=schoolclass\",{\"1\":{\"708\":3}}],[\"schoolclass=null\",{\"1\":{\"706\":3,\"707\":3}}],[\"schoolclasses=null\",{\"1\":{\"709\":3}}],[\"schoolclasses\",{\"1\":{\"705\":1}}],[\"schoolclassteacher\",{\"1\":{\"705\":4}}],[\"schoolclassaggregatepropvo\",{\"1\":{\"557\":3}}],[\"schoolclassaggregatepropproxy>\",{\"1\":{\"556\":1}}],[\"schoolclassaggregateprop\",{\"1\":{\"556\":1,\"557\":5}}],[\"schoolclassvo\",{\"1\":{\"138\":1,\"713\":7}}],[\"schoolclass\",{\"1\":{\"129\":5,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":2,\"138\":1,\"694\":8,\"696\":8,\"697\":1,\"703\":1,\"705\":3,\"707\":5,\"709\":5,\"710\":3,\"713\":7}}],[\"schoolstudentvo\",{\"1\":{\"713\":8}}],[\"schoolstudent=null\",{\"1\":{\"706\":3}}],[\"schoolstudent\",{\"1\":{\"134\":1,\"137\":1,\"556\":2,\"694\":1,\"696\":1,\"705\":3,\"706\":5,\"707\":3,\"708\":5,\"713\":12}}],[\"schoolstudentaddressvo\",{\"1\":{\"713\":2}}],[\"schoolstudentaddress=null\",{\"1\":{\"707\":3,\"708\":3}}],[\"schoolstudentaddress=schoolstudentaddress\",{\"1\":{\"706\":3}}],[\"schoolstudentaddress\",{\"1\":{\"130\":1,\"134\":1,\"135\":1,\"136\":1,\"694\":3,\"696\":3,\"703\":1,\"705\":3,\"713\":1}}],[\"schoolstudents=null\",{\"1\":{\"708\":3,\"709\":3}}],[\"schoolstudents=\",{\"1\":{\"707\":3}}],[\"schoolstudents\",{\"1\":{\"129\":5,\"130\":1,\"131\":1,\"132\":2,\"135\":1,\"136\":1,\"137\":1,\"556\":1,\"694\":6,\"696\":6,\"697\":1,\"703\":1,\"705\":1,\"713\":1}}],[\"surefire\",{\"1\":{\"519\":1}}],[\"success\",{\"1\":{\"206\":1}}],[\"sum连表统计\",{\"0\":{\"726\":1}}],[\"sum\",{\"1\":{\"221\":1,\"224\":1,\"608\":1,\"683\":2,\"714\":3,\"724\":2,\"737\":4}}],[\"sumordefault\",{\"1\":{\"182\":1,\"601\":1}}],[\"sumornull\",{\"1\":{\"182\":1}}],[\"sumbigdecimalordefault\",{\"1\":{\"182\":1,\"601\":1}}],[\"sumbigdecimalornull\",{\"1\":{\"182\":1}}],[\"substring\",{\"1\":{\"289\":4,\"313\":4}}],[\"subscript\",{\"0\":{\"63\":1}}],[\"subquery\",{\"1\":{\"152\":1,\"739\":1}}],[\"super\",{\"1\":{\"122\":4,\"313\":2,\"498\":4,\"805\":1,\"812\":1}}],[\"superscript\",{\"0\":{\"63\":1}}],[\"supportedsourceversion\",{\"1\":{\"805\":1}}],[\"supportedannotationtypes\",{\"1\":{\"805\":4}}],[\"supportquerylike\",{\"0\":{\"438\":1},\"1\":{\"212\":1,\"219\":2}}],[\"supports\",{\"1\":{\"57\":1}}],[\"support\",{\"1\":{\"8\":1,\"69\":1,\"214\":18,\"220\":48,\"330\":1,\"551\":1}}],[\"synchronized\",{\"1\":{\"805\":1}}],[\"syntax\",{\"1\":{\"57\":1,\"58\":1,\"59\":1}}],[\"sysmenu\",{\"1\":{\"111\":2,\"112\":2,\"149\":2}}],[\"sysrole\",{\"1\":{\"111\":2,\"112\":2}}],[\"system\",{\"1\":{\"34\":1,\"167\":1,\"269\":1,\"270\":1,\"306\":1,\"308\":1,\"309\":1,\"407\":1,\"469\":1,\"483\":1,\"521\":16,\"572\":1,\"574\":1,\"579\":1,\"781\":1,\"787\":1}}],[\"sysuserentity\",{\"1\":{\"803\":1}}],[\"sysuserentity>\",{\"1\":{\"803\":2}}],[\"sysuserencryption8\",{\"1\":{\"220\":2}}],[\"sysuserencryption7\",{\"1\":{\"220\":4}}],[\"sysuserencryption6\",{\"1\":{\"220\":2}}],[\"sysuserencryption5\",{\"1\":{\"220\":2}}],[\"sysuserencryption4\",{\"1\":{\"220\":2}}],[\"sysuserencryption3\",{\"1\":{\"214\":2,\"220\":2}}],[\"sysuserencryption2\",{\"1\":{\"214\":3,\"220\":3}}],[\"sysuserencryption1\",{\"1\":{\"214\":6,\"220\":6}}],[\"sysuserencryption\",{\"1\":{\"214\":19,\"219\":1,\"220\":37}}],[\"sysuserrepositoryimpl\",{\"1\":{\"803\":2}}],[\"sysuserrepository\",{\"1\":{\"803\":2}}],[\"sysuserversionlonglogicdel\",{\"1\":{\"327\":13,\"328\":14}}],[\"sysuserversionlong1\",{\"1\":{\"323\":2,\"324\":1}}],[\"sysuserversionlong\",{\"1\":{\"323\":13,\"325\":8}}],[\"sysuservo可以是sysuser拷贝的属性\",{\"1\":{\"185\":1}}],[\"sysuservo\",{\"1\":{\"185\":1}}],[\"sysusertrack2\",{\"1\":{\"250\":3,\"252\":3}}],[\"sysusertrack1\",{\"1\":{\"250\":4,\"251\":3,\"252\":3}}],[\"sysusertrack\",{\"1\":{\"249\":10,\"250\":4,\"251\":2,\"252\":4}}],[\"sysusersqlencryption1\",{\"1\":{\"235\":1,\"590\":1}}],[\"sysusersqlencryption\",{\"1\":{\"231\":1,\"232\":2,\"233\":4,\"234\":5,\"235\":7,\"586\":1,\"587\":2,\"588\":4,\"589\":5,\"590\":7}}],[\"sysuser>\",{\"1\":{\"185\":1,\"649\":1}}],[\"sysuserflatdto\",{\"1\":{\"112\":2}}],[\"sysuseraddressproxy>\",{\"1\":{\"152\":1}}],[\"sysuseraddress\",{\"1\":{\"111\":2,\"152\":4}}],[\"sysuserdtoproxy\",{\"1\":{\"110\":2}}],[\"sysuserdto\",{\"1\":{\"110\":5}}],[\"sysuserproxy\",{\"1\":{\"102\":2,\"103\":1,\"104\":2,\"105\":2,\"157\":1,\"166\":1,\"185\":10}}],[\"sysuserproxy>接口和sysuserproxy全部由插件自动生成\",{\"1\":{\"21\":1}}],[\"sysuserproxy>\",{\"1\":{\"21\":1,\"152\":3}}],[\"sysuserqueryrequest\",{\"1\":{\"22\":1,\"23\":13,\"24\":8,\"25\":29}}],[\"sysuser\",{\"1\":{\"21\":1,\"23\":1,\"24\":1,\"25\":2,\"102\":2,\"103\":2,\"104\":3,\"105\":3,\"110\":3,\"111\":4,\"112\":6,\"144\":3,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"152\":15,\"157\":1,\"166\":1,\"174\":1,\"185\":6,\"186\":2,\"507\":1,\"509\":1,\"530\":1,\"649\":6,\"735\":1,\"772\":5,\"773\":5,\"774\":5,\"812\":4,\"813\":5}}],[\"sys\",{\"1\":{\"21\":1,\"23\":2,\"174\":1,\"185\":7,\"186\":2,\"214\":4,\"219\":1,\"220\":11,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"249\":1,\"250\":2,\"251\":1,\"252\":3,\"323\":2,\"324\":1,\"325\":3,\"327\":2,\"328\":3,\"370\":1,\"506\":3,\"507\":1,\"586\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":2,\"772\":1,\"774\":1}}],[\"simpleentitysqltableowner<>\",{\"1\":{\"556\":2}}],[\"simpletransdiver\",{\"1\":{\"505\":1}}],[\"simpletransservice\",{\"1\":{\"505\":1}}],[\"simplesqltableowner\",{\"1\":{\"230\":1,\"231\":1,\"585\":1,\"586\":1}}],[\"signature\",{\"1\":{\"313\":1,\"525\":2}}],[\"singletonlist\",{\"1\":{\"652\":2,\"656\":1,\"659\":1,\"751\":1,\"754\":1}}],[\"single\",{\"1\":{\"632\":2}}],[\"single和first获取单条数据\",{\"1\":{\"403\":1}}],[\"singlenotnull分别是对查询结果进行第一条数据的返回\",{\"1\":{\"399\":1}}],[\"singlenotnull\",{\"1\":{\"100\":1,\"107\":1,\"179\":1,\"399\":1,\"532\":2}}],[\"singleornull\",{\"1\":{\"34\":1,\"35\":1,\"167\":1,\"168\":1,\"179\":1,\"399\":2}}],[\"size`\",{\"1\":{\"557\":3}}],[\"size大\",{\"1\":{\"469\":1}}],[\"size\",{\"1\":{\"69\":1,\"271\":2,\"273\":2,\"274\":4,\"483\":6,\"780\":1,\"786\":1,\"792\":1}}],[\"sites\",{\"1\":{\"54\":1}}],[\"sidebar\",{\"1\":{\"52\":1,\"84\":1}}],[\"sortconfig1\",{\"1\":{\"621\":4,\"622\":4}}],[\"sortconfig\",{\"1\":{\"621\":10,\"622\":10}}],[\"sort\",{\"1\":{\"620\":3,\"623\":5}}],[\"socket\",{\"1\":{\"517\":1}}],[\"solon环境替换默认行为\",{\"0\":{\"549\":1}}],[\"solon所有配置\",{\"0\":{\"486\":1}}],[\"solon启动\",{\"0\":{\"481\":1}}],[\"solonjava\",{\"1\":{\"474\":1}}],[\"solon也是一样将需要的bean注入进来\",{\"1\":{\"274\":1}}],[\"solon\",{\"0\":{\"192\":1,\"274\":1},\"1\":{\"274\":2,\"456\":1,\"478\":1,\"481\":2,\"483\":1,\"487\":1,\"549\":1}}],[\"solon配置easy\",{\"0\":{\"483\":1}}],[\"solon配置\",{\"1\":{\"9\":1}}],[\"sourceversion\",{\"1\":{\"805\":3}}],[\"sourcedirectory>\",{\"1\":{\"519\":1}}],[\"sourceencoding>\",{\"1\":{\"519\":1}}],[\"sourceencoding>utf\",{\"1\":{\"519\":1}}],[\"source\",{\"1\":{\"483\":2}}],[\"sources<\",{\"1\":{\"801\":1}}],[\"sources下生成topicproxy\",{\"1\":{\"396\":1}}],[\"sources\",{\"1\":{\"157\":1,\"806\":1}}],[\"source>\",{\"1\":{\"157\":1,\"801\":1}}],[\"source>8<\",{\"1\":{\"157\":1}}],[\"sonatype\",{\"1\":{\"114\":1,\"457\":1,\"462\":1,\"464\":1,\"475\":1,\"489\":1}}],[\"so\",{\"1\":{\"54\":2}}],[\"sometitle\",{\"1\":{\"615\":6,\"616\":2}}],[\"some\",{\"1\":{\"52\":1}}],[\"store\",{\"1\":{\"669\":8}}],[\"storeid\",{\"1\":{\"669\":1}}],[\"stdlib\",{\"1\":{\"519\":1}}],[\"stdoutimpl\",{\"1\":{\"517\":1}}],[\"stdout\",{\"1\":{\"517\":1}}],[\"stus\",{\"1\":{\"706\":1,\"708\":1}}],[\"stu\",{\"1\":{\"129\":8,\"130\":2,\"131\":2,\"132\":2}}],[\"studentid=3\",{\"1\":{\"706\":1}}],[\"studentid=2\",{\"1\":{\"706\":1}}],[\"studentid=1\",{\"1\":{\"706\":1}}],[\"studentid\",{\"1\":{\"705\":3,\"713\":1}}],[\"studentaddressinxxroadclasses\",{\"1\":{\"694\":3,\"696\":3}}],[\"student`\",{\"1\":{\"557\":4,\"694\":5,\"696\":5,\"706\":1,\"707\":1,\"708\":1,\"710\":1,\"713\":4}}],[\"studentsizequery\",{\"1\":{\"556\":4}}],[\"studentsizecolumnvaluesqlconverter\",{\"1\":{\"556\":2}}],[\"studentsize\",{\"1\":{\"554\":1,\"556\":1,\"557\":3}}],[\"student\",{\"1\":{\"100\":1,\"107\":1,\"306\":2,\"308\":1,\"572\":2,\"574\":1,\"694\":2,\"696\":2,\"705\":2,\"706\":1,\"713\":1}}],[\"style为true\",{\"1\":{\"670\":1}}],[\"style>\",{\"1\":{\"519\":1}}],[\"style>official<\",{\"1\":{\"519\":1}}],[\"style\",{\"1\":{\"115\":1,\"157\":1,\"465\":1,\"470\":1,\"483\":1,\"490\":1,\"669\":1}}],[\"stylize\",{\"0\":{\"77\":1}}],[\"str\",{\"1\":{\"530\":4}}],[\"strict\",{\"1\":{\"618\":1,\"632\":1}}],[\"strictly\",{\"1\":{\"483\":2}}],[\"strictly连接数限制\",{\"1\":{\"469\":1}}],[\"strictly内存严格模式\",{\"1\":{\"469\":1}}],[\"stringutils\",{\"1\":{\"809\":4}}],[\"stringdatasourcehashmap\",{\"1\":{\"781\":3,\"787\":3}}],[\"stringdatasourceentry\",{\"1\":{\"781\":3,\"787\":3}}],[\"stringobjecthashmap\",{\"1\":{\"370\":6,\"420\":5}}],[\"stringbuilder\",{\"1\":{\"313\":6}}],[\"string>\",{\"1\":{\"309\":1,\"313\":1,\"508\":1,\"579\":1,\"625\":4,\"773\":1,\"774\":1}}],[\"string>>\",{\"1\":{\"42\":1,\"144\":1,\"175\":1,\"184\":1,\"185\":1,\"237\":1,\"565\":1,\"607\":1,\"608\":1,\"667\":1,\"738\":1}}],[\"stringcompareto\",{\"1\":{\"289\":2}}],[\"stringkey\",{\"1\":{\"185\":4}}],[\"string\",{\"0\":{\"610\":1},\"1\":{\"21\":5,\"22\":4,\"23\":4,\"34\":2,\"35\":4,\"36\":1,\"37\":1,\"38\":4,\"39\":3,\"40\":2,\"41\":3,\"110\":6,\"111\":16,\"112\":2,\"117\":1,\"122\":2,\"140\":8,\"144\":1,\"152\":16,\"157\":3,\"167\":2,\"168\":5,\"169\":1,\"170\":1,\"171\":4,\"172\":3,\"173\":2,\"174\":3,\"185\":3,\"196\":2,\"200\":1,\"201\":2,\"205\":18,\"214\":7,\"219\":9,\"220\":18,\"223\":6,\"227\":13,\"231\":6,\"232\":6,\"233\":2,\"234\":6,\"235\":6,\"236\":4,\"237\":1,\"249\":5,\"250\":3,\"251\":1,\"252\":7,\"254\":3,\"260\":19,\"262\":7,\"265\":15,\"269\":2,\"271\":2,\"273\":2,\"274\":6,\"278\":3,\"280\":3,\"281\":2,\"284\":9,\"285\":5,\"292\":2,\"293\":2,\"295\":2,\"296\":2,\"306\":5,\"307\":5,\"308\":6,\"309\":7,\"310\":6,\"311\":16,\"313\":23,\"314\":8,\"315\":6,\"316\":10,\"323\":6,\"324\":5,\"325\":6,\"327\":6,\"328\":7,\"350\":5,\"351\":2,\"352\":4,\"353\":1,\"354\":2,\"355\":2,\"356\":1,\"358\":3,\"359\":2,\"360\":20,\"361\":4,\"362\":2,\"363\":2,\"365\":7,\"366\":19,\"396\":2,\"397\":5,\"400\":2,\"412\":2,\"417\":7,\"418\":1,\"419\":2,\"426\":2,\"429\":2,\"430\":2,\"480\":1,\"481\":1,\"482\":3,\"485\":3,\"487\":1,\"493\":1,\"498\":2,\"505\":6,\"507\":8,\"510\":4,\"515\":1,\"517\":1,\"521\":7,\"522\":8,\"524\":1,\"526\":1,\"530\":4,\"547\":2,\"548\":2,\"549\":1,\"554\":2,\"556\":2,\"557\":2,\"562\":6,\"564\":4,\"565\":1,\"572\":5,\"573\":5,\"574\":6,\"579\":7,\"581\":3,\"586\":6,\"587\":6,\"588\":2,\"589\":6,\"590\":6,\"592\":7,\"600\":3,\"601\":1,\"608\":2,\"613\":1,\"615\":18,\"616\":6,\"620\":2,\"621\":2,\"622\":2,\"623\":2,\"625\":3,\"626\":3,\"629\":2,\"631\":12,\"632\":2,\"633\":2,\"634\":6,\"635\":1,\"642\":1,\"645\":1,\"646\":1,\"647\":2,\"648\":2,\"656\":1,\"659\":1,\"661\":1,\"662\":3,\"666\":1,\"667\":6,\"669\":10,\"673\":22,\"682\":2,\"694\":7,\"696\":7,\"705\":12,\"706\":3,\"707\":3,\"708\":2,\"709\":5,\"710\":8,\"712\":40,\"713\":25,\"714\":3,\"732\":4,\"739\":2,\"742\":2,\"744\":2,\"751\":1,\"754\":1,\"756\":2,\"757\":1,\"758\":2,\"759\":4,\"760\":2,\"772\":1,\"774\":1,\"781\":4,\"782\":22,\"783\":6,\"787\":4,\"788\":22,\"789\":4,\"793\":22,\"794\":4,\"795\":2,\"796\":2,\"797\":7,\"804\":1,\"807\":6,\"809\":16,\"812\":7,\"814\":8}}],[\"streamresult\",{\"1\":{\"742\":2}}],[\"streamby\",{\"1\":{\"601\":1}}],[\"stream\",{\"1\":{\"308\":1,\"313\":3,\"508\":1,\"574\":1}}],[\"strategyname\",{\"1\":{\"284\":1,\"430\":1,\"809\":2}}],[\"strategy\",{\"0\":{\"279\":1},\"1\":{\"212\":1,\"219\":4,\"284\":1,\"429\":1,\"430\":1,\"483\":2,\"809\":1}}],[\"strater处拷贝三个源码文件\",{\"1\":{\"122\":1,\"498\":1}}],[\"structsysuserdto\",{\"1\":{\"111\":5}}],[\"struct\",{\"1\":{\"111\":2}}],[\"structure\",{\"0\":{\"84\":1},\"1\":{\"54\":1}}],[\"star\",{\"1\":{\"180\":1,\"181\":1,\"182\":8,\"183\":6,\"184\":4,\"185\":14,\"186\":2,\"366\":1,\"369\":2,\"600\":1,\"608\":2,\"621\":1,\"629\":1,\"632\":1,\"634\":1,\"642\":1,\"732\":1,\"734\":1,\"737\":1}}],[\"stargazers\",{\"1\":{\"93\":1}}],[\"stars6\",{\"1\":{\"515\":1}}],[\"stars4\",{\"1\":{\"515\":1}}],[\"stars3\",{\"1\":{\"515\":1,\"517\":1}}],[\"stars2\",{\"1\":{\"515\":1,\"517\":1}}],[\"stars=123\",{\"1\":{\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"572\":1,\"573\":1,\"574\":1,\"579\":1}}],[\"stars=99\",{\"1\":{\"196\":1}}],[\"stars1\",{\"1\":{\"185\":2}}],[\"stars\",{\"1\":{\"39\":4,\"41\":3,\"42\":1,\"111\":2,\"157\":1,\"168\":1,\"172\":5,\"174\":3,\"175\":1,\"185\":1,\"186\":1,\"196\":1,\"284\":1,\"306\":1,\"307\":2,\"308\":1,\"309\":1,\"310\":2,\"354\":2,\"358\":2,\"362\":1,\"368\":1,\"369\":6,\"374\":3,\"375\":3,\"376\":6,\"377\":11,\"400\":1,\"412\":2,\"426\":1,\"429\":1,\"430\":1,\"482\":1,\"515\":1,\"562\":2,\"572\":1,\"573\":2,\"574\":1,\"579\":1,\"607\":2,\"666\":11,\"756\":2,\"759\":1,\"796\":1,\"797\":1}}],[\"starttimejob\",{\"1\":{\"469\":1}}],[\"startswith\",{\"1\":{\"313\":2}}],[\"starting\",{\"1\":{\"83\":2}}],[\"start\",{\"1\":{\"12\":1,\"118\":1,\"269\":1,\"274\":2,\"481\":1,\"483\":1,\"487\":1,\"494\":1,\"549\":1}}],[\"starter框架实现了一个空的starterconfigurer\",{\"1\":{\"547\":1}}],[\"starterconfigurer\",{\"1\":{\"273\":1,\"547\":3,\"815\":3}}],[\"starter构建的easy\",{\"1\":{\"190\":1}}],[\"starter<\",{\"1\":{\"115\":1,\"157\":1,\"463\":1,\"465\":1,\"490\":1,\"504\":5}}],[\"starter\",{\"1\":{\"12\":1,\"117\":2,\"120\":3,\"121\":3,\"157\":3,\"468\":1,\"492\":1,\"493\":1,\"496\":3,\"497\":3,\"504\":3}}],[\"statusnotlist没有对应的属性名称所以需要改写为映射到status\",{\"1\":{\"632\":1}}],[\"statusnotlist=new\",{\"1\":{\"629\":1,\"632\":1,\"634\":1}}],[\"statuslist没有对应的属性名称所以需要改写为映射到status\",{\"1\":{\"632\":1}}],[\"statuslist=new\",{\"1\":{\"629\":1,\"632\":1,\"634\":1}}],[\"status\",{\"1\":{\"592\":1,\"594\":1,\"595\":2,\"600\":1,\"629\":1,\"631\":3,\"632\":3,\"634\":4,\"731\":1,\"732\":1}}],[\"state\",{\"1\":{\"269\":1,\"271\":3,\"273\":3,\"274\":6}}],[\"statement\",{\"1\":{\"16\":1,\"353\":1}}],[\"staticloggerbinder\",{\"1\":{\"517\":2}}],[\"static\",{\"1\":{\"34\":1,\"111\":6,\"167\":1,\"227\":2,\"231\":1,\"260\":6,\"274\":2,\"284\":4,\"306\":1,\"308\":4,\"313\":5,\"397\":1,\"481\":1,\"487\":1,\"530\":1,\"549\":1,\"572\":1,\"574\":4,\"586\":1,\"621\":1,\"622\":1,\"631\":2,\"804\":1,\"809\":2}}],[\"searchvalue\",{\"1\":{\"673\":3}}],[\"searchvalues\",{\"1\":{\"673\":2}}],[\"segment\",{\"1\":{\"669\":2}}],[\"selfmappingproperty表示中间表的哪个字段和当前表对应\",{\"1\":{\"705\":1}}],[\"selfmappingproperty\",{\"1\":{\"704\":1,\"705\":3}}],[\"selfproperty\",{\"1\":{\"641\":3,\"704\":1,\"705\":5}}],[\"select语句出现在where\",{\"1\":{\"728\":1}}],[\"select后置风格\",{\"0\":{\"728\":1}}],[\"select子查询\",{\"0\":{\"722\":1}}],[\"select等会让当前表达式的内容是追加上去的而不是重新生成一个新的\",{\"1\":{\"714\":1}}],[\"select等支持代码直接生成lambda的箭头符合如果带有\",{\"1\":{\"529\":1}}],[\"select别名和update\",{\"1\":{\"663\":1}}],[\"selectmerge\",{\"1\":{\"649\":1}}],[\"selector说明\",{\"0\":{\"730\":1}}],[\"selector\",{\"1\":{\"505\":6,\"614\":2,\"615\":3}}],[\"selectone\",{\"1\":{\"385\":1}}],[\"selectonebyquery\",{\"1\":{\"385\":1}}],[\"select将会过滤\",{\"1\":{\"430\":1}}],[\"selectpage\",{\"1\":{\"388\":1}}],[\"selectlist\",{\"1\":{\"386\":1,\"387\":1}}],[\"selectlistbyquery\",{\"1\":{\"386\":1,\"387\":1}}],[\"select之前的所有操作比如多个where\",{\"1\":{\"342\":1}}],[\"select一般都是最后写的\",{\"1\":{\"335\":1}}],[\"select查询\",{\"1\":{\"230\":1,\"585\":1}}],[\"selectcolumnconvert\",{\"1\":{\"230\":2,\"231\":1,\"236\":2,\"556\":1,\"564\":2,\"585\":2,\"586\":1,\"592\":1}}],[\"selectcount\",{\"1\":{\"152\":1,\"738\":1,\"739\":1}}],[\"selectgroup\",{\"1\":{\"185\":2}}],[\"selectautoinclude支持对主表进行额外筛选如果需要从表也要自定义那么请将第三个参数replace改成false然后自行include处理\",{\"1\":{\"111\":1}}],[\"selectautoinclude\",{\"1\":{\"111\":2,\"112\":1,\"138\":1}}],[\"selectall\",{\"1\":{\"38\":1,\"42\":1,\"110\":1,\"171\":1,\"175\":1,\"650\":1,\"651\":1,\"734\":1,\"735\":1}}],[\"selectexpression\",{\"1\":{\"40\":1,\"173\":1,\"185\":1,\"666\":1,\"729\":3,\"735\":1}}],[\"selectignores\",{\"1\":{\"38\":1,\"42\":1,\"171\":1,\"175\":1}}],[\"select\",{\"0\":{\"350\":1,\"727\":1},\"1\":{\"23\":2,\"34\":1,\"35\":4,\"36\":1,\"37\":1,\"38\":4,\"39\":7,\"40\":4,\"41\":2,\"42\":5,\"110\":5,\"127\":4,\"140\":6,\"144\":9,\"145\":3,\"146\":3,\"147\":3,\"149\":5,\"152\":1,\"167\":1,\"168\":6,\"169\":1,\"170\":1,\"171\":6,\"172\":9,\"173\":4,\"174\":5,\"175\":5,\"184\":8,\"185\":35,\"186\":2,\"189\":1,\"214\":3,\"220\":8,\"221\":1,\"223\":6,\"224\":1,\"227\":2,\"233\":1,\"235\":2,\"237\":6,\"250\":1,\"251\":1,\"252\":2,\"260\":1,\"265\":1,\"278\":2,\"280\":1,\"281\":2,\"285\":2,\"292\":2,\"293\":3,\"295\":2,\"296\":3,\"306\":1,\"307\":2,\"308\":1,\"309\":1,\"315\":10,\"323\":1,\"334\":3,\"335\":6,\"337\":1,\"338\":1,\"339\":1,\"340\":3,\"341\":3,\"342\":4,\"348\":1,\"350\":2,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"397\":5,\"418\":1,\"482\":1,\"505\":2,\"517\":2,\"521\":1,\"531\":1,\"532\":8,\"556\":2,\"557\":13,\"565\":6,\"572\":1,\"573\":2,\"574\":1,\"579\":1,\"588\":1,\"590\":2,\"593\":1,\"594\":1,\"595\":1,\"606\":3,\"607\":15,\"608\":3,\"615\":6,\"616\":2,\"620\":2,\"621\":2,\"622\":2,\"623\":1,\"626\":4,\"631\":4,\"633\":2,\"634\":1,\"641\":1,\"642\":4,\"644\":1,\"645\":1,\"646\":2,\"647\":2,\"648\":3,\"650\":2,\"651\":2,\"655\":2,\"656\":2,\"658\":2,\"659\":2,\"666\":14,\"667\":14,\"669\":10,\"672\":2,\"673\":6,\"679\":1,\"681\":2,\"682\":3,\"683\":4,\"694\":12,\"696\":12,\"706\":2,\"707\":2,\"708\":2,\"709\":3,\"710\":4,\"712\":6,\"713\":16,\"714\":8,\"722\":2,\"724\":12,\"729\":8,\"733\":2,\"734\":3,\"735\":2,\"737\":4,\"738\":6,\"739\":6,\"742\":1,\"744\":2,\"750\":2,\"751\":2,\"753\":2,\"754\":2,\"756\":3,\"757\":4,\"758\":4,\"759\":7,\"760\":5,\"764\":2,\"765\":2,\"772\":1,\"774\":1,\"783\":4,\"789\":2,\"794\":2,\"795\":1}}],[\"sequencecountline\",{\"1\":{\"601\":1,\"685\":2,\"686\":10}}],[\"send\",{\"1\":{\"273\":1,\"274\":1}}],[\"seczi8lamkjgiksftziv9a==1elkqpkhc0+z7sjdqatspq==3v3uw7zfjo0tpx49wsmsmq==lthsv2kacrlroxap4dzfua==8ea6uue6hnyz5k+vzdqzva==si5j530hvuevzzzfaqnzna==vlcq13+om8wbony682wilq==\",{\"1\":{\"250\":1,\"252\":1}}],[\"secret\",{\"1\":{\"231\":2,\"586\":2}}],[\"secret=\",{\"1\":{\"231\":1,\"586\":1}}],[\"second\",{\"1\":{\"223\":4,\"290\":1}}],[\"serialversionuid\",{\"1\":{\"809\":1}}],[\"serializedlambda\",{\"1\":{\"313\":13}}],[\"serializeddescriptor\",{\"1\":{\"313\":10}}],[\"serialize\",{\"1\":{\"302\":1,\"306\":2,\"308\":3,\"309\":1,\"559\":1,\"568\":1,\"572\":2,\"574\":3,\"576\":1,\"579\":1}}],[\"serializable>\",{\"1\":{\"505\":2}}],[\"serializable\",{\"1\":{\"200\":2,\"201\":2,\"410\":1,\"505\":2,\"809\":1}}],[\"service<\",{\"1\":{\"504\":2}}],[\"service\",{\"1\":{\"274\":2}}],[\"serviceprovider\",{\"1\":{\"274\":7}}],[\"services\",{\"1\":{\"273\":3,\"547\":2,\"815\":2}}],[\"servicecollection\",{\"1\":{\"273\":1,\"547\":1,\"815\":1}}],[\"server\",{\"1\":{\"124\":1,\"157\":1,\"500\":1,\"780\":1,\"786\":1,\"792\":1}}],[\"servertimezone=gmt\",{\"1\":{\"34\":1,\"124\":1,\"157\":1,\"167\":1,\"204\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"sexname\",{\"1\":{\"507\":2,\"509\":2}}],[\"sexenum\",{\"1\":{\"132\":1}}],[\"sex\",{\"1\":{\"132\":1,\"506\":1,\"507\":1,\"509\":2}}],[\"setbegintime\",{\"1\":{\"797\":2}}],[\"setbirthday\",{\"1\":{\"238\":1,\"566\":1}}],[\"set为setsql\",{\"1\":{\"663\":1}}],[\"setfirstcityname\",{\"1\":{\"641\":1}}],[\"setfirstname\",{\"1\":{\"238\":1,\"566\":1}}],[\"set<\",{\"1\":{\"805\":1}}],[\"set<topic>\",{\"1\":{\"744\":1}}],[\"set<string>\",{\"1\":{\"505\":2,\"805\":2}}],[\"set<class<\",{\"1\":{\"284\":2,\"485\":2,\"809\":2}}],[\"setorderno\",{\"1\":{\"782\":1,\"788\":1,\"793\":1}}],[\"setorder\",{\"1\":{\"365\":1,\"366\":1,\"631\":1,\"633\":1,\"634\":1}}],[\"setversion\",{\"1\":{\"323\":1,\"327\":1,\"328\":1}}],[\"setextra\",{\"1\":{\"314\":1}}],[\"setexecutorqueuesize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setexecutorcorepoolsize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1,\"798\":1}}],[\"setexecutormaximumpoolsize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1,\"798\":1}}],[\"setlicense\",{\"1\":{\"314\":1}}],[\"setlicensecontent\",{\"1\":{\"314\":1,\"316\":1}}],[\"setlicenseimage\",{\"1\":{\"314\":1}}],[\"setlicensedeadline\",{\"1\":{\"314\":1}}],[\"setlicenseno\",{\"1\":{\"314\":1}}],[\"setlastname\",{\"1\":{\"238\":1,\"566\":1}}],[\"setcities\",{\"1\":{\"641\":1}}],[\"setcity\",{\"1\":{\"314\":1}}],[\"setcurrent\",{\"1\":{\"522\":2,\"525\":1,\"526\":1}}],[\"setcontent\",{\"1\":{\"352\":1,\"365\":1,\"366\":2,\"631\":2,\"633\":2,\"634\":1}}],[\"setcolumns\",{\"1\":{\"272\":1,\"422\":1,\"666\":1}}],[\"setcreateby\",{\"1\":{\"260\":1,\"262\":1,\"365\":1,\"366\":1,\"809\":1}}],[\"setcreatetime\",{\"1\":{\"232\":1,\"249\":1,\"260\":1,\"262\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"323\":1,\"327\":1,\"328\":1,\"358\":1,\"362\":1,\"365\":1,\"366\":1,\"368\":1,\"369\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"562\":1,\"572\":1,\"574\":1,\"579\":1,\"587\":1,\"782\":1,\"783\":2,\"788\":1,\"789\":2,\"793\":1,\"794\":2,\"795\":1,\"809\":1}}],[\"setcreatetimeend\",{\"1\":{\"23\":1,\"24\":1,\"25\":1}}],[\"setcreatetimebegin\",{\"1\":{\"23\":1,\"24\":1,\"25\":1}}],[\"setasc\",{\"1\":{\"620\":1,\"621\":2,\"622\":2}}],[\"setarea\",{\"1\":{\"314\":1}}],[\"setage\",{\"1\":{\"309\":1,\"310\":3,\"411\":2,\"562\":3,\"579\":1}}],[\"setaccessible\",{\"1\":{\"308\":2,\"313\":1,\"574\":2}}],[\"setalias\",{\"1\":{\"231\":1,\"236\":2,\"556\":1,\"564\":2,\"586\":1,\"592\":1,\"666\":2,\"668\":1}}],[\"setaddress\",{\"1\":{\"232\":1,\"249\":1,\"254\":1,\"314\":1,\"323\":1,\"327\":1,\"328\":1,\"581\":1,\"587\":1}}],[\"setaddresssupportlike\",{\"1\":{\"220\":1}}],[\"setaddressnotsupportlike\",{\"1\":{\"214\":1}}],[\"set值\",{\"1\":{\"230\":1,\"585\":1}}],[\"set编写\",{\"0\":{\"222\":1}}],[\"setistop\",{\"1\":{\"365\":1,\"366\":1,\"634\":1}}],[\"setidcount\",{\"1\":{\"642\":1}}],[\"setidcard\",{\"1\":{\"232\":1,\"249\":1,\"323\":1,\"327\":1,\"328\":1,\"587\":1}}],[\"setid\",{\"1\":{\"214\":1,\"220\":1,\"232\":1,\"238\":1,\"249\":1,\"254\":1,\"260\":1,\"285\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"314\":1,\"323\":1,\"327\":1,\"328\":1,\"351\":3,\"352\":5,\"353\":2,\"356\":1,\"358\":1,\"363\":3,\"365\":1,\"366\":1,\"411\":2,\"562\":1,\"566\":1,\"572\":1,\"574\":1,\"579\":1,\"581\":1,\"587\":1,\"642\":1,\"782\":1,\"788\":1,\"793\":1,\"807\":1,\"809\":3}}],[\"setinsertbatchthreshold\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setinsertstrategy\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"set方法\",{\"1\":{\"157\":1,\"166\":1}}],[\"set的目录点击easyqueryimplements自动实现接口\",{\"1\":{\"166\":1}}],[\"set的界面点击compilecurrentfile\",{\"1\":{\"165\":1}}],[\"set的地方\",{\"1\":{\"157\":1}}],[\"set的那个菜单\",{\"1\":{\"33\":1}}],[\"setreverseoffsetthreshold\",{\"1\":{\"123\":1,\"499\":1,\"798\":1}}],[\"setrelationgroupsize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setnickname\",{\"1\":{\"389\":2}}],[\"setnoversionerror\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setname\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"214\":1,\"220\":1,\"254\":1,\"309\":1,\"310\":3,\"314\":1,\"352\":3,\"411\":2,\"562\":3,\"579\":1,\"581\":1,\"807\":1}}],[\"setsql\",{\"1\":{\"666\":2}}],[\"setsqlstrategy\",{\"1\":{\"351\":2,\"352\":4,\"363\":2,\"370\":1,\"419\":2,\"420\":1,\"422\":1}}],[\"setsort\",{\"1\":{\"620\":1}}],[\"setscore\",{\"1\":{\"365\":1,\"366\":1,\"634\":1}}],[\"setstatuslist\",{\"1\":{\"631\":2,\"633\":2}}],[\"setstatus\",{\"1\":{\"365\":1,\"366\":1,\"634\":1,\"782\":1,\"783\":1,\"788\":1,\"789\":1,\"793\":1,\"794\":1}}],[\"setstate\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"setstar\",{\"1\":{\"365\":1,\"366\":1,\"634\":1}}],[\"setstars\",{\"1\":{\"196\":1,\"260\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"358\":1,\"362\":1,\"368\":1,\"369\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"562\":1,\"572\":1,\"574\":1,\"579\":1}}],[\"setstarttimejob\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1,\"798\":1}}],[\"setshardingexecutetimeoutmillis\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setwarningbusy\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setmulticonnwaittimeoutmillis\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setmaxshardingroutecount\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1,\"798\":1}}],[\"setmaxshardingquerylimit\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1,\"798\":1}}],[\"setmaximumpoolsize\",{\"1\":{\"34\":1,\"167\":1,\"397\":1}}],[\"setquerylargecolumn\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"settop\",{\"1\":{\"365\":1,\"366\":1}}],[\"settopictype\",{\"1\":{\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"562\":1,\"572\":1,\"574\":1,\"579\":1}}],[\"settitle3\",{\"1\":{\"634\":1}}],[\"settitle2\",{\"1\":{\"310\":1,\"562\":1,\"634\":1}}],[\"settitle\",{\"1\":{\"260\":1,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"358\":1,\"362\":1,\"365\":1,\"366\":1,\"368\":1,\"369\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"417\":1,\"562\":1,\"572\":1,\"574\":1,\"579\":1,\"634\":1,\"744\":1}}],[\"setting\",{\"1\":{\"52\":1,\"69\":1}}],[\"settings\",{\"1\":{\"15\":1}}],[\"settenantid\",{\"1\":{\"260\":3,\"265\":1}}],[\"setthrowifroutenotmatch\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1,\"798\":1}}],[\"setuid\",{\"1\":{\"782\":1,\"788\":1,\"793\":1}}],[\"seturl\",{\"1\":{\"365\":1,\"366\":1}}],[\"setuserid\",{\"1\":{\"260\":3,\"265\":1,\"284\":1,\"285\":1}}],[\"setusername\",{\"1\":{\"34\":1,\"167\":1,\"232\":1,\"249\":1,\"323\":1,\"327\":1,\"328\":1,\"389\":2,\"397\":1,\"587\":1}}],[\"setupdateby\",{\"1\":{\"260\":2,\"262\":2,\"365\":1,\"366\":1,\"809\":2}}],[\"setupdatebatchthreshold\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setupdatetime\",{\"1\":{\"260\":2,\"262\":2,\"365\":1,\"366\":1,\"809\":2}}],[\"setupdatestrategy\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"set\",{\"1\":{\"38\":2,\"39\":4,\"40\":2,\"41\":3,\"42\":1,\"82\":1,\"110\":4,\"171\":2,\"172\":6,\"174\":3,\"175\":1,\"185\":8,\"193\":1,\"195\":4,\"196\":2,\"220\":3,\"221\":1,\"223\":6,\"230\":1,\"234\":1,\"235\":2,\"250\":1,\"252\":1,\"260\":3,\"262\":4,\"265\":3,\"272\":1,\"278\":2,\"280\":2,\"284\":3,\"285\":2,\"316\":2,\"324\":1,\"325\":6,\"327\":1,\"328\":2,\"335\":7,\"340\":2,\"341\":2,\"342\":3,\"352\":3,\"369\":2,\"376\":1,\"377\":2,\"389\":2,\"395\":1,\"417\":3,\"418\":1,\"419\":2,\"420\":1,\"433\":1,\"434\":1,\"435\":1,\"468\":1,\"485\":2,\"506\":1,\"522\":1,\"585\":1,\"589\":1,\"590\":2,\"608\":3,\"642\":2,\"661\":2,\"662\":2,\"666\":5,\"734\":1,\"783\":2,\"789\":2,\"794\":2,\"809\":8}}],[\"setkeepnativestyle\",{\"1\":{\"34\":1,\"123\":1,\"167\":1,\"499\":1,\"523\":1,\"816\":1}}],[\"setdatasource\",{\"1\":{\"460\":1,\"466\":1}}],[\"setdeleted\",{\"1\":{\"327\":1,\"328\":1,\"365\":1,\"366\":1,\"809\":1}}],[\"setdeletethrowerror\",{\"1\":{\"123\":1,\"271\":1,\"397\":1,\"471\":1,\"491\":1,\"493\":1,\"499\":1,\"548\":1,\"798\":1}}],[\"setdefaulttrack\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setdefaultdatasourcemergepoolsize\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1,\"798\":1}}],[\"setdefaultdatasourcename\",{\"1\":{\"123\":1,\"491\":1,\"493\":1,\"499\":1}}],[\"setdefaultdatasource\",{\"1\":{\"34\":1,\"123\":1,\"167\":1,\"271\":1,\"397\":1,\"471\":1,\"491\":1,\"493\":1,\"499\":1,\"517\":1,\"523\":1,\"548\":1,\"798\":1,\"816\":1}}],[\"setdriverclassname\",{\"1\":{\"34\":1,\"167\":1,\"397\":1}}],[\"setpublishtimeend\",{\"1\":{\"631\":2,\"633\":2,\"634\":1}}],[\"setpublishtimebegin\",{\"1\":{\"631\":2,\"633\":1,\"634\":1}}],[\"setproperty\",{\"1\":{\"621\":2,\"622\":2,\"781\":7,\"787\":7}}],[\"setpropertytype\",{\"1\":{\"608\":2,\"666\":2,\"734\":1}}],[\"setprovince\",{\"1\":{\"314\":1,\"641\":1}}],[\"setprimarykey然后执行拦截器\",{\"1\":{\"198\":1}}],[\"setprimarykey\",{\"1\":{\"198\":1,\"200\":1,\"201\":1}}],[\"setprintsql\",{\"1\":{\"34\":1,\"123\":1,\"167\":1,\"397\":1,\"471\":1,\"491\":1,\"493\":1,\"499\":1,\"523\":1,\"548\":1,\"816\":1}}],[\"setparameter\",{\"1\":{\"299\":1}}],[\"setpassword\",{\"1\":{\"34\":1,\"167\":1,\"397\":1}}],[\"setphonesupportlike\",{\"1\":{\"220\":2}}],[\"setphonenotsupportlike\",{\"1\":{\"214\":1}}],[\"setphone\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"232\":1,\"234\":1,\"249\":1,\"250\":1,\"252\":1,\"323\":1,\"327\":1,\"328\":1,\"587\":1,\"589\":1}}],[\"setjdbcurl\",{\"1\":{\"34\":1,\"167\":1,\"397\":1}}],[\"see\",{\"1\":{\"14\":1,\"517\":1}}],[\"springdatasourceunitfactory\",{\"1\":{\"122\":2,\"123\":1,\"491\":1,\"493\":1,\"498\":2,\"499\":1,\"523\":1}}],[\"springdatasourceunit\",{\"1\":{\"122\":3,\"498\":3}}],[\"springconnectionmanager\",{\"1\":{\"122\":2,\"123\":1,\"491\":1,\"493\":1,\"498\":2,\"499\":1,\"523\":1}}],[\"spring\",{\"0\":{\"115\":1,\"242\":1,\"463\":1,\"465\":1,\"470\":1,\"490\":1},\"1\":{\"12\":6,\"117\":6,\"118\":1,\"124\":1,\"157\":1,\"252\":3,\"456\":1,\"468\":1,\"492\":6,\"494\":1,\"500\":1,\"504\":3,\"780\":1,\"786\":1,\"792\":1}}],[\"springframework<\",{\"1\":{\"801\":2}}],[\"springframework\",{\"1\":{\"12\":7,\"117\":9,\"120\":3,\"121\":3,\"157\":4,\"492\":7,\"493\":2,\"496\":3,\"497\":3,\"504\":4,\"801\":2}}],[\"springboot替换\",{\"0\":{\"815\":1}}],[\"springboot启动后我们可以通过数据库或者其他方式来获取链接字符串来手动构建datasource\",{\"1\":{\"781\":1,\"787\":1}}],[\"springboot环境\",{\"0\":{\"547\":1}}],[\"springboot环境starter已经包含了\",{\"1\":{\"460\":1,\"466\":1}}],[\"springboot下必须用来支持事务\",{\"1\":{\"491\":2,\"523\":2}}],[\"springboot如果当前方法没有添加\",{\"1\":{\"411\":1}}],[\"springboot为例\",{\"0\":{\"273\":1}}],[\"springboot快速开始🔥🔥🔥\",{\"0\":{\"156\":1}}],[\"springboot多数据源\",{\"0\":{\"116\":1,\"491\":1}}],[\"springboot\",{\"0\":{\"12\":1,\"117\":1,\"303\":1,\"492\":1,\"521\":1,\"560\":1,\"569\":1,\"577\":1},\"1\":{\"115\":1,\"157\":1,\"196\":1,\"463\":1,\"465\":1,\"490\":1,\"504\":1}}],[\"springboot配置\",{\"0\":{\"488\":1},\"1\":{\"9\":1}}],[\"sqltype\",{\"1\":{\"734\":1}}],[\"sqlquerymap\",{\"1\":{\"658\":1,\"659\":1,\"753\":1,\"754\":1}}],[\"sqlquery\",{\"1\":{\"655\":1,\"656\":1,\"750\":1,\"751\":1}}],[\"sql4ktfunc\",{\"1\":{\"614\":2}}],[\"sql4jfunc\",{\"1\":{\"614\":2,\"615\":1,\"616\":1}}],[\"sql返回的是自定义sql片段无法知晓具体类型所以通过setpropertytype\",{\"1\":{\"608\":1}}],[\"sqlclientfunc\",{\"1\":{\"614\":2,\"615\":1}}],[\"sqlclientapifactory\",{\"1\":{\"545\":1,\"556\":6}}],[\"sqlconsumer<statement>\",{\"1\":{\"741\":1,\"743\":1}}],[\"sqlconversion\",{\"1\":{\"231\":1,\"556\":1,\"586\":1,\"592\":1}}],[\"sqlcolumn生成分成更细的column\",{\"1\":{\"535\":1}}],[\"sql预览这个只是锦上添花并不能作为实际的参考\",{\"1\":{\"540\":1}}],[\"sql日志批量生成无占位可直接运行的sql\",{\"1\":{\"540\":1}}],[\"sql没有配置对应的log也不会打印\",{\"1\":{\"483\":1}}],[\"sql参数打印可选mybatis模式多一个逗号后的空格\",{\"1\":{\"468\":1}}],[\"sqlproxyfunc\",{\"1\":{\"614\":2,\"615\":1}}],[\"sqlpropertyconverter\",{\"1\":{\"230\":9,\"231\":9,\"236\":21,\"254\":3,\"556\":9,\"564\":21,\"581\":3,\"585\":9,\"586\":9,\"592\":9}}],[\"sqlparameterprintformat\",{\"1\":{\"545\":1}}],[\"sqlparameterprint\",{\"1\":{\"468\":1}}],[\"sqlparametertostring\",{\"1\":{\"271\":1,\"273\":1,\"274\":2}}],[\"sqlparameters\",{\"1\":{\"269\":1,\"270\":1,\"271\":3,\"273\":3,\"274\":6}}],[\"sqlparameter\",{\"1\":{\"230\":3,\"231\":3,\"236\":7,\"556\":3,\"564\":7,\"585\":3,\"586\":3,\"592\":3,\"738\":1}}],[\"sqlfuncexpression1<sqlfillselector\",{\"1\":{\"641\":2}}],[\"sqlfuncimpl\",{\"1\":{\"545\":1}}],[\"sqlfuncas\",{\"1\":{\"293\":1,\"296\":1}}],[\"sqlfunction\",{\"1\":{\"236\":12,\"564\":12,\"592\":10}}],[\"sqlfunc\",{\"1\":{\"227\":2,\"236\":10,\"292\":1,\"295\":1,\"545\":1,\"564\":10,\"592\":6}}],[\"sqlwherepredicate\",{\"1\":{\"223\":5,\"265\":2}}],[\"sqlwherepredicate<t>\",{\"1\":{\"223\":4}}],[\"sql1\",{\"1\":{\"223\":6,\"292\":2,\"295\":2,\"714\":2}}],[\"sqlnativesegment的o表就是第一张表\",{\"1\":{\"669\":1}}],[\"sqlnativesegment一次个参数为原生数据库片段\",{\"1\":{\"668\":1}}],[\"sqlnativesegment中如果纯在参数行为\",{\"1\":{\"468\":1}}],[\"sqlnativesegment\",{\"0\":{\"668\":1},\"1\":{\"223\":3,\"224\":1,\"230\":1,\"231\":3,\"236\":6,\"254\":1,\"556\":3,\"564\":6,\"581\":1,\"585\":1,\"586\":3,\"592\":3,\"669\":7,\"670\":4}}],[\"sqlnativesegment封装\",{\"0\":{\"223\":1}}],[\"sqlnativesegment输入和格式化无需处理单引号会自动处理为双单引号\",{\"1\":{\"115\":1,\"157\":1,\"465\":1,\"470\":1,\"490\":1}}],[\"sql查询\",{\"0\":{\"177\":1}}],[\"sql查询强类型语法的sql查询语法\",{\"1\":{\"100\":1,\"107\":1}}],[\"sqlexecute\",{\"1\":{\"661\":1,\"662\":1}}],[\"sqlexecutestrategyenum\",{\"1\":{\"348\":2,\"351\":2,\"352\":4,\"363\":2,\"370\":1,\"420\":1,\"422\":1}}],[\"sqlexpression\",{\"1\":{\"729\":3}}],[\"sqlexpressioninvokefactory\",{\"1\":{\"545\":1}}],[\"sqlexpression1<columnsetter<object>>\",{\"1\":{\"284\":1,\"485\":1,\"809\":2}}],[\"sqlexpression1<sqlnativelambdaexpressioncontext<t>>\",{\"1\":{\"223\":2}}],[\"sqlexpression1<sqlnativepropertyexpressioncontext>\",{\"1\":{\"223\":2}}],[\"sqlexpression1<wherepredicate<object>>\",{\"1\":{\"284\":1,\"485\":1,\"809\":1}}],[\"sqlexpression1<wherepredicate<\",{\"1\":{\"140\":1}}],[\"sqlexception\",{\"1\":{\"122\":1,\"206\":1,\"498\":1,\"742\":1}}],[\"sql上下文泛型限制\",{\"1\":{\"100\":1,\"107\":1}}],[\"sql多表查询支持join\",{\"1\":{\"100\":1,\"107\":1}}],[\"sqlsugar\",{\"1\":{\"596\":1}}],[\"sqlsugar那么使用这个框架对你们来说肯定是最完美的\",{\"1\":{\"18\":1}}],[\"sqlsyntaxerrorexception\",{\"1\":{\"517\":1}}],[\"sqlsegement\",{\"1\":{\"666\":2}}],[\"sqlsegmentas\",{\"1\":{\"615\":3,\"616\":1}}],[\"sqlsegmentfactory\",{\"1\":{\"545\":1}}],[\"sqlsegment\",{\"1\":{\"236\":12,\"564\":12,\"592\":6,\"663\":6,\"666\":4}}],[\"sqlserver\",{\"1\":{\"9\":2,\"372\":1}}],[\"sqlite\",{\"1\":{\"9\":4,\"372\":2}}],[\"sql\",{\"1\":{\"9\":10,\"16\":1,\"43\":2,\"115\":1,\"117\":1,\"157\":1,\"162\":2,\"227\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"269\":1,\"271\":1,\"273\":1,\"274\":2,\"293\":4,\"296\":4,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"350\":2,\"372\":8,\"455\":1,\"465\":1,\"468\":1,\"470\":1,\"483\":1,\"490\":1,\"493\":1,\"517\":1,\"522\":1,\"586\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":2,\"608\":1,\"613\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":3,\"631\":1,\"634\":2,\"647\":2,\"648\":2,\"663\":1,\"666\":3,\"669\":5,\"714\":4,\"771\":1}}],[\"0l\",{\"1\":{\"738\":1}}],[\"0d93119a\",{\"1\":{\"662\":1}}],[\"079\",{\"1\":{\"673\":1}}],[\"07\",{\"1\":{\"631\":4,\"633\":3,\"667\":2,\"673\":7}}],[\"07t23\",{\"1\":{\"249\":1}}],[\"0请修改项目jdk和pom的一致\",{\"1\":{\"518\":1}}],[\"06t08\",{\"1\":{\"782\":10,\"783\":2}}],[\"06\",{\"1\":{\"362\":1,\"418\":1,\"419\":1,\"642\":3}}],[\"065\",{\"1\":{\"37\":1,\"170\":1}}],[\"05t08\",{\"1\":{\"789\":2}}],[\"05t06\",{\"1\":{\"673\":5}}],[\"05\",{\"1\":{\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"417\":1,\"418\":1,\"572\":2,\"573\":1,\"574\":2,\"579\":2,\"631\":4}}],[\"059\",{\"1\":{\"249\":1}}],[\"03`\",{\"1\":{\"793\":2}}],[\"037\",{\"1\":{\"323\":1}}],[\"03\",{\"1\":{\"285\":1,\"359\":1,\"360\":10,\"361\":2,\"417\":1,\"419\":1,\"606\":1,\"642\":3}}],[\"03t22\",{\"1\":{\"265\":2}}],[\"03t21\",{\"1\":{\"260\":3,\"262\":1}}],[\"0表示未被删除\",{\"1\":{\"279\":1,\"430\":1}}],[\"090\",{\"1\":{\"673\":1}}],[\"09\",{\"1\":{\"232\":1,\"285\":1,\"587\":1,\"782\":10,\"783\":2,\"788\":10,\"789\":2,\"793\":10,\"794\":2}}],[\"08t10\",{\"1\":{\"418\":1}}],[\"08t14\",{\"1\":{\"327\":1,\"328\":1}}],[\"08t13\",{\"1\":{\"323\":1,\"324\":1}}],[\"08t09\",{\"1\":{\"252\":1}}],[\"08\",{\"1\":{\"232\":1,\"233\":1,\"234\":1,\"249\":1,\"252\":1,\"362\":1,\"587\":1,\"588\":1,\"589\":1}}],[\"0g==siabg+vnznx\",{\"1\":{\"220\":2}}],[\"0<\",{\"1\":{\"157\":1,\"478\":1,\"519\":5}}],[\"00时间点运行过\",{\"1\":{\"797\":1}}],[\"00`\",{\"1\":{\"782\":7,\"783\":3,\"793\":2,\"794\":2}}],[\"0000000000\",{\"1\":{\"323\":2,\"324\":1,\"327\":2,\"328\":2}}],[\"00\",{\"1\":{\"140\":1,\"147\":2,\"238\":2,\"314\":1,\"315\":3,\"316\":1,\"566\":2,\"791\":1,\"797\":4}}],[\"01`\",{\"1\":{\"782\":3,\"783\":3,\"793\":2,\"795\":2}}],[\"01t23\",{\"1\":{\"285\":1}}],[\"01t00\",{\"1\":{\"140\":1,\"314\":1,\"315\":3,\"316\":1}}],[\"01t01\",{\"1\":{\"41\":1,\"174\":1,\"758\":1,\"759\":1,\"760\":1}}],[\"01t03\",{\"1\":{\"38\":2,\"39\":2,\"40\":2,\"171\":2,\"172\":2,\"173\":2}}],[\"01\",{\"1\":{\"41\":2,\"140\":1,\"147\":2,\"174\":2,\"205\":18,\"238\":2,\"314\":1,\"315\":3,\"316\":1,\"327\":1,\"365\":6,\"366\":18,\"566\":2,\"606\":1,\"666\":22,\"758\":2,\"759\":2,\"760\":2,\"791\":1,\"797\":1}}],[\"029025\",{\"1\":{\"794\":1}}],[\"02`\",{\"1\":{\"793\":2}}],[\"02t15\",{\"1\":{\"793\":10,\"794\":2}}],[\"02t23\",{\"1\":{\"285\":1}}],[\"02t01\",{\"1\":{\"205\":6,\"365\":2,\"366\":6}}],[\"02\",{\"1\":{\"38\":2,\"39\":2,\"40\":2,\"171\":2,\"172\":2,\"173\":2,\"606\":1,\"666\":2,\"788\":10}}],[\"04`\",{\"1\":{\"793\":2,\"794\":2}}],[\"04t05\",{\"1\":{\"642\":3}}],[\"04t22\",{\"1\":{\"310\":1,\"562\":1,\"788\":10}}],[\"049\",{\"1\":{\"310\":1,\"562\":1}}],[\"04\",{\"1\":{\"37\":1,\"38\":2,\"39\":2,\"40\":2,\"170\":1,\"171\":2,\"172\":2,\"173\":2,\"249\":1,\"252\":1,\"260\":3,\"262\":1,\"265\":2,\"285\":2,\"323\":1,\"324\":1,\"327\":1,\"328\":2,\"606\":1,\"791\":1}}],[\"0+版本的easy\",{\"1\":{\"27\":1,\"160\":1}}],[\"0+版本easy\",{\"1\":{\"18\":1}}],[\"0之后的版本和之前的easyentityquery有着很大的不一样\",{\"1\":{\"18\":1}}],[\"0\",{\"0\":{\"413\":1},\"1\":{\"6\":1,\"30\":1,\"31\":1,\"34\":2,\"41\":1,\"44\":1,\"49\":2,\"88\":1,\"120\":1,\"121\":1,\"124\":2,\"137\":1,\"139\":1,\"140\":2,\"147\":2,\"152\":2,\"157\":14,\"160\":1,\"163\":1,\"166\":6,\"167\":2,\"174\":1,\"182\":1,\"197\":1,\"204\":2,\"206\":1,\"214\":1,\"220\":1,\"223\":3,\"230\":1,\"231\":3,\"236\":2,\"237\":1,\"238\":2,\"251\":1,\"265\":1,\"271\":1,\"273\":1,\"274\":2,\"280\":2,\"285\":1,\"290\":1,\"306\":1,\"309\":1,\"313\":1,\"314\":2,\"348\":1,\"358\":1,\"359\":1,\"360\":1,\"361\":1,\"365\":1,\"395\":1,\"397\":4,\"403\":1,\"407\":3,\"469\":2,\"478\":1,\"481\":2,\"483\":2,\"496\":1,\"497\":1,\"500\":2,\"504\":1,\"513\":1,\"517\":4,\"518\":1,\"519\":10,\"521\":1,\"528\":1,\"530\":1,\"535\":4,\"556\":3,\"564\":2,\"565\":1,\"566\":2,\"572\":1,\"579\":1,\"585\":1,\"586\":3,\"592\":5,\"615\":3,\"616\":1,\"619\":1,\"622\":1,\"626\":3,\"631\":2,\"632\":1,\"633\":2,\"642\":2,\"666\":12,\"669\":7,\"670\":3,\"673\":1,\"679\":2,\"691\":1,\"724\":1,\"734\":1,\"737\":1,\"738\":2,\"740\":3,\"742\":7,\"757\":1,\"758\":1,\"759\":1,\"760\":1,\"765\":1,\"772\":1,\"774\":1,\"780\":2,\"781\":2,\"782\":7,\"786\":2,\"787\":2,\"788\":7,\"792\":2,\"793\":7,\"798\":1,\"801\":3}}],[\"2compatible\",{\"1\":{\"535\":1}}],[\"2+\",{\"1\":{\"535\":1}}],[\"2<\",{\"1\":{\"519\":3}}],[\"2就是help\",{\"1\":{\"507\":1}}],[\"2～\",{\"1\":{\"474\":1}}],[\"2条\",{\"1\":{\"417\":1}}],[\"26\",{\"1\":{\"789\":1}}],[\"266\",{\"1\":{\"385\":1}}],[\"268\",{\"1\":{\"385\":1}}],[\"26<\",{\"1\":{\"309\":1,\"579\":1}}],[\"2w\",{\"1\":{\"384\":1}}],[\"24\",{\"1\":{\"389\":3,\"631\":4,\"673\":1,\"712\":1}}],[\"246\",{\"1\":{\"388\":1}}],[\"244\",{\"1\":{\"386\":2}}],[\"247\",{\"1\":{\"386\":2}}],[\"243\",{\"1\":{\"386\":2,\"388\":1}}],[\"248\",{\"1\":{\"386\":2}}],[\"249\",{\"1\":{\"386\":2}}],[\"245\",{\"1\":{\"386\":4}}],[\"24t21\",{\"1\":{\"360\":1}}],[\"24<\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"163\":1,\"395\":1,\"455\":1,\"513\":3,\"514\":1,\"519\":4}}],[\"2223\",{\"1\":{\"614\":4}}],[\"222\",{\"1\":{\"614\":4,\"615\":12,\"616\":4}}],[\"22t21\",{\"1\":{\"360\":1}}],[\"22\",{\"1\":{\"360\":10,\"389\":1,\"519\":2}}],[\"22^推出了sql\",{\"1\":{\"208\":1}}],[\"25提供了自定义pageresult<tresult>结果\",{\"1\":{\"687\":1}}],[\"25^后推出了变量名功能\",{\"1\":{\"528\":1}}],[\"259\",{\"1\":{\"386\":1}}],[\"257\",{\"1\":{\"385\":1}}],[\"255\",{\"1\":{\"385\":1}}],[\"25\",{\"1\":{\"385\":1,\"386\":1,\"389\":1,\"673\":1}}],[\"25t21\",{\"1\":{\"360\":1}}],[\"256\",{\"1\":{\"311\":1,\"385\":1,\"386\":1}}],[\"25<\",{\"1\":{\"157\":2}}],[\"231\",{\"1\":{\"809\":1}}],[\"232\",{\"1\":{\"388\":2}}],[\"233\",{\"1\":{\"388\":1}}],[\"235\",{\"1\":{\"388\":1}}],[\"234\",{\"1\":{\"388\":1}}],[\"236\",{\"1\":{\"388\":1}}],[\"239\",{\"1\":{\"386\":1,\"388\":1}}],[\"237\",{\"1\":{\"386\":1}}],[\"238\",{\"1\":{\"386\":2,\"388\":1}}],[\"23t21\",{\"1\":{\"360\":1}}],[\"23t22\",{\"1\":{\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"572\":2,\"573\":1,\"574\":2,\"579\":2}}],[\"23\",{\"1\":{\"290\":1,\"389\":2,\"417\":1,\"794\":1}}],[\"27t22\",{\"1\":{\"417\":1}}],[\"270\",{\"1\":{\"385\":1}}],[\"272\",{\"1\":{\"385\":1}}],[\"278\",{\"1\":{\"385\":1}}],[\"275\",{\"1\":{\"328\":1}}],[\"27\",{\"1\":{\"265\":2,\"385\":1,\"386\":1,\"389\":3}}],[\"28<\",{\"1\":{\"513\":1,\"519\":1}}],[\"281\",{\"1\":{\"385\":1}}],[\"288\",{\"1\":{\"385\":1}}],[\"287\",{\"1\":{\"359\":1}}],[\"28\",{\"1\":{\"260\":3,\"385\":2}}],[\"21\",{\"1\":{\"260\":1,\"262\":1,\"388\":1,\"389\":3,\"522\":1}}],[\"21<\",{\"1\":{\"157\":1}}],[\"21t21\",{\"1\":{\"23\":2,\"360\":1}}],[\"2l\",{\"1\":{\"152\":2}}],[\"2014\",{\"1\":{\"667\":3}}],[\"20t21\",{\"1\":{\"360\":1}}],[\"200\",{\"1\":{\"365\":5,\"366\":13,\"616\":2}}],[\"20000\",{\"1\":{\"388\":3}}],[\"2000\",{\"1\":{\"205\":6,\"365\":2,\"366\":6}}],[\"2001\",{\"1\":{\"157\":1,\"519\":1}}],[\"2024\",{\"1\":{\"522\":1,\"666\":2,\"667\":2}}],[\"2020\",{\"1\":{\"82\":1,\"152\":1,\"238\":2,\"374\":1,\"375\":1,\"376\":1,\"377\":2,\"535\":1,\"566\":2,\"742\":1,\"758\":2,\"759\":2,\"760\":2,\"796\":1,\"797\":1,\"848\":1}}],[\"2021\",{\"1\":{\"41\":2,\"174\":2,\"535\":3,\"642\":6}}],[\"2022\",{\"1\":{\"38\":4,\"39\":4,\"40\":3,\"140\":2,\"147\":2,\"171\":6,\"172\":6,\"173\":3,\"535\":3,\"606\":2}}],[\"2023\",{\"1\":{\"23\":4,\"37\":1,\"170\":1,\"232\":1,\"234\":1,\"249\":1,\"252\":1,\"260\":4,\"262\":2,\"265\":2,\"285\":2,\"306\":1,\"308\":1,\"309\":1,\"310\":1,\"314\":2,\"316\":1,\"323\":1,\"324\":1,\"327\":1,\"328\":1,\"359\":1,\"360\":10,\"361\":2,\"362\":1,\"417\":1,\"418\":1,\"419\":1,\"535\":3,\"562\":1,\"572\":1,\"574\":1,\"579\":1,\"587\":1,\"589\":1,\"631\":4,\"633\":3,\"666\":10,\"673\":5,\"782\":10,\"783\":2,\"788\":10,\"789\":2,\"793\":10,\"794\":2}}],[\"20\",{\"1\":{\"34\":1,\"40\":3,\"167\":1,\"173\":3,\"265\":2,\"388\":2,\"389\":3,\"397\":1,\"517\":1,\"681\":3,\"682\":1,\"683\":3,\"794\":2,\"798\":1}}],[\"2b8\",{\"1\":{\"34\":1,\"124\":1,\"157\":1,\"167\":1,\"204\":1,\"397\":1,\"481\":1,\"483\":1,\"500\":1,\"517\":1,\"780\":1,\"781\":1,\"786\":1,\"787\":1,\"792\":1}}],[\"294\",{\"1\":{\"385\":1}}],[\"298\",{\"1\":{\"385\":1}}],[\"291\",{\"1\":{\"385\":1}}],[\"29+的版本\",{\"1\":{\"127\":1}}],[\"29\",{\"1\":{\"12\":12,\"117\":12,\"385\":2,\"386\":3,\"389\":1,\"492\":12,\"793\":10}}],[\"2\",{\"0\":{\"130\":1,\"338\":1,\"356\":1,\"360\":1,\"415\":1},\"1\":{\"6\":1,\"37\":1,\"38\":2,\"39\":2,\"40\":1,\"53\":14,\"88\":1,\"140\":2,\"157\":1,\"166\":3,\"170\":1,\"171\":4,\"172\":4,\"173\":1,\"197\":1,\"205\":6,\"206\":1,\"219\":1,\"220\":9,\"237\":2,\"252\":2,\"285\":1,\"289\":6,\"309\":1,\"313\":2,\"315\":6,\"324\":1,\"325\":4,\"327\":1,\"328\":2,\"335\":1,\"360\":1,\"361\":1,\"365\":4,\"366\":9,\"469\":1,\"473\":1,\"474\":2,\"482\":2,\"504\":5,\"506\":5,\"507\":1,\"509\":2,\"535\":3,\"565\":2,\"579\":1,\"592\":4,\"593\":1,\"594\":2,\"595\":3,\"601\":1,\"606\":1,\"615\":1,\"631\":6,\"633\":5,\"652\":1,\"666\":1,\"667\":3,\"669\":2,\"672\":5,\"673\":1,\"682\":1,\"683\":1,\"691\":1,\"697\":1,\"706\":3,\"707\":1,\"708\":3,\"709\":2,\"710\":4,\"712\":4,\"713\":7,\"714\":4,\"735\":1,\"742\":4,\"744\":1,\"774\":1,\"782\":14,\"783\":12,\"788\":11,\"789\":5,\"793\":5,\"794\":5,\"820\":14,\"834\":1}}],[\"许可证\",{\"0\":{\"6\":1}}],[\"q3\",{\"1\":{\"757\":2,\"758\":2,\"759\":2}}],[\"q2\",{\"1\":{\"757\":2,\"758\":2,\"759\":2,\"760\":2}}],[\"q1\",{\"1\":{\"757\":2,\"758\":2,\"759\":2,\"760\":2}}],[\"qps\",{\"1\":{\"474\":1}}],[\"qeury提供支持子查询包括exists\",{\"1\":{\"761\":1}}],[\"qeury帮我们自动的进行了处理\",{\"1\":{\"262\":1}}],[\"qeury默认提供了拦截器\",{\"1\":{\"256\":1}}],[\"qeury\",{\"1\":{\"226\":1}}],[\"qgmprczslddg==tncrpikuqnopex\",{\"1\":{\"220\":1}}],[\"qgmprczslddg==rsw+jktki+3iiq0xm3vssw==\",{\"1\":{\"220\":1}}],[\"q==rfk4efic8tpwrlw8eyoe7q==xygfo1hqhvszb3aqqjer0w==taspthz7faxkglu8wir4xg==3k4xeon1qksj0l068srxlg==\",{\"1\":{\"220\":1}}],[\"q==rfk4efic8tpwrlw8eyoe7q==xygfo1hqhvszb3aqqjer0w==taspthz7faxkglu8wir4xg==3k4xeon1qksj0l068srxlg==kgzit8zvaq0mr4mgc0o8ew==o\",{\"1\":{\"220\":2}}],[\"quicktipsetting\",{\"0\":{\"530\":1}}],[\"queue\",{\"1\":{\"483\":1}}],[\"query实例的异常断言接口进行替换\",{\"1\":{\"815\":1,\"816\":1}}],[\"queryclass\",{\"1\":{\"814\":4}}],[\"queryconfiguration\",{\"1\":{\"116\":1,\"191\":1,\"192\":1,\"231\":1,\"257\":1,\"284\":1,\"304\":1,\"485\":1,\"486\":1,\"487\":8,\"491\":2,\"493\":1,\"523\":2,\"545\":1,\"561\":1,\"570\":1,\"578\":1,\"586\":1,\"592\":1,\"798\":1}}],[\"query抛出我们自定义的异常怎么办\",{\"1\":{\"814\":1}}],[\"query采用客户端分片保证分片下的高性能查询结果返回\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"query采用的是对表达式条件值进行加密匹配而不是数据库列解密匹配\",{\"1\":{\"235\":1,\"590\":1}}],[\"query可以轻松的实现select\",{\"1\":{\"722\":1}}],[\"query可以自定义实现case\",{\"1\":{\"614\":1}}],[\"query提供的dsl中\",{\"1\":{\"728\":1}}],[\"query提供的clonequeryable方法来克隆一个一模一样的\",{\"1\":{\"714\":1}}],[\"query提供了接口assertexceptionfactory我们只需要参考defaultassertexceptionfactory然后替换框架默认行为即可可以点击这边查看\",{\"1\":{\"814\":1}}],[\"query提供了高效\",{\"1\":{\"778\":1,\"784\":1,\"790\":1}}],[\"query提供了高级抽象可以让用户自行实现逻辑删除\",{\"1\":{\"282\":1}}],[\"query提供了大数据流式返回\",{\"1\":{\"740\":1}}],[\"query提供了自定义分页返回结果\",{\"1\":{\"684\":1}}],[\"query提供了自动版本号功能\",{\"1\":{\"318\":1}}],[\"query提供了非常简易的分页查询功能\",{\"1\":{\"680\":1}}],[\"query提供了方便的排序查询功能支持函数排序和列排序等\",{\"1\":{\"674\":1}}],[\"query提供了方便的分组查询功能的支持\",{\"1\":{\"642\":1}}],[\"query提供了丰富的多表链接查询\",{\"1\":{\"643\":1}}],[\"query提供了注解配置以外的自定义填充数据\",{\"1\":{\"640\":1}}],[\"query提供了针对基本类型的查询功能\",{\"1\":{\"609\":1}}],[\"query提供了很多丰富的功能\",{\"1\":{\"503\":1}}],[\"query提供了五种模式的api查询\",{\"1\":{\"450\":1}}],[\"query提供了多种api接口方便用户调用\",{\"1\":{\"391\":1}}],[\"query提供了数据追踪功能\",{\"1\":{\"241\":1}}],[\"query提供了数据库函数列值转换\",{\"1\":{\"228\":1,\"583\":1}}],[\"query提供了建议的数据列加密功能\",{\"1\":{\"210\":1}}],[\"query提供了primarykeygenerator接口该接口可以由用户自行实现\",{\"1\":{\"197\":1}}],[\"query提供了原子列更新\",{\"1\":{\"193\":1}}],[\"query提供了3中api机制分别是lambda\",{\"1\":{\"160\":1}}],[\"query提供了一套快速查询的api\",{\"1\":{\"151\":1}}],[\"query提供了4中api机制分别是lambda\",{\"1\":{\"27\":1}}],[\"query不单支持联级的筛选还支持联级额外条件的筛选\",{\"1\":{\"692\":1}}],[\"query这是一个非常不好的事情\",{\"1\":{\"687\":1}}],[\"query针对查询结果支持将结果动态返回以map<string\",{\"1\":{\"748\":1}}],[\"query针对分表对象目前已经支持了动态表名的处理\",{\"1\":{\"624\":1}}],[\"query针对api请求支持对象的动态排序功能\",{\"1\":{\"617\":1}}],[\"query版本\",{\"1\":{\"535\":1}}],[\"query版本2\",{\"1\":{\"137\":1}}],[\"query插件贴心的为大家提供了大于等于小于等于不等于等一系列快捷方式\",{\"1\":{\"533\":1}}],[\"query配合x\",{\"1\":{\"528\":1}}],[\"query无论在哪个模式下都需要编写lambda\",{\"1\":{\"528\":1}}],[\"query+easy\",{\"1\":{\"503\":1}}],[\"query默认采用接口模式实现whereobject用户可以自行替换框架行为\",{\"1\":{\"636\":1}}],[\"query默认内部提供了一个简易的依赖注入容器\",{\"1\":{\"544\":1}}],[\"query默认适配slf4j日志接口\",{\"1\":{\"520\":1}}],[\"query默认仅支持单数据源如果需要支持多数据源可以通过手动构建easyquery的bean实例\",{\"1\":{\"491\":1}}],[\"query默认提供手动开启事务的功能\",{\"1\":{\"409\":1}}],[\"query默认提供了数据库自定义sql片段\",{\"1\":{\"662\":1}}],[\"query默认提供了数据库值对象转换功能\",{\"1\":{\"301\":1,\"558\":1,\"567\":1,\"575\":1}}],[\"query默认提供了自带事务处理机制\",{\"1\":{\"333\":1}}],[\"query默认提供了一个接口和一个抽象来实现逻辑删除\",{\"1\":{\"284\":1}}],[\"query个性化\",{\"0\":{\"483\":1}}],[\"querytopic\",{\"1\":{\"482\":2}}],[\"query查询\",{\"0\":{\"482\":1}}],[\"query为了针对数据安全进行了默认的不允许物理删除\",{\"1\":{\"468\":1}}],[\"query暂未提供对应数据库的语法方言\",{\"1\":{\"468\":1}}],[\"query架构依赖关系方便确认使用哪些包\",{\"1\":{\"423\":1}}],[\"query还支持map结构的数据更新支持\",{\"1\":{\"420\":1}}],[\"query还支持map结构的数据插入支持\",{\"1\":{\"370\":1}}],[\"query将不会生成update的sql语句并且返回0行\",{\"1\":{\"417\":1}}],[\"query将是非常适合您的一个框架\",{\"1\":{\"99\":1,\"106\":1}}],[\"query快于mybatis\",{\"1\":{\"388\":1,\"389\":1}}],[\"query已经给大家针对spring\",{\"1\":{\"417\":1}}],[\"query已经完全快于mybatis\",{\"1\":{\"387\":1}}],[\"query已经略微快于mybatis\",{\"1\":{\"386\":1}}],[\"querywrapper\",{\"1\":{\"385\":13,\"386\":13,\"387\":13,\"388\":8,\"389\":4}}],[\"query和\",{\"1\":{\"384\":1}}],[\"query和mybatis\",{\"1\":{\"383\":1,\"385\":1}}],[\"query本身没有benchmark的测试\",{\"1\":{\"379\":1}}],[\"query也提供了该功能\",{\"1\":{\"362\":1}}],[\"query防止数据被删除的默认设置\",{\"1\":{\"353\":1}}],[\"query支持union\",{\"1\":{\"756\":1}}],[\"query支持四种api接口方式\",{\"1\":{\"458\":1}}],[\"query支持vo查询所以只需要查询结果中没有这个字段或者\",{\"1\":{\"350\":1}}],[\"query支持以数据库函数生成列值\",{\"1\":{\"253\":1,\"580\":1}}],[\"querylargecolumntestentity\",{\"1\":{\"350\":3,\"351\":15,\"352\":29,\"353\":10,\"363\":15}}],[\"querylargecolumn表示是否查询出对应的表示为\",{\"1\":{\"350\":1}}],[\"querylargecolumn\",{\"1\":{\"348\":1,\"350\":1,\"468\":1}}],[\"query内部的所有服务都可以直接获取到httplogrequest\",{\"1\":{\"273\":1}}],[\"query内部的依赖注入容器里面\",{\"1\":{\"273\":1}}],[\"query目前可以做到高性能无感的列加密存储处理\",{\"1\":{\"220\":1}}],[\"query目前已经抽象了表达式\",{\"1\":{\"8\":1}}],[\"query很贴心的给各位提供了默认的加密策略抽象\",{\"1\":{\"217\":1}}],[\"query给出了一个默认的实现\",{\"1\":{\"210\":1}}],[\"query在java的静态语言特性下\",{\"1\":{\"596\":1}}],[\"query在^1\",{\"1\":{\"473\":1}}],[\"query在1\",{\"1\":{\"208\":1,\"311\":1,\"687\":1,\"695\":1}}],[\"query在之后的一周时间里面\",{\"1\":{\"18\":1}}],[\"query如果需要使用batch功能首先需要在链接字符串添加rewritebatchedstatements=true启用参数\",{\"1\":{\"203\":1}}],[\"query那么可以获取对应的queryconfiguration然后apply扩展\",{\"1\":{\"190\":1}}],[\"query那么只需要在扩展上添加\",{\"1\":{\"190\":1}}],[\"query包版本可以在文档首页进行查看当前是\",{\"1\":{\"161\":1}}],[\"query应该如何集成\",{\"1\":{\"156\":1}}],[\"query手动开启了\",{\"1\":{\"122\":1,\"498\":1}}],[\"queryruntimecontext\",{\"1\":{\"116\":1,\"191\":1,\"230\":3,\"231\":4,\"236\":6,\"254\":1,\"257\":1,\"284\":1,\"304\":1,\"486\":1,\"493\":1,\"522\":1,\"545\":1,\"556\":3,\"561\":1,\"564\":6,\"570\":1,\"578\":1,\"581\":1,\"585\":3,\"586\":4,\"592\":4,\"798\":1}}],[\"query需要自行添加拦截器\",{\"1\":{\"116\":1,\"257\":1,\"493\":1}}],[\"query只需要添加\",{\"1\":{\"116\":1,\"257\":1,\"493\":1}}],[\"query获取最新安装包\",{\"1\":{\"114\":1,\"457\":1,\"462\":1,\"464\":1,\"475\":1,\"489\":1}}],[\"query自动生成的\",{\"1\":{\"111\":2}}],[\"query简介目录\",{\"0\":{\"99\":1,\"106\":1}}],[\"query🚀\",{\"1\":{\"94\":1}}],[\"query的异常来实现自定义响应那么有时候我们系统已经拦截了\",{\"1\":{\"814\":1}}],[\"query的异常那么上述代码我们可以改成\",{\"1\":{\"813\":1}}],[\"query的超级功能主要是分表分库和读写分离\",{\"1\":{\"775\":1}}],[\"query的超强dto返回\",{\"1\":{\"108\":1}}],[\"query的查询\",{\"1\":{\"770\":1}}],[\"query的不但支持表达式的强类型sql\",{\"1\":{\"653\":1}}],[\"query的代理模式通过apt生成动态代码执行数据库操作\",{\"1\":{\"511\":1}}],[\"query的基础配置信息\",{\"1\":{\"423\":1}}],[\"query的基本使用信息\",{\"1\":{\"333\":1}}],[\"query的事务\",{\"1\":{\"411\":1}}],[\"query的tobean性能在orm中算是比较出色优秀的\",{\"1\":{\"380\":1}}],[\"query的tosql性能中规中矩\",{\"1\":{\"380\":1}}],[\"query的逻辑删除可以帮助用户在select的时候过滤逻辑删除字段\",{\"1\":{\"275\":1}}],[\"query的column\",{\"1\":{\"224\":1}}],[\"query的select是用来终结当前表达式生成新的表达式的方式\",{\"1\":{\"727\":1}}],[\"query的select目前支持两种方式返回自定义列\",{\"1\":{\"715\":1}}],[\"query的sqlnativesegment封装和sqlfunc和sqlfuncas能力实现单列的数据库函数\",{\"1\":{\"221\":1}}],[\"query的springboot\",{\"1\":{\"122\":1,\"498\":1}}],[\"query的高级功能来自于作者多年的开发经验总结\",{\"1\":{\"188\":1}}],[\"query的注解\",{\"1\":{\"157\":2}}],[\"query的实战环境会尽可能的给大家带来实际开发过程中我们采用的设计类型\",{\"1\":{\"98\":1,\"809\":1}}],[\"query的apt包\",{\"1\":{\"30\":1,\"163\":1}}],[\"query的api包\",{\"1\":{\"30\":1,\"31\":1,\"44\":1,\"163\":1}}],[\"query的便捷性\",{\"1\":{\"18\":1}}],[\"queryable3<topic\",{\"1\":{\"649\":1}}],[\"queryable<blogentity>\",{\"1\":{\"714\":2}}],[\"queryable<blogentitytest>\",{\"1\":{\"227\":1}}],[\"queryable<topicunion>\",{\"1\":{\"759\":3,\"760\":2}}],[\"queryable<topicgrouptestdto>\",{\"1\":{\"648\":1}}],[\"queryable<topic>\",{\"1\":{\"647\":1,\"649\":1,\"757\":3,\"758\":3}}],[\"queryable<trentity>>\",{\"1\":{\"641\":2}}],[\"queryable<t1>\",{\"1\":{\"641\":2}}],[\"queryable默认行为anyvaluefilter\",{\"1\":{\"631\":1}}],[\"queryable\",{\"0\":{\"246\":1},\"1\":{\"23\":1,\"24\":1,\"25\":2,\"34\":6,\"35\":4,\"36\":1,\"37\":2,\"38\":2,\"39\":2,\"40\":1,\"41\":1,\"42\":2,\"102\":4,\"110\":3,\"111\":2,\"112\":3,\"129\":5,\"130\":1,\"131\":1,\"132\":2,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":2,\"138\":1,\"140\":3,\"144\":3,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":3,\"152\":15,\"157\":2,\"166\":2,\"167\":6,\"168\":5,\"169\":1,\"170\":2,\"171\":4,\"172\":4,\"173\":1,\"174\":2,\"175\":2,\"179\":6,\"180\":2,\"181\":1,\"182\":6,\"183\":3,\"184\":4,\"185\":11,\"186\":2,\"196\":1,\"214\":3,\"220\":8,\"223\":3,\"227\":3,\"233\":1,\"234\":1,\"235\":1,\"237\":4,\"250\":2,\"251\":1,\"252\":2,\"260\":1,\"265\":1,\"272\":1,\"278\":2,\"280\":1,\"281\":2,\"285\":2,\"292\":1,\"293\":2,\"295\":1,\"296\":2,\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"315\":6,\"323\":1,\"335\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"350\":2,\"356\":1,\"385\":1,\"386\":1,\"387\":1,\"388\":1,\"397\":3,\"417\":2,\"419\":2,\"482\":1,\"505\":4,\"508\":1,\"509\":1,\"517\":1,\"522\":4,\"526\":5,\"532\":8,\"556\":4,\"557\":5,\"565\":4,\"572\":1,\"573\":1,\"574\":1,\"579\":1,\"588\":1,\"589\":1,\"590\":1,\"593\":1,\"594\":1,\"595\":1,\"601\":2,\"606\":1,\"607\":1,\"608\":2,\"615\":3,\"616\":1,\"620\":1,\"621\":1,\"622\":1,\"623\":2,\"626\":3,\"631\":4,\"633\":4,\"634\":1,\"641\":3,\"642\":2,\"645\":1,\"646\":1,\"647\":2,\"648\":2,\"649\":2,\"650\":1,\"651\":1,\"652\":1,\"666\":6,\"667\":3,\"669\":5,\"672\":2,\"673\":6,\"679\":1,\"681\":1,\"682\":1,\"683\":1,\"691\":1,\"694\":7,\"696\":7,\"697\":1,\"703\":1,\"706\":1,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"712\":2,\"713\":6,\"714\":1,\"724\":3,\"734\":1,\"735\":2,\"737\":1,\"738\":2,\"739\":2,\"742\":1,\"744\":2,\"757\":3,\"758\":3,\"759\":3,\"760\":2,\"764\":2,\"765\":1,\"772\":1,\"773\":1,\"774\":1,\"783\":2,\"789\":2,\"794\":2,\"795\":1,\"803\":1,\"804\":1}}],[\"query推出了实验性api\",{\"1\":{\"18\":1}}],[\"query特性\",{\"1\":{\"18\":1}}],[\"query<long>\",{\"1\":{\"738\":1}}],[\"query<tentity>\",{\"1\":{\"690\":1}}],[\"query<t>\",{\"1\":{\"510\":3,\"814\":5}}],[\"query<\",{\"1\":{\"17\":1,\"30\":4,\"31\":3,\"44\":2,\"115\":1,\"120\":2,\"121\":4,\"157\":4,\"158\":2,\"163\":3,\"167\":1,\"176\":1,\"395\":3,\"453\":3,\"455\":2,\"460\":5,\"463\":1,\"465\":1,\"466\":4,\"478\":1,\"490\":1,\"496\":2,\"497\":4,\"504\":1,\"513\":3,\"514\":1,\"519\":4,\"801\":4}}],[\"query\",{\"1\":{\"4\":1,\"5\":1,\"12\":3,\"17\":1,\"30\":4,\"31\":3,\"34\":1,\"44\":2,\"86\":1,\"87\":1,\"94\":2,\"111\":12,\"115\":4,\"117\":3,\"120\":2,\"121\":4,\"139\":1,\"140\":1,\"157\":4,\"158\":1,\"161\":1,\"163\":3,\"167\":2,\"174\":1,\"176\":1,\"204\":1,\"205\":3,\"250\":1,\"251\":1,\"252\":2,\"285\":2,\"323\":1,\"350\":1,\"365\":2,\"366\":4,\"384\":1,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"395\":5,\"453\":5,\"455\":3,\"460\":7,\"463\":3,\"465\":4,\"466\":6,\"468\":1,\"470\":1,\"481\":1,\"483\":4,\"490\":4,\"493\":4,\"496\":2,\"497\":4,\"504\":1,\"509\":2,\"510\":3,\"517\":6,\"521\":1,\"528\":1,\"631\":25,\"633\":12,\"682\":2,\"683\":2,\"690\":2,\"697\":1,\"742\":1,\"772\":1,\"774\":1,\"777\":1,\"780\":1,\"786\":1,\"792\":1,\"804\":1,\"809\":1,\"814\":9}}],[\"qualifier\",{\"1\":{\"123\":1,\"499\":1,\"523\":2}}],[\"qualifies\",{\"1\":{\"117\":1,\"493\":1}}],[\"qualifying\",{\"1\":{\"117\":1,\"493\":1}}],[\"qq群\",{\"1\":{\"94\":1}}],[\"qq\",{\"0\":{\"1\":1,\"2\":1,\"3\":1}}],[\"仓库\",{\"0\":{\"4\":1,\"5\":1}}],[\"官方\",{\"0\":{\"3\":1}}],[\"群\",{\"0\":{\"1\":1,\"2\":1,\"3\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map

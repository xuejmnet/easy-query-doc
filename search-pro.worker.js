const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":494,\"nextId\":494,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#github仓库\",\"2\":\"v-8daa1a0e#gitee仓库\",\"3\":\"v-8daa1a0e#许可证\",\"4\":\"v-8daa1a0e#文档主题\",\"5\":\"v-8daa1a0e#🔔交流qq群\",\"6\":\"v-8daa1a0e#easyquery官方qq群-170029046\",\"7\":\"v-e6adff1c\",\"8\":\"v-e6adff1c#支持的数据库\",\"9\":\"v-1445ee5a\",\"10\":\"v-1445ee5a#springboot-启动报错\",\"11\":\"v-760ae03a\",\"12\":\"v-760ae03a#爱心\",\"13\":\"v-5d4c4494\",\"14\":\"v-1473bf53\",\"15\":\"v-1473bf53#catalog\",\"16\":\"v-4e65ec78\",\"17\":\"v-c151bf32\",\"18\":\"v-438ffe52\",\"19\":\"v-438ffe52#markdown-introduction\",\"20\":\"v-438ffe52#markdown-config\",\"21\":\"v-438ffe52#markdown-extension\",\"22\":\"v-438ffe52#vuepress-enhancement\",\"23\":\"v-438ffe52#theme-enhancement\",\"24\":\"v-438ffe52#custom-container\",\"25\":\"v-438ffe52#tabs\",\"26\":\"v-438ffe52#code-tabs\",\"27\":\"v-438ffe52#superscript-and-subscript\",\"28\":\"v-438ffe52#align\",\"29\":\"v-438ffe52#attrs\",\"30\":\"v-438ffe52#footnote\",\"31\":\"v-438ffe52#mark\",\"32\":\"v-438ffe52#tasklist\",\"33\":\"v-438ffe52#image-enhancement\",\"34\":\"v-438ffe52#chart\",\"35\":\"v-438ffe52#echarts\",\"36\":\"v-438ffe52#flowchart\",\"37\":\"v-438ffe52#mermaid\",\"38\":\"v-438ffe52#tex\",\"39\":\"v-438ffe52#include-files\",\"40\":\"v-438ffe52#code-demo\",\"41\":\"v-438ffe52#stylize\",\"42\":\"v-438ffe52#playground\",\"43\":\"v-438ffe52#vue-playground\",\"44\":\"v-438ffe52#presentation\",\"45\":\"v-6e19edb7\",\"46\":\"v-6e19edb7#page-information\",\"47\":\"v-6e19edb7#page-content\",\"48\":\"v-6e19edb7#page-structure\",\"49\":\"v-2d0a870d\",\"50\":\"v-2d0a870d#github-repository\",\"51\":\"v-2d0a870d#gitee-repository\",\"52\":\"v-2d0a870d#license\",\"53\":\"v-2d0a870d#doument-theme\",\"54\":\"v-2d0a870d#🔔qq-group\",\"55\":\"v-2d0a870d#easyquery官方qq群-170029046\",\"56\":\"v-fffb8e28\",\"57\":\"v-fffb8e28#指南\",\"58\":\"v-fffb8e28#easyquery\",\"59\":\"v-fffb8e28#特性\",\"60\":\"v-fffb8e28#学习指南\",\"61\":\"v-fffb8e28#基础\",\"62\":\"v-4d2a090a\",\"63\":\"v-269ae70f\",\"64\":\"v-5d5cfe70\",\"65\":\"v-5d5cfe70#目录\",\"66\":\"v-e8200854\",\"67\":\"v-e8200854#valueupdateatomictrack\",\"68\":\"v-e8200854#系统默认实现\",\"69\":\"v-e8200854#例子\",\"70\":\"v-8d29f6b2\",\"71\":\"v-8d29f6b2#例如\",\"72\":\"v-8d29f6b2#代码注意点\",\"73\":\"v-8d29f6b2#原因可能\",\"74\":\"v-6a5d0d87\",\"75\":\"v-6a5d0d87#encryptionstrategy\",\"76\":\"v-6a5d0d87#encryption\",\"77\":\"v-6a5d0d87#demo数据\",\"78\":\"v-6a5d0d87#插入数据测试\",\"79\":\"v-6a5d0d87#加密实现类支持模糊搜索高性能\",\"80\":\"v-6a5d0d87#加密方式\",\"81\":\"v-6a5d0d87#实现加密策略\",\"82\":\"v-6a5d0d87#abstractunsupportemojiaesbase64encryptionstrategy\",\"83\":\"v-6a5d0d87#abstractsupportemojiaesbase64encryptionstrategy\",\"84\":\"v-6a5d0d87#测试\",\"85\":\"v-b4c9a8b4\",\"86\":\"v-b4c9a8b4#ifnull编写\",\"87\":\"v-b4c9a8b4#columnpropertyfunction\",\"88\":\"v-b4c9a8b4#columnfunction\",\"89\":\"v-0006c2af\",\"90\":\"v-0006c2af#mysql加密解密\",\"91\":\"v-0006c2af#columnvaluesqlconverter\",\"92\":\"v-0006c2af#案例\",\"93\":\"v-0006c2af#新增数据\",\"94\":\"v-0006c2af#查询数据\",\"95\":\"v-0006c2af#更新数据\",\"96\":\"v-0006c2af#按列更新\",\"97\":\"v-0006c2af#相关博客\",\"98\":\"v-11884a67\",\"99\":\"v-11884a67#spring-boot\",\"100\":\"v-11884a67#非spring-boot环境\",\"101\":\"v-11884a67#api\",\"102\":\"v-11884a67#trackmanager\",\"103\":\"v-11884a67#queryable\",\"104\":\"v-11884a67#easyquery\",\"105\":\"v-11884a67#demo数据\",\"106\":\"v-11884a67#新增测试数据\",\"107\":\"v-11884a67#追踪更新\",\"108\":\"v-11884a67#开启追踪后对象属性不修改更新\",\"109\":\"v-11884a67#不追踪更新\",\"110\":\"v-7623c560\",\"111\":\"v-7623c560#自定义函数创建数据库自动生成列\",\"112\":\"v-7623c560#案例场景\",\"113\":\"v-c42f8ac8\",\"114\":\"v-c42f8ac8#interceptor-api\",\"115\":\"v-c42f8ac8#demo数据\",\"116\":\"v-c42f8ac8#entityinterceptor\",\"117\":\"v-c42f8ac8#api\",\"118\":\"v-c42f8ac8#updatesetinterceptor\",\"119\":\"v-c42f8ac8#api-1\",\"120\":\"v-c42f8ac8#predicatefilterinterceptor\",\"121\":\"v-c42f8ac8#api-2\",\"122\":\"v-c42f8ac8#租户模式实现\",\"123\":\"v-c42f8ac8#按需拦截\",\"124\":\"v-504f9a57\",\"125\":\"v-504f9a57#demo数据\",\"126\":\"v-504f9a57#logicdelete\",\"127\":\"v-504f9a57#例子\",\"128\":\"v-504f9a57#strategy\",\"129\":\"v-504f9a57#禁用逻辑删除\",\"130\":\"v-504f9a57#自定义逻辑删除\",\"131\":\"v-504f9a57#自定义逻辑删除数据\",\"132\":\"v-504f9a57#实现自定义逻辑删除策略\",\"133\":\"v-504f9a57#测试\",\"134\":\"v-309affc9\",\"135\":\"v-309affc9#相关配置\",\"136\":\"v-309affc9#demo数据\",\"137\":\"v-309affc9#api\",\"138\":\"v-309affc9#easyversionstrategy\",\"139\":\"v-309affc9#测试数据\",\"140\":\"v-309affc9#实体更新\",\"141\":\"v-309affc9#表达式更新\",\"142\":\"v-309affc9#逻辑删除加版本号\",\"143\":\"v-309affc9#实体对象删除\",\"144\":\"v-309affc9#表达式删除\",\"145\":\"v-5d5c2d30\",\"146\":\"v-5d5c2d30#introduction\",\"147\":\"v-5d5c2d30#details\",\"148\":\"v-177e1f06\",\"149\":\"v-7702eca6\",\"150\":\"v-fd1be79c\",\"151\":\"v-fd1be79c#单表api使用\",\"152\":\"v-fd1be79c#多表查询api\",\"153\":\"v-fd1be79c#多表返回表达式\",\"154\":\"v-fd1be79c#多表自定义结果api\",\"155\":\"v-5800893a\",\"156\":\"v-5800893a#默认行为\",\"157\":\"v-5800893a#配置\",\"158\":\"v-5800893a#select\",\"159\":\"v-5800893a#insert\",\"160\":\"v-5800893a#update\",\"161\":\"v-5800893a#delete\",\"162\":\"v-1fb92641\",\"163\":\"v-1fb92641#_1-表达式删除\",\"164\":\"v-1fb92641#_2-实体删除\",\"165\":\"v-1fb92641#_3-强制物理删除\",\"166\":\"v-5c70e1f3\",\"167\":\"v-5c70e1f3#_1-单条插入\",\"168\":\"v-5c70e1f3#_2-多条插入\",\"169\":\"v-5c70e1f3#_3-链式添加\",\"170\":\"v-5c70e1f3#_4-自增主键回填\",\"171\":\"v-5c70e1f3#_5-策略新增\",\"172\":\"v-5c70e1f3#_6-mysql方言\",\"173\":\"v-5c70e1f3#onduplicatekeyignore\",\"174\":\"v-5c70e1f3#onduplicatekeyupdate\",\"175\":\"v-5c70e1f3#_7-pgsql方言\",\"176\":\"v-5c70e1f3#onconflictdonothing\",\"177\":\"v-5c70e1f3#onconflictdoupdate\",\"178\":\"v-c7bd4004\",\"179\":\"v-c7bd4004#结论\",\"180\":\"v-c7bd4004#tosql性能附带双列tobean\",\"181\":\"v-c7bd4004#tobean数据库表20列\",\"182\":\"v-613f4354\",\"183\":\"v-613f4354#测试方法\",\"184\":\"v-613f4354#测试单条数据查询\",\"185\":\"v-613f4354#测试列表-list-数据查询\",\"186\":\"v-613f4354#测试列表-list1w-数据查询\",\"187\":\"v-613f4354#分页查询\",\"188\":\"v-613f4354#数据更新\",\"189\":\"v-613f4354#更多的测试\",\"190\":\"v-688ad1d4\",\"191\":\"v-688ad1d4#psvm下\",\"192\":\"v-688ad1d4#安装依赖\",\"193\":\"v-688ad1d4#新建java类\",\"194\":\"v-688ad1d4#初始化代码\",\"195\":\"v-797fc8eb\",\"196\":\"v-797fc8eb#默认行为\",\"197\":\"v-e291cf30\",\"198\":\"v-e291cf30#手动事务\",\"199\":\"v-e291cf30#api\",\"200\":\"v-e291cf30#如何开启\",\"201\":\"v-4068b5e3\",\"202\":\"v-4068b5e3#_0-对象主键更新\",\"203\":\"v-4068b5e3#_1-更新指定列\",\"204\":\"v-4068b5e3#_2-表列自更新\",\"205\":\"v-4068b5e3#_3-表列原子更新\",\"206\":\"v-4068b5e3#_3-差异更新\",\"207\":\"v-4068b5e3#_4-指定列更新或条件\",\"208\":\"v-4068b5e3#_5-策略更新\",\"209\":\"v-4068b5e3#_6-注意\",\"210\":\"v-17d50ac1\",\"211\":\"v-5df413ae\",\"212\":\"v-5df413ae#table\",\"213\":\"v-5df413ae#column\",\"214\":\"v-5df413ae#columnignore\",\"215\":\"v-5df413ae#insertignore\",\"216\":\"v-5df413ae#updateignore\",\"217\":\"v-5df413ae#logicdelete\",\"218\":\"v-5df413ae#version\",\"219\":\"v-5df413ae#默认乐观锁版本号策略\",\"220\":\"v-5df413ae#versionintstrategy\",\"221\":\"v-5df413ae#versionlongstrategy\",\"222\":\"v-5df413ae#versionuuidstrategy\",\"223\":\"v-5df413ae#encryption\",\"224\":\"v-5df413ae#encryptionstrategy\",\"225\":\"v-5df413ae#supportquerylike\",\"226\":\"v-5df413ae#navigate\",\"227\":\"v-5df413ae#shardingdatasourcekey\",\"228\":\"v-5df413ae#shardingextradatasourcekey\",\"229\":\"v-5df413ae#shardingtablekey\",\"230\":\"v-5df413ae#shardingextratablekey\",\"231\":\"v-5df413ae#easywherecondition\",\"232\":\"v-5df413ae#easyquerytrack\",\"233\":\"v-536ebfed\",\"234\":\"v-536ebfed#获取最新\",\"235\":\"v-536ebfed#api接口选型\",\"236\":\"v-536ebfed#使用示例\",\"237\":\"v-536ebfed#非spring-boot初始化\",\"238\":\"v-ad88c224\",\"239\":\"v-ad88c224#获取最新\",\"240\":\"v-ad88c224#spring-boot工程\",\"241\":\"v-ad88c224#获取最新-1\",\"242\":\"v-ad88c224#spring-boot初始化\",\"243\":\"v-ad88c224#非spring-boot初始化\",\"244\":\"v-124c900c\",\"245\":\"v-124c900c#默认配置项\",\"246\":\"v-124c900c#分表分库特有配置\",\"247\":\"v-124c900c#spring-boot\",\"248\":\"v-124c900c#非spring-boot\",\"249\":\"v-0c874194\",\"250\":\"v-0c874194#国产框架solon配置\",\"251\":\"v-0c874194#什么是solon\",\"252\":\"v-0c874194#获取最新\",\"253\":\"v-0c874194#快速开始\",\"254\":\"v-0c874194#新建java-maven项目\",\"255\":\"v-0c874194#添加项目依赖\",\"256\":\"v-0c874194#新建datasource注入\",\"257\":\"v-0c874194#新增控制器\",\"258\":\"v-0c874194#solon启动\",\"259\":\"v-0c874194#easy-query查询\",\"260\":\"v-0c874194#solon配置easy-query个性化\",\"261\":\"v-0c874194#额外配置\",\"262\":\"v-0c874194#逻辑删除\",\"263\":\"v-0c874194#solon所有配置\",\"264\":\"v-07b820b1\",\"265\":\"v-07b820b1#获取最新\",\"266\":\"v-07b820b1#spring-boot工程\",\"267\":\"v-07b820b1#springboot多数据源\",\"268\":\"v-07b820b1#springboot-启动报错\",\"269\":\"v-07b820b1#多数据源\",\"270\":\"v-f4175cfa\",\"271\":\"v-1074f60a\",\"272\":\"v-1074f60a#新建一个springboot项目\",\"273\":\"v-1074f60a#配置bean\",\"274\":\"v-1074f60a#数据库脚本\",\"275\":\"v-1074f60a#创建对象\",\"276\":\"v-1074f60a#添加翻译缓存服务\",\"277\":\"v-1074f60a#测试添加控制器\",\"278\":\"v-33e6399e\",\"279\":\"v-33e6399e#新建项目\",\"280\":\"v-33e6399e#添加依赖\",\"281\":\"v-33e6399e#添加kapt设置\",\"282\":\"v-33e6399e#新增数据库对象\",\"283\":\"v-33e6399e#编译\",\"284\":\"v-33e6399e#运行\",\"285\":\"v-33e6399e#错误\",\"286\":\"v-33e6399e#完整的pom\",\"287\":\"v-9158abca\",\"288\":\"v-9158abca#springboot\",\"289\":\"v-bd56e426\",\"290\":\"v-bd56e426#可以被替换的接口\",\"291\":\"v-bd56e426#自定义nameconversion\",\"292\":\"v-bd56e426#springboot环境\",\"293\":\"v-bd56e426#非springboot环境\",\"294\":\"v-6c97c756\",\"295\":\"v-6c97c756#api\",\"296\":\"v-6c97c756#springboot\",\"297\":\"v-6c97c756#控制台\",\"298\":\"v-6c97c756#枚举值\",\"299\":\"v-6c97c756#数据库对象属性枚举值\",\"300\":\"v-6c97c756#数据库对象属性integer值\",\"301\":\"v-6c97c756#json对象\",\"302\":\"v-5d5821d6\",\"303\":\"v-5d5821d6#introduction\",\"304\":\"v-5d5821d6#details\",\"305\":\"v-0b6fc5f8\",\"306\":\"v-41aa4f5a\",\"307\":\"v-41aa4f5a#单表查询\",\"308\":\"v-41aa4f5a#多表\",\"309\":\"v-41aa4f5a#嵌套多表\",\"310\":\"v-41aa4f5a#api\",\"311\":\"v-7325db66\",\"312\":\"v-7325db66#string\",\"313\":\"v-7325db66#integer\",\"314\":\"v-7325db66#map\",\"315\":\"v-7325db66#支持的类型\",\"316\":\"v-2b4612d6\",\"317\":\"v-2b4612d6#简单查询\",\"318\":\"v-2b4612d6#多条件casewhen\",\"319\":\"v-11b5b9f4\",\"320\":\"v-11b5b9f4#默认配置项\",\"321\":\"v-11b5b9f4#查询对象\",\"322\":\"v-11b5b9f4#动态条件-1\",\"323\":\"v-11b5b9f4#条件接受\",\"324\":\"v-11b5b9f4#查询对象-1\",\"325\":\"v-11b5b9f4#动态查询条件\",\"326\":\"v-755cd5fa\",\"327\":\"v-755cd5fa#objectsort\",\"328\":\"v-755cd5fa#objectsortbuilder\",\"329\":\"v-755cd5fa#单字段动态排序\",\"330\":\"v-755cd5fa#多字段组合动态排序\",\"331\":\"v-755cd5fa#join动态排序\",\"332\":\"v-755cd5fa#uisort\",\"333\":\"v-44287dac\",\"334\":\"v-44287dac#api\",\"335\":\"v-44287dac#案例\",\"336\":\"v-761d1a43\",\"337\":\"v-761d1a43#api说明\",\"338\":\"v-0d476366\",\"339\":\"v-f398ff10\",\"340\":\"v-f398ff10#api变化\",\"341\":\"v-f398ff10#leftjoin\",\"342\":\"v-f398ff10#innerjoin\",\"343\":\"v-f398ff10#嵌套join\",\"344\":\"v-f398ff10#group-join\",\"345\":\"v-1ad9680e\",\"346\":\"v-1ad9680e#查询sqlquery\",\"347\":\"v-1ad9680e#无参数强类型返回\",\"348\":\"v-1ad9680e#有参数强类型返回\",\"349\":\"v-1ad9680e#查询sqlquerymap\",\"350\":\"v-1ad9680e#无参数map返回\",\"351\":\"v-1ad9680e#有参数map返回\",\"352\":\"v-1ad9680e#执行\",\"353\":\"v-1ad9680e#无参数\",\"354\":\"v-1ad9680e#有参数\",\"355\":\"v-1ad9680e#sqlsegmentas\",\"356\":\"v-1ad9680e#sqlnativesegment\",\"357\":\"v-1ad9680e#案例二\",\"358\":\"v-0a5901d5\",\"359\":\"v-0a5901d5#案例\",\"360\":\"v-ae3272cc\",\"361\":\"v-ae3272cc#简单分页\",\"362\":\"v-ae3272cc#join分页\",\"363\":\"v-ae3272cc#group分页\",\"364\":\"v-ae3272cc#自定义分页返回结果\",\"365\":\"v-ae3272cc#替换接口\",\"366\":\"v-ae3272cc#默认实现\",\"367\":\"v-ae3272cc#无依赖使用自己的pageresult\",\"368\":\"v-ae3272cc#框架提供的分页器\",\"369\":\"v-ae3272cc#添加自己的分页返回结果接口\",\"370\":\"v-ae3272cc#自定义pager\",\"371\":\"v-ae3272cc#测试代码\",\"372\":\"v-0a7aaaea\",\"373\":\"v-0a7aaaea#navigate\",\"374\":\"v-0a7aaaea#普通链接查询\",\"375\":\"v-0a7aaaea#onetoone\",\"376\":\"v-0a7aaaea#onetomany\",\"377\":\"v-0a7aaaea#manytoone\",\"378\":\"v-0a7aaaea#多对多\",\"379\":\"v-0a7aaaea#多次include\",\"380\":\"v-0a7aaaea#多关联查询\",\"381\":\"v-0a7aaaea#省市区\",\"382\":\"v-0a7aaaea#关联查询vo返回自定义列\",\"383\":\"v-38806110\",\"384\":\"v-2e216cf6\",\"385\":\"v-2e216cf6#java对象\",\"386\":\"v-2e216cf6#输出指定列\",\"387\":\"v-2e216cf6#相同属性不同列名不映射\",\"388\":\"v-2e216cf6#全字段查询\",\"389\":\"v-2e216cf6#追加映射字段\",\"390\":\"v-2e216cf6#忽略查询字段\",\"391\":\"v-52d0a8d2\",\"392\":\"v-52d0a8d2#count连表统计\",\"393\":\"v-52d0a8d2#sum连表统计\",\"394\":\"v-4ed68f2a\",\"395\":\"v-4ed68f2a#select后置风格\",\"396\":\"v-4ed68f2a#api\",\"397\":\"v-4ed68f2a#selector说明\",\"398\":\"v-4ed68f2a#按需返回vo对象\",\"399\":\"v-4ed68f2a#按需快速join返回列\",\"400\":\"v-4ed68f2a#tomap\",\"401\":\"v-4488498b\",\"402\":\"v-4488498b#案例\",\"403\":\"v-4922145e\",\"404\":\"v-4922145e#exists\",\"405\":\"v-4922145e#not-exists\",\"406\":\"v-4922145e#in\",\"407\":\"v-4922145e#not-in\",\"408\":\"v-7fa82c48\",\"409\":\"v-7fa82c48#查询sqlquery\",\"410\":\"v-7fa82c48#无参数强类型返回\",\"411\":\"v-7fa82c48#有参数强类型返回\",\"412\":\"v-7fa82c48#查询sqlquerymap\",\"413\":\"v-7fa82c48#无参数map返回\",\"414\":\"v-7fa82c48#有参数map返回\",\"415\":\"v-7fa82c48#map\",\"416\":\"v-54389ffd\",\"417\":\"v-54389ffd#单表union\",\"418\":\"v-54389ffd#复杂union\",\"419\":\"v-54389ffd#自定义结果集\",\"420\":\"v-54389ffd#不同表union\",\"421\":\"v-99f96e36\",\"422\":\"v-99f96e36#api\",\"423\":\"v-99f96e36#动态条件\",\"424\":\"v-99f96e36#null-pointer\",\"425\":\"v-99f96e36#动态条件2\",\"426\":\"v-3acd5000\",\"427\":\"v-3acd5000#目录\",\"428\":\"v-3acd5000#案例源码\",\"429\":\"v-38156841\",\"430\":\"v-38156841#创建数据库\",\"431\":\"v-38156841#配置文件\",\"432\":\"v-38156841#添加额外数据源\",\"433\":\"v-38156841#新增\",\"434\":\"v-38156841#修改\",\"435\":\"v-7c23572b\",\"436\":\"v-7c23572b#创建数据库\",\"437\":\"v-7c23572b#配置文件\",\"438\":\"v-7c23572b#添加额外数据源\",\"439\":\"v-7c23572b#新增\",\"440\":\"v-7c23572b#修改\",\"441\":\"v-02da83f4\",\"442\":\"v-02da83f4#创建表\",\"443\":\"v-02da83f4#配置文件\",\"444\":\"v-02da83f4#新增\",\"445\":\"v-02da83f4#修改\",\"446\":\"v-02da83f4#删除\",\"447\":\"v-26b8665e\",\"448\":\"v-2b64e284\",\"449\":\"v-2b64e284#目录\",\"450\":\"v-c1942916\",\"451\":\"v-65c00218\",\"452\":\"v-36295574\",\"453\":\"v-36295574#markdown-介绍\",\"454\":\"v-36295574#markdown-配置\",\"455\":\"v-36295574#markdown-扩展\",\"456\":\"v-36295574#vuepress-扩展\",\"457\":\"v-36295574#主题扩展\",\"458\":\"v-36295574#自定义容器\",\"459\":\"v-36295574#代码块\",\"460\":\"v-36295574#上下角标\",\"461\":\"v-36295574#自定义对齐\",\"462\":\"v-36295574#attrs\",\"463\":\"v-36295574#脚注\",\"464\":\"v-36295574#标记\",\"465\":\"v-36295574#任务列表\",\"466\":\"v-36295574#图片增强\",\"467\":\"v-36295574#图表\",\"468\":\"v-36295574#echarts\",\"469\":\"v-36295574#流程图\",\"470\":\"v-36295574#mermaid\",\"471\":\"v-36295574#tex-语法\",\"472\":\"v-36295574#导入文件\",\"473\":\"v-36295574#代码演示\",\"474\":\"v-36295574#样式化\",\"475\":\"v-36295574#交互演示\",\"476\":\"v-36295574#vue-交互演示\",\"477\":\"v-36295574#幻灯片\",\"478\":\"v-62ced1a6\",\"479\":\"v-62ced1a6#页面信息\",\"480\":\"v-62ced1a6#页面内容\",\"481\":\"v-62ced1a6#页面结构\",\"482\":\"v-47357bdb\",\"483\":\"v-47357bdb#功能亮点\",\"484\":\"v-47357bdb#bar\",\"485\":\"v-47357bdb#foo\",\"486\":\"v-763c1cd7\",\"487\":\"v-763c1cd7#介绍\",\"488\":\"v-763c1cd7#详情\",\"489\":\"v-1e317375\",\"490\":\"v-763e2284\",\"491\":\"v-763e2284#介绍\",\"492\":\"v-763e2284#详情\",\"493\":\"v-00fb7173\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,2],\"2\":[1,2],\"3\":[1,4],\"4\":[1,3],\"5\":[1],\"6\":[2],\"7\":[1,8],\"8\":[1,25],\"9\":[3,1],\"10\":[2,52],\"11\":[1,4],\"12\":[1,1],\"13\":[1,7],\"14\":[2],\"15\":[1,8],\"16\":[4,40],\"17\":[2,10],\"18\":[2,32],\"19\":[2,19],\"20\":[2,26],\"21\":[2,18],\"22\":[2,16],\"23\":[2,18],\"24\":[2,24],\"25\":[1,2],\"26\":[2,2],\"27\":[3,4],\"28\":[1,7],\"29\":[1,6],\"30\":[1,7],\"31\":[1,7],\"32\":[1,6],\"33\":[2,8],\"34\":[1,2],\"35\":[1,2],\"36\":[1,2],\"37\":[1,2],\"38\":[1,11],\"39\":[2,10],\"40\":[2,2],\"41\":[1,9],\"42\":[1,2],\"43\":[2,2],\"44\":[1,7],\"45\":[2,10],\"46\":[2,27],\"47\":[2,49],\"48\":[2,34],\"49\":[1],\"50\":[2,2],\"51\":[2,2],\"52\":[1,4],\"53\":[2,3],\"54\":[2],\"55\":[2],\"56\":[1],\"57\":[1,4],\"58\":[1,17],\"59\":[1,23],\"60\":[1,3],\"61\":[1,6],\"62\":[1,3],\"63\":[1],\"64\":[1,4],\"65\":[1,15],\"66\":[1,19],\"67\":[1,2],\"68\":[1,21],\"69\":[1,65],\"70\":[1,9],\"71\":[1,25],\"72\":[1,62],\"73\":[1,50],\"74\":[1,8],\"75\":[1,12],\"76\":[1,14],\"77\":[1],\"78\":[1,68],\"79\":[1,4],\"80\":[1,28],\"81\":[1,7],\"82\":[1,1],\"83\":[1,52],\"84\":[1,110],\"85\":[1,21],\"86\":[1],\"87\":[1,15],\"88\":[1,88],\"89\":[1,8],\"90\":[1,21],\"91\":[1,42],\"92\":[1,83],\"93\":[1,57],\"94\":[1,56],\"95\":[1,53],\"96\":[1,77],\"97\":[1,2],\"98\":[1,6],\"99\":[2,7],\"100\":[2,13],\"101\":[1],\"102\":[1,14],\"103\":[1,10],\"104\":[1,13],\"105\":[1],\"106\":[1,60],\"107\":[1,66],\"108\":[1,62],\"109\":[1,86],\"110\":[1,6],\"111\":[1,60],\"112\":[1,2],\"113\":[1,24],\"114\":[2,27],\"115\":[1],\"116\":[1],\"117\":[1,152],\"118\":[1,3],\"119\":[1,112],\"120\":[1],\"121\":[1,12],\"122\":[1,118],\"123\":[1,9],\"124\":[1,6],\"125\":[1],\"126\":[1,4],\"127\":[1,49],\"128\":[1,28],\"129\":[1,53],\"130\":[1,4],\"131\":[1],\"132\":[1,80],\"133\":[1,81],\"134\":[1,4],\"135\":[1,2],\"136\":[1],\"137\":[1],\"138\":[1,21],\"139\":[1,76],\"140\":[1,46],\"141\":[1,54],\"142\":[1,8],\"143\":[1,75],\"144\":[1,77],\"145\":[2],\"146\":[1,5],\"147\":[1,2],\"148\":[1,4],\"149\":[1,18],\"150\":[2,24],\"151\":[1],\"152\":[1,42],\"153\":[1],\"154\":[1,62],\"155\":[1],\"156\":[1,34],\"157\":[1],\"158\":[1,47],\"159\":[1,41],\"160\":[1,45],\"161\":[1,39],\"162\":[1,45],\"163\":[2,33],\"164\":[2,36],\"165\":[2,45],\"166\":[1,62],\"167\":[2,41],\"168\":[2,80],\"169\":[2,43],\"170\":[2,68],\"171\":[2,41],\"172\":[2],\"173\":[1,79],\"174\":[1,92],\"175\":[2],\"176\":[1,32],\"177\":[1,44],\"178\":[1,8],\"179\":[1,6],\"180\":[1],\"181\":[1],\"182\":[1,18],\"183\":[1,35],\"184\":[1,94],\"185\":[3,83],\"186\":[3,100],\"187\":[1,76],\"188\":[1,86],\"189\":[1,12],\"190\":[1,5],\"191\":[1],\"192\":[1,51],\"193\":[1,32],\"194\":[1,147],\"195\":[1],\"196\":[1,92],\"197\":[1],\"198\":[1,4],\"199\":[1,27],\"200\":[1,42],\"201\":[1,43],\"202\":[2,15],\"203\":[2,43],\"204\":[2,34],\"205\":[2,37],\"206\":[2,122],\"207\":[2,58],\"208\":[2,48],\"209\":[2,6],\"210\":[1,16],\"211\":[1],\"212\":[1,32],\"213\":[1,53],\"214\":[1,1],\"215\":[1,1],\"216\":[1,48],\"217\":[1,57],\"218\":[1,6],\"219\":[1,5],\"220\":[1,10],\"221\":[1,10],\"222\":[1,9],\"223\":[1,5],\"224\":[1,4],\"225\":[1,2],\"226\":[1,5],\"227\":[1,1],\"228\":[1,1],\"229\":[1,1],\"230\":[1,1],\"231\":[1,1],\"232\":[1,1],\"233\":[1,5],\"234\":[1,7],\"235\":[1,6],\"236\":[1,2],\"237\":[2,56],\"238\":[1],\"239\":[1,7],\"240\":[2,22],\"241\":[1,7],\"242\":[2,47],\"243\":[2,56],\"244\":[3,2],\"245\":[1,110],\"246\":[1,112],\"247\":[2,11],\"248\":[2,28],\"249\":[1],\"250\":[1,5],\"251\":[1,28],\"252\":[1,7],\"253\":[1],\"254\":[2],\"255\":[1,41],\"256\":[1,17],\"257\":[1,17],\"258\":[1,61],\"259\":[2,68],\"260\":[2,126],\"261\":[1],\"262\":[1,62],\"263\":[1,56],\"264\":[1],\"265\":[1,7],\"266\":[2,46],\"267\":[1,109],\"268\":[2,54],\"269\":[1,84],\"270\":[1],\"271\":[2,8],\"272\":[1,58],\"273\":[1,85],\"274\":[1,52],\"275\":[1,39],\"276\":[1,53],\"277\":[1,41],\"278\":[1,5],\"279\":[1],\"280\":[1,32],\"281\":[1,28],\"282\":[1,22],\"283\":[1,2],\"284\":[1,138],\"285\":[1,7],\"286\":[1,156],\"287\":[1,3],\"288\":[1,76],\"289\":[1,8],\"290\":[1,90],\"291\":[1,1],\"292\":[1,32],\"293\":[1,38],\"294\":[1,9],\"295\":[1,13],\"296\":[1,2],\"297\":[1,12],\"298\":[1,2],\"299\":[1,145],\"300\":[1,71],\"301\":[1,114],\"302\":[2],\"303\":[1,5],\"304\":[1,2],\"305\":[1,4],\"306\":[1,18],\"307\":[1],\"308\":[1],\"309\":[1,62],\"310\":[1,113],\"311\":[4,4],\"312\":[1],\"313\":[1],\"314\":[1,6],\"315\":[1,22],\"316\":[1,33],\"317\":[1,68],\"318\":[1,79],\"319\":[1,4],\"320\":[1,11],\"321\":[1,32],\"322\":[1,104],\"323\":[1,129],\"324\":[1,73],\"325\":[1,83],\"326\":[1,3],\"327\":[1,15],\"328\":[1,23],\"329\":[1,58],\"330\":[1,73],\"331\":[1,87],\"332\":[1,86],\"333\":[1,4],\"334\":[1,19],\"335\":[1,74],\"336\":[2,11],\"337\":[1,74],\"338\":[1,48],\"339\":[1,3],\"340\":[1,11],\"341\":[1,42],\"342\":[1,61],\"343\":[1,66],\"344\":[2,76],\"345\":[1,3],\"346\":[1,1],\"347\":[1,17],\"348\":[1,23],\"349\":[1,1],\"350\":[1,16],\"351\":[1,22],\"352\":[1],\"353\":[1,30],\"354\":[1,38],\"355\":[1,10],\"356\":[1,31],\"357\":[1,91],\"358\":[1,2],\"359\":[1,96],\"360\":[1,3],\"361\":[1,35],\"362\":[1,67],\"363\":[1,57],\"364\":[1,5],\"365\":[1,16],\"366\":[1,38],\"367\":[1,7],\"368\":[1,3],\"369\":[1,26],\"370\":[1,30],\"371\":[1,22],\"372\":[2,59],\"373\":[1,25],\"374\":[1,62],\"375\":[1,61],\"376\":[1,61],\"377\":[1,54],\"378\":[1,61],\"379\":[1,46],\"380\":[1],\"381\":[1,120],\"382\":[1,138],\"383\":[1,76],\"384\":[1,4],\"385\":[1,32],\"386\":[1,33],\"387\":[1,41],\"388\":[1,40],\"389\":[1,45],\"390\":[1,50],\"391\":[4,16],\"392\":[1,73],\"393\":[1,67],\"394\":[1,2],\"395\":[1,8],\"396\":[1,24],\"397\":[1,68],\"398\":[1,91],\"399\":[1,117],\"400\":[1,34],\"401\":[1,14],\"402\":[1,107],\"403\":[3,5],\"404\":[1,48],\"405\":[2,50],\"406\":[1,55],\"407\":[2,51],\"408\":[1,7],\"409\":[1,1],\"410\":[1,17],\"411\":[1,23],\"412\":[1,1],\"413\":[1,16],\"414\":[1,22],\"415\":[1,6],\"416\":[4,60],\"417\":[1,44],\"418\":[1,79],\"419\":[1,88],\"420\":[1,71],\"421\":[1,6],\"422\":[1,71],\"423\":[1,56],\"424\":[2,26],\"425\":[1,54],\"426\":[1,11],\"427\":[1,5],\"428\":[1,3],\"429\":[1,13],\"430\":[1,5],\"431\":[1,54],\"432\":[1,102],\"433\":[1,111],\"434\":[1,97],\"435\":[1,13],\"436\":[1,6],\"437\":[1,54],\"438\":[1,102],\"439\":[1,109],\"440\":[1,94],\"441\":[1,13],\"442\":[1,7],\"443\":[1,53],\"444\":[1,109],\"445\":[1,89],\"446\":[1,59],\"447\":[1,155],\"448\":[1],\"449\":[1,5],\"450\":[1,18],\"451\":[1,7],\"452\":[2,11],\"453\":[2,8],\"454\":[2,13],\"455\":[2,11],\"456\":[2,10],\"457\":[1,10],\"458\":[1,19],\"459\":[1,1],\"460\":[1,3],\"461\":[1,3],\"462\":[1,5],\"463\":[1,3],\"464\":[1,3],\"465\":[1,5],\"466\":[1,2],\"467\":[1,1],\"468\":[1,1],\"469\":[1,1],\"470\":[1,1],\"471\":[2,10],\"472\":[1,6],\"473\":[1,1],\"474\":[1,5],\"475\":[1,1],\"476\":[2,1],\"477\":[1,3],\"478\":[1,3],\"479\":[1,20],\"480\":[1,17],\"481\":[1,16],\"482\":[1],\"483\":[1],\"484\":[1,2],\"485\":[1,2],\"486\":[2],\"487\":[1,4],\"488\":[1,2],\"489\":[1,2],\"490\":[2],\"491\":[1,4],\"492\":[1,2],\"493\":[1,2]},\"averageFieldLength\":[1.2024291497975723,32.69943749641126],\"storedFields\":{\"0\":{\"h\":\"项目主页\"},\"1\":{\"h\":\"github仓库\",\"t\":[\"easy-query\"]},\"2\":{\"h\":\"gitee仓库\",\"t\":[\"easy-query\"]},\"3\":{\"h\":\"许可证\",\"t\":[\"Apache-2.0 License\"]},\"4\":{\"h\":\"文档主题\",\"t\":[\"vuepress-theme-hope\"]},\"5\":{\"h\":\"🔔交流QQ群\"},\"6\":{\"h\":\"EasyQuery官方QQ群: 170029046\"},\"7\":{\"h\":\"数据库支持\",\"t\":[\"easy-query目前已经抽象了表达式,所以原则上支持所有数据库,只需要自定义实现对应数据库的增删改查接口即可,也就是sql-db-support 所以如果不支持对应的sql那么你可以自行扩展或者提交相应的issue\"]},\"8\":{\"h\":\"支持的数据库\",\"t\":[\"数据库名称\",\"包名\",\"springboot配置\",\"solon配置\",\"MySQL\",\"sql-mysql\",\"mysql\",\"mysql\",\"PostgresSQL\",\"sql-pgsql\",\"pgsql\",\"pgsql\",\"SqlServer\",\"sql-mssql\",\"mssql\",\"mssql\",\"SqlServer RowNumber\",\"sql-mssql\",\"mssql_row_number\",\"mssql_row_number\",\"H2\",\"sql-h2\",\"h2\",\"h2\",\"达梦dameng\",\"sql-dameng\",\"dameng\",\"dameng\",\"人大金仓KingbaseES\",\"sql-kingbase-es\",\"kingbase_es\",\"kingbase_es\",\"Oracle\",\"sql-oracle\",\"oracle\",\"oracle\",\"SQLite\",\"sql-sqlite\",\"sqlite\",\"sqlite\"]},\"9\":{\"h\":\"常见问题(重要)❗️❗️❗️\",\"t\":[\"这里主要汇总了一些常见的问题\"]},\"10\":{\"h\":\"SpringBoot 启动报错\",\"t\":[\"java.lang.IllegalStateException: Unable to load cache item at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:79) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:419) ~[spring-core-5.3.29.jar:5.3.29] \",\"主要原因是\",\"缺少aop依赖\",\"aop组件版本不对\",\"解决办法添加对应的依赖\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> \"]},\"11\":{\"h\":\"服务支持\",\"t\":[\"您的支持是我坚持的动力,在这里希望您可以免费给我点个star\",\"GITHUB\",\"GITEE\"]},\"12\":{\"h\":\"爱心\",\"t\":[\"如果您觉得这个框架有用可以请作者喝杯咖啡\"]},\"13\":{\"h\":\"版本升级指南\",\"t\":[\"直接升级修改版本号即可1.0.0-1.x 最后一个版本号没有破坏性变动 甚至0.x版本都可以直接升级上来\"]},\"14\":{\"h\":\"Features Demo\"},\"15\":{\"h\":\"Catalog\",\"t\":[\"Markdown Enhance\",\"Page Config\",\"Function Disable\",\"Encryption Demo\"]},\"16\":{\"h\":\"Disabling layout and features\",\"t\":[\"You can disable some function and layout on the page by setting the Frontmatter of the page.\",\"This page is an demo that disables the following features:\",\"Navbar\",\"Sidebar\",\"Breadcrumb\",\"Page information\",\"Contributors\",\"Edit link\",\"Update time\",\"Prev/Next link\",\"Comment\",\"Footer\",\"Back to top button\"]},\"17\":{\"h\":\"Encryption Article\",\"t\":[\"The actual article content.\",\"Paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text paragraph 1 text.\",\"Paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text paragraph 2 text.\"]},\"18\":{\"h\":\"Markdown Enhance\",\"t\":[\"VuePress basically generate pages from Markdown files. So you can use it to generate documentation or blog sites easily.\",\"You should create and write Markdown files, so that VuePress can convert them to different pages according to file structure.\"]},\"19\":{\"h\":\"Markdown Introduction\",\"t\":[\"If you are a new learner and don’t know how to write Markdown, please read Markdown Intro and Markdown Demo.\"]},\"20\":{\"h\":\"Markdown Config\",\"t\":[\"VuePress introduce configuration for each Markdown page using Frontmatter.\",\"相关信息\",\"Frontmatter is a important concept in VuePress. If you don’t know it, you need to read Frontmatter Introduction.\"]},\"21\":{\"h\":\"Markdown Extension\",\"t\":[\"The Markdown content in VuePress will be parsed by markdown-it, which supports syntax extensions via markdown-it plugins.\"]},\"22\":{\"h\":\"VuePress Enhancement\",\"t\":[\"To enrich document writing, VuePress has extended Markdown syntax.\",\"For these extensions, please read Markdown extensions in VuePress.\"]},\"23\":{\"h\":\"Theme Enhancement\",\"t\":[\"By using vuepress-plugin-md-enhance, the theme extends more Markdown syntax and provides richer writing functions.\"]},\"24\":{\"h\":\"Custom Container\",\"t\":[\"Safely use {{ variable }} in Markdown.\",\"Custom Title\",\"A custom information container with code, link.\",\"const a = 1; \",\"Custom Title\",\"A custom tip container\",\"Custom Title\",\"A custom warning container\",\"Custom Title\",\"A custom danger container\",\"Custom Title\",\"A custom details container\",\"View Detail\"]},\"25\":{\"h\":\"Tabs\",\"t\":[\"View Detail\"]},\"26\":{\"h\":\"Code Tabs\",\"t\":[\"View Detail\"]},\"27\":{\"h\":\"Superscript and Subscript\",\"t\":[\"19th H2O\",\"View Detail\"]},\"28\":{\"h\":\"Align\",\"t\":[\"I am center\",\"I am right align\",\"View Detail\"]},\"29\":{\"h\":\"Attrs\",\"t\":[\"A word having id.\",\"View Detail\"]},\"30\":{\"h\":\"Footnote\",\"t\":[\"This text has footnote[1].\",\"View Detail\"]},\"31\":{\"h\":\"Mark\",\"t\":[\"You can mark important words .\",\"View Detail\"]},\"32\":{\"h\":\"Tasklist\",\"t\":[\" Plan A\",\" Plan B\",\"View Detail\"]},\"33\":{\"h\":\"Image Enhancement\",\"t\":[\"Support setting color scheme and size\",\"View Detail\"]},\"34\":{\"h\":\"Chart\",\"t\":[\"View Detail\"]},\"35\":{\"h\":\"Echarts\",\"t\":[\"View Detail\"]},\"36\":{\"h\":\"Flowchart\",\"t\":[\"View Detail\"]},\"37\":{\"h\":\"Mermaid\",\"t\":[\"View Detail\"]},\"38\":{\"h\":\"Tex\",\"t\":[\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\",\"View Detail\"]},\"39\":{\"h\":\"Include files\",\"t\":[\"Markdown Enhance\",\"Page Config\",\"Function Disable\",\"Encryption Demo\",\"View Detail\"]},\"40\":{\"h\":\"Code Demo\",\"t\":[\"View Detail\"]},\"41\":{\"h\":\"Stylize\",\"t\":[\"Donate Mr.Hope a cup of coffee. \",\"View Detail\"]},\"42\":{\"h\":\"Playground\",\"t\":[\"View Detail\"]},\"43\":{\"h\":\"Vue Playground\",\"t\":[\"View Detail\"]},\"44\":{\"h\":\"Presentation\",\"t\":[\"View Detail\",\"This is footnote content ↩︎\"]},\"45\":{\"h\":\"Page Config\",\"t\":[\"Content before more comment is regarded as page excerpt.\"]},\"46\":{\"h\":\"Page Information\",\"t\":[\"You can set page information in Markdown’s Frontmatter.\",\"The author is Ms.Hope.\",\"The writing date is January 1, 2020\",\"Category is \\\"Guide\\\"\",\"Tags are \\\"Page Config\\\" and \\\"Guide\\\"\"]},\"47\":{\"h\":\"Page Content\",\"t\":[\"You are free to write your Markdown here.\",\"Assets\",\"You can place images besides your Markdown files, but you should use relative links (i.e.: starting with ./) for them.\",\"For images in .vuepress/public directory, please use absolute links (i.e.: starting with /) for them.\",\"The theme contains a custom badge:\",\"A dark blue badge text badge at the end of line. \"]},\"48\":{\"h\":\"Page Structure\",\"t\":[\"This page should contain:\",\"BreadCrumb\",\"Title and information\",\"TOC (Table of Contents)\",\"Meta information including update time and contributors\",\"Comments\",\"Navbar\",\"Sidebar\",\"Footer\",\"Back to top button\",\"You can customize them in theme options and page frontmatter.\"]},\"49\":{\"h\":\"项目主页\"},\"50\":{\"h\":\"github repository\",\"t\":[\"easy-query\"]},\"51\":{\"h\":\"gitee repository\",\"t\":[\"easy-query\"]},\"52\":{\"h\":\"License\",\"t\":[\"Apache-2.0 License\"]},\"53\":{\"h\":\"doument theme\",\"t\":[\"vuepress-theme-hope\"]},\"54\":{\"h\":\"🔔QQ Group\"},\"55\":{\"h\":\"EasyQuery官方QQ群: 170029046\"},\"56\":{\"h\":\"使用指南\"},\"57\":{\"h\":\"指南\",\"t\":[\"License\",\"Stargazers over time\"]},\"58\":{\"h\":\"EasyQuery\",\"t\":[\"easy-query🚀 一款高性能、轻量级、强类型的Java对象查询ORM框架支持分库分表读写分离\",\"QQ群: 170029046\",\"问题反馈请前往:\",\"https://github.com/xuejmnet/easy-query/issues\",\"或者\",\"https://gitee.com/xuejm/easy-query/issues\"]},\"59\":{\"h\":\"特性\",\"t\":[\" 全局默认、自定义软删除，可以自己实现软删除或者使用系统默认定义的软删除\",\" 全局自定义拦截器，支持查询、修改、删除条件拦截器，对象插入、修改拦截器、修改set字段拦截器\",\" 单表查询、多表join查询\",\" 自定义更新、实体更新、条件更新\",\" 追踪查询，差异更新实体\",\" 企业级数据库列加密,支持like搜索\",\" 乐观锁版本号\",\" 自定义分库分表\",\" 读写分离\"]},\"60\":{\"h\":\"学习指南\",\"t\":[\"EasyQuery目前除了基础的增删改查外未来还将支持分库分表，读写分离，字段加密等企业级功能\"]},\"61\":{\"h\":\"基础\",\"t\":[\"《EasyQuery:数据新增》\",\"《EasyQuery:数据修改》\",\"《EasyQuery:数据删除》\",\"《EasyQuery:数据查询》\"]},\"62\":{\"h\":\"实战\",\"t\":[\"easy-query的实战环境会尽可能的给大家带来实际开发过程中我们采用的设计类型，并且给大家带来更多的解决方案\"]},\"63\":{\"h\":\"幻灯片页\"},\"64\":{\"h\":\"高级功能\",\"t\":[\"easy-query的高级功能来自于作者多年的开发经验总结,具有非常强悍的实际实践意义,可以帮你摆脱很多无意义的操作\"]},\"65\":{\"h\":\"目录\",\"t\":[\"《EasyQuery:逻辑删除》 数据的无价,软删除可以给程序带来后悔药,让用户无需关心底层通过修改delete语句为update来实现自动无感逻辑删除,支持select、update、delete\",\"《EasyQuery:全局拦截器》 支持entity对象的插入、更新前的实体拦截修改，select、update、delete的条件自定义,update的set自定义\"]},\"66\":{\"h\":\"列值原子更新\",\"t\":[\"easy-query提供了原子列更新,主要是针对当前数据的库存或者金额等数据进行原子更新,需要配合track更新,无法单独使用,譬如我有一个库存冗余字段,那么在更新的时候如果是对象更新那么将会生成原子sql(可以自定义)比如update set column=column+1 where id=xxx and column>=xxx\",\"说明!!!\",\"仅entity对象更新有效,如果是表达式更新那么还是按表达式更新来处理，并且需要当前上下文开启追踪模式不然无法使用\"]},\"67\":{\"h\":\"ValueUpdateAtomicTrack\",\"t\":[\"原子更新接口,需要自行实现\"]},\"68\":{\"h\":\"系统默认实现\",\"t\":[\"默认实现\",\"默认\",\"描述\",\"DefaultValueUpdateAtomicTrack\",\"✅\",\"不处理\",\"IntegerNotValueUpdateAtomicTrack\",\"❌\",\"非null的int更新,如果旧值比新值大生成update table set column=column-x where id=xx and column>=x,如果新值比旧值大update table set column=column+x where id=xx\",\"LongNotValueUpdateAtomicTrack\",\"❌\",\"非null的int更新,如果旧值比新值大生成update table set column=column-x where id=xx and column>=x,如果新值比旧值大update table set column=column+x where id=xx\"]},\"69\":{\"h\":\"例子\",\"t\":[\"@Data @Table(\\\"t_topic_value_atomic\\\") @ToString public class TopicValueUpdateAtomicTrack { @Column(primaryKey = true) private String id; @Column(valueUpdateAtomicTrack = IntegerNotValueUpdateAtomicTrack.class) private Integer stars; private String title; private Integer topicType; private LocalDateTime createTime; } //SpringBoot 直接使用@EasyQueryTrack aop TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); // id=123 stars=99 TopicValueUpdateAtomicTrack topicValueUpdateAtomicTrack = easyQuery.queryable(TopicValueUpdateAtomicTrack.class).asTracking().whereById(\\\"123\\\").firstOrNull(); //设置98 前后变更 1 topicValueUpdateAtomicTrack.setStars(98); long l = easyQuery.updatable(topicValueUpdateAtomicTrack).executeRows(); //UPDATE `t_topic_value_atomic` SET `stars` = `stars`- ? WHERE `id` = ? AND `stars` >= ? //UPDATE `t_topic_value_atomic` SET `stars` = `stars`- 1 WHERE `id` = '123' AND `stars` >= 1 }finally { trackManager.release(); } \"]},\"70\":{\"h\":\"Batch批处理\",\"t\":[\"easy-query如果需要使用batch功能首先需要在链接字符串添加rewriteBatchedStatements=true启用参数（mysql）,默认框架会在配置参数阈值到达后自动合并sql调用executeBatch合并,如果需要手动调用或者手动限制不调用可以通过调用batch方法\",\"mysql需要链接字符串启用批处理参数rewriteBatchedStatements=true,其他数据库自行查询相关的说明也可能不需要 addBatch、executeBatch\"]},\"71\":{\"h\":\"例如\",\"t\":[\"jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&rewriteBatchedStatements=true\",\"配置名称\",\"默认值\",\"描述\",\"insertBatchThreshold\",\"1024\",\"如果insertable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率,链接字符串需要添加rewriteBatchedStatements=true,可以通过调用insert或者update的batch方法来手动使用或者禁用\",\"updateBatchThreshold\",\"1024\",\"如果updatable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率,链接字符串需要添加rewriteBatchedStatements=true,可以通过调用insert或者update的batch方法来手动使用或者禁用\"]},\"72\":{\"h\":\"代码注意点\",\"t\":[\"说明!!!\",\"使用batch可以有效的提高插入或者更新的性能,但是会导致返回结果不正确,如果使用batch那么自行处理返回结果\",\"easyQuery.insertable(r).batch().executeRows(); ==> Preparing: INSERT INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ==> Parameters: 500(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),500(String),500(String),false(Boolean),title500(String),content500(String),http://blog.easy-query.com/500(String),500(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) ==> Parameters: 300(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),300(String),300(String),false(Boolean),title300(String),content300(String),http://blog.easy-query.com/300(String),300(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) ==> Parameters: 400(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),400(String),400(String),false(Boolean),title400(String),content400(String),http://blog.easy-query.com/400(String),400(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: -6 \"]},\"73\":{\"h\":\"原因可能\",\"t\":[\"来自网上的说法\",\"executeBatch方法会返回一个int数组\",\"int[] executeBatch() throws SQLException;\",\"数组各值可能是以下之一：\",\"大于或等于零的数字,表示命令已成功处理，并且是更新计数，给出了\\n数据库中受命令影响的行数执行\\nSUCCESS_NO_INFO ( -2)的值,表示命令为处理成功，但受影响的行数为未知\\n如果批量更新中的命令之一无法正确执行，此方法引发BatchUpdateException，JDBC driver可能会也可能不会继续处理剩余的命令。但是driver的行为是与特定的DBMS绑定的，要么总是继续处理命令，要么从不继续处理命令。如果驱动程序继续处理，方法将返回 EXECUTE_FAILED(-3)。\\n————————————————\\n版权声明：本文为CSDN博主「左林右李02」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\\n原文链接：https://blog.csdn.net/u011624157/article/details/110734184\"]},\"74\":{\"h\":\"数据库列加密\",\"t\":[\"easy-query提供了建议的数据列加密功能,可以实现功能复杂的数据库列加密,并且可以支持模糊查询.实现方式具体请看阿里巴巴密文字段检索方案 ，这边easy-query给出了一个默认的实现,并且支持所有数据库\"]},\"75\":{\"h\":\"EncryptionStrategy\",\"t\":[\"方法\",\"参数\",\"描述\",\"encrypt\",\"对象,属性,值\",\"加密值,在插入修改查询的时候会被调用\",\"decrypt\",\"对象,属性,值\",\"解密值,在查询的时候会被解密\"]},\"76\":{\"h\":\"Encryption\",\"t\":[\"属性\",\"默认值\",\"描述\",\"strategy\",\"无\",\"加密策略实现类,使用具体那个加密策略来实现当前列的加密\",\"supportQueryLike\",\"false\",\"是否支持模糊查询,默认不支持,默认支持等于匹配,区别在于使用like或者like相关查询的时候会将入参进行相同方式加密后匹配,需要加密算法支持模糊查询\"]},\"77\":{\"h\":\"demo数据\"},\"78\":{\"h\":\"插入数据测试\",\"t\":[\"SysUserEncryption sysUserEncryption = new SysUserEncryption(); sysUserEncryption.setId(\\\"1\\\"); sysUserEncryption.setName(\\\"name1\\\"); sysUserEncryption.setPhoneNotSupportLike(\\\"12345678901\\\"); sysUserEncryption.setAddressNotSupportLike(\\\"浙江省绍兴市越城区城市广场旁边2-102\\\"); long l1 = easyQuery.insertable(sysUserEncryption).executeRows(); Assert.assertEquals(1,l1); SysUserEncryption sysUserEncryption1 = easyQuery.queryable(SysUserEncryption.class).whereById(\\\"1\\\").firstOrNull(); Assert.assertNotNull(sysUserEncryption1); Assert.assertEquals(sysUserEncryption.getId(),sysUserEncryption1.getId()); Assert.assertEquals(sysUserEncryption.getPhoneNotSupportLike(),sysUserEncryption1.getPhoneNotSupportLike()); Assert.assertEquals(sysUserEncryption.getAddressNotSupportLike(),sysUserEncryption1.getAddressNotSupportLike()); SysUserEncryption sysUserEncryption2 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.eq(SysUserEncryption::getPhoneNotSupportLike, \\\"12345678901\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption2); Assert.assertEquals(sysUserEncryption1.getId(),sysUserEncryption2.getId()); SysUserEncryption sysUserEncryption3 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getPhoneNotSupportLike, \\\"12345678901\\\")).firstOrNull(); Assert.assertNull(sysUserEncryption3); ==> Preparing: INSERT INTO t_sys_user_encryption (`id`,`name`,`phone_not_support_like`,`address_not_support_like`,`phone_support_like`,`address_support_like`) VALUES (?,?,?,?,?,?) ==> Parameters: 1(String),name1(String),MTIzNDU2Nzg5MDE=(String),5rWZ5rGf55yB57uN5YW05biC6LaK5Z+O5Yy65Z+O5biC5bm/5Zy65peB6L65Mi0xMDI=(String),null(null),null(null) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 1(String) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`phone_not_support_like` = ? LIMIT 1 ==> Parameters: MTIzNDU2Nzg5MDE=(String) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`phone_not_support_like` LIKE ? LIMIT 1 ==> Parameters: %12345678901%(String) <== Total: 0 \"]},\"79\":{\"h\":\"加密实现类支持模糊搜索高性能\",\"t\":[\"阿里巴巴密文字段检索方案\",\"这边采用阿里巴巴密文字段检索方案,来实现本次功能,实现手机地址的加密存储且高性能模糊搜索\"]},\"80\":{\"h\":\"加密方式\",\"t\":[\"AES/CBC/PKCS5Padding 加密长度,非中文单个字符占一个长度,中文一个字符占两个长度,默认非中文4个长度为一组,中文两个为一组,如果需要搜索默认需要至少4个非中文字符或者2个中文字符如下\",\"算法/模式/填充\",\"16 字节加密后数据长度\",\"不满 16 字节加密后长度\",\"本次采用\",\"AES/CBC/NoPadding\",\"16\",\"不支持\",\"❌\",\"AES/CBC/PKCS5Padding\",\"32\",\"16\",\"✅\",\"AES/CBC/ISO10126Padding\",\"32\",\"16\",\"❌\",\"AES/CFB/NoPadding\",\"16\",\"原始数据长度\",\"❌\",\"AES/CFB/PKCS5Padding\",\"32\",\"16\",\"❌\",\"AES/CFB/ISO10126Padding\",\"32\",\"16\",\"❌\",\"AES/ECB/NoPadding\",\"16\",\"不支持\",\"❌\",\"AES/ECB/PKCS5Padding\",\"32\",\"16\",\"❌\",\"AES/ECB/ISO10126Padding\",\"32\",\"16\",\"❌\",\"AES/OFB/NoPadding\",\"16\",\"原始数据长度\",\"❌\",\"AES/OFB/PKCS5Padding\",\"32\",\"16\",\"❌\",\"AES/OFB/ISO10126Padding\",\"32\",\"16\",\"❌\",\"AES/PCBC/NoPadding\",\"16\",\"不支持\",\"❌\",\"AES/PCBC/PKCS5Padding\",\"32\",\"16\",\"❌\",\"AES/PCBC/ISO10126Padding\",\"32\",\"16\",\"❌\"]},\"81\":{\"h\":\"实现加密策略\",\"t\":[\"easy-query很贴心的给各位提供了默认的加密策略抽象,您只需要将秘钥和偏移量进行填入即可AbstractUnSupportEmojiAesBase64EncryptionStrategy或AbstractSupportEmojiAesBase64EncryptionStrategy。】\",\"说明!!!\",\"AbstractUnSupportEmojiAesBase64EncryptionStrategy抽象类默认仅支持非emoji的列,比如中文数字英文特殊符号等,AbstractSupportEmojiAesBase64EncryptionStrategy支持emoji的处理\"]},\"82\":{\"h\":\"AbstractUnSupportEmojiAesBase64EncryptionStrategy\",\"t\":[\"不支持emoji\"]},\"83\":{\"h\":\"AbstractSupportEmojiAesBase64EncryptionStrategy\",\"t\":[\"方法\",\"默认值\",\"描述\",\"getIv\",\"无\",\"16位向量\",\"getKey\",\"无\",\"16位秘钥\",\"encryptWordMinLength\",\"4\",\"最小加密长度\",\"chineseCharOccupancyLength\",\"2\",\"一个中文占用长度\",\"throwIfDecryptFail\",\"true\",\"遇到错误是否抛出\",\"public class MyEncryptionStrategy extends AbstractSupportEmojiAesBase64EncryptionStrategy { @Override public String getIv() { return \\\"A-16-Byte-String\\\"; } @Override public String getKey() { return \\\"1234567890abcdef\\\"; } } \",\"修改原始的对象\",\"@Data @Table(\\\"t_sys_user_encryption\\\") public class SysUserEncryption { @Column(primaryKey = true) private String id; private String name; @Encryption(strategy = Base64EncryptionStrategy.class) private String phoneNotSupportLike; @Encryption(strategy = Base64EncryptionStrategy.class) private String addressNotSupportLike; @Encryption(strategy = MyEncryptionStrategy.class,supportQueryLike = true) private String phoneSupportLike; @Encryption(strategy = MyEncryptionStrategy.class,supportQueryLike = true) private String addressSupportLike; } \"]},\"84\":{\"h\":\"测试\",\"t\":[\"SysUserEncryption sysUserEncryption = new SysUserEncryption(); sysUserEncryption.setId(\\\"2\\\"); sysUserEncryption.setName(\\\"name2\\\"); sysUserEncryption.setPhoneSupportLike(\\\"12345678901\\\"); sysUserEncryption.setAddressSupportLike(\\\"浙江省绍兴市越城区城市广场旁边2-102\\\"); long l1 = easyQuery.insertable(sysUserEncryption).executeRows(); Assert.assertEquals(1,l1); ==> Preparing: INSERT INTO t_sys_user_encryption (`id`,`name`,`phone_not_support_like`,`address_not_support_like`,`phone_support_like`,`address_support_like`) VALUES (?,?,?,?,?,?) ==> Parameters: 2(String),name2(String),null(null),null(null),PBNjuyKlEazZoRRnMUupJA==IgrQqipSFtsBJal4l1uviA==act0SMpmvTNWd/+aBXnybA==avtYLQlFEztwFOYNB0x+Cw==XORntDPVNDrdId+JLsMH4w==S+w1G858r9lawlqhSbHw9A==VRhLsnycy28X4io+sRAScA==XNGeRBsmiV4Jd+iMjzyd6w==(String),5JxqmAe3vLE3As62ds8z/Q==RfK4efiC8TpWrlW8EYOE7Q==xYgFo1HQhvsZb3aqqJEr0w==taspTHZ7faxKgLu8WiR4xg==3K4XEON1qksj0l068srXLg==kGziT8zvaq0Mr4mgC0o8ew==o/KgX28zI/vzwYP6H+yBPQ==bIV0eBlAxjvAu53mCRCJKQ==3T589p9NTva5G7yy6Tw1zA==CbmPqpgcbPXq9ZnKJ6eFOg==7TBMWW5dxwjhmnuxffO2BQ==87EZCkWnYFik+lABuLm/0g==SiaBG+vnzNx/p2/7VNtYmw==R+BfXClbpMfdtvtgNpb2Kg==2bm0wNpPthXLTTf3ePF8Ow==/RAvJwP3bdCH88opBIxHNA==YtwmFV6JyKHYTLkcp3Xxvw==(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption1 = easyQuery.queryable(SysUserEncryption.class).whereById(\\\"2\\\").firstOrNull(); Assert.assertNotNull(sysUserEncryption1); Assert.assertEquals(sysUserEncryption.getId(),sysUserEncryption1.getId()); Assert.assertEquals(sysUserEncryption.getPhoneSupportLike(),sysUserEncryption1.getPhoneSupportLike()); Assert.assertEquals(sysUserEncryption.getAddressSupportLike(),sysUserEncryption1.getAddressSupportLike()); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 2(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption2 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.eq(SysUserEncryption::getPhoneSupportLike, \\\"12345678901\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption2); Assert.assertEquals(sysUserEncryption1.getId(),sysUserEncryption2.getId()); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`phone_support_like` = ? LIMIT 1 ==> Parameters: PBNjuyKlEazZoRRnMUupJA==IgrQqipSFtsBJal4l1uviA==act0SMpmvTNWd/+aBXnybA==avtYLQlFEztwFOYNB0x+Cw==XORntDPVNDrdId+JLsMH4w==S+w1G858r9lawlqhSbHw9A==VRhLsnycy28X4io+sRAScA==XNGeRBsmiV4Jd+iMjzyd6w==(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption3 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getPhoneSupportLike, \\\"34567\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption3); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`phone_support_like` LIKE ? LIMIT 1 ==> Parameters: %act0SMpmvTNWd/+aBXnybA==avtYLQlFEztwFOYNB0x+Cw==%(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption4 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getAddressSupportLike, \\\"2-102\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption4); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: %/RAvJwP3bdCH88opBIxHNA==YtwmFV6JyKHYTLkcp3Xxvw==%(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption5 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.likeMatchRight(SysUserEncryption::getAddressSupportLike, \\\"2-102\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption5); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: %/RAvJwP3bdCH88opBIxHNA==YtwmFV6JyKHYTLkcp3Xxvw==(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption6 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.likeMatchLeft(SysUserEncryption::getAddressSupportLike, \\\"浙江省绍兴市\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption6); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: 5JxqmAe3vLE3As62ds8z/Q==RfK4efiC8TpWrlW8EYOE7Q==xYgFo1HQhvsZb3aqqJEr0w==taspTHZ7faxKgLu8WiR4xg==3K4XEON1qksj0l068srXLg==%(String) <== Total: 1 \",\" SysUserEncryption sysUserEncryption7 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getAddressSupportLike, \\\"绍兴\\\")).firstOrNull(); Assert.assertNotNull(sysUserEncryption7); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: %taspTHZ7faxKgLu8WiR4xg==%(String) <== Total: 1 \",\" //中文单字符不支持查询所以是空 SysUserEncryption sysUserEncryption8 = easyQuery.queryable(SysUserEncryption.class).where(o -> o.like(SysUserEncryption::getAddressSupportLike, \\\"绍\\\")).firstOrNull(); Assert.assertNull(sysUserEncryption8); ==> Preparing: SELECT t.`id`,t.`name`,t.`phone_not_support_like`,t.`address_not_support_like`,t.`phone_support_like`,t.`address_support_like` FROM t_sys_user_encryption t WHERE t.`address_support_like` LIKE ? LIMIT 1 ==> Parameters: %UXUfduoPhC3qV7yzGkaYHg==%(String) <== Total: 0 \",\"sysUserEncryption7.setPhoneSupportLike(\\\"13232323321\\\"); long l2 = easyQuery.updatable(sysUserEncryption7).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_encryption SET `name` = ?,`phone_not_support_like` = ?,`address_not_support_like` = ?,`phone_support_like` = ?,`address_support_like` = ? WHERE `id` = ? ==> Parameters: name2(String),null(null),null(null),7OH9gTLq8hK4vflSizrRKg==rsW+JktKi+3iIq0Xm3vSSw==/RYbVYX8k/qGMprCZslddg==rsW+JktKi+3iIq0Xm3vSSw==/RYbVYX8k/qGMprCZslddg==TncRPIKuqNopeX/GJCgjGw==UH8PuTSDSuiTj+rLVsnjOA==2EppLfMm+O7BMtPJ7xH7CA==(String),5JxqmAe3vLE3As62ds8z/Q==RfK4efiC8TpWrlW8EYOE7Q==xYgFo1HQhvsZb3aqqJEr0w==taspTHZ7faxKgLu8WiR4xg==3K4XEON1qksj0l068srXLg==kGziT8zvaq0Mr4mgC0o8ew==o/KgX28zI/vzwYP6H+yBPQ==bIV0eBlAxjvAu53mCRCJKQ==3T589p9NTva5G7yy6Tw1zA==CbmPqpgcbPXq9ZnKJ6eFOg==7TBMWW5dxwjhmnuxffO2BQ==87EZCkWnYFik+lABuLm/0g==SiaBG+vnzNx/p2/7VNtYmw==R+BfXClbpMfdtvtgNpb2Kg==2bm0wNpPthXLTTf3ePF8Ow==/RAvJwP3bdCH88opBIxHNA==YtwmFV6JyKHYTLkcp3Xxvw==(String),2(String) <== Total: 1 \",\"long l3 = easyQuery.updatable(SysUserEncryption.class).set(SysUserEncryption::getPhoneSupportLike, \\\"19876543210\\\") .where(o -> o.eq(SysUserEncryption::getId, \\\"2\\\")).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_encryption SET `phone_support_like` = ? WHERE `id` = ? ==> Parameters: 5mvI8ru5KU2gEoqUhUCR7A==MXfvDfZA1YdM7qws03g1ew==82zyfpam7R2nhH8QGEV2PA==IRTc1Xc89aXhLz6g2EMWtw==U+T8I0LMIZE62zLYLQPcHw==z21auLlv0TzO5sWM8E15Sg==o601InWNlOLFRSPiuivKLA==WlISXTG+AJUzRY1SF31+Eg==(String),2(String) <== Total: 1 \",\"当然目前算法不一定是最优的空间也不一定是最有效的,但是这边也是提供了默认的希望大家可以pr相关思路算法等,easy-query目前可以做到高性能无感的列加密存储处理\"]},\"85\":{\"h\":\"自定义数据库函数\",\"t\":[\"目前框架未提供相应的数据库函数,仅提供了count,sum,min,max等\",\"SELECT IFNULL(t.`url`,'') AS `url` FROM `t_blog` t WHERE t.`deleted` = ? \",\"加入我们要实现这么一个数据库语句,那么我们应该如何实现,接下来我们将使用easy-query的column-func能力实现单列的数据库函数\"]},\"86\":{\"h\":\"IFNULL编写\"},\"87\":{\"h\":\"ColumnPropertyFunction\",\"t\":[\"easy-qeury 的column func接口\",\"方法\",\"参数/返回结果\",\"说明\",\"getColumnFunction\",\"参数无,返回结果为ColumnFunction接口\",\"用来获取具体的列方法\",\"getPropertyName\",\"参数无,返回结果为属性名也就是列所对应的属性\",\"用来获取针对那个属性进行方法处理\"]},\"88\":{\"h\":\"ColumnFunction\",\"t\":[\"方法\",\"参数/返回结果\",\"说明\",\"getFuncColumn\",\"参数:列名(添加方言了的),返回结果为数据库片段\",\"用来包装数据库片段\",\"getAggregationType\",\"参数无,返回结果为当前方法的聚合类型\",\"针对分表分库时有效\",\" public class IFNULLColumnFunction implements ColumnFunction { private final Object value; public IFNULLColumnFunction(Object value){ if(value==null){ throw new IllegalArgumentException(\\\"IFNULLColumnFunction value is null\\\"); } this.value = value; } @Override public String getFuncColumn(String column) { if(value instanceof String){ String valueString = value.toString(); if(EasyStringUtil.isBlank(valueString)){ return String.format(\\\"IFNULL(%s,'')\\\", column); } return String.format(\\\"IFNULL(%s,'%s')\\\", column, valueString); } return String.format(\\\"IFNULL(%s,%s)\\\", column, value.toString()); } @Override public AggregationType getAggregationType() { return AggregationType.UNKNOWN; } } //创建一个mysql的属性方法包装 public final class MyColumnPropertyFunction implements ColumnPropertyFunction { private final String propertyName; private final ColumnFunction columnFunction; public MyColumnPropertyFunction(String propertyName, ColumnFunction columnFunction){ this.propertyName = propertyName; this.columnFunction = columnFunction; } @Override public ColumnFunction getColumnFunction() { return columnFunction; } @Override public String getPropertyName() { return propertyName; } } public class SQLFunc{ public static <T, R> ColumnPropertyFunction ifNULL(Property<T, R> column) { String propertyName = EasyLambdaUtil.getPropertyName(column); return new MyColumnPropertyFunction(propertyName, new IFNULLColumnFunction(\\\"\\\")); } } Queryable<BlogEntityTest> queryable = easyQuery.queryable(BlogEntity.class) .select(BlogEntityTest.class, o -> o.columnFuncAs(SQLFunc.ifNULL(BlogEntity::getUrl), BlogEntityTest::getUrl)); String sql = queryable.toSQL(); // SELECT IFNULL(t.`url`,'') AS `url` FROM `t_blog` t WHERE t.`deleted` = ? \",\"当然您还可以随意扩展\",\"//ifnull额外参数等 public static <T, R> ColumnPropertyFunction ifNULLOrDefault(Property<T, R> column,Object value) { String propertyName = EasyLambdaUtil.getPropertyName(column); return new MyColumnPropertyFunction(propertyName, new IFNULLColumnFunction(value)); } \",\"说明!!!\",\"ColumnPropertyFunction、ColumnFunction的组合仅支持单个数据库列字段的处理,如果需要支持多个数据库字段,请看《自定义数据库片段》\"]},\"89\":{\"h\":\"数据库函数列值转换\",\"t\":[\"easy-query提供了数据库函数列值转换,可以完美的实现java对象和数据库列的函数互相交换,比如数据库函数加密、解密、base64 编码、解码等数据库函数对\"]},\"90\":{\"h\":\"mysql加密解密\",\"t\":[\"《数据库列加密》 上一篇文章我们讲解了如何使用java代码来实现数据库列的加密解密,接下来我将使用数据库函数来实现\",\"AES_DECRYPT(from_base64(receiver_mobile)\",\"方法\",\"默认值\",\"to_base64(AES_ENCRYPT('手机号值'),'秘钥')\",\"将数据进行aes加密,然后进行base64编码\",\"AES_DECRYPT(from_base64('手机号列'),'秘钥')\",\"将数据进行base64解码,然后进行aes进行解密\"]},\"91\":{\"h\":\"ColumnValueSQLConverter\",\"t\":[\"说明!!!\",\"支持join和下多表的自动识别表别名而无需自行处理别名\",\"方法\",\"作用域\",\"说明\",\"columnConvert\",\"仅作用到select投影上面\",\"用于做数据库列到java对象字段的函数处理比如 [AES_DECRYPT(from_base64(phone),'秘钥')]\",\"valueConvert\",\"仅作用到insert,update set值,where条件值\",\"用于做java对象字段到数据库列的函数处理比如 [AES_DECRYPT(from_base64('手机号列'),'秘钥')]\",\" public interface ColumnValueSQLConverter { /** * select查询 * @param table * @param columnMetadata * @param sqlPropertyConverter */ void columnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext); /** * insert update entity * udpate set * where * @param table * @param columnMetadata * @param sqlParameter * @param sqlPropertyConverter */ void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext); } \"]},\"92\":{\"h\":\"案例\",\"t\":[\" //@Component 如果是springboot的话 public class MySQLAesEncryptColumnValueSQLConverter implements ColumnValueSQLConverter { /** * 数据加密秘钥 */ private static final String SECRET=\\\"1234567890123456\\\"; @Override public void columnConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { // Dialect dialect = runtimeContext.getQueryConfiguration().getDialect(); sqlPropertyConverter.sqlNativeSegment(\\\"AES_DECRYPT(from_base64({0}),{1})\\\",context->{ context .expression(columnMetadata.getPropertyName())//采用变量是因为可能出现join附带别名所以需要变量 .value(SECRET) .setAlias(columnMetadata.getName());//如果这边也是用变量就会导致join下不是别名而是带具体表的列比如:t.`phone` }); } @Override public void valueConvert(TableAvailable table, ColumnMetadata columnMetadata, SQLParameter sqlParameter, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { sqlPropertyConverter.sqlNativeSegment(\\\"to_base64(AES_ENCRYPT({0},{1}))\\\",context->{ context.value(sqlParameter).value(SECRET); }); } } //非springboot或者多数据源之类的可以通过获取对应的QueryConfiguration进行添加 //QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); //QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); //configuration.applyColumnValueSQLConverter(new MySQLAesEncryptColumnValueSQLConverter()); //java对象 @Data @Table(\\\"t_sys_user_sql_encryption\\\") @ToString public class SysUserSQLEncryption { @Column(primaryKey = true) private String id; private String username; @Column(sqlConversion = MySQLAesEncryptColumnValueSQLConverter.class)//添加这个列为加密列 private String phone; private String idCard; private String address; private LocalDateTime createTime; } \"]},\"93\":{\"h\":\"新增数据\",\"t\":[\"SysUserSQLEncryption user = new SysUserSQLEncryption(); user.setId(\\\"12345\\\"); user.setUsername(\\\"username\\\"); user.setPhone(\\\"13232456789\\\"); user.setIdCard(\\\"12345678\\\"); user.setAddress(\\\"xxxxxxx\\\"); user.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(user).executeRows(); //插入语句采用手机号加密 ==> Preparing: INSERT INTO `t_sys_user_sql_encryption` (`id`,`username`,`phone`,`id_card`,`address`,`create_time`) VALUES (?,?,to_base64(AES_ENCRYPT(?,?)),?,?,?) ==> Parameters: 12345(String),username(String),13232456789(String),1234567890123456(String),12345678(String),xxxxxxx(String),2023-08-10T14:09:32.109(LocalDateTime) <== Total: 1 \"]},\"94\":{\"h\":\"查询数据\",\"t\":[\"单表\",\"SysUserSQLEncryption sysUserSQLEncryption = easyQuery.queryable(SysUserSQLEncryption.class) .whereById(\\\"12345\\\") .firstOrNull(); //查询语句采用手机号列解密 ==> Preparing: SELECT `id`,`username`,AES_DECRYPT(from_base64(`phone`),?) AS `phone`,`id_card`,`address`,`create_time` FROM `t_sys_user_sql_encryption` WHERE `id` = ? LIMIT 1 ==> Parameters: 1234567890123456(String),12345(String) <== Time Elapsed: 4(ms) <== Total: 1 SysUserSQLEncryption(id=12345, username=username, phone=13232456789, idCard=12345678, address=xxxxxxx, createTime=2023-08-10T14:10:33) \"]},\"95\":{\"h\":\"更新数据\",\"t\":[\"SysUserSQLEncryption sysUserSQLEncryption = easyQuery.queryable(SysUserSQLEncryption.class) .whereById(\\\"12345\\\") .firstOrNull(); sysUserSQLEncryption.setPhone(\\\"111123456\\\"); long l2 = easyQuery.updatable(sysUserSQLEncryption).executeRows(); ==> Preparing: UPDATE `t_sys_user_sql_encryption` SET `username` = ?,`phone` = to_base64(AES_ENCRYPT(?,?)),`id_card` = ?,`address` = ?,`create_time` = ? WHERE `id` = ? ==> Parameters: username(String),111123456(String),1234567890123456(String),12345678(String),xxxxxxx(String),2023-08-10T14:17:12(LocalDateTime),12345(String) <== Total: 1 \"]},\"96\":{\"h\":\"按列更新\",\"t\":[\" long l1 = easyQuery.updatable(SysUserSQLEncryption.class) .set(SysUserSQLEncryption::getPhone, \\\"1111234\\\") .whereById(\\\"12345\\\").executeRows(); ==> Preparing: UPDATE `t_sys_user_sql_encryption` SET `phone` = to_base64(AES_ENCRYPT(?,?)) WHERE `id` = ? ==> Parameters: 1111234(String),1234567890123456(String),12345(String) <== Total: 1 \",\"多表join查询\",\"SysUserSQLEncryption sysUserSQLEncryption1 = easyQuery.queryable(SysUserSQLEncryption.class) .leftJoin(Topic.class, (t, t1) -> t.eq(t1, SysUserSQLEncryption::getId, Topic::getId)) .where((t, t1) -> t.eq(SysUserSQLEncryption::getPhone, \\\"1111234\\\")) .select(SysUserSQLEncryption.class, (t, t1) -> t.columnAll()) .firstOrNull(); //注意这边列会自动带上具体的表名而不是简单的拼接所以在join条件下也无需关心别名 ==> Preparing: SELECT t.`id`,t.`username`,AES_DECRYPT(from_base64(t.`phone`),?) AS `phone`,t.`id_card`,t.`address`,t.`create_time` FROM `t_sys_user_sql_encryption` t LEFT JOIN `t_topic` t1 ON t.`id` = t1.`id` WHERE t.`phone` = to_base64(AES_ENCRYPT(?,?)) LIMIT 1 ==> Parameters: 1234567890123456(String),1111234(String),1234567890123456(String) <== Time Elapsed: 3(ms) <== Total: 1 \",\"说明!!!\",\"如果采用加密对进行处理那么默认是不支持like函数的,因为为了高性能默认easy-query采用的是对表达式条件值进行加密匹配而不是数据库列解密匹配,如果需要支持解密可以采用上一篇文章的加密方式,可以实现高性能的加密列like\"]},\"97\":{\"h\":\"相关博客\",\"t\":[\"《数据库列加密解密脱敏》\"]},\"98\":{\"h\":\"数据追踪\",\"t\":[\"easy-query提供了数据追踪功能,对于对象更新方法提供了数据追踪,保证对象更新时的差异更新而不是全量更新。默认需要自行开启 如果存在复杂对象通过ValueConverter转换的需要实现重写hashcode和equals\"]},\"99\":{\"h\":\"spring-boot\",\"t\":[\"如何开启数据追踪\",\"添加注解@EasyQueryTrack\",\"查询使用asTracking使当前查询结果添加到追踪上下文，或者使用easyQuery.addTracking()手动添加到当前上下文\"]},\"100\":{\"h\":\"非spring-boot环境\",\"t\":[\" TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); //todo }finally { trackManager.release(); } \",\"@EasyQueryTrack注解的本质就是TrackManager.begin\"]},\"101\":{\"h\":\"api\"},\"102\":{\"h\":\"TrackManager\",\"t\":[\"方法名\",\"参数\",\"描述\",\"begin\",\"无\",\"当前上下文开启追踪 需要和release()成对使用\",\"release\",\"无\",\"当前上下文开启追踪 需要和begin()成对使用\",\"currentThreadTracking\",\"无\",\"当前线程是否开启了追踪\",\"getCurrentTrackContext\",\"无\",\"获取当前线程追踪上下文没有这返回null\"]},\"103\":{\"h\":\"Queryable\",\"t\":[\"方法名\",\"参数\",\"描述\",\"asTracking\",\"无\",\"当前查询条件使用追踪需开启TrackManager.begin\",\"asNoTracking\",\"无\",\"当前查询条件不使用追踪查询,默认就是不使用\"]},\"104\":{\"h\":\"EasyQuery\",\"t\":[\"方法名\",\"参数\",\"描述\",\"addTracking\",\"entity\",\"添加entity到当前追踪上下文,如果当前对象不是数据库对象(无法获取数据库表名),将抛出错误,如果对象已被追踪且追踪对象并不是同一个对象也将抛错\",\"添加追踪主要用于对当前对象进行对象属性赋值前后的变更进行记录,可以动态生成updatesql语句,实现智能差异更新\"]},\"105\":{\"h\":\"demo数据\"},\"106\":{\"h\":\"新增测试数据\",\"t\":[\" SysUserTrack sysUserTrack = new SysUserTrack(); sysUserTrack.setId(\\\"1\\\"); sysUserTrack.setUsername(\\\"Username1\\\"); sysUserTrack.setPhone(\\\"13232323232\\\"); sysUserTrack.setIdCard(\\\"123456789000\\\"); sysUserTrack.setAddress(\\\"浙江省绍兴市越城区城市广场\\\"); sysUserTrack.setCreateTime(LocalDateTime.now()); long l1 = easyQuery.insertable(sysUserTrack).executeRows(); ==> Preparing: INSERT INTO t_sys_user_track (`id`,`username`,`phone`,`id_card`,`address`,`create_time`) VALUES (?,?,?,?,?,?) ==> Parameters: 1(String),Username1(String),WMHRmY6r4m7ir0KM/D4OmQ==kDIASgoxeZjK9M+Qem/HOQ==56QkLSvTa6eE9qpwjbYsRQ==kDIASgoxeZjK9M+Qem/HOQ==56QkLSvTa6eE9qpwjbYsRQ==kDIASgoxeZjK9M+Qem/HOQ==56QkLSvTa6eE9qpwjbYsRQ==kDIASgoxeZjK9M+Qem/HOQ==(String),OdaUl359SnxsbyZqMa05XA==496uK1pkxUbdvpq0A7q0uQ==PvHC30OSR7k27xKN36fp4g==+ta/N+1ivZAjSILsqeNjfA==hs33W1UJDlk1EFb0Nyhorw==biDnRYo+Cm5gy0r913fTOA==2Rp6hA8XQx2oIhTRo4ni2g==I6gg2QDr60Qx1Eq186LAGQ==9g+7mmP9u30kPOFB+Xcz+A==(String),eKgY/tc5Kw0qzXu0+uUSLg==hbIDJTImQweEbbz5EMyrHg==JI18Lhiq/kcrrVsD1fA++A==6S2NNhbFy4VM0KNPmMEXHw==A000VaxSBiODisuUDxv7Ow==d8z7fptVPIYMvhiXTVuJBA==xCHjVvd0uVW7a435+66hCQ==YQcXESYWhm+0Knr39sU2OA==SkFE84TtzzfqHWZFbfaDKw==IeaiLfgcyjbsMsCN7HvNVw==V7c/MZCC2DqXidxGrYe2RQ==n1Pxqra9C9LFh5xCY6xj6w==(String),2023-04-07T23:08:49.059(LocalDateTime) <== Total: 1 \"]},\"107\":{\"h\":\"追踪更新\",\"t\":[\"TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); SysUserTrack sysUserTrack1 = easyQuery.queryable(SysUserTrack.class).asTracking() .whereById(\\\"1\\\").firstOrNull(); boolean b = easyQuery.addTracking(sysUserTrack1); Assert.assertFalse(b); sysUserTrack1.setPhone(\\\"9876543210\\\"); long l2 = easyQuery.updatable(sysUserTrack1).executeRows(); Assert.assertEquals(1,l2); SysUserTrack sysUserTrack2 = easyQuery.queryable(SysUserTrack.class) .whereById(\\\"1\\\").firstOrNull(); Assert.assertNotNull(sysUserTrack2); Assert.assertEquals(\\\"9876543210\\\",sysUserTrack2.getPhone()); }finally { trackManager.release(); } //追踪更新查询 ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time` FROM t_sys_user_track t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 1(String) <== Total: 1, Query Use: 3(ms) //差异更新 只更新了phone字段并未对所有的字段进行更新 ==> Preparing: UPDATE t_sys_user_track SET `phone` = ? WHERE `id` = ? ==> Parameters: seCzI8LaMkjGIkSftziv9A==1eLkqpKHc0+z7SJdQatSPQ==3v3uw7ZFJo0Tpx49WSMSMQ==LtHsv2KAcRLroXaP4dZfUA==8ea6UUe6hNYz5k+VZDQzVA==Si5J530HvuEvZzZfAqnznA==VlCQ13+oM8wbOny682WILQ==(String),1(String) <== Total: 1 \"]},\"108\":{\"h\":\"开启追踪后对象属性不修改更新\",\"t\":[\"如果开启了追踪并且对象属性没有进行修改那么本次更新将不会生成sql执行数据库，因为程序认为本次没有任何需要变更的数据也就不需要更新\",\" TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); SysUserTrack sysUserTrack1 = easyQuery.queryable(SysUserTrack.class).asTracking() .whereById(id).firstOrNull(); boolean b = easyQuery.addTracking(sysUserTrack1); Assert.assertFalse(b); //因为开启了追踪但是对象数据没有发生变化,所以不生成sql不使用更新; long l2 = easyQuery.updatable(sysUserTrack1).executeRows(); Assert.assertEquals(0, l2); } finally { trackManager.release(); } ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time` FROM t_sys_user_track t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 5(String) <== Total: 1, Query Use: 6(ms) \"]},\"109\":{\"h\":\"不追踪更新\",\"t\":[\" TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try { trackManager.begin(); SysUserTrack sysUserTrack1 = easyQuery.queryable(SysUserTrack.class) .whereById(id).firstOrNull(); sysUserTrack1.setPhone(\\\"9876543210\\\"); long l2 = easyQuery.updatable(sysUserTrack1).executeRows(); Assert.assertEquals(1, l2); SysUserTrack sysUserTrack2 = easyQuery.queryable(SysUserTrack.class) .whereById(id).firstOrNull(); Assert.assertNotNull(sysUserTrack2); Assert.assertEquals(\\\"9876543210\\\", sysUserTrack2.getPhone()); } finally { trackManager.release(); } ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time` FROM t_sys_user_track t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 6(String) <== Total: 1, Query Use: 2(ms) //全字段更新 ==> Preparing: UPDATE t_sys_user_track SET `username` = ?,`phone` = ?,`id_card` = ?,`address` = ?,`create_time` = ? WHERE `id` = ? ==> Parameters: Username1(String),seCzI8LaMkjGIkSftziv9A==1eLkqpKHc0+z7SJdQatSPQ==3v3uw7ZFJo0Tpx49WSMSMQ==LtHsv2KAcRLroXaP4dZfUA==8ea6UUe6hNYz5k+VZDQzVA==Si5J530HvuEvZzZfAqnznA==VlCQ13+oM8wbOny682WILQ==(String),OdaUl359SnxsbyZqMa05XA==496uK1pkxUbdvpq0A7q0uQ==PvHC30OSR7k27xKN36fp4g==+ta/N+1ivZAjSILsqeNjfA==hs33W1UJDlk1EFb0Nyhorw==biDnRYo+Cm5gy0r913fTOA==2Rp6hA8XQx2oIhTRo4ni2g==I6gg2QDr60Qx1Eq186LAGQ==9g+7mmP9u30kPOFB+Xcz+A==(String),eKgY/tc5Kw0qzXu0+uUSLg==hbIDJTImQweEbbz5EMyrHg==JI18Lhiq/kcrrVsD1fA++A==6S2NNhbFy4VM0KNPmMEXHw==A000VaxSBiODisuUDxv7Ow==d8z7fptVPIYMvhiXTVuJBA==xCHjVvd0uVW7a435+66hCQ==YQcXESYWhm+0Knr39sU2OA==SkFE84TtzzfqHWZFbfaDKw==IeaiLfgcyjbsMsCN7HvNVw==V7c/MZCC2DqXidxGrYe2RQ==n1Pxqra9C9LFh5xCY6xj6w==(String),2023-04-08T09:57:08(LocalDateTime),6(String) <== Total: 1 ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time` FROM t_sys_user_track t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 6(String) <== Total: 1, Query Use: 2(ms) \",\"警告\",\"！！！如果数据未被差异更新,请确认是否已经开启TrackManager.begin,spring-boot环境下直接使用@EasyQueryTrack注解,且是否使用asTracking查询或者查询后是否已经添加到当前追踪上下,如果数据量过多建议采用非tracking查询，需要更新前手动调用easyQuery.addTracking()来实现,否则每个查询对象都会添加到当前追踪上下文中\",\"！！！如果数据未被差异更新,请确认是否已经开启TrackManager.begin,spring-boot环境下直接使用@EasyQueryTrack注解,且是否使用asTracking查询或者查询后是否已经添加到当前追踪上下,如果数据量过多建议采用非tracking查询，需要更新前手动调用easyQuery.addTracking()来实现,否则每个查询对象都会添加到当前追踪上下文中\",\"！！！如果数据未被差异更新,请确认是否已经开启TrackManager.begin,spring-boot环境下直接使用@EasyQueryTrack注解,且是否使用asTracking查询或者查询后是否已经添加到当前追踪上下,如果数据量过多建议采用非tracking查询，需要更新前手动调用easyQuery.addTracking()来实现,否则每个查询对象都会添加到当前追踪上下文中\"]},\"110\":{\"h\":\"数据库函数列\",\"t\":[\"easy-query支持以数据库函数生成列值,比如通过自定义nextId()函数来实现插入时生成对应的id列,而不是普通的对象属性列.\"]},\"111\":{\"h\":\"自定义函数创建数据库自动生成列\",\"t\":[\"数据库对象,必须设置generatedKey为true,表示为自动生成的,如果不添加generatedSQLColumnGenerator那么将会视为自增列一样,不加入insert语句由数据库生成\",\"@Data @Table(\\\"custom_increment\\\") public class CustomIncrement { @Column(primaryKey = true,generatedKey = true, generatedSQLColumnGenerator = MyDatabaseIncrementSQLColumnGenerator.class) private String id; private String name; private String address; } \",\"自定义插入列函数\",\"public class MyDatabaseIncrementSQLColumnGenerator implements IncrementSQLColumnGenerator { @Override public void configure(TableAvailable table, ColumnMetadata columnMetadata, SQLPropertyConverter sqlPropertyConverter, QueryRuntimeContext runtimeContext) { sqlPropertyConverter.sqlNativeSegment(\\\"mysqlNextId()\\\"); } } \",\"假设我定义了mysql的函数mysqlNextId自动生成主键id由mysql数据库函数来实现\",\"CustomIncrement customIncrement=new CustomIncrement(); //customIncrement.setId();//无论是否设置都会用 mysqlNextId 作为插入函数 customIncrement.setName(\\\"name\\\"); customIncrement.setAddress(\\\"address\\\"); easyQuery.insertable(customIncrement) .executeRows(); INSERT INTO `custom_increment` (`id`,`name`,`address`) VALUES (mysqlNextId(),?,?) \"]},\"112\":{\"h\":\"案例场景\",\"t\":[\"pgsql的geo数据新增或者自定义数据库函数生成列时,仅新增时调用\"]},\"113\":{\"h\":\"全局拦截器\",\"t\":[\"easy-qeury默认提供了拦截器,支持项目在工程化的时候可以批量拦截sql表达式,比如:自动填充id，自动填充创建人,自动填充创建时间,自动填充修改人,自动填充修改时间等\",\"类\",\"名称\",\"描述\",\"EntityInterceptor\",\"对象拦截器\",\"用于对象插入前和修改前进行对象拦截\",\"PredicateFilterInterceptor\",\"条件拦截器\",\"用户在查询,修改,删除的时候可以通过条件拦截来动态构建添加条件如:租户id\",\"UpdateSetInterceptor\",\"更新列拦截器\",\"用户在更新update表达式的时候可以通过当前拦截器自动追加set列操作\"]},\"114\":{\"h\":\"Interceptor Api\",\"t\":[\"方法\",\"默认值/实现\",\"描述\",\"order\",\"100\",\"用于对拦截器进行顺序排序执行 越小越先执行\",\"enable\",\"true\",\"是否默认添加到表达式中前提是apply为true,true:默认添加,false:不添加可以通过ThreadLocal动态设置,或者调用useInterceptor(name)来显示使用\",\"name\",\"无\",\"拦截器名称需要自己实现,默认可以使用类名\",\"apply\",\"哪些对象允许采用当前拦截器\",\"默认可以才用是否为某个接口的实现Interface.class.isAssignableFrom(entityClass);\"]},\"115\":{\"h\":\"demo数据\"},\"116\":{\"h\":\"EntityInterceptor\"},\"117\":{\"h\":\"Api\",\"t\":[\"方法\",\"默认实现\",\"描述\",\"configureInsert\",\"无\",\"配置自动插入时的值:创建时间,创建人\",\"configureUpdate\",\"无\",\"配置更新是需要修改的值:修改时间,修改人\",\"模拟当前用户租户对象\",\"public class CurrentUserHelper { private static String userId; public static void setUserId(String userId){ CurrentUserHelper.userId=userId; } public static String getUserId(){ return userId; } private static String tenantId; public static void setTenantId(String tenantId){ CurrentUserHelper.tenantId=tenantId; } public static String getTenantId(){ return tenantId; } } \",\"拦截器\",\" /** * create time 2023/4/3 21:13 * 如果是spring项目添加@Component，如果是非spring项目直接添加到QueryConfiguration.applyInterceptor * * @author xuejiaming */ public class MyEntityInterceptor implements EntityInterceptor { @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; if (topicInterceptor.getCreateTime() == null) { topicInterceptor.setCreateTime(LocalDateTime.now()); } if (topicInterceptor.getCreateBy() == null) { topicInterceptor.setCreateBy(CurrentUserHelper.getUserId()); } if (topicInterceptor.getUpdateTime() == null) { topicInterceptor.setUpdateTime(LocalDateTime.now()); } if (topicInterceptor.getUpdateBy() == null) { topicInterceptor.setUpdateBy(CurrentUserHelper.getUserId()); } } @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; topicInterceptor.setUpdateTime(LocalDateTime.now()); topicInterceptor.setUpdateBy(CurrentUserHelper.getUserId()); } @Override public String name() { return \\\"MyEntityInterceptor\\\"; } @Override public boolean apply(Class<?> entityClass) { return TopicInterceptor.class.isAssignableFrom(entityClass); } } //租户拦截器 public class MyTenantInterceptor implements EntityInterceptor,PredicateFilterInterceptor { @Override public String name() { return \\\"MyTenantInterceptor\\\"; } @Override public boolean apply(Class<?> entityClass) { return TopicInterceptor.class.isAssignableFrom(entityClass); } @Override public void configure(Class<?> entityClass, LambdaEntityExpressionBuilder lambdaEntityExpressionBuilder, WherePredicate<Object> wherePredicate) { if(CurrentUserHelper.getUserId()!=null){ wherePredicate.eq(\\\"tenantId\\\", CurrentUserHelper.getTenantId()); } } @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; if (topicInterceptor.getTenantId() == null) { topicInterceptor.setTenantId(CurrentUserHelper.getTenantId()); } } @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { } } \",\"测试代码\",\"//设置当前租户和当前用户 CurrentUserHelper.setUserId(\\\"xiaoming\\\"); CurrentUserHelper.setTenantId(\\\"abc\\\"); TopicInterceptor topicInterceptor = new TopicInterceptor(); topicInterceptor.setId(\\\"123\\\"); topicInterceptor.setTitle(\\\"123\\\"); topicInterceptor.setStars(123); long l = easyQuery.insertable(topicInterceptor).executeRows(); ==> Preparing: INSERT INTO t_topic_interceptor (`id`,`stars`,`title`,`create_time`,`create_by`,`update_time`,`update_by`,`tenant_id`) VALUES (?,?,?,?,?,?,?,?) ==> Parameters: 123(String),123(Integer),123(String),2023-04-03T21:28:32.643(LocalDateTime),xiaoming(String),2023-04-03T21:28:32.643(LocalDateTime),xiaoming(String),abc(String) <== Total: 1 TopicInterceptor topicInterceptor1 = easyQuery.queryable(TopicInterceptor.class).whereId(\\\"123\\\").firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time`,t.`create_by`,t.`update_time`,t.`update_by`,t.`tenant_id` FROM t_topic_interceptor t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Total: 1 CurrentUserHelper.setUserId(\\\"xiaoming1\\\"); long l1 = easyQuery.updatable(topicInterceptor1).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `stars` = ?,`title` = ?,`update_time` = ?,`update_by` = ? WHERE `id` = ? ==> Parameters: 123(Integer),123(String),2023-04-03T21:28:32.670(LocalDateTime),xiaoming1(String),123(String) <== Total: 1 \",\"插入的时候确定了自动填充,实际项目中可以通过接口来限制,更新的时候也会自动更新时间,但是如果是表达式更新那么还是原先的操作并不会更新\",\" long l2 = easyQuery.updatable(TopicInterceptor.class).set(TopicInterceptor::getTitle, topicInterceptor2.getTitle()) .whereId(topicInterceptor2.getId()).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `title` = ? WHERE `id` = ? ==> Parameters: 123(String),123(String) <== Total: 1 \",\"这种情况下updateBy和updateTime并不会自动添加到生成的sql里面,这个时候我们的UpdateSetInterceptor拦截就起作用了\"]},\"118\":{\"h\":\"UpdateSetInterceptor\",\"t\":[\"我们在原先的拦截器上再次实现UpdateSetInterceptor让原先的拦截器支持表达式set,当然你也可以单独创建一个拦截器,如果单独创建那么可以单独对其进行选择性启用或者禁用\"]},\"119\":{\"h\":\"Api\",\"t\":[\"方法\",\"默认实现\",\"描述\",\"configure\",\"无\",\"配置表达式更新set列自动填充\",\" /** * create time 2023/4/3 21:13 * 如果是spring项目添加@Component，如果是非spring项目直接添加到EasQueryConfiguration.applyInterceptor * * @author xuejiaming */ public class MyEntityInterceptor implements EntityInterceptor, UpdateSetInterceptor { @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; if (topicInterceptor.getCreateTime() == null) { topicInterceptor.setCreateTime(LocalDateTime.now()); } if (topicInterceptor.getCreateBy() == null) { topicInterceptor.setCreateBy(CurrentUserHelper.getUserId()); } if (topicInterceptor.getUpdateTime() == null) { topicInterceptor.setUpdateTime(LocalDateTime.now()); } if (topicInterceptor.getUpdateBy() == null) { topicInterceptor.setUpdateBy(CurrentUserHelper.getUserId()); } } @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; topicInterceptor.setUpdateTime(LocalDateTime.now()); topicInterceptor.setUpdateBy(CurrentUserHelper.getUserId()); } @Override public String name() { return \\\"MyEntityInterceptor\\\"; } @Override public boolean apply(Class<?> entityClass) { return TopicInterceptor.class.isAssignableFrom(entityClass); } @Override public void configure(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, ColumnSetter<Object> columnSetter) { String updateBy = \\\"updateBy\\\";//属性名用来动态创建lambda String updateTime = \\\"updateTime\\\";//属性名用来动态创建lambda //是否已经set了 if(!entityUpdateExpressionBuilder.getSetColumns().containsOnce(entityClass,updateBy)){ String userId = CurrentUserHelper.getUserId(); columnSetter.set(updateBy,userId); } if(!entityUpdateExpressionBuilder.getSetColumns().containsOnce(entityClass,updateTime)){ columnSetter.set(updateTime,LocalDateTime.now()); } } } \",\"测试\",\"long l2 = easyQuery.updatable(TopicInterceptor.class) //虽然我们没有在表达式中设置需要set的属性,但是因为拦截器得原因easy-qeury帮我们自动的进行了处理 .set(TopicInterceptor::getTitle, topicInterceptor2.getTitle()) .whereId(topicInterceptor2.getId()).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `title` = ?,`update_by` = ?,`update_time` = ? WHERE `id` = ? ==> Parameters: 123(String),xiaoming1(String),2023-04-03T21:56:39.426(LocalDateTime),123(String) <== Total: 1 \",\"到目前为止基本上大部分的业务需求已经可以实现了，但是如果你是有租户的或者你是需要对当前请求查询条件进行额外条件过滤添加的,那么PredicateFilterInterceptor可以帮你满足这个条件\"]},\"120\":{\"h\":\"PredicateFilterInterceptor\"},\"121\":{\"h\":\"Api\",\"t\":[\"方法\",\"默认实现\",\"描述\",\"configure\",\"无\",\"配置表达式where条件,查询,修改(对象/表达式),删除(对象/表达式)\"]},\"122\":{\"h\":\"租户模式实现\",\"t\":[\" 添加租户id\",\" 查询过滤租户id\",\" 更新添加租户id条件\",\" 删除添加租户id\",\"这边我们新建一个租户拦截器,把原先拦截器里面的自动填充租户id移动到租户拦截器里面\",\" public class MyTenantInterceptor implements EntityInterceptor,PredicateFilterInterceptor { @Override public String name() { return \\\"MyTenantInterceptor\\\"; } @Override public boolean apply(Class<?> entityClass) { return TopicInterceptor.class.isAssignableFrom(entityClass); } @Override public void configure(Class<?> entityClass, LambdaEntityExpressionBuilder lambdaEntityExpressionBuilder, WherePredicate<Object> sqlWherePredicate) { if(CurrentUserHelper.getUserId()!=null){x sqlWherePredicate.eq(\\\"tenantId\\\", CurrentUserHelper.getTenantId()); } } @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { TopicInterceptor topicInterceptor = (TopicInterceptor) entity; if (topicInterceptor.getTenantId() == null) { topicInterceptor.setTenantId(CurrentUserHelper.getTenantId()); } } @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { } } \",\"测试\",\" //查询 TopicInterceptor topicInterceptor1 = easyQuery.queryable(TopicInterceptor.class).whereId(\\\"12345\\\").firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time`,t.`create_by`,t.`update_time`,t.`update_by`,t.`tenant_id` FROM t_topic_interceptor t WHERE t.`tenant_id` = ? AND t.`id` = ? LIMIT 1 ==> Parameters: abc(String),12345(String) <== Total: 1 //实体对象更新 CurrentUserHelper.setUserId(\\\"xiaoming1\\\"); long l1 = easyQuery.updatable(topicInterceptor1).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `stars` = ?,`title` = ?,`update_time` = ?,`update_by` = ? WHERE `tenant_id` = ? AND `id` = ? ==> Parameters: 12345(Integer),12345(String),2023-04-03T22:20:27.756(LocalDateTime),xiaoming1(String),abc(String),12345(String) <== Total: 1 //表达式更新 long l2 = easyQuery.updatable(TopicInterceptor.class).set(TopicInterceptor::getTitle, topicInterceptor2.getTitle()) .whereId(topicInterceptor2.getId()).executeRows(); ==> Preparing: UPDATE t_topic_interceptor SET `title` = ?,`update_by` = ?,`update_time` = ? WHERE `tenant_id` = ? AND `id` = ? ==> Parameters: 12345(String),xiaoming1(String),2023-04-03T22:20:27.773(LocalDateTime),abc(String),12345(String) <== Total: 1 //表达式删除 long l3 = easyQuery.deletable(TopicInterceptor.class) .whereById(topicInterceptor2.getId()).executeRows(); ==> Preparing: DELETE FROM t_topic_interceptor WHERE `tenant_id` = ? AND `id` = ? ==> Parameters: abc(String),12345(String) <== Total: 1 //对象删除 long l4 = easyQuery.deletable(topicInterceptor2).executeRows(); ==> Preparing: DELETE FROM t_topic_interceptor WHERE `tenant_id` = ? AND `id` = ? ==> Parameters: abc(String),12345(String) <== Total: 0 \",\"所有的增删改都会添加对应的条件表达式值,可以做到表结构完美隔离租户之间的数据,并且用户使用全程无感\"]},\"123\":{\"h\":\"按需拦截\",\"t\":[\"比如我们现在有这么一个需求因为部分接口需要针对测试数据进行移除,不希望统计到程序里面所以可以针对部分情况进行按需拦截\\n可以新建一个表达式拦截器PredicateFilterInterceptor,然后默认将enable改成false需要时自行添加条件通过useInteceptor(name),或者可以通过判断当前是否是某个api接口比如startWith(\\\"/api/test\\\"),可以通过ThreadLocal来表示当前启用值\"]},\"124\":{\"h\":\"逻辑删除\",\"t\":[\"easy-query的逻辑删除可以帮助用户在select的时候过滤逻辑删除字段，update的时候也可以，delete的时候也可以转换对应的update,并且系统提供了大量的默认逻辑删除策略,并且用户也可以自定义实现更多的逻辑删除\"]},\"125\":{\"h\":\"demo数据\"},\"126\":{\"h\":\"LogicDelete\",\"t\":[\"在对应的数据库实体上面添加注解,LogicDelete可以让整个实体以该字段作为逻辑删除字段,其中strategy表示为逻辑删除字段的枚举,除了框架默认提供的框架也支持用户自定义逻辑删除\"]},\"127\":{\"h\":\"例子\",\"t\":[\"查询\",\"List<LogicDelTopic> logicDelTopics = easyQuery.queryable(LogicDelTopic.class).toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted`,t.`create_time` FROM t_logic_del_topic t WHERE t.`deleted` = ? ==> Parameters: false(Boolean) <== Total: 100 \",\"按条件删除\",\"long l = easyQuery.deletable(LogicDelTopic.class) .whereById(\\\"11\\\") .executeRows(); ==> Preparing: UPDATE t_logic_del_topic SET `deleted` = ? WHERE `deleted` = ? AND `id` = ? ==> Parameters: true(Boolean),false(Boolean),11(String) <== Total: 1 \",\"实体对象删除\",\" LogicDelTopic logicDelTopic = easyQuery.queryable(LogicDelTopic.class) .whereId(\\\"11\\\").firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted`,t.`create_time` FROM t_logic_del_topic t WHERE t.`deleted` = ? AND t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),11(String) <== Total: 1 long l = easyQuery.deletable(logicDelTopic) .executeRows(); ==> Preparing: UPDATE t_logic_del_topic SET `deleted` = ? WHERE `deleted` = ? AND `id` = ? ==> Parameters: true(Boolean),false(Boolean),11(String) <== Total: 1 \"]},\"128\":{\"h\":\"strategy\",\"t\":[\"枚举\",\"默认\",\"描述\",\"CUSTOM\",\"❌\",\"用户自定义实现LogicDeleteStrategy或者 AbstractLogicDeleteStrategy\",\"BOOLEAN\",\"✅\",\"Boolean,boolean类型的属性true表示删除,false表示未被删除\",\"DELETE_LONG_TIMESTAMP\",\"❌\",\"Long,long类型的属性,0表示未被删除,大于0表示被删除\",\"LOCAL_DATE_TIME\",\"❌\",\"LocalDateTime.class null表示未被删除, not null表示被删除\",\"LOCAL_DATE\",\"❌\",\"LocalDate.class null表示未被删除, not null表示被删除\"]},\"129\":{\"h\":\"禁用逻辑删除\",\"t\":[\"通过添加链式方法disableLogicDelete()可以禁用当前表达式的逻辑删除\",\"//查询 List<LogicDelTopic> logicDelTopics = easyQuery.queryable(LogicDelTopic.class).disableLogicDelete().toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted`,t.`create_time` FROM t_logic_del_topic t <== Total: 100 //删除 long l = easyQuery.deletable(LogicDelTopic.class) .disableLogicDelete() .whereById(\\\"111xx\\\") .executeRows(); ==> Preparing: DELETE FROM t_logic_del_topic WHERE `id` = ? ==> Parameters: 111xx(String) <== Total: 0 //修改 long l = easyQuery.updatable(LogicDelTopic.class) .disableLogicDelete() .set(LogicDelTopic::getTitle, logicDelTopic.getTitle()) .whereId(logicDelTopic.getId()) .executeRows(); ==> Preparing: UPDATE t_logic_del_topic SET `title` = ? WHERE `id` = ? ==> Parameters: 标题0(String),0(String) <== Total: 1 \"]},\"130\":{\"h\":\"自定义逻辑删除\",\"t\":[\"很多用户可能对现有的很多系统拥有的逻辑删除都表示非常弱鸡,甚至只支持单字段的逻辑删除,easy-query提供了高级抽象可以让用户自行实现逻辑删除\"]},\"131\":{\"h\":\"自定义逻辑删除数据\"},\"132\":{\"h\":\"实现自定义逻辑删除策略\",\"t\":[\"easy-query默认提供了一个接口和一个抽象来实现逻辑删除,默认用户可以选择抽象(简单)AbstractLogicDeleteStrategy,或者接口LogicDeleteStrategy 这次我们采用抽象来实现\",\"新建一个静态帮助类来模拟当前用户因为我们这次自定义需要实现两个甚至多个字段逻辑删除处理\",\"public class CurrentUserHelper { private static String userId; public static void setUserId(String userId){ CurrentUserHelper.userId=userId; } public static String getUserId(){ return userId; } } \",\" //@Component //如果是spring public class MyLogicDelStrategy extends AbstractLogicDeleteStrategy { /** * 允许datetime类型的属性 */ private final Set<Class<?>> allowTypes=new HashSet<>(Arrays.asList(LocalDateTime.class)); @Override protected SQLExpression1<WherePredicate<Object>> getPredicateFilterExpression(LogicDeleteBuilder builder,String propertyName) { return o->o.isNull(propertyName); } @Override protected SQLExpression1<ColumnSetter<Object>> getDeletedSQLExpression(LogicDeleteBuilder builder, String propertyName) { // LocalDateTime now = LocalDateTime.now(); // return o->o.set(propertyName,now); //上面的是错误用法,将now值获取后那么这个now就是个固定值而不是动态值 return o->o.set(propertyName,LocalDateTime.now()) .set(\\\"deletedUser\\\",CurrentUserHelper.getUserId()); } @Override public String getStrategy() { return \\\"MyLogicDelStrategy\\\"; } @Override public Set<Class<?>> allowedPropertyTypes() { return allowTypes; } } \",\"修改我们的实体对象\",\"@Data @Table(\\\"t_logic_del_topic_custom\\\") public class LogicDelTopicCustom { @Column(primaryKey = true) private String id; private Integer stars; private String title; //如果是自定义strategy必须是LogicDeleteStrategyEnum.CUSTOM,并且strategyName不可以为空 @LogicDelete(strategy = LogicDeleteStrategyEnum.CUSTOM,strategyName = \\\"MyLogicDelStrategy\\\") private LocalDateTime deletedAt; private String deletedUser; private LocalDateTime createTime; } \"]},\"133\":{\"h\":\"测试\",\"t\":[\"List<LogicDelTopicCustom> logicDelTopics = easyQuery.queryable(LogicDelTopicCustom.class).toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted_at`,t.`deleted_user`,t.`create_time` FROM t_logic_del_topic_custom t WHERE t.`deleted_at` IS NULL <== Total: 100 LogicDelTopicCustom logicDelTopic = easyQuery.queryable(LogicDelTopicCustom.class) .where(o->o.eq(LogicDelTopicCustom::getId,\\\"1\\\")).firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`deleted_at`,t.`deleted_user`,t.`create_time` FROM `t_logic_del_topic_custom` t WHERE t.`deleted_at` IS NULL AND t.`id` = ? LIMIT 1 ==> Parameters: 1(String) <== Time Elapsed: 2(ms) <== Total: 1 long l = easyQuery.updatable(logicDelTopic).executeRows(); ==> Preparing: UPDATE t_logic_del_topic_custom SET `stars` = ?,`title` = ?,`deleted_user` = ?,`create_time` = ? WHERE `deleted_at` IS NULL AND `id` = ? ==> Parameters: 101(Integer),标题1(String),null(null),2023-04-02T23:09:03(LocalDateTime),1(String) <== Total: 1 //为了测试防止数据被删掉,这边采用不存在的id logicDelTopic.setId(\\\"11xx\\\"); //测试当前人员 CurrentUserHelper.setUserId(\\\"easy-query\\\"); long l = easyQuery.deletable(logicDelTopic).executeRows(); ==> Preparing: UPDATE t_logic_del_topic_custom SET `deleted_at` = ?,`deleted_user` = ? WHERE `deleted_at` IS NULL AND `id` = ? ==> Parameters: 2023-04-01T23:15:13.944(LocalDateTime),easy-query(String),11xx(String) <== Total: 0 \",\"到这里为止我们就完全实现了逻辑删除自定义并且支持更新多字段\"]},\"134\":{\"h\":\"乐观锁版本号\",\"t\":[\"easy-query提供了自动版本号功能，可以保证在高并发下数据一致性更新的问题。\"]},\"135\":{\"h\":\"相关配置\",\"t\":[\"noVersionError默认为true当对象有Version字段并且更新修改不存在version字段将会报错,可以通过noVersionError或者noVersionIgnore来配置\"]},\"136\":{\"h\":\"demo数据\"},\"137\":{\"h\":\"Api\"},\"138\":{\"h\":\"EasyVersionStrategy\",\"t\":[\"方法名\",\"参数\",\"描述\",\"nextVersion\",\"当前版本信息和对应的属性和对象信息\",\"返回更新后的版本信息\",\"默认实现系统提供\",\"VersionIntStrategy列对象为int,next version为当前version+1\",\"VersionLongStrategy列对象为long,next version为当前version+1\",\"VersionUUIDStrategy列对象为string,next version为当UUID.randomUUID().toString().replaceAll(\\\"-\\\",\\\"\\\")\",\"VersionTimestampStrategy列对象为long,next version为当System.currentTimeMillis() (不推荐)\"]},\"139\":{\"h\":\"测试数据\",\"t\":[\"添加测试数据\",\" //插入 SysUserVersionLong sysUserVersionLong = new SysUserVersionLong(); sysUserVersionLong.setId(id); sysUserVersionLong.setCreateTime(LocalDateTime.now()); sysUserVersionLong.setVersion(1L); sysUserVersionLong.setUsername(\\\"username\\\"+id); sysUserVersionLong.setPhone(\\\"13232323232\\\"); sysUserVersionLong.setIdCard(\\\"0000000000\\\"); sysUserVersionLong.setAddress(\\\"浙江省绍兴市越城区城市广场\\\"); long l = easyQuery.insertable(sysUserVersionLong).executeRows(); Assert.assertEquals(1,l); ==> Preparing: INSERT INTO t_sys_user_version (`id`,`username`,`phone`,`id_card`,`address`,`create_time`,`version`) VALUES (?,?,?,?,?,?,?) ==> Parameters: 1(String),username1(String),13232323232(String),0000000000(String),浙江省绍兴市越城区城市广场(String),2023-04-08T13:49:10.037(LocalDateTime),1(Long) <== Total: 1 //查询 SysUserVersionLong sysUserVersionLong1 = easyQuery.queryable(SysUserVersionLong.class) .whereById(id).firstOrNull(); Assert.assertNotNull(sysUserVersionLong1); ==> Preparing: SELECT t.`id`,t.`username`,t.`phone`,t.`id_card`,t.`address`,t.`create_time`,t.`version` FROM t_sys_user_version t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 1(String) <== Total: 1, Query Use: 3(ms) \"]},\"140\":{\"h\":\"实体更新\",\"t\":[\"long l2 = easyQuery.updatable(sysUserVersionLong1).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version SET `username` = ?,`phone` = ?,`id_card` = ?,`address` = ?,`create_time` = ?,`version` = ? WHERE `version` = ? AND `id` = ? ==> Parameters: username1(String),13232323232(String),0000000000(String),浙江省绍兴市越城区城市广场(String),2023-04-08T13:49:10(LocalDateTime),2(Long),1(Long),1(String) <== Total: 1 \"]},\"141\":{\"h\":\"表达式更新\",\"t\":[\"表达式删除必须要添加withVersion否则将不会使用行版本更新,并且如果配置或者没有配置noVersionError(默认true)将会报错,可以通过noVersionIgnore来忽略\",\"//whereById主键更新 long l2 = easyQuery.updatable(SysUserVersionLong.class) .set(SysUserVersionLong::getPhone, \\\"123\\\") .whereById(id) .noVersionIgnore() .executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version SET `phone` = ? WHERE `id` = ? ==> Parameters: 123(String),2(String) <== Total: 1 //where表达式更新 long l3 = easyQuery.updatable(SysUserVersionLong.class) .noVersionIgnore() .set(SysUserVersionLong::getPhone, \\\"123\\\") .where(o->o.eq(SysUserVersionLong::getId,id)) .executeRows(); Assert.assertEquals(1,l3); ==> Preparing: UPDATE t_sys_user_version SET `phone` = ? WHERE `id` = ? ==> Parameters: 123(String),2(String) <== Total: 1 //表达式更新只需要添加withVersion那么就可以针对当前version进行版本控制 long l4 = easyQuery.updatable(SysUserVersionLong.class) .set(SysUserVersionLong::getPhone, \\\"123\\\") .withVersion(1L) .where(o->o.eq(SysUserVersionLong::getId,id)) .executeRows(); Assert.assertEquals(1,l4); ==> Preparing: UPDATE t_sys_user_version SET `phone` = ?,`version` = ? WHERE `version` = ? AND `id` = ? ==> Parameters: 123(String),2(Long),1(Long),2(String) <== Total: 1 \"]},\"142\":{\"h\":\"逻辑删除加版本号\",\"t\":[\"逻辑删除情况下删除数据将会对数据列进行行版本追加,并且where条件也会追加版本号，如果禁用逻辑删,那么行版本的追加只会纯在与where条件的追加,并且如果配置或者没有配置noVersionError(默认true)将会报错,可以通过noVersionIgnore来忽略\"]},\"143\":{\"h\":\"实体对象删除\",\"t\":[\"//插入 SysUserVersionLongLogicDel sysUserVersionLongLogicDel = new SysUserVersionLongLogicDel(); sysUserVersionLongLogicDel.setId(id); sysUserVersionLongLogicDel.setCreateTime(LocalDateTime.now()); sysUserVersionLongLogicDel.setVersion(1L); sysUserVersionLongLogicDel.setUsername(\\\"username\\\"+id); sysUserVersionLongLogicDel.setPhone(\\\"13232323232\\\"); sysUserVersionLongLogicDel.setIdCard(\\\"0000000000\\\"); sysUserVersionLongLogicDel.setAddress(\\\"浙江省绍兴市越城区城市广场\\\"); sysUserVersionLongLogicDel.setDeleted(false); long l = easyQuery.insertable(sysUserVersionLongLogicDel).executeRows(); Assert.assertEquals(1,l); ==> Preparing: INSERT INTO t_sys_user_version_del (`id`,`username`,`phone`,`id_card`,`address`,`create_time`,`version`,`deleted`) VALUES (?,?,?,?,?,?,?,?) ==> Parameters: 4(String),username4(String),13232323232(String),0000000000(String),浙江省绍兴市越城区城市广场(String),2023-04-08T14:01:58.315(LocalDateTime),1(Long),false(Boolean) <== Total: 1 //逻辑删除 long l2 = easyQuery.deletable(sysUserVersionLongLogicDel).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version_del SET `deleted` = ?,`version` = ? WHERE `deleted` = ? AND `version` = ? AND `id` = ? ==> Parameters: true(Boolean),2(Long),false(Boolean),1(Long),4(String) <== Total: 1 \"]},\"144\":{\"h\":\"表达式删除\",\"t\":[\"表达式删除必须要添加withVersion否则将不会使用行版本删除\",\"SysUserVersionLongLogicDel sysUserVersionLongLogicDel = new SysUserVersionLongLogicDel(); sysUserVersionLongLogicDel.setId(id); sysUserVersionLongLogicDel.setCreateTime(LocalDateTime.now()); sysUserVersionLongLogicDel.setVersion(1L); sysUserVersionLongLogicDel.setUsername(\\\"username\\\"+id); sysUserVersionLongLogicDel.setPhone(\\\"13232323232\\\"); sysUserVersionLongLogicDel.setIdCard(\\\"0000000000\\\"); sysUserVersionLongLogicDel.setAddress(\\\"浙江省绍兴市越城区城市广场\\\"); sysUserVersionLongLogicDel.setDeleted(false); long l = easyQuery.insertable(sysUserVersionLongLogicDel).executeRows(); Assert.assertEquals(1,l); ==> Preparing: INSERT INTO t_sys_user_version_del (`id`,`username`,`phone`,`id_card`,`address`,`create_time`,`version`,`deleted`) VALUES (?,?,?,?,?,?,?,?) ==> Parameters: 5(String),username5(String),13232323232(String),0000000000(String),浙江省绍兴市越城区城市广场(String),2023-04-08T14:04:11.275(LocalDateTime),1(Long),false(Boolean) <== Total: 1 long l2 = easyQuery.deletable(SysUserVersionLongLogicDel.class) .withVersion(1L) .whereById(id).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version_del SET `deleted` = ?,`version` = ? WHERE `deleted` = ? AND `version` = ? AND `id` = ? ==> Parameters: true(Boolean),2(Long),false(Boolean),1(Long),5(String) <== Total: 1 long l2 = easyQuery.deletable(SysUserVersionLongLogicDel.class) .noVersionIgnore() .whereById(id).executeRows(); Assert.assertEquals(1,l2); ==> Preparing: UPDATE t_sys_user_version_del SET `deleted` = ? WHERE `deleted` = ? AND `id` = ? ==> Parameters: true(Boolean),2(Long),false(Boolean),1(Long),5(String) <== Total: 1 \"]},\"145\":{\"h\":\"Bar feature\"},\"146\":{\"h\":\"Introduction\",\"t\":[\"We support bar feature, ...\"]},\"147\":{\"h\":\"Details\",\"t\":[\"baz\",\"...\"]},\"148\":{\"h\":\"Baz\",\"t\":[\"Feature details here.\"]},\"149\":{\"h\":\"指引\",\"t\":[\"本章节我们提供easy-query的基本使用信息\",\"《目录》\",\"《性能比较》 以mybatis-flex的性能比较模板增加额外10000次获取来判断反序列化性能\",\"《使用代理模式》 使用代理模式api更加人性化编写orm\",\"《新增》 新增演示\",\"《修改》 修改演示\",\"《删除》 删除演示\",\"《事务》easy-query默认提供了自带事务处理机制,使用更加人性化\"]},\"150\":{\"h\":\"api使用 ❗️❗️❗️\",\"t\":[\"注意点及说明!!!\",\"下面所有方法包括where、select、groupBy、orderBy、having都是相同原理,支持单参数时为主表,全参数时为一一对应的表,注意表达式应该以select作为整个表达式的终结方法,相当于select之后就是对之前的表达式进行匿名表处理,select * from (select id,name from user) t 如果提前select相当于是进行了一次匿名表,最后的终结方法收集器比如toList、firstOrNull、count等会自动判断是否需要select，如果需要会对当前表达式的主表进行select(o->o.columnAll())操作\"]},\"151\":{\"h\":\"单表api使用\"},\"152\":{\"h\":\"多表查询api\",\"t\":[\" List<Topic> list = easyQuery .queryable(Topic.class) //第一个join采用双参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) //第二个join采用三参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity 第三个参数表示第三张表 SysUser .leftJoin(SysUser.class, (t, t1, t2) -> t.eq(t2, Topic::getId, SysUser::getId)) .where(o -> o.eq(Topic::getId, \\\"123\\\"))//单个条件where参数为主表Topic //支持单个参数或者全参数,全参数个数为主表+join表个数 链式写法期间可以通过then来切换操作表 .where((t, t1, t2) -> t.eq(Topic::getId, \\\"123\\\").then(t1).like(BlogEntity::getTitle, \\\"456\\\") .then(t2).eq(BaseEntity::getCreateTime, LocalDateTime.now())) //如果不想用链式的then来切换也可以通过lambda 大括号方式执行顺序就是代码顺序,默认采用and链接 .where((t, t1, t2) -> { t.eq(Topic::getId, \\\"123\\\"); t1.like(BlogEntity::getTitle, \\\"456\\\"); t1.eq(BaseEntity::getCreateTime, LocalDateTime.now()); }) //toList默认只查询主表数据 .toList(); \"]},\"153\":{\"h\":\"多表返回表达式\"},\"154\":{\"h\":\"多表自定义结果api\",\"t\":[\" @Data public class QueryVO{ private String id; private String field1; private String field2; } List<QueryVO> list = easyQuery .queryable(Topic.class) //第一个join采用双参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) //第二个join采用三参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity 第三个参数表示第三张表 SysUser .leftJoin(SysUser.class, (t, t1, t2) -> t.eq(t2, Topic::getId, SysUser::getId)) .where(o -> o.eq(Topic::getId, \\\"123\\\"))//单个条件where参数为主表Topic //支持单个参数或者全参数,全参数个数为主表+join表个数 链式写法期间可以通过then来切换操作表 .where((t, t1, t2) -> t.eq(Topic::getId, \\\"123\\\").then(t1).like(BlogEntity::getTitle, \\\"456\\\") .then(t2).eq(BaseEntity::getCreateTime, LocalDateTime.now())) //如果不想用链式的then来切换也可以通过lambda 大括号方式执行顺序就是代码顺序,默认采用and链接 .where((t, t1, t2) -> { t.eq(Topic::getId, \\\"123\\\"); t1.like(BlogEntity::getTitle, \\\"456\\\"); t1.eq(BaseEntity::getCreateTime, LocalDateTime.now()); }) .select(QueryVO.class, (t, t1, t2) -> //将第一张表的所有属性的列映射到vo的列名上,第一张表也可以通过columnAll将全部字段映射上去 // ,如果后续可以通过ignore方法来取消掉之前的映射关系 t.column(Topic::getId) .then(t1) //将第二张表的title字段映射到VO的field1字段上 .columnAs(BlogEntity::getTitle, QueryVO::getField1) .then(t2) //将第三张表的id字段映射到VO的field2字段上 .columnAs(SysUser::getId, QueryVO::getField2) ).toList(); List<QueryVO> list = easyQuery .queryable(Topic.class) //第一个join采用双参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) //第二个join采用三参数,参数1表示第一张表Topic 参数2表示第二张表 BlogEntity 第三个参数表示第三张表 SysUser .leftJoin(SysUser.class, (t, t1, t2) -> t.eq(t2, Topic::getId, SysUser::getId)) .where(o -> o.eq(Topic::getId, \\\"123\\\"))//单个条件where参数为主表Topic //支持单个参数或者全参数,全参数个数为主表+join表个数 链式写法期间可以通过then来切换操作表 .where((t, t1, t2) -> t.eq(Topic::getId, \\\"123\\\").then(t1).like(BlogEntity::getTitle, \\\"456\\\") .then(t2).eq(BaseEntity::getCreateTime, LocalDateTime.now())) //如果不想用链式的then来切换也可以通过lambda 大括号方式执行顺序就是代码顺序,默认采用and链接 .where((t, t1, t2) -> { t.eq(Topic::getId, \\\"123\\\"); t1.like(BlogEntity::getTitle, \\\"456\\\"); t1.eq(BaseEntity::getCreateTime, LocalDateTime.now()); }) .select(QueryVO.class, (t, t1, t2) -> //将第一张表的所有属性的列映射到vo的列名上,第一张表也可以通过columnAll将全部字段映射上去 // ,如果后续可以通过ignore方法来取消掉之前的映射关系 t.columnAll().columnIgnore(Topic::getTitle)//当前方法不生效因为其实压根也没有映射上去 .then(t1) //将第二张表的title字段映射到VO的field1字段上 .columnAs(BlogEntity::getTitle, QueryVO::getField1) .then(t2) //将第三张表的id字段映射到VO的field2字段上 .columnAs(SysUser::getId, QueryVO::getField2) ).toList(); \"]},\"155\":{\"h\":\"默认行为配置\"},\"156\":{\"h\":\"默认行为\",\"t\":[\"方法\",\"默认值\",\"描述\",\"select\",\"queryLargeColumn:true\",\"默认查询返回@Column(large=true) 不建议在实体对象上使用因为会导致update的时候有可能null会被更新掉,当然可以设置忽略更新@UpdateIgnore除非手动指定更新也是可以的\",\"insert\",\"SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS\",\"默认生成语句不包含null列 0.8.14+有效\",\"update\",\"SQLExecuteStrategyEnum.ALL_COLUMNS\",\"默认更新所有列包括null和非null\",\"delete\",\"allowDeleteStatement:false\",\"默认执行物理删除会报错\",\"insertBatchThreshold\",\"512\",\"如果insertable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率\",\"updateBatchThreshold\",\"512\",\"如果updatable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率\"]},\"157\":{\"h\":\"配置\"},\"158\":{\"h\":\"select\",\"t\":[\"queryLargeColumn表示是否查询出对应的表示为@Column(large=true)的字段,默认true表示查询,如果设置为false则需要手动指定对应列,可以通过调用api接口queryLargeColumn(boolean)传入对应的值来表示是否查询,建议和@UpdateIgnore如果你需要不返回的话,不然有可能导致更新策略为AllColumn的时候把这个字段更新为null,当然因为easy-query支持VO查询所以只需要查询结果中没有这个字段或者@ColumnIgnore\",\"@Data @Table(\\\"query_large_column_test\\\") public class QueryLargeColumnTestEntity { private String id; private String name; @Column(large = true) private String content; } //默认会被查询 String sql = easyQuery.queryable(QueryLargeColumnTestEntity.class).toSQL(); //SELECT `id`,`name`,`content` FROM `query_large_column_test` //设置不查询 String sql = easyQuery.queryable(QueryLargeColumnTestEntity.class).queryLargeColumn(false).toSQL(); //SELECT `id`,`name` FROM `query_large_column_test` \"]},\"159\":{\"h\":\"insert\",\"t\":[\"insertStrategy表示sql的执行策略,insert命令默认采用SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS就是说默认生成的sql如果对象属性为null就不生成insert列。\",\"QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).executeRows(); //默认not null列插入所以只会生成一列 ==> Preparing: INSERT INTO `query_large_column_test` (`id`) VALUES (?) ==> Parameters: 123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ALL_COLUMNS).executeRows(); //所有列都插入 ==> Preparing: INSERT INTO `query_large_column_test` (`id`,`name`,`content`) VALUES (?,?,?) ==> Parameters: 123(String),null(null),null(null) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NULL_COLUMNS).executeRows(); //只插入null列 ==> Preparing: INSERT INTO `query_large_column_test` (`name`,`content`) VALUES (?,?) ==> Parameters: null(null),null(null) \"]},\"160\":{\"h\":\"update\",\"t\":[\"updateStrategy表示sql的执行策略,update命令默认采用SQLExecuteStrategyEnum.ALL_COLUMNS就是说默认生成的sql无论对象是否是null属性都会进行更新。\",\" QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).executeRows(); //默认更新所有列 ==> Preparing: UPDATE `query_large_column_test` SET `name` = ?,`content` = ? WHERE `id` = ? ==> Parameters: null(null),null(null),123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS).executeRows(); //将不会生成sql因为只有一个主键没有其他任何需要update的列 QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); queryLargeColumnTestEntity.setName(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS).executeRows(); //更新not null列 ==> Preparing: UPDATE `query_large_column_test` SET `name` = ? WHERE `id` = ? ==> Parameters: 123(String),123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); queryLargeColumnTestEntity.setName(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NULL_COLUMNS).executeRows(); //更新null列 ==> Preparing: UPDATE `query_large_column_test` SET `content` = ? WHERE `id` = ? ==> Parameters: null(null),123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); queryLargeColumnTestEntity.setName(\\\"123\\\"); queryLargeColumnTestEntity.setContent(\\\"123\\\"); long l = easyQuery.updatable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NULL_COLUMNS).executeRows(); //因为没有null列所以不会生成sql返回受影响行数也是0 \"]},\"161\":{\"h\":\"delete\",\"t\":[\"deleteThrowError是easy-query防止数据被删除的默认设置,默认为true,表示不允许删除数据,可以采用逻辑删除来处理数据的删除。可以通过api接口来实现物理删除\",\" QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.deletable(queryLargeColumnTestEntity).executeRows(); //抛错错误 can't execute delete statement QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.deletable(queryLargeColumnTestEntity).allowDeleteStatement(true).executeRows(); //允许删除命令 ==> Preparing: DELETE FROM `query_large_column_test` WHERE `id` = ? ==> Parameters: 123(String) \"]},\"162\":{\"h\":\"删除\",\"t\":[\"EasyQuery提供了内置物理删除和逻辑删除,默认EasyQuery不支持delete命令 需要开启允许或者使用delete语句的时候允许。\",\"创建EasyQuery配置项的时候可以通过构造函数开启允许删除，默认不允许调用删除功能\",\"数据库建表脚本\",\"create table t_topic ( id varchar(32) not null comment '主键ID'primary key, stars int not null comment '点赞数', title varchar(50) null comment '标题', create_time datetime not null comment '创建时间' )comment '主题表'; \",\"java实体对象\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } \"]},\"163\":{\"h\":\"1.表达式删除\",\"t\":[\"表达式主键删除\",\"long l = easyQuery.deletable(Topic.class) .whereById(\\\"999\\\") .executeRows(); \",\"==> Preparing: DELETE FROM t_topic WHERE `id` = ? ==> Parameters: 999(String) <== Total: 1 \",\"表达式删除\",\"long l = easyQuery.deletable(Topic.class) .where(o->o.eq(Topic::getTitle,\\\"title998\\\")) .executeRows(); \",\"==> Preparing: DELETE FROM t_topic WHERE `title` = ? ==> Parameters: title998(String) <== Total: 1 \"]},\"164\":{\"h\":\"2.实体删除\",\"t\":[\"Topic topic = easyQuery.queryable(Topic.class).whereId(\\\"997\\\").firstNotNull(\\\"未找到当前主题数据\\\"); //Topic topic=new Topic(); //topic.setId(\\\"997\\\"); long l = easyQuery.deletable(topic).executeRows(); \",\"==> Preparing: DELETE FROM t_topic WHERE `id` = ? ==> Parameters: 997(String) <== Total: 1 \",\"当当前方法或者配置不允许删除命令的时候程序将会抛出对应的异常EasyQueryInvalidOperationException\",\" long l = easyQuery.deletable(Topic.class).whereById(\\\"999\\\").allowDeleteStatement(false).executeRows(); \",\"当前对象如果支持软删除那么在生成对应命令的时候会生成UPDATE语句来实现软删除，对于是否允许删除命令将不会生效，因为允许删除命令仅对当前sql生成为DELETE语句才会生效判断\"]},\"165\":{\"h\":\"3.强制物理删除\",\"t\":[\"逻辑删除\",\"long l = easyQuery.deletable(BlogEntity.class) .where(o->o.eq(BlogEntity::getId,\\\"id123456\\\")) .executeRows(); ==> Preparing: UPDATE `t_blog` SET `deleted` = ? WHERE `deleted` = ? AND `id` = ? ==> Parameters: true(Boolean),false(Boolean),id123456(String) <== Total: 0 \",\"物理删除\",\"long l = easyQuery.deletable(BlogEntity.class) .where(o->o.eq(BlogEntity::getId,\\\"id123456\\\")) .disableLogicDelete()//禁用逻辑删除,使用物理删除 生成delete语句 .allowDeleteStatement(true)//如果不允许物理删除那么设置允许 配置项delete-throw .executeRows(); ==> Preparing: DELETE FROM `t_blog` WHERE `id` = ? ==> Parameters: id123456(String) <== Total: 0 \"]},\"166\":{\"h\":\"新增\",\"t\":[\"EasyQuery提供了单条插入和批量插入数据的方法,可以返回数据库执行插入后的受影响行数。\",\"数据库建表脚本\",\"create table t_topic ( id varchar(32) not null comment '主键ID'primary key, stars int not null comment '点赞数', title varchar(50) not null comment '标题', create_time datetime not null comment '创建时间' )comment '主题表'; \",\"java实体对象\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } List<Topic> topics = new ArrayList<>(); for (int i = 0; i < 10; i++) { Topic topic = new Topic(); topic.setId(String.valueOf(i)); topic.setStars(i+100); topic.setTitle(\\\"标题\\\"+i); topic.setCreateTime(LocalDateTime.now().plusDays(i)); topics.add(topic); } \"]},\"167\":{\"h\":\"1.单条插入\",\"t\":[\"long rows = easyQuery.insertable(topics.get(0)).executeRows(); //返回结果rows为1 \",\"插入sql：INSERT INTO t_topic (`id`,`stars`,`title`,`create_time`) VALUES (?,?,?,?) ==> Preparing: INSERT INTO t_topic (`id`,`stars`,`title`,`create_time`) VALUES (?,?,?,?) ==> Parameters: 0(String),100(Integer),标题0(String),2023-03-16T21:34:13.287(LocalDateTime) <== Total: 1 \",\"如果当前数据表为自增id那么会回填对应的数据到id主键里面(后续会支持)\"]},\"168\":{\"h\":\"2.多条插入\",\"t\":[\"批量插入需要jdbc链接字符串开启&allowMultiQueries=true&rewriteBatchedStatements=true开启后性能将会大幅提升,并且默认需要使InsertStrategy用ALL_COULMNS策略,不然还是单条执行,当然可以使用batch或者到了插入批处理阈值也是可以的\",\"long rows = easyQuery.insertable(topics).executeRows(); //返回结果rows为10 \",\"==> Preparing: INSERT INTO t_topic (`id`,`stars`,`title`,`create_time`) VALUES (?,?,?,?) ==> Parameters: 0(String),100(Integer),标题0(String),2023-03-16T21:38:22.114(LocalDateTime) ==> Parameters: 1(String),101(Integer),标题1(String),2023-03-17T21:38:22.114(LocalDateTime) ==> Parameters: 2(String),102(Integer),标题2(String),2023-03-18T21:38:22.114(LocalDateTime) ==> Parameters: 3(String),103(Integer),标题3(String),2023-03-19T21:38:22.114(LocalDateTime) ==> Parameters: 4(String),104(Integer),标题4(String),2023-03-20T21:38:22.114(LocalDateTime) ==> Parameters: 5(String),105(Integer),标题5(String),2023-03-21T21:38:22.114(LocalDateTime) ==> Parameters: 6(String),106(Integer),标题6(String),2023-03-22T21:38:22.114(LocalDateTime) ==> Parameters: 7(String),107(Integer),标题7(String),2023-03-23T21:38:22.114(LocalDateTime) ==> Parameters: 8(String),108(Integer),标题8(String),2023-03-24T21:38:22.114(LocalDateTime) ==> Parameters: 9(String),109(Integer),标题9(String),2023-03-25T21:38:22.114(LocalDateTime) <== Total: 10 \"]},\"169\":{\"h\":\"3.链式添加\",\"t\":[\"long rows = easyQuery.insertable(topics.get(0)).insert(topics.get(1)).executeRows(); //返回结果rows为2 \",\"==> Preparing: INSERT INTO t_topic (`id`,`stars`,`title`,`create_time`) VALUES (?,?,?,?) ==> Parameters: 0(String),100(Integer),标题0(String),2023-03-16T21:42:12.542(LocalDateTime) ==> Parameters: 1(String),101(Integer),标题1(String),2023-03-17T21:42:12.542(LocalDateTime) <== Total: 2 \"]},\"170\":{\"h\":\"4.自增主键回填\",\"t\":[\"很多时候我们设置id自增那么需要在插入的时候回填对应的主键自增信息所以easy-query也提供了该功能,并且很方便的使用\",\"@Data @Table(\\\"t_topic_auto\\\") public class TopicAuto { @Column(primaryKey = true,generatedKey = true)//设置主键为自增 private Integer id; private Integer stars; private String title; private LocalDateTime createTime; } TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.now().plusDays(99)); Assert.assertNull(topicAuto.getId()); long l = easyQuery.insertable(topicAuto).executeRows(true); Assert.assertEquals(1,l); Assert.assertNotNull(topicAuto.getId()); \",\"==> Preparing: INSERT INTO `t_topic_auto` (`stars`,`title`,`create_time`) VALUES (?,?,?) ==> Parameters: 999(Integer),title999(String),2023-08-31T16:36:06.552(LocalDateTime) <== Total: 1 \"]},\"171\":{\"h\":\"5.策略新增\",\"t\":[\"insertStrategy表示sql的执行策略,insert命令默认采用SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS就是说默认生成的sql如果对象属性为null就不生成insert列。\",\"QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).executeRows(); //默认not null列插入所以只会生成一列 ==> Preparing: INSERT INTO `query_large_column_test` (`id`) VALUES (?) ==> Parameters: 123(String) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ALL_COLUMNS).executeRows(); //所有列都插入 ==> Preparing: INSERT INTO `query_large_column_test` (`id`,`name`,`content`) VALUES (?,?,?) ==> Parameters: 123(String),null(null),null(null) QueryLargeColumnTestEntity queryLargeColumnTestEntity = new QueryLargeColumnTestEntity(); queryLargeColumnTestEntity.setId(\\\"123\\\"); long l = easyQuery.insertable(queryLargeColumnTestEntity).setSQLStrategy(SQLExecuteStrategyEnum.ONLY_NULL_COLUMNS).executeRows(); //只插入null列 ==> Preparing: INSERT INTO `query_large_column_test` (`name`,`content`) VALUES (?,?) ==> Parameters: null(null),null(null) \"]},\"172\":{\"h\":\"6.MySQL方言\"},\"173\":{\"h\":\"onDuplicateKeyIgnore\",\"t\":[\"插入时如果主键或者唯一索引存在就忽略插入\",\"String indexStr = \\\"200\\\"; BlogEntity blog = new BlogEntity(); blog.setId(indexStr); blog.setCreateBy(indexStr); blog.setCreateTime(begin.plusDays(1)); blog.setUpdateBy(indexStr); blog.setUpdateTime(begin.plusDays(1)); blog.setTitle(\\\"title\\\" + indexStr); blog.setContent(\\\"content\\\" + indexStr); blog.setUrl(\\\"http://blog.easy-query.com/\\\" + indexStr); blog.setStar(1); blog.setScore(new BigDecimal(\\\"1.2\\\")); blog.setStatus(1); blog.setOrder(new BigDecimal(\\\"1.2\\\").multiply(BigDecimal.valueOf(1))); blog.setIsTop(false); blog.setTop(false); blog.setDeleted(false); easyQuery.insertable(blog) .onDuplicateKeyIgnore() .executeRows(); ==> Preparing: INSERT IGNORE INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ==> Parameters: 200(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),200(String),200(String),false(Boolean),title200(String),content200(String),http://blog.easy-query.com/200(String),1(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: 0 \"]},\"174\":{\"h\":\"onDuplicateKeyUpdate\",\"t\":[\"支持指定set列\",\"String indexStr = \\\"200\\\"; BlogEntity blog = new BlogEntity(); blog.setId(indexStr); blog.setCreateBy(indexStr); blog.setCreateTime(begin.plusDays(1)); blog.setUpdateBy(indexStr); blog.setUpdateTime(begin.plusDays(1)); blog.setTitle(\\\"title\\\" + indexStr); blog.setContent(\\\"content\\\" + indexStr); blog.setUrl(\\\"http://blog.easy-query.com/\\\" + indexStr); blog.setStar(1); blog.setScore(new BigDecimal(\\\"1.2\\\")); blog.setStatus(1); blog.setOrder(new BigDecimal(\\\"1.2\\\").multiply(BigDecimal.valueOf(1))); blog.setIsTop(false); blog.setTop(false); blog.setDeleted(false); easyQuery.insertable(blog) .onDuplicateKeyUpdate() .executeRows();//插入成功返回1 ==> Preparing: INSERT INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `create_time` = VALUES(`create_time`), `update_time` = VALUES(`update_time`), `create_by` = VALUES(`create_by`), `update_by` = VALUES(`update_by`), `deleted` = VALUES(`deleted`), `title` = VALUES(`title`), `content` = VALUES(`content`), `url` = VALUES(`url`), `star` = VALUES(`star`), `score` = VALUES(`score`), `status` = VALUES(`status`), `order` = VALUES(`order`), `is_top` = VALUES(`is_top`), `top` = VALUES(`top`) ==> Parameters: 200(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),200(String),200(String),false(Boolean),title200(String),content200(String),http://blog.easy-query.com/200(String),1(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: 1 //如果存在一样的key或者唯一约束那么insert就变成update,并且update只更新star和content两个字段 easyQuery.insertable(blog) .onDuplicateKeyUpdate(t->t.column(BlogEntity::getStar).column(BlogEntity::getContent)) .executeRows();//没有需要修改的所以返回1 ==> Preparing: INSERT INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `star` = VALUES(`star`), `content` = VALUES(`content`) ==> Parameters: 200(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),200(String),200(String),false(Boolean),title200(String),content200(String),http://blog.easy-query.com/200(String),1(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: 1 blog.setContent(\\\"xxx\\\"); easyQuery.insertable(blog) .onDuplicateKeyUpdate(t->t.column(BlogEntity::getStar).column(BlogEntity::getContent)) .executeRows();//因为content不一样所以返回行数2 ==> Preparing: INSERT INTO `t_blog` (`id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`score`,`status`,`order`,`is_top`,`top`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `star` = VALUES(`star`), `content` = VALUES(`content`) ==> Parameters: 200(String),2000-01-02T01:01:01(LocalDateTime),2000-01-02T01:01:01(LocalDateTime),200(String),200(String),false(Boolean),title200(String),xxx(String),http://blog.easy-query.com/200(String),1(Integer),1.2(BigDecimal),1(Integer),1.2(BigDecimal),false(Boolean),false(Boolean) <== Total: 2 \"]},\"175\":{\"h\":\"7.PgSQL方言\"},\"176\":{\"h\":\"onConflictDoNothing\",\"t\":[\"TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.now().plusDays(99)); easyQuery.insertable(topicAuto).onConflictDoNothing().executeRows(); //INSERT INTO \\\"t_topic_auto\\\" (\\\"stars\\\",\\\"title\\\",\\\"create_time\\\") VALUES (?,?,?) ON CONFLICT DO NOTHING \"]},\"177\":{\"h\":\"onConflictDoUpdate\",\"t\":[\"支持指定约束列,和set列\",\"TopicAuto topicAuto = new TopicAuto(); topicAuto.setStars(999); topicAuto.setTitle(\\\"title\\\" + 999); topicAuto.setCreateTime(LocalDateTime.now().plusDays(99)); Assert.assertNull(topicAuto.getId()); easyQuery.insertable(topicAuto) .onConflictDoUpdate(TopicAuto::getTitle,t->t.column(TopicAuto::getStars).column(TopicAuto::getCreateTime)) .executeRows(); //INSERT INTO \\\"t_topic_auto\\\" (\\\"stars\\\",\\\"title\\\",\\\"create_time\\\") VALUES (?,?,?) ON CONFLICT (\\\"title\\\") DO UPDATE SET \\\"stars\\\" = EXCLUDED.\\\"stars\\\", \\\"create_time\\\" = EXCLUDED.\\\"create_time\\\" \"]},\"178\":{\"h\":\"性能说明\",\"t\":[\"easy-query本身没有benchmark的测试,都是依托于网上orm的性能测试后加入其中,orm的性能主要有3部分组成\",\"toSQL就是表达式到字符串SQL的过程消耗的时间\",\"jdbc,这个所有orm都是一样的\",\"toBean就是ResultSet到Bean对象的过程消耗的时间\"]},\"179\":{\"h\":\"结论\",\"t\":[\"结论!!!\",\"easy-query的toSQL性能中规中矩,在所有orm中偏中上并不是天花板\",\"easy-query的toBean性能在orm中算是比较出色优秀的\",\"以下所有测试来自于BeetlSQL\"]},\"180\":{\"h\":\"toSQL性能附带双列toBean\"},\"181\":{\"h\":\"toBean数据库表20列\"},\"182\":{\"h\":\"性能比较\",\"t\":[\"当前性能比较代码来自Mybatis-Flex,原本是Mybatis-Flex和Mybaits-Plus的「性能」对比，再他们的基础上删除了json的typehandler,增加了自己的测试代码， 并且增加了获取1w条记录的性能测试。\",\"直接放结论:目前各项指标easy-query和Mybatis-Flex相近甚至更快,再获取1W条记录的情况下更是遥遥领先与另外两个框架。\",\"本文只阐述了「性能」方面的对比。\"]},\"183\":{\"h\":\"测试方法\",\"t\":[\"使用 h2 数据库，在初始化的时候分别为easy-query和 mybatis-flex 和 mybatis-plus 创建三个不同的数据库， 但是完全一样的数据结构、数据内容和数据量（每个库 2w 条数据）。\",\"开始之前先进行预热，之后通过打印时间戳的方式进行对比，谁消耗的时间越少，则性能越高（每次测试 10 轮）。\",\"测试源码：https://github.com/xuejmnet/easy-query-benchmark\",\"测试说明\",\"在以下的所有测试中，有可能因为每个人的电脑性能不同，测试的结果会有所不同。\"]},\"184\":{\"h\":\"测试单条数据查询\",\"t\":[\"Mybatis-Flex 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.where(FLEX_ACCOUNT.ID.ge(100) .or(FLEX_ACCOUNT.USER_NAME.eq(\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)))); mapper.selectOneByQuery(queryWrapper); \",\"EasyQuery 的代码如下：\",\"easyQuery.queryable(EasyQueryAccount.class) .where(o->o.ge(EasyQueryAccount::getId,100) .or() .eq(EasyQueryAccount::getUserName,\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000))) .firstOrNull(); \",\"Mybatis-Plus 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.ge(\\\"id\\\", 100); queryWrapper.or(); queryWrapper.eq(\\\"user_name\\\", \\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)); queryWrapper.last(\\\"limit 1\\\"); mapper.selectOne(queryWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexSelectOne:47 >>>>>>>testEasySelectOne:41 >>>>>>>testPlusSelectOneWithLambda:351 >>>>>>>testPlusSelectOne:331 --------------- >>>>>>>testFlexSelectOne:39 >>>>>>>testEasySelectOne:34 >>>>>>>testPlusSelectOneWithLambda:323 >>>>>>>testPlusSelectOne:354 --------------- >>>>>>>testFlexSelectOne:44 >>>>>>>testEasySelectOne:37 >>>>>>>testPlusSelectOneWithLambda:321 >>>>>>>testPlusSelectOne:302 --------------- >>>>>>>testFlexSelectOne:39 >>>>>>>testEasySelectOne:31 >>>>>>>testPlusSelectOneWithLambda:291 >>>>>>>testPlusSelectOne:278 --------------- >>>>>>>testFlexSelectOne:34 >>>>>>>testEasySelectOne:30 >>>>>>>testPlusSelectOneWithLambda:298 >>>>>>>testPlusSelectOne:288 --------------- >>>>>>>testFlexSelectOne:34 >>>>>>>testEasySelectOne:32 >>>>>>>testPlusSelectOneWithLambda:294 >>>>>>>testPlusSelectOne:323 --------------- >>>>>>>testFlexSelectOne:33 >>>>>>>testEasySelectOne:28 >>>>>>>testPlusSelectOneWithLambda:281 >>>>>>>testPlusSelectOne:272 --------------- >>>>>>>testFlexSelectOne:33 >>>>>>>testEasySelectOne:25 >>>>>>>testPlusSelectOneWithLambda:270 >>>>>>>testPlusSelectOne:256 --------------- >>>>>>>testFlexSelectOne:27 >>>>>>>testEasySelectOne:29 >>>>>>>testPlusSelectOneWithLambda:268 >>>>>>>testPlusSelectOne:255 --------------- >>>>>>>testFlexSelectOne:28 >>>>>>>testEasySelectOne:29 >>>>>>>testPlusSelectOneWithLambda:257 >>>>>>>testPlusSelectOne:266 \",\"测试结论\",\"easy-query和Mybatis-Flex 的查询单条数据的速度相当，大概是 Mybatis-Plus 的 5 ~ 10+ 倍。因为是查询单条数据所以可以近似理解为表达式生成sql的能力差距大概是5-10倍\"]},\"185\":{\"h\":\"测试列表(List)数据查询\",\"t\":[\"要求返回的数据为 10 条数据。\",\"Mybatis-Flex 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.where(FLEX_ACCOUNT.ID.ge(100).or(FLEX_ACCOUNT.USER_NAME .eq(\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)))) .limit(10); mapper.selectListByQuery(queryWrapper); \",\"easy-query 的代码如下：\",\" easyQuery.queryable(EasyQueryAccount.class) .where(o->o.ge(EasyQueryAccount::getId,100) .or() .eq(EasyQueryAccount::getUserName,\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000))) .limit(10).toList(); \",\"Mybatis-Plus 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.ge(\\\"id\\\", 100); queryWrapper.or(); queryWrapper.eq(\\\"user_name\\\", \\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)); queryWrapper.last(\\\"limit 10\\\"); mapper.selectList(queryWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexSelectTop10:40 >>>>>>>testEasySelectTop10:37 >>>>>>>testPlusSelectTop10WithLambda:259 >>>>>>>testPlusSelectTop10:245 --------------- >>>>>>>testFlexSelectTop10:39 >>>>>>>testEasySelectTop10:33 >>>>>>>testPlusSelectTop10WithLambda:256 >>>>>>>testPlusSelectTop10:245 --------------- >>>>>>>testFlexSelectTop10:39 >>>>>>>testEasySelectTop10:34 >>>>>>>testPlusSelectTop10WithLambda:249 >>>>>>>testPlusSelectTop10:238 --------------- >>>>>>>testFlexSelectTop10:39 >>>>>>>testEasySelectTop10:32 >>>>>>>testPlusSelectTop10WithLambda:248 >>>>>>>testPlusSelectTop10:238 --------------- >>>>>>>testFlexSelectTop10:38 >>>>>>>testEasySelectTop10:32 >>>>>>>testPlusSelectTop10WithLambda:249 >>>>>>>testPlusSelectTop10:237 --------------- >>>>>>>testFlexSelectTop10:40 >>>>>>>testEasySelectTop10:29 >>>>>>>testPlusSelectTop10WithLambda:243 >>>>>>>testPlusSelectTop10:243 --------------- >>>>>>>testFlexSelectTop10:37 >>>>>>>testEasySelectTop10:29 >>>>>>>testPlusSelectTop10WithLambda:247 >>>>>>>testPlusSelectTop10:244 --------------- >>>>>>>testFlexSelectTop10:36 >>>>>>>testEasySelectTop10:29 >>>>>>>testPlusSelectTop10WithLambda:248 >>>>>>>testPlusSelectTop10:244 --------------- >>>>>>>testFlexSelectTop10:35 >>>>>>>testEasySelectTop10:27 >>>>>>>testPlusSelectTop10WithLambda:245 >>>>>>>testPlusSelectTop10:245 --------------- >>>>>>>testFlexSelectTop10:34 >>>>>>>testEasySelectTop10:25 >>>>>>>testPlusSelectTop10WithLambda:247 >>>>>>>testPlusSelectTop10:239 \",\"测试结论\",\"本次查询10条的情况下可以看到easy-query已经略微快于Mybatis-Flex,依然是 Mybatis-Plus 的 5 ~ 10+ 倍\"]},\"186\":{\"h\":\"测试列表(List1W)数据查询\",\"t\":[\"要求返回的数据为 10000 条数据。\",\"Mybatis-Flex 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.where(FLEX_ACCOUNT.ID.ge(100).or(FLEX_ACCOUNT.USER_NAME .eq(\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)))) .limit(10000); mapper.selectListByQuery(queryWrapper); \",\"easy-query 的代码如下：\",\" easyQuery.queryable(EasyQueryAccount.class) .where(o->o.ge(EasyQueryAccount::getId,100) .or() .eq(EasyQueryAccount::getUserName,\\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000))) .limit(10000).toList(); \",\"Mybatis-Plus 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper(); queryWrapper.ge(\\\"id\\\", 100); queryWrapper.or(); queryWrapper.eq(\\\"user_name\\\", \\\"admin\\\" + ThreadLocalRandom.current().nextInt(10000)); queryWrapper.last(\\\"limit 10000\\\"); mapper.selectList(queryWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexSelectTop10000:12812 >>>>>>>testEasySelectTop10000:3981 >>>>>>>testPlusSelectTop10000WithLambda:7821 >>>>>>>testPlusSelectTop10000:7807 --------------- >>>>>>>testFlexSelectTop10000:12806 >>>>>>>testEasySelectTop10000:3965 >>>>>>>testPlusSelectTop10000WithLambda:7794 >>>>>>>testPlusSelectTop10000:7798 --------------- >>>>>>>testFlexSelectTop10000:12759 >>>>>>>testEasySelectTop10000:3977 >>>>>>>testPlusSelectTop10000WithLambda:7851 >>>>>>>testPlusSelectTop10000:7780 --------------- >>>>>>>testFlexSelectTop10000:12779 >>>>>>>testEasySelectTop10000:3964 >>>>>>>testPlusSelectTop10000WithLambda:7803 >>>>>>>testPlusSelectTop10000:7805 --------------- >>>>>>>testFlexSelectTop10000:12969 >>>>>>>testEasySelectTop10000:3984 >>>>>>>testPlusSelectTop10000WithLambda:7856 >>>>>>>testPlusSelectTop10000:7780 --------------- >>>>>>>testFlexSelectTop10000:12743 >>>>>>>testEasySelectTop10000:3974 >>>>>>>testPlusSelectTop10000WithLambda:7784 >>>>>>>testPlusSelectTop10000:7772 --------------- >>>>>>>testFlexSelectTop10000:12662 >>>>>>>testEasySelectTop10000:3969 >>>>>>>testPlusSelectTop10000WithLambda:7776 >>>>>>>testPlusSelectTop10000:7745 --------------- >>>>>>>testFlexSelectTop10000:12721 >>>>>>>testEasySelectTop10000:3985 >>>>>>>testPlusSelectTop10000WithLambda:7790 >>>>>>>testPlusSelectTop10000:7755 --------------- >>>>>>>testFlexSelectTop10000:12731 >>>>>>>testEasySelectTop10000:3953 >>>>>>>testPlusSelectTop10000WithLambda:7762 >>>>>>>testPlusSelectTop10000:7751 --------------- >>>>>>>testFlexSelectTop10000:12728 >>>>>>>testEasySelectTop10000:3975 >>>>>>>testPlusSelectTop10000WithLambda:7759 >>>>>>>testPlusSelectTop10000:7771 \",\"测试结论\",\"本次查询10000条的情况下可以看到easy-query已经完全快于Mybatis-Flex大概是其3倍,是 Mybatis-Plus 的2 倍,本次结果可以得出Mybatis-Flex的优点是快速生成sql,但是在jdbc到bean对象的转换是相对低效的\"]},\"187\":{\"h\":\"分页查询\",\"t\":[\"Mybatis-Flex 的代码如下：\",\"QueryWrapper queryWrapper = new QueryWrapper() .where(FLEX_ACCOUNT.ID.ge(100)); mapper.paginate(page, pageSize, 20000, queryWrapper); \",\"easy-query 的代码如下：\",\" easyQuery.queryable(EasyQueryAccount.class) .where(o-> o.ge(EasyQueryAccount::getId,100)) .toPageResult(page,pageSize,20000); \",\"Mybatis-Plus 的代码如下：\",\"LambdaQueryWrapper<PlusAccount> queryWrapper = new LambdaQueryWrapper<>(); queryWrapper.ge(PlusAccount::getId, 100); queryWrapper.eq(PlusAccount::getEmail, \\\"michael@gmail.com\\\"); Page<PlusAccount> p = Page.of(page, pageSize, 20000, false); mapper.selectPage(p, queryWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexPaginate:41 >>>>>>>testEasyPaginate:21 >>>>>>>testPlusPaginate:246 --------------- >>>>>>>testFlexPaginate:39 >>>>>>>testEasyPaginate:20 >>>>>>>testPlusPaginate:243 --------------- >>>>>>>testFlexPaginate:35 >>>>>>>testEasyPaginate:20 >>>>>>>testPlusPaginate:239 --------------- >>>>>>>testFlexPaginate:33 >>>>>>>testEasyPaginate:19 >>>>>>>testPlusPaginate:236 --------------- >>>>>>>testFlexPaginate:32 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:234 --------------- >>>>>>>testFlexPaginate:32 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:235 --------------- >>>>>>>testFlexPaginate:31 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:238 --------------- >>>>>>>testFlexPaginate:31 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:233 --------------- >>>>>>>testFlexPaginate:32 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:232 --------------- >>>>>>>testFlexPaginate:31 >>>>>>>testEasyPaginate:18 >>>>>>>testPlusPaginate:232 \",\"测试结论\",\"分页查询速度 easy-query快于Mybatis-Flex 远快于 Mybatis-Plus ，大概是 Mybatis-Plus 的 5~10 倍左右。\"]},\"188\":{\"h\":\"数据更新\",\"t\":[\"Mybatis-Flex 的代码如下：\",\"FlexAccount flexAccount = new FlexAccount(); flexAccount.setUserName(\\\"testInsert\\\" + i); flexAccount.setNickname(\\\"testInsert\\\" + i); QueryWrapper queryWrapper = QueryWrapper.create() .where(FLEX_ACCOUNT.ID.ge(9200)) .and(FLEX_ACCOUNT.ID.le(9300)) .and(FLEX_ACCOUNT.USER_NAME.like(\\\"admin\\\")) .and(FLEX_ACCOUNT.NICKNAME.like(\\\"admin\\\")); mapper.updateByQuery(flexAccount, queryWrapper); \",\"easy-query 的代码如下：\",\"easyQuery.updatable(EasyQueryAccount.class) .set(EasyQueryAccount::getUserName,\\\"testInsert\\\" + i) .set(EasyQueryAccount::getNickname,\\\"testInsert\\\" + i) .where(o->o.ge(EasyQueryAccount::getId,9000).le(EasyQueryAccount::getId,9100) .like(EasyQueryAccount::getUserName,\\\"admin\\\") .like(EasyQueryAccount::getNickname,\\\"admin\\\")) .executeRows(); \",\"Mybatis-Plus 的代码如下：\",\"PlusAccount plusAccount = new PlusAccount(); plusAccount.setUserName(\\\"testInsert\\\" + i); plusAccount.setNickname(\\\"testInsert\\\" + i); LambdaUpdateWrapper<PlusAccount> updateWrapper = new LambdaUpdateWrapper<>(); updateWrapper.ge(PlusAccount::getId, 9000); updateWrapper.le(PlusAccount::getId, 9100); updateWrapper.like(PlusAccount::getUserName, \\\"admin\\\"); updateWrapper.like(PlusAccount::getNickname, \\\"admin\\\"); mapper.update(plusAccount, lambdaUpdateWrapper); \",\"10 轮的测试结果：\",\"--------------- >>>>>>>testFlexUpdate:38 >>>>>>>testEasyUpdate:30 >>>>>>>testPlusUpdate:196 --------------- >>>>>>>testFlexUpdate:29 >>>>>>>testEasyUpdate:24 >>>>>>>testPlusUpdate:183 --------------- >>>>>>>testFlexUpdate:27 >>>>>>>testEasyUpdate:22 >>>>>>>testPlusUpdate:187 --------------- >>>>>>>testFlexUpdate:27 >>>>>>>testEasyUpdate:21 >>>>>>>testPlusUpdate:180 --------------- >>>>>>>testFlexUpdate:25 >>>>>>>testEasyUpdate:20 >>>>>>>testPlusUpdate:187 --------------- >>>>>>>testFlexUpdate:24 >>>>>>>testEasyUpdate:20 >>>>>>>testPlusUpdate:183 --------------- >>>>>>>testFlexUpdate:27 >>>>>>>testEasyUpdate:20 >>>>>>>testPlusUpdate:180 --------------- >>>>>>>testFlexUpdate:23 >>>>>>>testEasyUpdate:21 >>>>>>>testPlusUpdate:176 --------------- >>>>>>>testFlexUpdate:24 >>>>>>>testEasyUpdate:19 >>>>>>>testPlusUpdate:179 --------------- >>>>>>>testFlexUpdate:21 >>>>>>>testEasyUpdate:23 >>>>>>>testPlusUpdate:177 \",\"测试结论\",\"数据更新速度easy-query快于Mybatis-Flex 远快于 Mybatis-Plus，大概是 Mybatis-Plus 的 5~10+ 倍。\"]},\"189\":{\"h\":\"更多的测试\",\"t\":[\"想进一步进行更多测试的同学，可以到 https://github.com/xuejmnet/easy-query-benchmark\\n下载源码后，添加其他方面的测试。\"]},\"190\":{\"h\":\"使用代理模式\",\"t\":[\"easy-query提供了多种api接口方便用户调用,其中代理模式的使用上面更加符合人性化,如果您是c#开发人员那么肯定这种模式相对的会更加适合您的开发理念\"]},\"191\":{\"h\":\"psvm下\"},\"192\":{\"h\":\"安装依赖\",\"t\":[\" <!-- easy-query mysql语法 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${project.version}</version> <scope>compile</scope> </dependency> <!-- apt生成代理类 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>1.1.12</version> <scope>compile</scope> </dependency> <!-- 代理api --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>1.1.12</version> <scope>compile</scope> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.17</version> </dependency> <!-- 连接池 --> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <!-- lombok 快速get set 可选 --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> \"]},\"193\":{\"h\":\"新建java类\",\"t\":[\"@Data @Table(\\\"t_topic\\\") @EntityProxy public class Topic { @Column(primaryKey = true) private String id; private String name; private Integer no; @UpdateIgnore private LocalDateTime createTime; } \",\"说明!!!\",\"idea 工具栏点击build => build project进行生成\",\"会在target包下的xgenerated-sources下生成TopicProxy.java类\",\"如果idea无法智能提示那么就刷新一下maven\"]},\"194\":{\"h\":\"初始化代码\",\"t\":[\" public class Main { public static void main(String[] args) { //设置日志打印为控制台 LogFactory.useStdOutLogging(); //初始化连接池 HikariDataSource dataSource = new HikariDataSource(); dataSource.setJdbcUrl(\\\"jdbc:mysql://127.0.0.1:3306/console-demo?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\"); dataSource.setUsername(\\\"root\\\"); dataSource.setPassword(\\\"root\\\"); dataSource.setDriverClassName(\\\"com.mysql.cj.jdbc.Driver\\\"); dataSource.setMaximumPoolSize(20); //初始化属性模式 EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setDeleteThrowError(true);//设置不允许物理删除 op.setPrintSql(true);//设置以log.info模式打印执行sql信息 }) .replaceService(NameConversion.class, UnderlinedNameConversion.class)//替换框架内部的属性和列转换模式改为大写转下划线 .useDatabaseConfigure(new MySQLDatabaseConfiguration())//设置方言语法等为mysql的 .build(); //创建代理模式api查询 EasyProxyQuery easyProxyQuery = new DefaultEasyProxyQuery(easyQueryClient); //第一种写法 List<Topic> topics = easyProxyQuery.queryable(TopicProxy.createTable()) .where(o -> o.eq(o.t().id(), \\\"123\\\").like(o.t().name(), \\\"您好\\\")) .orderByAsc(o -> o.columns(o.t().createTime(), o.t().id())) .select(o -> o.columns(o.t().no(), o.t().id(), o.t().name())) .toList(); //第二种写法提取表变量 TopicProxy table = TopicProxy.createTable(); List<Topic> topics = easyProxyQuery.queryable(table) .where(o -> o.eq(table.id(), \\\"123\\\").like(table.name(), \\\"您好\\\"))//表达式内部直接用表变量 .orderByAsc(o -> o.columns(table.createTime(), table.id())) .select(o -> o.columns(table.no(), o.t().id(), table.name())) .toList(); //join写法 更加直观 TopicTestProxy table = TopicTestProxy.createTable(); TopicAutoProxy table1 = TopicAutoProxy.createTable(); List<Topic> list = easyProxyQuery .queryable(table) .leftJoin(table1, o -> o.eq(table.id(), table1.title())) .where(o -> o.eq(table.id(), \\\"123\\\") .or().eq(table1.title(), \\\"111\\\")) .orderByAsc(o -> o.column(table1.id())) .select(s -> s.columns(table1.id(), table1.createTime()).column(table.title())) .toList(); } } \",\"==> Preparing: SELECT `no`,`id`,`name` FROM `t_topic` WHERE `id` = ? AND `name` LIKE ? ORDER BY `create_time` ASC,`id` ASC ==> Parameters: 123(String),%您好%(String) <== Time Elapsed: 17(ms) <== Total: 0 -- join写法 ==> Preparing: SELECT t1.`id`,t1.`create_time`,t.`title` FROM `t_topic` t LEFT JOIN `t_topic_auto` t1 ON t.`id` = t1.`title` WHERE (t.`id` = ? OR t1.`title` = ?) ORDER BY t1.`id` ASC ==> Parameters: 123(String),111(String) <== Time Elapsed: 52(ms) <== Total: 0 \",\"说明!!!\",\"在代理模式下面查询相关方法入参都只有一个,比如入参为o那么对应的表就是o.t(),o.t1(),o.t2()....o.t9()分别对应上下文10张表,也可以讲queryable,join需要的表进行参数提取,作为局部变量来使用\"]},\"195\":{\"h\":\"分片默认行为配置\"},\"196\":{\"h\":\"默认行为\",\"t\":[\"方法\",\"默认值\",\"描述\",\"connectionMode\",\"ConnectionModeEnum.SYSTEM_AUTO\",\"系统自动选择有内存严格和连接数严格,内存严格表示会多开连接数，连接数严格会选择少开连接数在内存归并\",\"maxShardingQueryLimit\",\"5\",\"当出现跨分片聚合也就是通过表达式无法精确到具体路由或筛选后路由大于1那么会开启最多多少个线程为一组进行查询聚合,默认是5。注意这个值的设置不可以大于数据库连接池数量\",\"executorMaximumPoolSize\",\"0\",\"当值为0时分片聚合采用无界队列Executors.newCachedThreadPool,如果自定义必须大于maxShardingQueryLimit*分库数量，执行线程数 如果为0那么采用无界线程池Executors.newCachedThreadPool,如果是大于0采用长度为executorQueueSize的有界队列,核心线程数采用executorCorePoolSize并且需要比 executorCorePoolSize值大\",\"executorCorePoolSize\",\"当前环境线程数且最小为:4\",\"当且仅当executorMaximumPoolSize>0生效\",\"executorQueueSize\",\"1024\",\"当且仅当executorMaximumPoolSize>0生效 分片聚合执行线程队列\",\"throwIfRouteNotMatch\",\"true\",\"当查询没有路由匹配的时候查询是否报错,true:表示报错,false:表示返回默认值\",\"shardingExecuteTimeoutMillis\",\"30000(ms)\",\"分片聚合超时时间默认30秒\",\"maxShardingRouteCount\",\"128\",\"当出现条件分片大于多少时报错默认128,就是比如select where update where delete where路由到过多的表就会报错,entity操作比如update对象，insert，delete对象不会判断这个条件\",\"defaultDataSourceName\",\"ds0\",\"默认分库数据源名称,分表设置与否无关紧要\",\"defaultDataSourceMergePoolSize\",\"0\",\"默认数据源的数据源连接池大小分表有效,一般设置为最少最少 >= maxShardingQueryLimit，当小于maxShardingQueryLimit后启动会抛出警告，建议和实际数据库连接池大小一致或者比实际稍小,用于防止获取链接死锁程序假死,假设线程池为3并且不设置当前值,那么如果有3个线程a,b,c分别需要聚合2个分片,那么如果线程a,b,c都拿到1个线程的情况下想要拿到下一个链接需要其中一个释放,那么就会导致死锁要分别等到其他线程超时,默认DataSource.getConnection没有设置超时时间所以需要自己定义,如果程序不涉及同DataSource分配聚合那么那么就不需要设置该值,如果需要聚合的情况下并且存在外部orm或者getconnection那么可能导致无法正确反应超时可以适当将该值降低\",\"multiConnWaitTimeoutMillis\",\"5000(ms)\",\"默认5秒分表聚合多链接获取分表插入更新删除同理多个线程间等待获取时间单位毫秒(ms),用于分片聚合查询时一次性获取多个数据库connection但是因为连接池有限所以多个聚合线程间会等待防止死锁，比如连接池2个链接,本次查询需要2个链接聚合有两个线程,a线程已经获取了一个connection,b线程也获取一个,那么a线程想要获取下一个就必须等待b线程释放，b线程想要获取下一个也需要a线程释放或者等到DataSource.getConnection()超时\",\"warningBusy\",\"true\",\"当获取链接时间大于multiConnWaitTimeoutMillis*0.8并且没有超时那么会log.warn打印警告信息\"]},\"197\":{\"h\":\"事务\"},\"198\":{\"h\":\"手动事务\",\"t\":[\"easy-query默认提供手动开启事务的功能,并且在springboot下可以跨非代理方法生效,唯一限制就是当前线程内的\"]},\"199\":{\"h\":\"api\",\"t\":[\"方法\",\"默认值\",\"描述\",\"beginTransaction\",\"null\",\"参数表示数据库隔离级别,默认采用datasource的可以自定义 Connection.TRANSACTION_READ_UNCOMMITTED,Connection.TRANSACTION_READ_COMMITTED,Connection.TRANSACTION_REPEATABLE_READ,* Connection.TRANSACTION_SERIALIZABLE.\",\"Transaction.commit\",\"提交事务\",\"Transaction.rollback\",\"回滚事务\",\"registerListener(TransactionListener transactionBehavior)\",\"设置当前事务的执行行为,包括提交前提交后等处理\",\"close\",\"关闭事务,如果事务未提交则自动调用回滚\"]},\"200\":{\"h\":\"如何开启\",\"t\":[\"springboot如果当前方法没有添加@Transactional注解,内部调用this.method()的非代理对象方法调用事务,哪怕this.method()有注解@Transactional也会让事务失效,有时候你可能需要这个方法那么可以在springboot中通过beginTransaction来开启事务,默认不支持和springboot的嵌套事务,不可以在@Transactional内开启easy-query的事务\",\" public void test(){ try(Transaction transaction = easyQuery.beginTransaction()){ TestUserMysql0 testUserMysql1 = new TestUserMysql0(); testUserMysql1.setId(\\\"123321123321xxx\\\"); testUserMysql1.setAge(1); testUserMysql1.setName(\\\"xxx\\\"); easyQuery.insertable(testUserMysql1).executeRows(); test1(); if(true){ throw new RuntimeException(\\\"错误了\\\"); } transaction.commit(); } } public void test1(){ TestUserMysql0 testUserMysql1 = new TestUserMysql0(); testUserMysql1.setId(\\\"123321123321xxx1\\\"); testUserMysql1.setAge(1); testUserMysql1.setName(\\\"xxx\\\"); easyQuery.insertable(testUserMysql1).executeRows(); } \"]},\"201\":{\"h\":\"修改\",\"t\":[\"EasyQuery提供了单条修改、批量修改和表达式修改数据的方法,可以返回数据库执行修改后的受影响行数。\",\"数据库建表脚本\",\"create table t_topic ( id varchar(32) not null comment '主键ID'primary key, stars int not null comment '点赞数', title varchar(50) null comment '标题', create_time datetime not null comment '创建时间' )comment '主题表'; \",\"java实体对象\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } \"]},\"202\":{\"h\":\"0.对象主键更新\",\"t\":[\"Topic topic=easyQuery.queryable(Topic.class).whereById(\\\"2\\\").firstOrNull(); long rows = easyQuery.updatable(topic) .executeRows(); \"]},\"203\":{\"h\":\"1.更新指定列\",\"t\":[\"long rows = easyQuery.updatable(Topic.class) .set(Topic::getStars, 12) .where(o -> o.eq(Topic::getId, \\\"2\\\")) .executeRows(); //rows为1 easyQuery.updatable(Topic.class) .set(Topic::getStars, 12) .where(o -> o.eq(Topic::getId, \\\"2\\\")) .executeRows(1,\\\"更新失败\\\"); //判断受影响行数并且进行报错,如果当前操作不在事务内执行那么会自动开启事务!!!会自动开启事务!!!会自动开启事务!!!来实现并发更新控制,异常为:EasyQueryConcurrentException //抛错后数据将不会被更新 \",\"==> Preparing: UPDATE t_topic SET `stars` = ? WHERE `id` = ? ==> Parameters: 12(Integer),2(String) <== Total: 1 \",\"支持多次set,多次set表示set拼接\"]},\"204\":{\"h\":\"2.表列自更新\",\"t\":[\"long rows = easyQuery.updatable(Topic.class) .set(Topic::getTitle, Topic::getStars) .where(o -> o.eq(Topic::getId, \\\"2\\\")) .executeRows(); //rows为1 \",\"==> Preparing: UPDATE t_topic SET `title` = `stars` WHERE `id` = ? ==> Parameters: 2(String) <== Total: 1 \"]},\"205\":{\"h\":\"3.表列原子更新\",\"t\":[\"long rows1 = easyQuery.updatable(Topic.class) .setIncrement(Topic::getStars) .where(o -> o.eq(Topic::getId, \\\"2\\\")).executeRows(); long rows2 = easyQuery.updatable(Topic.class) .setIncrement(Topic::getStars,2) .where(o -> o.eq(Topic::getId, \\\"2\\\")).executeRows(); long rows3 = easyQuery.updatable(Topic.class) .setDecrement(Topic::getStars) .where(o -> o.eq(Topic::getId, \\\"2\\\")).executeRows(); long rows4 = easyQuery.updatable(Topic.class) .setDecrement(Topic::getStars,2) .where(o -> o.eq(Topic::getId, \\\"2\\\")).executeRows(); \",\"==> Preparing: UPDATE t_topic SET `stars` = `stars`+? WHERE `id` = ? ==> Parameters: 1(Integer),2(String) <== Total: 1 ==> Preparing: UPDATE t_topic SET `stars` = `stars`+? WHERE `id` = ? ==> Parameters: 2(Integer),2(String) <== Total: 1 ==> Preparing: UPDATE t_topic SET `stars` = `stars`-? WHERE `id` = ? ==> Parameters: 1(Integer),2(String) <== Total: 1 ==> Preparing: UPDATE t_topic SET `stars` = `stars`-? WHERE `id` = ? ==> Parameters: 2(Integer),2(String) <== Total: 1 \"]},\"206\":{\"h\":\"3.差异更新\",\"t\":[\"说明!!!\",\"差异更新可以自动监听被追踪的对象,并且生成差异更新语句,而不是无脑的对对象进行全字段更新,使用时需要开启当前追踪环境并且对查询出来的结果进行追踪后续即可监听到变更列实现差异化update语句\",\"正常情况下如果用户想使用差异更新,那么需要对查询采用asTracking来让返回结果被追踪,或者调用easyQuery.addTracking来让需要更新的对象被追踪\",\"如果希望默认是追踪的可以设置启动配置defaultTrack为true那么只需要开始上下文环境即可\",\"错误的用法!!!\",\"开启上下文追踪当时没有讲查询结果对象附加到当前上下文,所以框架无法追踪对象变更无法有效生成差异更新\",\"TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try{ trackManager.begin(); Topic topic = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"7\\\")).firstNotNull(\\\"未找到对应的数据\\\"); String newTitle = \\\"test123\\\" + new Random().nextInt(100); topic.setTitle(newTitle); long rows=easyQuery.updatable(topic).executeRows(); }finally { trackManager.release(); } \",\"==> Preparing: UPDATE t_topic SET `stars` = ?,`title` = ?,`create_time` = ? WHERE `id` = ? ==> Parameters: 107(Integer),test12364(String),2023-03-27T22:05:23(LocalDateTime),7(String) <== Total: 1 \",\"正确的用法!!!\",\"要注意是否开启了追踪spring-boot下用@EasyQueryTrack注解即可开启\",\"是否将当前对象添加到了追踪上下文 查询添加asTracking或者 手动将查询出来的对象进行easyQuery.addTracking(Object entity)\",\"TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try{ trackManager.begin(); Topic topic = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"7\\\")).asTracking().firstNotNull(\\\"未找到对应的数据\\\"); String newTitle = \\\"test123\\\" + new Random().nextInt(100); topic.setTitle(newTitle); long l = easyQuery.updatable(topic).executeRows(); }finally { trackManager.release(); } \",\"==> Preparing: UPDATE t_topic SET `title` = ? WHERE `id` = ? ==> Parameters: test1239(String),7(String) <== Total: 1 \",\"清晰的看到差异更新只会更新需要更新的列\",\"追踪注意点及说明!!!\",\"原因是正确的写法在开启追踪后查询使用了.asTracking()那么会让所有的结果集全部被追踪(如果查询数据量有几万或者几十万那么性能肯定会有影响)，被追踪的返回结果对象必须要满足是数据库实体才可以，如果附加实体的时候发现当前上下文已经有被追踪的实体，那么直接放弃当前查询出来的结果，直接使用被追踪的数据作为当前对象，如果需要更新的列一个都没有，那么easy-query将不会生成update的sql语句并且返回0行，因为没有数据需要被修改\",\"选择性追踪 我们可能会有这样的需求这边需要查询出几百上万条数据，但是追踪更新只会涉及到1-2条，如果整个查询采用.asTracking()那么性能会相对低下，所以提供了额外的追踪方法\",\" TrackManager trackManager = easyQuery.getRuntimeContext().getTrackManager(); try{ trackManager.begin(); Topic topic = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"7\\\")).firstNotNull(\\\"未找到对应的数据\\\"); easyQuery.addTracking(topic); String newTitle = \\\"test123\\\" + new Random().nextInt(100); topic.setTitle(newTitle); long l = easyQuery.updatable(topic).executeRows(); }finally { trackManager.release(); } \",\"==> Preparing: UPDATE t_topic SET `title` = ? WHERE `id` = ? ==> Parameters: test12398(String),7(String) <== Total: 1 \",\"通过对查询数据采用非追踪查询后续再修改数据前将其进行添加到追踪里面可以保证更新也是差异更新\",\"可能会有小伙伴认为这种做法太复杂了有没有建议的方法，这边easy-query已经给大家针对spring-boot的项目进行了aop的封装， 如果是springboot的小伙伴只需要在更新方法外部加上aop注解即可@EasyQueryTrack\",\"@GetMapping(\\\"/sayHello\\\") @EasyQueryTrack public Object sayHello() { TestUserMysql0 testUserMysql = easyQuery.queryable(TestUserMysql0.class) .asTracking()//如果不添加那么不会追踪数据 .firstOrNull(); return testUserMysql; } \"]},\"207\":{\"h\":\"4.指定列更新或条件\",\"t\":[\"在对象更新的情况下可以选择对应的列进行set或者进行where\",\" Topic topic = easyQuery.queryable(Topic.class).whereById(\\\"15\\\").firstOrNull(); Assert.assertNotNull(topic); long rows4 = easyQuery.updatable(topic) .setColumns(o->o.column(Topic::getCreateTime)) .whereColumns(o->o.column(Topic::getStars)).executeRows(); Assert.assertEquals(1, rows4); \",\" ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 15(String) <== Time Elapsed: 3(ms) <== Total: 1 ==> Preparing: UPDATE `t_topic` SET `create_time` = ? WHERE `stars` = ? ==> Parameters: 2023-06-08T10:48:05(LocalDateTime),115(Integer) <== Total: 1 \"]},\"208\":{\"h\":\"5.策略更新\",\"t\":[\"只更新null列到数据库\",\" Topic topic = easyQuery.queryable(Topic.class) .whereId(\\\"9\\\").firstOrNull(); long l1 = easyQuery.updatable(topic) .setSQLStrategy(UpdateStrategyEnum.ONLY_NULL_COLUMNS) .executeRows(); \",\"==> Preparing: UPDATE t_topic SET `title` = ? WHERE `id` = ? ==> Parameters: null(null),9(String) <== Total: 1 \",\"只更新非null列到数据库\",\" Topic topic = easyQuery.queryable(Topic.class) .whereId(\\\"10\\\").firstOrNull(); long l1 = easyQuery.updatable(topic) .setSQLStrategy(UpdateStrategyEnum.ONLY_NOT_NULL_COLUMNS) .executeRows(); \",\"==> Preparing: UPDATE t_topic SET `stars` = ?,`create_time` = ? WHERE `id` = ? ==> Parameters: 110(Integer),2023-03-30T23:12:06(LocalDateTime),10(String) <== Total: 1 \"]},\"209\":{\"h\":\"6.注意\",\"t\":[\"更新优先级顺序\",\"手动指定 > 策略 > 追踪 > 全量更新\"]},\"210\":{\"h\":\"指引\",\"t\":[\"本章节我们提供easy-query的基础配置信息\",\"《目录》\",\"《包依赖关系》 描述easy-query架构依赖关系方便确认使用哪些包\",\"《配置java》 如何配置java\",\"《配置kotlin》 如何配置使用kotlin\",\"《配置参数选项》 针对默认配置参数进行说明\",\"《日志配置》 如何自定义配置日志接口信息\",\"《对象值转换》 如果您对枚举转成数据库对象或者json转成数据库对象的自定义列处理可以通过值对象转换来实现\"]},\"211\":{\"h\":\"注解说明\"},\"212\":{\"h\":\"Table\",\"t\":[\"描述对象对应数据库表名,vo对象不需要,非数据库对象不需要\",\"属性\",\"默认值\",\"描述\",\"value\",\"\\\"\\\"\",\"数据库表名为空表示 nameConversion.convert(class.getSimpleName) 可以再运行时修改\",\"schema\",\"\\\"\\\"\",\"数据库schema 可以在运行时修改,默认jdbc连接串的database\",\"ignoreProperties\",\"{}\",\"需要忽略的属性,一般用于继承父类需要忽略父类的属性\",\"shardingInitializer\",\"UnShardingInitializer.class\",\"分片初始化器,当且仅当对象是分片对象是用来初始化分片对象,也可以不添加后续手动添加\",\" @Data @Table(\\\"t_topic\\\") public class Topic { //..... } \"]},\"213\":{\"h\":\"Column\",\"t\":[\"描述属性对应的列名\",\"属性\",\"默认值\",\"描述\",\"value\",\"\\\"\\\"\",\"对应数据库表的列名,默认空为nameConversion.convert(属性名)\",\"primaryKey\",\"false\",\"表示是否是主键,如果是那么在update对象delete对象将会以这个字段为id\",\"increment(弃用)\",\"false\",\"是否是自增列,如果是true,那么在insertable().executeRows(true)后获取自增id后将会填充到里面\",\"generatedKey\",\"false\",\"是否是自增列,如果是true,那么在insertable().executeRows(true)后获取自增id后将会填充到里面\",\"large\",\"false\",\"用来描述当前列是否是大列,如果是可以通过默认配置或者运行时指定是否需要查询出该列\",\"conversion\",\"DefaultValueConverter.class\",\"值转换器,默认表示不转换,可以自定义枚举或者json等\",\"valueUpdateAtomicTrack\",\"DefaultValueUpdateAtomicTrack.class\",\"原子更新,默认表示无原子更新\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; @Column(\\\"title1\\\") private String title; private LocalDateTime createTime; } \"]},\"214\":{\"h\":\"ColumnIgnore\",\"t\":[\"添加这个注解的属性将会被直接忽略映射到数据库\"]},\"215\":{\"h\":\"InsertIgnore\",\"t\":[\"添加这个注解的属性将不会再插入时被赋值\"]},\"216\":{\"h\":\"UpdateIgnore\",\"t\":[\"添加这个注解的属性将不会再更新时被更新除非手动指定,比如创建时间、创建人、逻辑删除字段,large column,如果当前字段标记update ignore那么如果是非track更新那么将会直接忽略,如果属性updateSetInTrackDiff = true那么在track下更新那么还是有效的\",\"说明!!!\",\"large column添加UpdateIgnore是为了保证大字段被查询出来后如果进行entity全字段更新那么因为title没有被查询所以更新的时候就会把null更新掉(默认更新策略就是全字段),所以这边采用更新忽略,如果需要可以用表达式忽略 [当然您也可以选择更新策略为非null更新]\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; @Column(large=true) @UpdateIgnore //大字段字段不需要update时更新 防止全字段更新把原字段改为null private String title; @UpdateIgnore //创建时间字段不需要update时更新 private LocalDateTime createTime; @LogicDelete(strategy = LogicDeleteStrategyEnum.BOOLEAN) @UpdateIgnore //逻辑删除字段不需要update时更新 private Boolean deleted; } \"]},\"217\":{\"h\":\"LogicDelete\",\"t\":[\"逻辑删除,表示当前字段对应到数据库是逻辑删除表示,select将会过滤,update也会过滤,delete数据将会被改写为update\",\"属性\",\"默认值\",\"描述\",\"value\",\"BOOLEAN\",\"逻辑删除策略,默认true表示删除,false表示不删除\",\"strategyName\",\"\\\"\\\"\",\"当逻辑删除为自定义逻辑删除时\",\"BOOLEAN false表示未被删除\",\"DELETE_LONG_TIMESTAMP 0表示未被删除\",\"LOCAL_DATE_TIME null表示未被删除\",\"LOCAL_DATE null表示未被删除\",\"CUSTOM 用户自定义\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; @Column(large=true) @UpdateIgnore //大字段字段不需要update时更新 防止全字段更新把原字段改为null private String title; @UpdateIgnore //创建时间字段不需要update时更新 private LocalDateTime createTime; @LogicDelete(strategy = LogicDeleteStrategyEnum.BOOLEAN) @UpdateIgnore //逻辑删除字段不需要update时更新 private Boolean deleted; } \"]},\"218\":{\"h\":\"Version\",\"t\":[\"乐观锁也就是版本号\",\"属性\",\"默认值\",\"描述\",\"value\",\"-\",\"自行定义版本号策略\"]},\"219\":{\"h\":\"默认乐观锁版本号策略\",\"t\":[\"VersionIntStrategy\",\"VersionLongStrategy\",\"VersionTimestampStrategy (不推荐)\",\"VersionUUIDStrategy\"]},\"220\":{\"h\":\"VersionIntStrategy\",\"t\":[\"//这边使用的是Version=2也可以使用version+1但是其实是一样的因为where后面限定了version=1\",\"update table set version=2 where id=xxx and version=1 \"]},\"221\":{\"h\":\"VersionLongStrategy\",\"t\":[\"//这边使用的是Version=2也可以使用version+1但是其实是一样的因为where后面限定了version=1\",\"update table set version=2 where id=xxx and version=1 \"]},\"222\":{\"h\":\"VersionUUIDStrategy\",\"t\":[\"update table set version=xxxxxxasd where id=xxx and version=xxxxasdasd \"]},\"223\":{\"h\":\"Encryption\",\"t\":[\"列加密,支持自定义数据加密存储,并且支持在数据库层面进行like搜索处理,拥有非常高的性能,并不是利用数据库加解密函数\"]},\"224\":{\"h\":\"EncryptionStrategy\",\"t\":[\"用来处理如何加密解密数据策略,可以自定义实现\",\"默认实现有一个aes+base64的AbstractAesBase64EncryptionStrategy抽象类,用户需要返回16位的向量和秘钥\"]},\"225\":{\"h\":\"supportQueryLike\",\"t\":[\"用来表示是否需要支持like搜索,如果true那么就会在入参参数中对其进行分段加密\"]},\"226\":{\"h\":\"Navigate\",\"t\":[\"导航属性 用在数据库对象和返回结果上面用于处理一对一，一对多，多对一，多对多\"]},\"227\":{\"h\":\"ShardingDataSourceKey\",\"t\":[\"用来标识当前对象的数据库分库键是哪个\"]},\"228\":{\"h\":\"ShardingExtraDataSourceKey\",\"t\":[\"用来标识当前对象是数据库分库额外分库键是哪个\"]},\"229\":{\"h\":\"ShardingTableKey\",\"t\":[\"用来标识当前对象的数据库分表键是哪个\"]},\"230\":{\"h\":\"ShardingExtraTableKey\",\"t\":[\"用来标识当前对象的数据库分表额外键是哪个\"]},\"231\":{\"h\":\"EasyWhereCondition\",\"t\":[\"默认的动态条件对象查询条件\"]},\"232\":{\"h\":\"EasyQueryTrack\",\"t\":[\"默认的追踪上下文注解也可以自定义\"]},\"233\":{\"h\":\"基础配置Java\",\"t\":[\"如果您是《Spring Boot》程序那么请直接点击跳转\",\"如果您是《Solon》程序那么请直接点击跳转\"]},\"234\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"235\":{\"h\":\"api接口选型\",\"t\":[\"目前easy-query支持三种api接口方式：字符串属性,lambda属性,代理属性三种api接口调用,且可以互相调用\"]},\"236\":{\"h\":\"使用示例\",\"t\":[\"语义上面来讲代理模式最好,更符合sql语法\"]},\"237\":{\"h\":\"非spring-boot初始化\",\"t\":[\"说明!!!\",\"使用代理模式的话非springboot环境必须要安装sql-api-proxy和sql-processor,springboot环境starter已经包含了\",\" <properties> <easy-query.version>latest-version</easy-query.version> </properties> <!-- 提供了代理模式支持apt模式以非lambda形式的强类型sql语法 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 提供了apt自动生成代理对象 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 提供了以java语法强类型,如果不引用也可以使用只是无法使用lambda表达式来表示属性只能用字符串 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api4j</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 这边以mysql为例 其实不需要添加下面的包也可以运行,指示默认的个别数据库行为语句没办法生成 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> \",\"//非强类型api EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDataSource(dataSource) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); //强类型api EasyQuery easyQuery = new DefaultEasyQuery(easyQueryClient); //强类型api EasyProxyuery easyProxyQuery = new DefaultEasyProxyQuery(easyQueryClient); \"]},\"238\":{\"h\":\"基础配置Kotlin\"},\"239\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"240\":{\"h\":\"spring-boot工程\",\"t\":[\"<properties> <easy-query.version>latest-version</easy-query.version> </properties> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-kt-springboot-starter</artifactId> <version>${easy-query.version}</version> </dependency> \"]},\"241\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"242\":{\"h\":\"spring-boot初始化\",\"t\":[\"<properties> <easy-query.version>latest-version</easy-query.version> </properties> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-kt-springboot-starter</artifactId> <version>${easy-query.version}</version> </dependency> \",\"#配置文件 easy-query: enable: true database: mysql name-conversion: underlined delete-throw: true print-sql: true \",\" //依赖注入 @Autowired private EasyQueryClient easyQueryClient;//通过字符串属性方式来实现查询 //推荐 @Autowired private EasyKtQuery easyKtQuery;//对EasyQueryClient的增强通过lambda方式实现查询(推荐) //推荐 @Autowired private EasyProxyQuery easyProxyQuery;//对EasyQueryClient的增强通过apt代理模式实现强类型(推荐) \"]},\"243\":{\"h\":\"非spring-boot初始化\",\"t\":[\"说明!!!\",\"使用代理模式的话非springboot环境必须要安装sql-api-proxy和sql-processor,springboot环境starter已经包含了\",\" <properties> <easy-query.version>latest-version</easy-query.version> </properties> <!-- 提供了代理模式支持apt模式以非lambda形式的强类型sql语法 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 提供了apt自动生成代理对象 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 提供了以kotlin语法强类型,如果不引用也可以使用只是无法使用lambda表达式来表示属性只能用字符串 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api4kt</artifactId> <version>${easy-query.version}</version> </dependency> <!-- 这边以mysql为例 其实不需要添加下面的包也可以运行,指示默认的个别数据库行为语句没办法生成 --> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>${easy-query.version}</version> </dependency> \",\"//非强类型api EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDataSource(dataSource) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); //强类型api EasyKtQuery easyKtQuery = new DefaultEasyKtQuery(easyQueryClient); //强类型api EasyProxyuery easyProxyQuery = new DefaultEasyProxyQuery(easyQueryClient); \"]},\"244\":{\"h\":\"配置参数选项(重要)❗️❗️❗️\",\"t\":[\"在使用前希望用户可以首先查看一遍可选择配置项,有利于了解如何进行优化\"]},\"245\":{\"h\":\"默认配置项\",\"t\":[\"配置名称\",\"默认值\",\"描述\",\"database\",\"DatabaseEnum.MYSQL\",\"默认使用mysql语法如果你的数据库默认支持mysql语法且easy-query暂未提供对应数据库的语法方言,那么可以直接用mysql的语法和方言\",\"deleteThrow\",\"true\",\"easy-query为了针对数据安全进行了默认的不允许物理删除,并不是不可以执行delete操作而是不可以在执行delete后生成delete语句,建议使用逻辑删除来规避。比如delete from t_user where uid=1 在使用逻辑删除后会变成update t_user set deleted=1 where uid=1使用逻辑删除框架默认实现该功能,用户还是一样使用deletable方法来调用执行\",\"nameConversion\",\"underlined\",\"目前有两个选择当然用户也可以自行实现接口NameConversion,目前可选default、underlined、upper_underlined、lower_camel_case、upper_camel_case,启用default表示默认的对象和数据库映射关系为属性名如属性名userAge那么对应数据库也是userAge列名,underlined表示采用下划线userAge将对应数据库user_age列,当然全局设置了后面也可以在@Column上进行手动指定对应的列名\",\"insertStrategy\",\"SQLExecuteStrategyEnum.ONLY_NOT_NULL_COLUMNS\",\"insert命名默认采用非null列插入,如果一张表存在id和name那么当name为null列时生成的sql将不会指定name列比如insert into t_user (id) values(?)如果name列不是null,那么生成的sql将是insert into t_user (id,name) values(?,?)，因为默认为非null列插入所以执行的sql是单条单条执行,并不会合并批处理,相对性能会稍微低一点,当然也可以在执行时手动更改执行策略为SQLExecuteStrategyEnum.ALL_COLUMNS那么将会进行executeBatch\",\"updateStrategy\",\"SQLExecuteStrategyEnum.ALL_COLUMNS\",\"默认update命令生成的语句将是对整个对象的所有列进行更新,不会判断是否为null,默认这种情况下会将多个对象进行合并执行batch而不是单条执行\",\"insertBatchThreshold\",\"1024\",\"如果insertable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率,链接字符串需要添加rewriteBatchedStatements=true,可以通过调用insert或者update的batch方法来手动使用或者禁用\",\"updateBatchThreshold\",\"1024\",\"如果updatable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率,链接字符串需要添加rewriteBatchedStatements=true,可以通过调用insert或者update的batch方法来手动使用或者禁用\",\"logClass\",\"-\",\"spring-boot下默认是com.easy.query.sql.starter.logging.Slf4jImpl实现如果你是非spring-boot可以自行实现或者使用控制台日志LogFactory.useStdOutLogging()\",\"queryLargeColumn\",\"true\",\"默认依然查询被标记为@Column下large的列，如果需要不查询建议在设置为large的前提下将对应列设置为@UpdateIgnore并且updateSetInTrackDiff = true防止在全列更新后导致未查询结果也被更新为null\",\"printSql\",\"true\",\"是否打印执行sql,这个和log不一样,因为考虑到有时候可能需要查看sql而不是将log输出,所以如歌设置为true,那么执行的sql和执行的结果将会以log.info()被记录到日志里面,如果您没有设置log那么一样看不到对应的执行sql\",\"defaultTrack\",\"false\",\"默认是否使用追踪模式,如果为true那么只需要开启当前上下文追踪,或者SpringBoot下使用@EasyQueryTrack那么默认就会调用asTracking()\",\"relationGroupSize\",\"512\",\"include的关联查询单次查询最多支持的关联id,如果超出将会分为两个语句执行\",\"noVersionError\",\"true\",\"当对象存在版本号并且是表达式更新的那么如果不添加版本号withVersion将会报错,必须要设置对应的版本号,如果不希望报错可以通过noVersionIgnore来忽略\"]},\"246\":{\"h\":\"分表分库特有配置\",\"t\":[\"配置名称\",\"默认值\",\"描述\",\"connectionMode\",\"ConnectionModeEnum.SYSTEM_AUTO\",\"默认框架将链接分片的链接模式改为自动,框架会自动处理,无需用户指定,当然链接模式用户也可以自行指定,1.MEMORY_STRICTLY内存严格模式,就是说如果存在跨表或者跨库查询那么本次查询将会严格控制内存,尽可能的一次性查询所有的表,那么针对单个库如果查询所有表每个表都需要一个connection所以可能会单次查询耗尽链接池的链接甚至不够,所以一般会和下面的配置参数maxShardingQueryLimit配合作为限制,2.CONNECTION_STRICTLY连接数限制,就是还是以maxShardingQueryLimit作为最大链接数尽可能少的使用连接数去执行跨分片的查询归并,主要是影响分片后的聚合模式,是采用流失聚合还是内存聚合，一般用户无需设置。\",\"maxShardingQueryLimit❗️\",\"5\",\"假设单次查询涉及到跨13张表查询,因为查询未带分片键,所以本次查询会将13张同数据库下的表进行分组以没5张为一组分成3组最后一组为3张表,当前查询会一次性获取5个链接这5个链接会通过defaultDataSourceMergePoolSize参数进行限制，然后再本次查询完成后归还到DataSource连接池中,这个参数不可以设置的比DataSource的pool-size大,否则可能会导致程序假死,因为连接池为20如果单次查询需要21那么会一直等待直到超时也获取不到21个\",\"defaultDataSourceMergePoolSize❗️\",\"0\",\"如果你的所有表中有分片表那么一定要设置这个值,且必须设置小于等于DataSource的连接池大小,假设连接池大小为100,那么这个值可以设置60,70，80甚至100,但是不可以比连接池大,且必须大于等于maxShardingQueryLimit,如果连接池100当前值设置为10,那么意味着所有线程只有10个连接池内的链接可以被用来进行分片聚合查询(每个数据源10个)\",\"multiConnWaitTimeoutMillis\",\"5000\",\"默认针对分片链接获取大于1的操作进行defaultDataSourceMergePoolSize总数的扣减,比如上述100个连接池分片设置为10个,那么如果有3个线程都需要5个分片聚合那么肯定有一个线程无法获取到那么就会等到默认5秒,如果超过这个时间还是无法获取前两个还未查询完成,那么将会抛错\",\"warningBusy\",\"true\",\"在分片聚合的时候因为需要单次获取多个链接,还是上述案例假设第三个线程获取到了5个链接但是获取的时间超过了multiConnWaitTimeoutMillis时间的80%那么框架将会打印获取链接是繁忙的,您可能需要重新调整defaultDataSourceMergePoolSize这个值和调整连接池大小\",\"maxShardingRouteCount\",\"128\",\"当出现条件分片大于多少时报错默认128,就是比如select where update where delete where路由到过多的表就会报错,涉及entity操作比如update对象，insert，delete对象不会判断这个条件\",\"defaultDataSourceName\",\"ds0\",\"默认分库数据源名称,如果你不需要分库那么可以不用去设置该值\",\"shardingExecuteTimeoutMillis\",\"60000\",\"分片聚合超时时间默认60秒单位(ms),包括增删改查\",\"throwIfRouteNotMatch\",\"true\",\"当查询没有匹配到路由是否选择报错,默认是如果不选择保存则返回默认值,譬如按时间分片,开始分片表为2020年1月那么如果你查下2019年或者查询未来的时间那么框架内部还没有这个时间所以本次查询获取到的路由为空,您可以选择不报错返回默认值,比如toList那么就是空集合,count就是0等等\",\"executorMaximumPoolSize\",\"0\",\"分片聚合最大线程数,默认为0将使用Executors.newCachedThreadPool线程池,如果需要设置或者自定义请设置为最小maxShardingQueryLimit*分片数目,设置值后将使用有界队列线程池\",\"executorCorePoolSize\",\"Math.min(Runtime.getRuntime().availableProcessors(), 4)\",\"仅executorMaximumPoolSize>0时生效\",\"executorQueueSize\",\"1024\",\"仅executorMaximumPoolSize>0时生效，线程池有界队列大小\",\"startTimeJob\",\"false\",\"当使用系统默认的按时间分片时设置这个配置为true那么框架会在内存中添加对应的系统表,原理就是开启一个定时任务线程去执行\"]},\"247\":{\"h\":\"spring-boot\",\"t\":[\"通过配置文件可以直接配置上述选项\",\" easy-query: enable: true name-conversion: underlined database: mysql ...... \"]},\"248\":{\"h\":\"非spring-boot\",\"t\":[\" EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setDeleteThrowError(true);//设置不允许物理删除 op.setPrintSql(true);//设置以log.info模式打印执行sql信息 ......//此处用于配置系统默认配置选项 }) .replaceService(NameConversion.class, UnderlinedNameConversion.class)//替换框架内部的属性和列转换模式改为大写转下划线 .useDatabaseConfigure(new MySQLDatabaseConfiguration())//设置方言语法等为mysql的 .build(); \"]},\"249\":{\"h\":\"国产框架Solon配置\"},\"250\":{\"h\":\"国产框架Solon配置\",\"t\":[\"easy-query在^1.2.6正式支持Solon适配国产框架的orm部分。\"]},\"251\":{\"h\":\"什么是Solon\",\"t\":[\"SolonJava 新的生态型应用开发框架：更快、更小、更简单。\",\"启动快 5 ～ 10 倍；qps 高 2～ 3 倍；运行时内存节省 1/3 ~ 1/2；打包可以缩到 1/2 ~ 1/10；同时支持 jdk8, jdk11, jdk17, jdk20, graalvm native image。\"]},\"252\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"253\":{\"h\":\"快速开始\"},\"254\":{\"h\":\"新建java maven项目\"},\"255\":{\"h\":\"添加项目依赖\",\"t\":[\"<dependency> <groupId>com.easy-query</groupId> <artifactId>sql-solon-plugin</artifactId> <version>latest-version</version> <scope>compile</scope> </dependency> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.31</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.18</version> </dependency> <dependency> <groupId>org.noear</groupId> <artifactId>solon-web</artifactId> <version>2.4.0</version> </dependency> \"]},\"256\":{\"h\":\"新建DataSource注入\",\"t\":[\"@Configuration public class WebConfiguration { @Bean(name = \\\"db1\\\",typed=true) public DataSource db1DataSource(@Inject(\\\"${db1}\\\") HikariDataSource dataSource){ return dataSource; } } \"]},\"257\":{\"h\":\"新增控制器\",\"t\":[\" @Controller @Mapping(\\\"/test\\\") public class TestController { @Mapping(value = \\\"/hello\\\",method = MethodType.GET) public String hello(){ return \\\"Hello World\\\"; } } \"]},\"258\":{\"h\":\"Solon启动\",\"t\":[\"# 添加配置文件 db1: jdbcUrl: jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root driver-class-name: com.mysql.cj.jdbc.Driver # 记录器级别的配置示例 solon.logging.logger: \\\"root\\\": #默认记录器配置 level: TRACE \\\"com.zaxxer.hikari\\\": level: WARN \",\"public class Main { public static void main(String[] args) { Solon.start(Main.class,args,(app)->{ app.cfg().loadAdd(\\\"application.yml\\\"); }); } } //输入url http://localhost:8080/test/hello //返回Hello World \"]},\"259\":{\"h\":\"easy-query查询\",\"t\":[\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } @Controller @Mapping(\\\"/test\\\") public class TestController { /** * 注意必须是配置多数据源的其中一个 */ @Db(\\\"db1\\\") private EasyQuery easyQuery; @Mapping(value = \\\"/hello\\\",method = MethodType.GET) public String hello(){ return \\\"Hello World\\\"; } @Mapping(value = \\\"/queryTopic\\\",method = MethodType.GET) public Object queryTopic(){ return easyQuery.queryable(Topic.class) .where(o->o.ge(Topic::getStars,2)) .toList(); } } ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `stars` >= ? ==> Parameters: 2(Integer) <== Time Elapsed: 17(ms) <== Total: 101 \"]},\"260\":{\"h\":\"Solon配置easy-query个性化\",\"t\":[\"# 添加配置文件 db1: jdbcUrl: jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root driver-class-name: com.mysql.cj.jdbc.Driver easy-query: # 配置自定义日志 # log-class: ... db1: # 支持mysql pgsql h2 mssql dameng mssql_row_number kingbase_es等其余数据库在适配中 database: mysql # 支持underlined default lower_camel_case upper_camel_case upper_underlined name-conversion: underlined # 物理删除时抛出异常 不包括手写sql的情况 delete-throw: true # 插入列策略 all_columns only_not_null_columns only_null_columns insert-strategy: only_not_null_columns # 更新列策略 all_columns only_not_null_columns only_null_columns update-strategy: all_columns connection_strictly # 大字段依旧查询 如果不查询建议设置为updateIgnore防止update allcolumn将其改为null query-large-column: true # 更新删除无版本号报错 no-version-error: true # 分片链接模式 system_auto memory_strictly # connection-mode: ... # max-sharding-query-limit: ... # executor-maximum-pool-size: ... # executor-core-pool-size: ... # throw-if-route-not-match: ... # sharding-execute-timeout-millis: ... # max-sharding-route-count: ... # executor-queue-size: ... # default-data-source-name: ... # default-data-source-merge-pool-size: ... # multi-conn-wait-timeout-millis: ... # warning-busy: ... # insert-batch-threshold: ... # update-batch-threshold: ... # print-sql: ... # start-time-job: ... # default-track: ... # relation-group-size: ... # 记录器级别的配置示例 配置了print-sql没有配置对应的log也不会打印 solon.logging.logger: \\\"root\\\": #默认记录器配置 level: TRACE \\\"com.zaxxer.hikari\\\": level: WARN \"]},\"261\":{\"h\":\"额外配置\"},\"262\":{\"h\":\"逻辑删除\",\"t\":[\" public class MyLogicDelStrategy extends AbstractLogicDeleteStrategy { /** * 允许datetime类型的属性 */ private final Set<Class<?>> allowTypes=new HashSet<>(Arrays.asList(LocalDateTime.class)); @Override protected SQLExpression1<WherePredicate<Object>> getPredicateFilterExpression(LogicDeleteBuilder builder, String propertyName) { return o->o.isNull(propertyName); } @Override protected SQLExpression1<ColumnSetter<Object>> getDeletedSQLExpression(LogicDeleteBuilder builder, String propertyName) { // LocalDateTime now = LocalDateTime.now(); // return o->o.set(propertyName,now); //上面的是错误用法,将now值获取后那么这个now就是个固定值而不是动态值 return o->o.set(propertyName, LocalDateTime.now()); } @Override public String getStrategy() { return \\\"MyLogicDelStrategy\\\"; } @Override public Set<Class<?>> allowedPropertyTypes() { return allowTypes; } } @Configuration public class DemoConfiguration { @Bean(name = \\\"db1\\\",typed=true) public DataSource db1DataSource(@Inject(\\\"${db1}\\\") HikariDataSource dataSource){ return dataSource; } @Bean public void db1QueryConfiguration(@Db(\\\"db1\\\") QueryConfiguration configuration){ configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); // configuration.applyEncryptionStrategy(...); // configuration.applyInterceptor(...); // configuration.applyShardingInitializer(...); // configuration.applyValueConverter(...); // configuration.applyValueUpdateAtomicTrack(...); } } \"]},\"263\":{\"h\":\"Solon所有配置\",\"t\":[\" @Configuration public class DemoConfiguration { @Bean(name = \\\"db1\\\",typed=true) public DataSource db1DataSource(@Inject(\\\"${db1}\\\") HikariDataSource dataSource){ return dataSource; } // /** // * 配置额外插件,比如自定义逻辑删除,加密策略,拦截器,分片初始化器,值转换,原子追踪更新 // * @param configuration // */ // @Bean // public void db1QueryConfiguration(@Db(\\\"db1\\\") QueryConfiguration configuration){ // configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); // configuration.applyEncryptionStrategy(...); // configuration.applyInterceptor(...); // configuration.applyShardingInitializer(...); // configuration.applyValueConverter(...); // configuration.applyValueUpdateAtomicTrack(...); // } // /** // * 添加分表或者分库的路由,分库数据源 // * @param runtimeContext // */ // @Bean // public void db1QueryRuntimeContext(@Db(\\\"db1\\\") QueryRuntimeContext runtimeContext){ // TableRouteManager tableRouteManager = runtimeContext.getTableRouteManager(); // DataSourceRouteManager dataSourceRouteManager = runtimeContext.getDataSourceRouteManager(); // tableRouteManager.addRoute(...); // dataSourceRouteManager.addRoute(...); // // DataSourceManager dataSourceManager = runtimeContext.getDataSourceManager(); // // dataSourceManager.addDataSource(key, dataSource, poolSize); // } } \"]},\"264\":{\"h\":\"SpringBoot配置\"},\"265\":{\"h\":\"获取最新\",\"t\":[\"https://central.sonatype.com/ 搜索com.easy-query获取最新安装包\"]},\"266\":{\"h\":\"spring-boot工程\",\"t\":[\"<properties> <easy-query.version>latest-version</easy-query.version> </properties> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-springboot-starter</artifactId> <version>${easy-query.version}</version> </dependency> \",\"#配置文件 easy-query: enable: true database: mysql name-conversion: underlined delete-throw: true print-sql: true \",\"//依赖注入 @Autowired private EasyQueryClient easyQueryClient;//通过字符串属性方式来实现查询 //推荐 @Autowired private EasyQuery easyQuery;//对EasyQueryClient的增强通过lambda方式实现查询(推荐) //推荐 @Autowired private EasyProxyQuery easyProxyQuery;//对EasyQueryClient的增强通过apt代理模式实现强类型(推荐) \"]},\"267\":{\"h\":\"springboot多数据源\",\"t\":[\"因为easy-query默认仅支持单数据源如果需要支持多数据源可以通过手动构建EasyQuery的Bean实例\",\" @Bean(\\\"ds2\\\") public EasyQuery easyQuery(DataSource dataSource) { EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .replaceService(DataSourceUnitFactory.class, SpringDataSourceUnitFactory.class)//springboot下必须用来支持事务 .replaceService(ConnectionManager.class, SpringConnectionManager.class)//springboot下必须用来支持事务 .replaceService(NameConversion.class, new UnderlinedNameConversion()) .optionConfigure(builder -> { builder.setDeleteThrowError(easyQueryProperties.getDeleteThrow()); builder.setInsertStrategy(easyQueryProperties.getInsertStrategy()); builder.setUpdateStrategy(easyQueryProperties.getUpdateStrategy()); builder.setMaxShardingQueryLimit(easyQueryProperties.getMaxShardingQueryLimit()); builder.setExecutorMaximumPoolSize(easyQueryProperties.getExecutorMaximumPoolSize()); builder.setExecutorCorePoolSize(easyQueryProperties.getExecutorCorePoolSize()); builder.setThrowIfRouteNotMatch(easyQueryProperties.isThrowIfRouteNotMatch()); builder.setShardingExecuteTimeoutMillis(easyQueryProperties.getShardingExecuteTimeoutMillis()); builder.setQueryLargeColumn(easyQueryProperties.isQueryLargeColumn()); builder.setMaxShardingRouteCount(easyQueryProperties.getMaxShardingRouteCount()); builder.setExecutorQueueSize(easyQueryProperties.getExecutorQueueSize()); builder.setDefaultDataSourceName(easyQueryProperties.getDefaultDataSourceName()); builder.setDefaultDataSourceMergePoolSize(easyQueryProperties.getDefaultDataSourceMergePoolSize()); builder.setMultiConnWaitTimeoutMillis(easyQueryProperties.getMultiConnWaitTimeoutMillis()); builder.setWarningBusy(easyQueryProperties.isWarningBusy()); builder.setInsertBatchThreshold(easyQueryProperties.getInsertBatchThreshold()); builder.setUpdateBatchThreshold(easyQueryProperties.getUpdateBatchThreshold()); builder.setPrintSql(easyQueryProperties.isPrintSql()); builder.setStartTimeJob(easyQueryProperties.isStartTimeJob()); builder.setDefaultTrack(easyQueryProperties.isDefaultTrack()); builder.setRelationGroupSize(easyQueryProperties.getRelationGroupSize()); builder.setNoVersionError(easyQueryProperties.isNoVersionError()); }) .useDatabaseConfigure(new MySQLDatabaseConfiguration()) .build(); // QueryConfiguration queryConfiguration = easyQueryClient.getRuntimeContext().getQueryConfiguration(); // configuration.applyEncryptionStrategy(new DefaultAesEasyEncryptionStrategy()); // configuration.applyEncryptionStrategy(new Base64EncryptionStrategy()); // configuration.applyEncryptionStrategy(new MyEncryptionStrategy()); // configuration.applyEncryptionStrategy(new JavaEncryptionStrategy()); // configuration.applyLogicDeleteStrategy(new MyLogicDelStrategy()); // configuration.applyInterceptor(new MyEntityInterceptor()); // configuration.applyInterceptor(new Topic1Interceptor()); // configuration.applyInterceptor(new MyTenantInterceptor()); // // configuration.applyShardingInitializer(new FixShardingInitializer()); // configuration.applyShardingInitializer(new DataSourceAndTableShardingInitializer()); // configuration.applyShardingInitializer(new TopicShardingShardingInitializer()); // configuration.applyShardingInitializer(new TopicShardingTimeShardingInitializer()); // configuration.applyShardingInitializer(new DataSourceShardingInitializer()); // configuration.applyValueConverter(new EnumConverter()); // configuration.applyValueConverter(new JsonConverter()); // configuration.applyValueUpdateAtomicTrack(new IntegerNotValueUpdateAtomicTrack()); // configuration.applyColumnValueSQLConverter(new MySQLAesEncryptColumnValueSQLConverter()); // configuration.applyGeneratedKeySQLColumnGenerator(new MyDatabaseIncrementSQLColumnGenerator()); return new EasyQuery(easyQueryClient); } \"]},\"268\":{\"h\":\"SpringBoot 启动报错\",\"t\":[\"注意\",\"因为默认添加了track的aop如果启动报错那么就添加一下aop\",\"java.lang.IllegalStateException: Unable to load cache item at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:79) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:134) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:319) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:572) ~[spring-core-5.3.29.jar:5.3.29] at org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:419) ~[spring-core-5.3.29.jar:5.3.29] \",\"主要原因是\",\"缺少aop依赖\",\"aop组件版本不对\",\"解决办法添加对应的依赖\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> \"]},\"269\":{\"h\":\"多数据源\",\"t\":[\"默认仅支持单个数据源的处理\",\"用户也可以自行构建其他数据库或者其他数据源的easy-query\",\" @Configuration public class MyConfiguration { @Bean(\\\"myeq\\\") public EasyQuery easyQuery1(DataSource dataSource){//数据源是你要的即可 EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .replaceService(DataSourceUnitFactory.class, SpringDataSourceUnitFactory.class)//支持spring事务 .replaceService(ConnectionManager.class, SpringConnectionManager.class)//支持spring事务 .replaceService(NameConversion.class, UnderlinedNameConversion.class) .optionConfigure(builder -> { //配置和springboot的配置一样 builder.setDeleteThrowError(easyQueryProperties.getDeleteThrow()); builder.setInsertStrategy(easyQueryProperties.getInsertStrategy()); builder.setUpdateStrategy(easyQueryProperties.getUpdateStrategy()); builder.setMaxShardingQueryLimit(easyQueryProperties.getMaxShardingQueryLimit()); builder.setExecutorMaximumPoolSize(easyQueryProperties.getExecutorMaximumPoolSize()); builder.setExecutorCorePoolSize(easyQueryProperties.getExecutorCorePoolSize()); builder.setThrowIfRouteNotMatch(easyQueryProperties.isThrowIfRouteNotMatch()); builder.setShardingExecuteTimeoutMillis(easyQueryProperties.getShardingExecuteTimeoutMillis()); builder.setQueryLargeColumn(easyQueryProperties.isQueryLargeColumn()); builder.setMaxShardingRouteCount(easyQueryProperties.getMaxShardingRouteCount()); builder.setExecutorQueueSize(easyQueryProperties.getExecutorQueueSize()); builder.setDefaultDataSourceName(easyQueryProperties.getDefaultDataSourceName()); builder.setDefaultDataSourceMergePoolSize(easyQueryProperties.getDefaultDataSourceMergePoolSize()); builder.setMultiConnWaitTimeoutMillis(easyQueryProperties.getMultiConnWaitTimeoutMillis()); builder.setWarningBusy(easyQueryProperties.isWarningBusy()); builder.setInsertBatchThreshold(easyQueryProperties.getInsertBatchThreshold()); builder.setUpdateBatchThreshold(easyQueryProperties.getUpdateBatchThreshold()); builder.setPrintSql(easyQueryProperties.isPrintSql()); builder.setStartTimeJob(easyQueryProperties.isStartTimeJob()); builder.setDefaultTrack(easyQueryProperties.isDefaultTrack()); builder.setRelationGroupSize(easyQueryProperties.getRelationGroupSize()); builder.setNoVersionError(easyQueryProperties.isNoVersionError()); }) .useDatabaseConfigure(new OracleDatabaseConfiguration()) .build(); return new DefaultEasyQuery(easyQueryClient); } } \"]},\"270\":{\"h\":\"包依赖关系\"},\"271\":{\"h\":\"easy-trans扩展\",\"t\":[\"easy-query提供了很多丰富的功能,但是有些功能可以通过其他框架来实现,本章节就提供了一个解决方案,通过easy-query+easy-trans来实现数据字典的自动获取\",\"demo地址\"]},\"272\":{\"h\":\"新建一个springboot项目\",\"t\":[\"添加easy-trans依赖\",\"<dependency> <groupId>com.fhs-opensource</groupId> <artifactId>easy-trans-spring-boot-starter</artifactId> <version>2.2.7</version> </dependency> <dependency> <groupId>com.fhs-opensource</groupId> <artifactId>easy-trans-service</artifactId> <version>2.2.7</version> </dependency> \",\"所有的依赖是\",\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!--druid依赖--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.15</version> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.31</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-springboot-starter</artifactId> <version>1.4.27</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.18</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>com.fhs-opensource</groupId> <artifactId>easy-trans-spring-boot-starter</artifactId> <version>2.2.7</version> </dependency> <dependency> <groupId>com.fhs-opensource</groupId> <artifactId>easy-trans-service</artifactId> <version>2.2.7</version> </dependency> </dependencies> \"]},\"273\":{\"h\":\"配置bean\",\"t\":[\"因为easy-trans的限制(静态方法)所以这边需要添加一个特殊的注解来标识主键\",\"@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.FIELD}) public @interface Id4Trans { } \",\"添加驱动\",\"@Slf4j public class EasyQueryTransDiver implements SimpleTransService.SimpleTransDiver { private EasyQueryClient easyQueryClient; public EasyQueryTransDiver(EasyQueryClient easyQueryClient){ this.easyQueryClient = easyQueryClient; } @Override public List<? extends VO> findByIds(List<? extends Serializable> ids, Class<? extends VO> targetClass, String uniqueField, Set<String> targetFields) { return easyQueryClient.queryable(targetClass) .whereByIds(ids) .select(o->{ Selector selector = o.getSelector(); for (String targetField : targetFields) { selector.column(o.getTable(),targetField); } }) .toList(); } @Override public VO findById(Serializable id, Class<? extends VO> targetClass, String uniqueField, Set<String> targetFields) { VO vo = easyQueryClient.queryable(targetClass) .whereById(id) .select(o -> { Selector selector = o.getSelector(); for (String targetField : targetFields) { selector.column(o.getTable(), targetField); } }) .firstOrNull(); if(vo==null){ log.error(targetClass + \\\" 根据id:\\\" + id + \\\"没有查询到数据\\\"); } return vo; } @Override public List<? extends VO> findByIds(List<? extends Serializable> ids, Class<? extends VO> targetClass, String uniqueField) { return easyQueryClient.queryable(targetClass) .whereByIds(ids) .toList(); } @Override public VO findById(Serializable id, Class<? extends VO> targetClass, String uniqueField) { VO vo = easyQueryClient.queryable(targetClass) .whereById(id).firstOrNull(); if(vo==null){ log.error(targetClass + \\\" 根据id:\\\" + id + \\\"没有查询到数据\\\"); } return vo; } } \",\"添加配置文件\",\"@Slf4j @Configuration public class EasyTransEasyQueryConfig implements InitializingBean { @Autowired private EasyQueryClient easyQueryClient; @Bean public EasyQueryTransDiver easyQueryTransDiver() { EasyQueryTransDiver result = new EasyQueryTransDiver(easyQueryClient); return result; } @Override public void afterPropertiesSet() throws Exception { ReflectUtils.ID_ANNO.add(Id4Trans.class); } } \",\"到这边位我们已经适配好了\"]},\"274\":{\"h\":\"数据库脚本\",\"t\":[\"CREATE DATABASE IF NOT EXISTS easy_trans_demo CHARACTER SET 'utf8mb4'; USE easy_trans_demo; create table help_code ( code varchar(32) not null comment 'code'primary key, type int not null comment '类型', name varchar(50) not null comment '中文值' )comment '字典表'; insert into help_code values('1',1,'男'); insert into help_code values('2',1,'女'); insert into help_code values('3',2,'管理员'); insert into help_code values('4',2,'普通用户'); create table sys_user ( id varchar(32) not null comment 'id'primary key, name varchar(50) not null comment '姓名', sex varchar(50) not null comment '性别', type varchar(50) not null comment '用户类型' )comment '用户表'; insert into sys_user values('1','小明','2','3'); insert into sys_user values('2','小刚','1','4'); \"]},\"275\":{\"h\":\"创建对象\",\"t\":[\" @Table(\\\"help_code\\\") @Data public class HelpCode { @Id4Trans @Column(primaryKey = true) private String code; private Integer type; private String name; } @Table(\\\"sys_user\\\") @Data public class SysUser implements TransPojo { @Id4Trans @Column(primaryKey = true) private String id; private String name; @Trans(type = TransType.DICTIONARY,key = \\\"1\\\",ref = \\\"sexName\\\")//1就是help_code的type=1 private String sex; @ColumnIgnore private String sexName; @Trans(type = TransType.DICTIONARY,key = \\\"2\\\",ref = \\\"typeName\\\")//2就是help_code的type=2 private String type; @ColumnIgnore private String typeName; } \"]},\"276\":{\"h\":\"添加翻译缓存服务\",\"t\":[\"@Component public class EasyTransRunner implements ApplicationRunner { @Autowired //注入字典翻译服务 private DictionaryTransService dictionaryTransService; @Autowired private EasyQuery easyQuery; @Override public void run(ApplicationArguments args) throws Exception { List<HelpCode> list = easyQuery.queryable(HelpCode.class) .toList(); Map<Integer, List<HelpCode>> collect = list.stream().collect(groupingBy(o -> o.getType())); for (Map.Entry<Integer, List<HelpCode>> integerListEntry : collect.entrySet()) { HashMap<String, String> transMap = new HashMap<>(); for (HelpCode helpCode : integerListEntry.getValue()) { transMap.put(helpCode.getCode(),helpCode.getName()); } dictionaryTransService.refreshCache(integerListEntry.getKey().toString(),transMap); } } } \"]},\"277\":{\"h\":\"测试添加控制器\",\"t\":[\" @RestController @RequestMapping(\\\"/my\\\") @RequiredArgsConstructor(onConstructor_ = @Autowired) public class MyController { private final EasyQuery easyQuery; @GetMapping(\\\"/query\\\") public Object query() { List<SysUser> list = easyQuery.queryable(SysUser.class) .toList(); return list; } } \",\"输出\",\"[{\\\"id\\\":\\\"1\\\",\\\"name\\\":\\\"小明\\\",\\\"sex\\\":\\\"2\\\",\\\"sexName\\\":\\\"女\\\",\\\"type\\\":\\\"3\\\",\\\"typeName\\\":\\\"管理员\\\"},{\\\"id\\\":\\\"2\\\",\\\"name\\\":\\\"小刚\\\",\\\"sex\\\":\\\"1\\\",\\\"sexName\\\":\\\"男\\\",\\\"type\\\":\\\"4\\\",\\\"typeName\\\":\\\"普通用户\\\"}] \"]},\"278\":{\"h\":\"kotlin代理模式\",\"t\":[\"easy-query的代理模式通过apt生成动态代码执行数据库操作,并且框架提供了自动apt编译插件修改entity数据库对象无需build也会自动修改对应的apt文件,进首页qq群后或者后续等待作者发布....\"]},\"279\":{\"h\":\"新建项目\"},\"280\":{\"h\":\"添加依赖\",\"t\":[\" <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>1.4.24</version> </dependency> \"]},\"281\":{\"h\":\"添加kapt设置\",\"t\":[\"将下面的代码插入到plugins下的plugin下的executions\",\"<execution> <id>kapt</id> <goals> <goal>kapt</goal> </goals> <configuration> <annotationProcessorPaths> <path> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>1.4.24</version> </path> </annotationProcessorPaths> </configuration> </execution> \"]},\"282\":{\"h\":\"新增数据库对象\",\"t\":[\"data class\",\" @Table(\\\"t_topic\\\") @EntityProxy class Topic{ @Column(primaryKey = true) var id:String?=null; var stars:Int?=null; var stars2:Int?=null; var stars3:Int?=null; var stars4:Int?=null; var stars6:Int?=null; } \"]},\"283\":{\"h\":\"编译\",\"t\":[\" 生成代码 \"]},\"284\":{\"h\":\"运行\",\"t\":[\"import com.easy.query.api.proxy.client.DefaultEasyProxyQuery import com.easy.query.core.bootstrapper.EasyQueryBootstrapper import com.easy.query.core.logging.LogFactory import com.easy.query.mysql.config.MySQLDatabaseConfiguration import com.zaxxer.hikari.HikariDataSource import entity.proxy.TopicProxy fun main(args: Array<String>) { println(\\\"Hello World!\\\") var hikariDataSource = HikariDataSource() hikariDataSource.jdbcUrl = \\\"jdbc:mysql://127.0.0.1:3306/easy-query-test?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\"; hikariDataSource.username = \\\"root\\\"; hikariDataSource.password = \\\"root\\\"; hikariDataSource.driverClassName = \\\"com.mysql.cj.jdbc.Driver\\\"; hikariDataSource.maximumPoolSize = 20; LogFactory.useStdOutLogging(); var easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(hikariDataSource) .useDatabaseConfigure(MySQLDatabaseConfiguration()) .build() var easyProxyQuery = DefaultEasyProxyQuery(easyQueryClient) var topic = TopicProxy.createTable() var toList2 = easyProxyQuery.queryable(topic) .where { it.eq(topic.id(), \\\"1\\\") .eq(topic.stars3(), 1) } .toList() } Connected to the target VM, address: '127.0.0.1:58734', transport: 'socket' Hello World! Program arguments: SLF4J: Failed to load class \\\"org.slf4j.impl.StaticLoggerBinder\\\". SLF4J: Defaulting to no-operation (NOP) logger implementation SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. Logging initialized using 'class com.easy.query.core.logging.stdout.StdOutImpl' adapter. ==> Preparing: SELECT `id`,`stars`,`stars2`,`stars3`,`stars4`,`stars6` FROM `t_topic` WHERE `id` = ? AND `stars3` = ? ==> Parameters: 1(String),1(Integer) SELECT `id`,`stars`,`stars2`,`stars3`,`stars4`,`stars6` FROM `t_topic` WHERE `id` = ? AND `stars3` = ? java.sql.SQLSyntaxErrorException: Unknown column 'stars2' in 'field list' \",\"运行只要有对应的sql打印就说明已经ok\",\"注意点及说明!!!\",\"如果无法提示有对应的TopicProxy那么请刷新下maven\"]},\"285\":{\"h\":\"错误\",\"t\":[\"注意点及说明!!!\",\"如果出现错误类文件具有错误的版本 55.0, 应为 52.0请修改项目jdk和pom的一致\"]},\"286\":{\"h\":\"完整的pom\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <artifactId>untitled2</artifactId> <groupId>com.xjm</groupId> <version>1.0-SNAPSHOT</version> <packaging>jar</packaging> <name>consoleApp</name> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <kotlin.code.style>official</kotlin.code.style> <kotlin.compiler.jvmTarget>11</kotlin.compiler.jvmTarget> </properties> <repositories> <repository> <id>mavenCentral</id> <url>https://repo1.maven.org/maven2/</url> </repository> </repositories> <build> <sourceDirectory>src/main/kotlin</sourceDirectory> <testSourceDirectory>src/test/kotlin</testSourceDirectory> <plugins> <plugin> <groupId>org.jetbrains.kotlin</groupId> <artifactId>kotlin-maven-plugin</artifactId> <version>1.8.0</version> <executions> <execution> <id>kapt</id> <goals> <goal>kapt</goal> </goals> <configuration> <annotationProcessorPaths> <path> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>1.4.24</version> </path> </annotationProcessorPaths> </configuration> </execution> <execution> <id>compile</id> <phase>compile</phase> <goals> <goal>compile</goal> </goals> </execution> <execution> <id>test-compile</id> <phase>test-compile</phase> <goals> <goal>test-compile</goal> </goals> </execution> </executions> </plugin> <plugin> <artifactId>maven-surefire-plugin</artifactId> <version>2.22.2</version> </plugin> <plugin> <artifactId>maven-failsafe-plugin</artifactId> <version>2.22.2</version> </plugin> <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>exec-maven-plugin</artifactId> <version>1.6.0</version> <configuration> <mainClass>MainKt</mainClass> </configuration> </plugin> </plugins> </build> <dependencies> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>com.zaxxer</groupId> <artifactId>HikariCP</artifactId> <version>3.3.1</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-mysql</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-processor</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>com.easy-query</groupId> <artifactId>sql-api-proxy</artifactId> <version>1.4.24</version> </dependency> <dependency> <groupId>org.jetbrains.kotlin</groupId> <artifactId>kotlin-test-junit5</artifactId> <version>1.8.0</version> <scope>test</scope> </dependency> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.8.2</version> <scope>test</scope> </dependency> <dependency> <groupId>org.jetbrains.kotlin</groupId> <artifactId>kotlin-stdlib-jdk8</artifactId> <version>1.8.0</version> </dependency> </dependencies> </project> \"]},\"287\":{\"h\":\"日志配置\",\"t\":[\"easy-query默认适配slf4j日志接口,如果您有自定义日志接口可以通过自行实现\"]},\"288\":{\"h\":\"springboot\",\"t\":[\" //新建一个日志打印的实现继承com.easy.query.core.logging.Log public class MySysOutLogImpl implements Log { /** * 必须要实现一个构造函数,传入单个字符串string参数 * @param clazz */ public MySysOutLogImpl(String clazz){ } @Override public boolean isDebugEnabled() { return true; } @Override public boolean isTraceEnabled() { return true; } @Override public void error(String s, Throwable e) { System.out.println(\\\"----开始----\\\"); System.err.println(s); e.printStackTrace(System.err); System.out.println(\\\"----结束----\\\"); } @Override public void error(String s) { System.out.println(\\\"----开始----\\\"); System.err.println(s); System.out.println(\\\"----结束----\\\"); } @Override public void debug(String s) { System.out.println(\\\"----开始----\\\"); System.out.println(s); System.out.println(\\\"----结束----\\\"); } @Override public void trace(String s) { System.out.println(\\\"----开始----\\\"); System.out.println(s); System.out.println(\\\"----结束----\\\"); } @Override public void warn(String s) { System.out.println(\\\"----开始----\\\"); System.out.println(s); System.out.println(\\\"----结束----\\\"); } } \",\" ----开始---- ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`id` = ? LIMIT 1 ----结束---- ----开始---- ==> Parameters: true(Boolean),123(String) ----结束---- ----开始---- <== Time Elapsed: 12(ms) ----结束---- ----开始---- <== Total: 0 ----结束---- \"]},\"289\":{\"h\":\"替换框架行为❗️❗️❗️\",\"t\":[\"easy-query默认内部提供了一个简易的依赖注入容器,非常轻量且仅支持构造函数注入,不支持循环依赖,但是提供了非常完善的替换框架内部行为的方式,用户可以替换掉框架内部的所有接口,完全可以自行自定义实现，\"]},\"290\":{\"h\":\"可以被替换的接口\",\"t\":[\"框架内部使用量大量的依赖注入,并且使用接口依赖模式开发,所以很轻松可以替换掉,那么我们可以替换掉哪一些呢\",\"说明!!!\",\"具体代码以最新版源码为准,您如果发现有不一样的也可以提交pr来帮我们修复文档\",\" private void defaultConfiguration() { replaceService(EasyQueryDataSource.class, DefaultEasyQueryDataSource.class) .replaceService(Dialect.class, DefaultDialect.class) .replaceService(NameConversion.class, UnderlinedNameConversion.class) .replaceService(QueryConfiguration.class) .replaceService(EntityMetadataManager.class, DefaultEntityMetadataManager.class) .replaceService(SQLExpressionInvokeFactory.class, DefaultSQLExpressionInvokeFactory.class) .replaceService(ExpressionBuilderFactory.class, DefaultEasyExpressionBuilderFactory.class) .replaceService(SQLClientApiFactory.class, DefaultSQLClientApiFactory.class) .replaceService(TrackManager.class, DefaultTrackManager.class) .replaceService(EasyPageResultProvider.class, DefaultEasyPageResultProvider.class) .replaceService(EasyPrepareParser.class, DefaultEasyPrepareParser.class) .replaceService(ConnectionManager.class, DefaultConnectionManager.class) .replaceService(DataSourceRouteManager.class, DefaultDataSourceRouteManager.class) .replaceService(DataSourceRouter.class, ShardingDataSourceRouter.class) .replaceService(DataSourceRouteEngine.class, DefaultDataSourceRouteEngine.class) .replaceService(TableRouteManager.class, DefaultTableRouteManager.class) .replaceService(TableRouter.class, ShardingTableRouter.class) .replaceService(TableRouteEngine.class, DefaultTableRouteEngine.class) .replaceService(RouteContextFactory.class, DefaultRouteContextFactory.class) .replaceService(RewriteContextFactory.class, DefaultRewriteContextFactory.class) .replaceService(ExecutionContextFactory.class, DefaultExecutionContextFactory.class) .replaceService(EntityExpressionExecutor.class, DefaultEntityExpressionExecutor.class) .replaceService(ShardingExecutorService.class, DefaultEasyShardingExecutorService.class) .replaceService(ExpressionFactory.class, DefaultEasyExpressionFactory.class) .replaceService(ShardingComparer.class, JavaLanguageShardingComparer.class) .replaceService(JdbcTypeHandlerManager.class, EasyJdbcTypeHandlerManager.class) .replaceService(QueryRuntimeContext.class, DefaultEasyQueryRuntimeContext.class) .replaceService(EasyDataSourceConnectionFactory.class, DefaultEasyDataSourceConnectionFactory.class) .replaceService(EasyConnectionFactory.class, DefaultEasyConnectionFactory.class) .replaceService(DataSourceManager.class, DefaultDataSourceManager.class) .replaceService(ShardingQueryCountManager.class, DefaultShardingQueryCountManager.class) .replaceService(ColumnFunctionFactory.class, DefaultColumnFunctionFactory.class) .replaceService(RouteDescriptorFactory.class, DefaultRouteDescriptorFactor.class) .replaceService(DataSourceUnitFactory.class, DefaultDataSourceUnitFactory.class) .replaceService(SQLSegmentFactory.class, DefaultSQLSegmentFactory.class) .replaceService(EasyTimeJobManager.class, DefaultEasyTimeJobManager.class) .replaceService(IncludeProcessorFactory.class, EasyIncludeProcessorFactory.class) .replaceService(IncludeParserEngine.class, DefaultIncludeParserEngine.class) .replaceService(EasyQueryClient.class, DefaultEasyQueryClient.class); } \"]},\"291\":{\"h\":\"自定义NameConversion\",\"t\":[\"这边以NameConversion作为例子来演示我们如何替换掉默认的框架行为\"]},\"292\":{\"h\":\"springboot环境\",\"t\":[\"默认springboot-starter框架实现了一个空的StarterConfigurer，所以我们可以通过@Primary来实现替换\",\"//新建一个类来实现接口NameConversion public class MyNameConversion implements NameConversion { @Override public String convert(String name) { return \\\"[\\\"+name+\\\"]\\\"; } } //实现一个启动配置 public class MyStarterConfigurer implements StarterConfigurer { @Override public void configure(ServiceCollection services) { //addService如果不存在就添加存在就替换 services.addService(NameConversion.class, MyNameConversion.class); } } @Configuration public class MyConfiguration { @Bean(\\\"MyStarterConfigurer\\\") @Primary public StarterConfigurer starterConfigurer(){ return new MyStarterConfigurer(); } } \"]},\"293\":{\"h\":\"非springboot环境\",\"t\":[\"通过默认的bootstrapper的方法replaceService来实现替换\",\"//新建一个类来实现接口NameConversion public class MyNameConversion implements NameConversion { @Override public String convert(String name) { return \\\"[\\\"+name+\\\"]\\\"; } } EasyQueryClient easyQueryClient = EasyQueryBootstrapper.defaultBuilderConfiguration() .setDefaultDataSource(dataSource) .optionConfigure(op -> { op.setDeleteThrowError(true);//设置不允许物理删除 op.setPrintSql(true);//设置以log.info模式打印执行sql信息 ......//此处用于配置系统默认配置选项 }) .useDatabaseConfigure(new MySQLDatabaseConfiguration())//设置方言语法等为mysql的 .replaceService(NameConversion.class, MyNameConversion.class)//放在最后面可以替换掉前面所有方法 .build(); \"]},\"294\":{\"h\":\"对象数据库值转换\",\"t\":[\"easy-query默认提供了数据库值对象转换功能,可以实现数据库对象属性枚举转换的功能或者对象string转json对象的功能\",\"注意: 如果需要支持差异更新需要实现重写hashcode和equalsEnum除外\",\"这边提供两种解决方案\",\"如果你希望数据库对象和数据库类型一致,但是还希望用枚举转换的或者其他属性转换的\",\"数据库对象属性本身就是枚举或者对象的\"]},\"295\":{\"h\":\"api\",\"t\":[\"接口\",\"功能\",\"ValueConverter\",\"将数据库和对象值进行互相转换的接口\",\"<TProperty>\",\"对象属性类型\",\"<TProvider>\",\"数据库对应的java类型\",\"方法\",\"功能\",\"serialize\",\"将实体对象转成数据库值\",\"deserialize\",\"将数据库的值转成对象值\"]},\"296\":{\"h\":\"springboot\",\"t\":[\"@Component将对应的ValueConverter注入即可\"]},\"297\":{\"h\":\"控制台\",\"t\":[\"QueryRuntimeContext runtimeContext = easyQuery.getRuntimeContext(); QueryConfiguration configuration = runtimeContext.getQueryConfiguration(); configuration.applyValueConverter(new JsonConverter()); \"]},\"298\":{\"h\":\"枚举值\",\"t\":[\"数据库对象很多时候我们可能希望将枚举值设计为java枚举对象而不是integer,所以这边先用枚举来做一个测试\"]},\"299\":{\"h\":\"数据库对象属性枚举值\",\"t\":[\"//枚举接口 public interface IEnum<TEnum extends IEnum<TEnum>> { Integer getCode(); TEnum valueOf(Integer enumValue); } //获取枚举值 public class EnumDeserializer { public static <T extends IEnum<T>> T deserialize(Class<T> enumClass, Integer integer) { T[] enumConstants = enumClass.getEnumConstants(); if(enumConstants.length>0){ return enumConstants[0].valueOf(integer); } throw new IllegalArgumentException(\\\"Invalid integer value for enum: \\\" + integer); } } //枚举转换器 public class EnumConverter implements ValueConverter<IEnum<?>,Integer> { @Override public Integer serialize(IEnum<?> anEnum) { return anEnum.getCode(); } @Override public IEnum<?> deserialize(Class<IEnum<?>> propertyClass,Integer integer) { return EnumDeserializer.deserialize(EasyObjectUtil.typeCast(propertyClass),integer); } } //数据库枚举 public enum TopicTypeEnum implements IEnum<TopicTypeEnum> { STUDENT(1), TEACHER(3), CLASSER(9); private final Integer code; TopicTypeEnum(Integer code){ this.code = code; } @Override public Integer getCode() { return code; } @Override public TopicTypeEnum valueOf(Integer enumValue) { switch (enumValue){ case 1:return TopicTypeEnum.STUDENT; case 3:return TopicTypeEnum.TEACHER; case 9:return TopicTypeEnum.CLASSER; } throw new UnsupportedOperationException(); } } //数据库插入对象 @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicTypeTest1 { @Column(primaryKey = true) private String id; private Integer stars; private String title; @Column(conversion = EnumConverter.class) private TopicTypeEnum topicType; private LocalDateTime createTime; } TopicTypeTest1 topicType1 = new TopicTypeTest1(); topicType1.setId(\\\"123\\\"); topicType1.setStars(123); topicType1.setTitle(\\\"title123\\\"); topicType1.setTopicType(TopicTypeEnum.CLASSER); topicType1.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType1).executeRows(); ==> Preparing: INSERT INTO `t_topic_type` (`id`,`stars`,`title`,`topic_type`,`create_time`) VALUES (?,?,?,?,?) ==> Parameters: 123(String),123(Integer),title123(String),9(Integer),2023-05-23T22:12:12.703(LocalDateTime) <== Total: 1 TopicTypeTest1 topicTypeVO = easyQuery.queryable(TopicTypeTest1.class) .whereById(\\\"123\\\") .firstOrNull(); System.out.println(topicTypeVO); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Time Elapsed: 4(ms) <== Total: 1 TopicTypeTest1(id=123, stars=123, title=title123, topicType=CLASSER, createTime=2023-05-23T22:13:32) \"]},\"300\":{\"h\":\"数据库对象属性integer值\",\"t\":[\"有些用户喜欢数据库对象是和数据库列类型一一对应的,那么可以采用Integer属性，对应的VO或者BO等对象上采用枚举也是可以的\",\" @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicType { @Column(primaryKey = true) private String id; private Integer stars; private String title; private Integer topicType; private LocalDateTime createTime; } //VO对象 @Data @ToString public class TopicTypeVO { private String id; private Integer stars; private String title; @Column(value = \\\"topic_type\\\",conversion = EnumConverter.class) private TopicTypeEnum topicType1; private LocalDateTime createTime; } TopicTypeVO topicTypeVO = easyQuery.queryable(TopicType.class) .whereById(\\\"123\\\") .select(TopicTypeVO.class) .firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 123(String) <== Time Elapsed: 3(ms) <== Total: 1 TopicTypeVO(id=123, stars=123, title=title123, topicType1=TEACHER, createTime=2023-05-23T22:16:45) \"]},\"301\":{\"h\":\"json对象\",\"t\":[\"注意\",\"因为update会使用track追踪模式更新所以这边json对象必须要重写equals和hashcode\",\"首先我们引入fastjson2\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>2.0.26</version> </dependency> \",\" @Data @Table(\\\"t_topic_type\\\") @ToString public class TopicTypeJson { @Column(primaryKey = true) private String id; private Integer stars; @Column(conversion = JsonConverter.class) private TopicTypeJsonValue title; private Integer topicType; private LocalDateTime createTime; } @Data @EqualsAndHashCode public class TopicTypeJsonValue { private String name; private Integer age; } TopicTypeJson topicType1 = new TopicTypeJson(); topicType1.setId(\\\"1231\\\"); topicType1.setStars(123); TopicTypeJsonValue topicTypeJsonValue = new TopicTypeJsonValue(); topicTypeJsonValue.setName(\\\"123\\\"); topicTypeJsonValue.setAge(456); topicType1.setTitle(topicTypeJsonValue);//直接插入对象实体 topicType1.setTopicType(TopicTypeEnum.CLASSER.getCode()); topicType1.setCreateTime(LocalDateTime.now()); long l = easyQuery.insertable(topicType1).executeRows(); ==> Preparing: INSERT INTO `t_topic_type` (`id`,`stars`,`title`,`topic_type`,`create_time`) VALUES (?,?,?,?,?) ==> Parameters: 1231(String),123(Integer),{\\\"age\\\":456,\\\"name\\\":\\\"123\\\"}(String),9(Integer),2023-05-23T22:40:18.698(LocalDateTime) <== Total: 1 TopicTypeJson topicTypeVO = easyQuery.queryable(TopicTypeJson.class) .whereById(\\\"1231\\\") .firstOrNull(); System.out.println(topicTypeVO); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`topic_type`,t.`create_time` FROM `t_topic_type` t WHERE t.`id` = ? LIMIT 1 ==> Parameters: 1231(String) <== Time Elapsed: 2(ms) <== Total: 1 TopicTypeJson(id=1231, stars=123, title=TopicTypeJsonValue(name=123, age=456), topicType=9, createTime=2023-05-23T22:40:19) \",\"这样我们就实现了对应的值类型转换和枚举的转换\"]},\"302\":{\"h\":\"Foo feature\"},\"303\":{\"h\":\"Introduction\",\"t\":[\"We support foo feature, ...\"]},\"304\":{\"h\":\"Details\",\"t\":[\"ray\",\"...\"]},\"305\":{\"h\":\"Ray\",\"t\":[\"Feature details here.\"]},\"306\":{\"h\":\"查询\",\"t\":[\"easy-query在java的静态语言特性下，参考众多C# ORM(efcore,freesql,sqlsugar...),和java ORM(mybatis-plus,beetlsql...)实现了支持单表多表，复杂，嵌套的sql表达式，并且拥有强类型语法提示，可以帮助不想写sql的用户，有洁癖的用户多一个选择.\"]},\"307\":{\"h\":\"单表查询\"},\"308\":{\"h\":\"多表\"},\"309\":{\"h\":\"嵌套多表\",\"t\":[\"Queryable<Topic> sql = easyQuery .queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"3\\\")); //SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM t_topic t WHERE t.`id` = ? List<BlogEntity> topics = easyQuery .queryable(BlogEntity.class) .leftJoin(sql,(a,b)->a.eq(b,BlogEntity::getId,Topic::getId)) .where(o -> o.isNotNull(BlogEntity::getId).eq(BlogEntity::getId,\\\"3\\\")) .toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM t_blog t LEFT JOIN (SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM t_topic t WHERE t.`id` = ?) t1 ON t.`id` = t1.`id` WHERE t.`id` IS NOT NULL AND t.`id` = ? ==> Parameters: 3(String),3(String) <== Total: 1 \"]},\"310\":{\"h\":\"API\",\"t\":[\"方法\",\"参数\",\"返回\",\"描述\",\"toSql\",\"string\",\"返回当前表达式即将执行的sql语句\",\"any\",\"boolean\",\"返回当前表达式是在数据库中是否存在匹配项,存在至少一条返回true,无法匹配任意一条在返回false\",\"all\",\"lambda\",\"boolean\",\"返回当前表达式是在数据库中是否所有的都匹配,参数为符合条件的表达式\",\"count\",\"long\",\"返回当前表达式在数据库中命中的条数有多少,没有匹配数返回0\",\"firstOrNull\",\"TEntity\",\"返回当前表达式在数据库中命中的第一条,如果没命中就返回null\",\"toList\",\"List<TEntity>\",\"返回当前表达式在数据库中命中的所有结果,如果没有结果则返回空集合\",\"where\",\"lambda\",\"this\",\"对当前表达式进行条件追加\",\"limit\",\"1.offset,2.rows\",\"this\",\"对当前表达式进行查询结果返回和偏移进行限制，offset表示跳过多少条，limit表示获取多少条\",\"orderBy\",\"lambda\",\"this\",\"对当前表达式进行查询结果进行排序\",\"sumBigDecimalOrDefault\",\"lambda,默认值\",\"BigDecimal\",\"用于对lambda列进行求和,返回结果BigDecimal防止结果溢出\",\"sumOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行求和\",\"maxOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行最大值查询\",\"minOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行最小值查询\",\"avgOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行平均值值查询\",\"lenOrDefault\",\"lambda,默认值\",\"列类型\",\"用于对lambda列进行长度查询\",\"whereById\",\"object 主键\",\"this\",\"添加单主键条件\",\"whereObject\",\"object 查询对象\",\"this\",\"添加对象查询条件\",\"groupBy\",\"lambda\",\"this\",\"查询分组\",\"having\",\"lambda\",\"this\",\"查询对分组结果进行筛选\",\"orderByDynamic\",\"EasyDynamicOrderByConfiguration\",\"this\",\"添加查询动态排序\",\"distinct\",\"this\",\"对查询结果进行去重\",\"toPageResult\",\"long,long\",\"PageResult\",\"对结果进行先count，然后limit+toList查询结果并且封装成PageResult返回\",\"toShardingPageResult\",\"long,long,sequenceCountLine\",\"PageResult\",\"支持高性能分片下的分页查询,如果第三个参数为null那么和toPageResult行为一致\",\"leftJoin\",\"lambda\",\"this\",\"左链接\",\"rightJoin\",\"lambda\",\"this\",\"右链接\",\"innerJoin\",\"lambda\",\"this\",\"内链接\",\"disableLogicDelete\",\"this\",\"本次查询不启用逻辑删除\",\"enableLogicDelete\",\"this\",\"本次查询启用逻辑删除\",\"noInterceptor\",\"this\",\"本次查询不使用拦截器\",\"noInterceptor\",\"name\",\"this\",\"不使用指定name的拦截器\",\"useInterceptor\",\"this\",\"本次查询使用拦截器\",\"useInterceptor\",\"name\",\"this\",\"使用指定name的拦截器\",\"asTracking\",\"this\",\"本次查询使用追踪，需要开启追踪后才有效\",\"asNoTracking\",\"this\",\"本次查询不使用追踪,默认就是不使用追踪\",\"asTable\",\"tableName\",\"this\",\"指定本次查询最近的表的表名,如果最近的表是匿名表则设置表别名alias\",\"asTable\",\"lambda\",\"this\",\"指定本次查询最近的表的表名,如果最近的表是匿名表则设置表别名alias,表达式入参为现有表名返回设置的表名\",\"union\",\"queryable\",\"this\",\"union 查询\",\"unionAll\",\"queryable\",\"this\",\"union all查询\"]},\"311\":{\"h\":\"基本类型查询 String/Integer...\",\"t\":[\"easy-query提供了针对基本类型的查询功能,如果您只需要返回基本类型那么不需要额外定义复杂的对象,并且支持map等数据结构\"]},\"312\":{\"h\":\"String\"},\"313\":{\"h\":\"Integer\"},\"314\":{\"h\":\"Map\",\"t\":[\"返回结果为Map<String,Object> ,默认Key忽略大小写(Locale.ENGLISH)\"]},\"315\":{\"h\":\"支持的类型\",\"t\":[\"类型\",\"是否支持\",\"String\",\"✅\",\"BigDecimal\",\"✅\",\"Boolean\",\"✅\",\"Byte[]\",\"✅\",\"Byte\",\"✅\",\"Double\",\"✅\",\"Float\",\"✅\",\"Integer\",\"✅\",\"LocalDate\",\"✅\",\"LocalDateTime\",\"✅\",\"LocalTime\",\"✅\",\"Long\",\"✅\",\"Map\",\"✅\",\"Short\",\"✅\",\"java.sql.Date\",\"✅\",\"Time\",\"✅\",\"Timestamp\",\"✅\",\"java.util.Date\",\"✅\"]},\"316\":{\"h\":\"CaseWhen\",\"t\":[\"easy-query可以自定义实现case when,其中框架默认提供多种实现\",\"方法\",\"描述\",\"用法\",\"SQLClientFunc\",\"支持EasyQueryClient表达式api\",\"SQLClientFunc.caseWhenBuilder(t).caseWhen(f -> f.eq(\\\"title\\\", \\\"123\\\"), \\\"111\\\").caseWhen(f -> f.eq(\\\"title\\\", \\\"456\\\"), \\\"222\\\").elseEnd(\\\"2223\\\")\",\"SQL4JFunc\",\"支持EasyQuery表达式api\",\"SQL4JFunc.caseWhenBuilder(o).caseWhen(f -> f.eq(Topic::getTitle, \\\"123\\\"), \\\"111\\\").caseWhen(f -> f.eq(Topic::getTitle, \\\"456\\\"), \\\"222\\\").elseEnd(\\\"2223\\\")\",\"SQL4KtFunc\",\"支持EasyKtQuery表达式api\",\"SQL4KtFunc.caseWhenBuilder(selector).caseWhen(f -> f.eq(t.title(), \\\"123\\\"), \\\"111\\\").caseWhen(f -> f.eq(t.title(), \\\"456\\\"), \\\"222\\\").elseEnd(\\\"2223\\\")\",\"SQLProxyFunc\",\"支持EasyProxyQuery表达式api\",\"SQLProxyFunc.caseWhenBuilder(selector).caseWhen(f -> f.eq(t.title(), \\\"123\\\"), \\\"111\\\").caseWhen(f -> f.eq(t.title(), \\\"456\\\"), \\\"222\\\").elseEnd(\\\"2223\\\")\"]},\"317\":{\"h\":\"简单查询\",\"t\":[\"//proxy代理模式 List<Topic> list = easyProxyQuery.queryable(TopicProxy.DEFAULT) .where((filter, t) -> filter.like(t.title(), \\\"someTitle\\\")) .select(TopicProxy.DEFAULT, (selector, t) -> selector .sqlSegmentAs( SQLProxyFunc.caseWhenBuilder(selector) .caseWhen(f -> f.eq(t.title(), \\\"123\\\"), \\\"111\\\") .caseWhen(f -> f.eq(t.title(), \\\"456\\\"), \\\"222\\\") .elseEnd(\\\"222\\\") , TopicProxy::title) .column(t.id()) ).toList(); ==> Preparing: SELECT CASE WHEN t.`title` = ? THEN ? WHEN t.`title` = ? THEN ? ELSE ? END AS `title`,t.`id` FROM `t_topic` t WHERE t.`title` LIKE ? ==> Parameters: 123(String),111(String),456(String),222(String),222(String),%someTitle%(String) <== Time Elapsed: 3(ms) <== Total: 0 //lambda强类型模式 List<Topic> list = easyQuery.queryable(Topic.class) .where(t -> t.like(Topic::getTitle, \\\"someTitle\\\")) .select(Topic.class, t -> t .sqlSegmentAs( SQL4JFunc.caseWhenBuilder(t) .caseWhen(f -> f.eq(Topic::getTitle, \\\"123\\\"), \\\"111\\\") .caseWhen(f -> f.eq(Topic::getTitle, \\\"456\\\"), \\\"222\\\") .elseEnd(\\\"222\\\") , Topic::getTitle) .column(Topic::getId) ).toList(); ==> Preparing: SELECT CASE WHEN t.`title` = ? THEN ? WHEN t.`title` = ? THEN ? ELSE ? END AS `title`,t.`id` FROM `t_topic` t WHERE t.`title` LIKE ? ==> Parameters: 123(String),111(String),456(String),222(String),222(String),%someTitle%(String) <== Time Elapsed: 3(ms) <== Total: 0 //property属性模式 List<Topic> list = easyQueryClient.queryable(Topic.class) .where(t -> t.like(\\\"title\\\", \\\"someTitle\\\")) .select(Topic.class, t -> t .sqlSegmentAs( SQLClientFunc.caseWhenBuilder(t) .caseWhen(f -> f.eq(\\\"title\\\", \\\"123\\\"), \\\"111\\\") .caseWhen(f -> f.eq(\\\"title\\\", \\\"456\\\"), \\\"222\\\") .elseEnd(\\\"222\\\") , \\\"title\\\") .column(\\\"id\\\") ).toList(); ==> Preparing: SELECT CASE WHEN t.`title` = ? THEN ? WHEN t.`title` = ? THEN ? ELSE ? END AS `title`,t.`id` FROM `t_topic` t WHERE t.`title` LIKE ? ==> Parameters: 123(String),111(String),456(String),222(String),222(String),%someTitle%(String) <== Time Elapsed: 2(ms) <== Total: 0 \"]},\"318\":{\"h\":\"多条件CaseWhen\",\"t\":[\"有时候我们的case when需要实现多个条件而不是单一条件\",\"List<Topic> list = easyQuery.queryable(Topic.class) .innerJoin(BlogEntity.class,(t,t1)->t.eq(t1,Topic::getId,BlogEntity::getId)) .where(t -> t.like(Topic::getTitle, \\\"someTitle\\\")) .select(Topic.class, (t,t1) -> t .sqlSegmentAs( SQL4JFunc.caseWhenBuilder(t,t1) .caseWhen((f,f1) -> f.eq(Topic::getTitle, \\\"123\\\").then(f1).le(BlogEntity::getStar,100), \\\"111\\\") .caseWhen((f,f1) -> f.eq(Topic::getTitle, \\\"456\\\").then(f1).ge(BlogEntity::getStar,200), \\\"222\\\") .elseEnd(\\\"222\\\") , Topic::getTitle) .column(Topic::getId) ).toList(); ==> Preparing: SELECT CASE WHEN t.`title` = ? AND t1.`star` <= ? THEN ? WHEN t.`title` = ? AND t1.`star` >= ? THEN ? ELSE ? END AS `title`,t.`id` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t.`title` LIKE ? ==> Parameters: 123(String),100(Integer),111(String),456(String),200(Integer),222(String),222(String),false(Boolean),%someTitle%(String) <== Time Elapsed: 10(ms) <== Total: 0 \"]},\"319\":{\"h\":\"动态条件\",\"t\":[\"通过springboot上传json对象实现条件查询,目前有两种解决方案,一个是动态条件来构建where,一个是通过object对象来实现动态查询\"]},\"320\":{\"h\":\"默认配置项\",\"t\":[\"模式\",\"优点\",\"缺点\",\"动态条件\",\"可以实现任意复杂条件构建\",\"对于大部分业务场景过于复杂\",\"对象查询\",\"可以快速实现基于dto的条件查询\",\"条件仅支持and,且属性名需要一致,不一致需要手动映射为一致\"]},\"321\":{\"h\":\"查询对象\",\"t\":[\" @Data public class BlogQuery1Request { /** * 标题 */ private String title; /** * 内容 */ private String content; /** * 点赞数 */ private Integer star; /** * 发布时间 */ private LocalDateTime publishTimeBegin; private LocalDateTime publishTimeEnd; /** * 评分 */ private BigDecimal score; /** * 状态 */ private Integer status; /** * 排序 */ private BigDecimal order; /** * 是否置顶 */ private Boolean isTop; private List<Integer> statusList=new ArrayList<>(); private List<Integer> statusNotList=new ArrayList<>(); } \"]},\"322\":{\"h\":\"动态条件\",\"t\":[\" BlogQuery1Request query = new BlogQuery1Request(); query.setOrder(BigDecimal.valueOf(1)); query.setContent(\\\"标题\\\"); query.setPublishTimeBegin(LocalDateTime.now()); query.setPublishTimeEnd(LocalDateTime.now()); query.setStatusList(Arrays.asList(1,2)); List<BlogEntity> result = easyQuery.queryable(BlogEntity.class) .where(o -> o //当query.getContext不为空是添加查询条件 content like query.getContext .like(EasyStringUtil.isNotBlank(query.getContent()), BlogEntity::getContent, query.getContent()) //当query.getOrder不为null是添加查询条件 content = query.getContext .eq(query.getOrder() != null, BlogEntity::getOrder, query.getOrder()) //当query.getPublishTimeBegin()不为null添加左闭区间,右侧同理 publishTimeBegin <= publishTime <= publishTimeEnd .rangeClosed(BlogEntity::getPublishTime, query.getPublishTimeBegin() != null, query.getPublishTimeBegin(), query.getPublishTimeEnd() != null, query.getPublishTimeEnd()) //添加in条件 .in(EasyCollectionUtil.isNotEmpty(query.getStatusList()), BlogEntity::getStatus, query.getStatusList()) ).toList(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `content` LIKE ? AND `order` = ? AND `publish_time` >= ? AND `publish_time` <= ? AND `status` IN (?,?) ==> Parameters: false(Boolean),%标题%(String),1(BigDecimal),2023-07-14T22:05:24.971(LocalDateTime),2023-07-14T22:05:24.971(LocalDateTime),1(Integer),2(Integer) <== Time Elapsed: 5(ms) <== Total: 0 BlogQuery1Request query = new BlogQuery1Request(); query.setContent(\\\"标题\\\"); query.setPublishTimeBegin(LocalDateTime.now()); query.setPublishTimeEnd(LocalDateTime.now()); query.setStatusList(Arrays.asList(1,2)); List<BlogEntity> result = easyQuery.queryable(BlogEntity.class) .where(o -> o //当query.getContext不为空是添加查询条件 content like query.getContext .like(EasyStringUtil.isNotBlank(query.getContent()), BlogEntity::getContent, query.getContent()) //当query.getOrder不为null是添加查询条件 content = query.getContext .eq(query.getOrder() != null, BlogEntity::getOrder, query.getOrder())//不生效 //当query.getPublishTimeBegin()不为null添加左闭区间,右侧同理 publishTimeBegin <= publishTime <= publishTimeEnd .rangeClosed(BlogEntity::getPublishTime, query.getPublishTimeBegin() != null, query.getPublishTimeBegin(), query.getPublishTimeEnd() != null, query.getPublishTimeEnd()) //添加in条件 .in(EasyCollectionUtil.isNotEmpty(query.getStatusList()), BlogEntity::getStatus, query.getStatusList()) ).toList(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `content` LIKE ? AND `publish_time` >= ? AND `publish_time` <= ? AND `status` IN (?,?) ==> Parameters: false(Boolean),%标题%(String),1(BigDecimal),2023-07-14T22:05:24.971(LocalDateTime),2023-07-14T22:05:24.971(LocalDateTime),1(Integer),2(Integer) <== Time Elapsed: 5(ms) <== Total: 0 \"]},\"323\":{\"h\":\"条件接受\",\"t\":[\"1.4.2^以上版本支持ConditionAccepter 条件接收器,Queryable默认行为ConditionAllAccepter.DEFAULT所有的条件都接受,框架提供了一个可选ConditionDefaultAccepter.DEFAULT当传入的条件参数值非null且字符串的情况下非空那么才会增加到条件里面,仅where条件生效。\",\"用户也可以自定义实现接口\",\"public interface ConditionAccepter { boolean accept(TableAvailable table, String property, Object value); } public class ConditionAllAccepter implements ConditionAccepter { public static final ConditionAccepter DEFAULT=new ConditionAllAccepter(); private ConditionAllAccepter(){ } @Override public boolean accept(TableAvailable table, String property, Object value) { return true; } } public class ConditionDefaultAccepter implements ConditionAccepter { public static final ConditionAccepter DEFAULT=new ConditionDefaultAccepter(); @Override public boolean accept(TableAvailable table, String property, Object value) { if(value==null){ return false; } if(value instanceof String){ return EasyStringUtil.isNotBlank((String) value); } return false; } } \",\" String toSql = easyQuery .queryable(Topic.class) .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .leftJoin(BlogEntity.class, (t,t1, t2) -> t.eq(t2, Topic::getId, BlogEntity::getId)) .leftJoin(BlogEntity.class, (t, t1, t2, t3) -> t.eq(t3, Topic::getId, BlogEntity::getId)) .conditionConfigure(ConditionDefaultAccepter.DEFAULT)//设置非null字符串非空 后续的where才会添加到条件中 .where(o -> o.eq(Topic::getId, \\\"\\\")) //.conditionConfigure(ConditionAllAccepter.DEFAULT)//恢复如果后面没有自定义where那么不需要恢复 .limit(1, 2) .toSQL(); // SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t // LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` // LEFT JOIN `t_blog` t2 ON t2.`deleted` = ? AND t.`id` = t2.`id` // LEFT JOIN `t_blog` t3 ON t3.`deleted` = ? AND t.`id` = t3.`id` // LIMIT 2 OFFSET 1 \",\"条件拦截,加入我的where条件大部分都符合极个别不符合可以通过提前返回不符的来保证剩余的都可以进行\",\"String id=\\\"\\\"; String userName=null; String nickname=\\\"BBB\\\"; Boolean leftEnable=true; String sql = easyQuery.queryable(DefTable.class) .leftJoin(DefTableLeft1.class, (t, t1) -> t.eq(t1, DefTable::getId, DefTableLeft1::getDefId)) .conditionConfigure((t, p, v) -> {//分别是table，property，value if (\\\"id\\\".equals(p)) { //无论.eq(DefTable::getId, id) 这个方法属性为id的比较是啥结果都会添加到条件里面 return true; } return ConditionDefaultAccepter.DEFAULT.accept(t, p, v); }) .where((t, t1) -> t .eq(DefTable::getId, id)//虽然id为空但是还是加入到了sql中 .eq(DefTable::getUserName, userName) .eq(DefTable::getNickname, nickname) .then(t1).eq(DefTableLeft1::getEnable, leftEnable)).toSQL(); // SELECT t.id,t.user_name,t.nickname,t.enable,t.score,t.mobile,t.avatar,t.number,t.status,t.created,t.options FROM t_def_table t // LEFT JOIN t_def_table_left1 t1 ON t.id = t1.def_id // WHERE t.id = ? AND t.nickname = ? AND t1.enable = ? \",\"注意点及说明!!!\",\"必须写到对应的where前面后续的where才会生效，用户可以自定义,比如满足的条件是优先满足eq、ge、gt等的第一个boolean条件,后续才会判断conditionAccepter，如果有多个where部分where需要自定义那么可以采用conditionConfigure(ConditionDefaultAccepter.DEFAULT)来恢复到所有参数都接受,一般用于查询时可以少写很多判断\"]},\"324\":{\"h\":\"查询对象\",\"t\":[\"@EasyWhereCondition\",\"属性\",\"默认值\",\"描述\",\"strict\",\"true\",\"严格模式,如果属性没有映射到对象上报错,如果表tableIndex不在当前上下文中也报错\",\"tableIndex\",\"0\",\"当前条件用于查询哪张表\",\"allowEmptyStrings\",\"false\",\"是否允许空字符串,如果允许表示空也会加入到表达式内而不是忽略\",\"propName\",\"\\\"\\\"\",\"当前属性映射到数据库对象的属性名称,为空表示使用当前属性名\",\"type\",\"LIKE\",\"当前属性和数据库对象属性以哪种表达式构建条件\",\"说明!!!\",\"属性默认是支持like,可以通过指定条件,如果查询属性与数据库对象属性不一致可以通过propName改写\",\" @Data public class BlogQuery2Request { /** * 标题 */ @EasyWhereCondition private String title; /** * 内容 */ @EasyWhereCondition private String content; /** * 点赞数 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.EQUAL) private Integer star; /** * 发布时间 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.RANGE_LEFT_CLOSED,propName = \\\"publishTime\\\") private LocalDateTime publishTimeBegin; @EasyWhereCondition(type = EasyWhereCondition.Condition.RANGE_RIGHT_CLOSED,propName = \\\"publishTime\\\") private LocalDateTime publishTimeEnd; /** * 评分 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.GREATER_THAN_EQUAL) private BigDecimal score; /** * 状态 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.LESS_THAN_EQUAL) private Integer status; /** * 排序 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.GREATER_THAN) private BigDecimal order; /** * 是否置顶 */ @EasyWhereCondition(type = EasyWhereCondition.Condition.NOT_EQUAL) private Boolean isTop; /** * statusList没有对应的属性名称所以需要改写为映射到status */ @EasyWhereCondition(type = EasyWhereCondition.Condition.IN,propName = \\\"status\\\") private List<Integer> statusList=new ArrayList<>(); /** * statusNotList没有对应的属性名称所以需要改写为映射到status */ @EasyWhereCondition(type = EasyWhereCondition.Condition.NOT_IN,propName = \\\"status\\\") private List<Integer> statusNotList=new ArrayList<>(); } \"]},\"325\":{\"h\":\"动态查询条件\",\"t\":[\" BlogQuery2Request query = new BlogQuery2Request(); query.setOrder(BigDecimal.valueOf(1)); query.setContent(\\\"标题\\\"); query.setPublishTimeBegin(LocalDateTime.now()); query.setPublishTimeEnd(LocalDateTime.now()); query.setStatusList(Arrays.asList(1,2)); List<BlogEntity> queryable = easyQuery.queryable(BlogEntity.class) .whereObject(query).toList(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `content` LIKE ? AND `publish_time` >= ? AND `publish_time` <= ? AND `order` = ? AND `status` IN (?,?) ==> Parameters: false(Boolean),%标题%(String),2023-07-14T22:37:47.865(LocalDateTime),2023-07-14T22:37:47.865(LocalDateTime),1(BigDecimal),1(Integer),2(Integer) <== Time Elapsed: 4(ms) <== Total: 0 BlogQuery2Request query = new BlogQuery2Request(); query.setContent(\\\"标题\\\"); query.setPublishTimeEnd(LocalDateTime.now()); query.setStatusList(Arrays.asList(1,2)); List<BlogEntity> queryable = easyQuery.queryable(BlogEntity.class) .whereObject(query).toList(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `content` LIKE ? AND `publish_time` <= ? AND `status` IN (?,?) ==> Parameters: false(Boolean),%标题%(String),2023-07-14T22:37:47.880(LocalDateTime),1(Integer),2(Integer) <== Time Elapsed: 2(ms) <== Total: 0 \",\"类型\",\"构建条件\",\"String\",\"不为null且不为空\",\"Integer\",\"不为null\",\"Short\",\"不为null\",\"Double\",\"不为null\",\"Float\",\"不为null\",\"BigDecimal\",\"不为null\",\"LocalDateTime\",\"不为null\",\"List\",\"不为null且不为空\",\"Array\",\"不为null且不为空\"]},\"326\":{\"h\":\"动态排序\",\"t\":[\"easy-query针对api请求支持对象的动态排序功能,可以实现列表title的排序并且支持多级排序\"]},\"327\":{\"h\":\"ObjectSort\",\"t\":[\"实现动态排序接口\",\"方法\",\"默认值\",\"说明\",\"dynamicMode\",\"DynamicModeEnum.STRICT\",\"策略默认,严格模式下所有属性必须在对象属性里面不然会报错,如果是忽略模式那么就是忽略该属性\",\"useStrictMode\",\"true\",\"是否为严格模式\",\"configure\",\"-\",\"配置动态排序\"]},\"328\":{\"h\":\"ObjectSortBuilder\",\"t\":[\"实现动态排序配置器\",\"方法\",\"参数\",\"说明\",\"allowed\",\"排序属性\",\"允许那些属性可以排序,如果调用一次后,那么后续所有的属性必须在allowed里面\",\"notAllowed\",\"不允许排序属性\",\"不允许排序的属性,哪怕传递了也不会生效不会报错\",\"orderBy\",\"排序属性、是否正序、哪张表默认(0)\",\"排序属性表示按这个属性排序,是否正序表示排序是否使用ASC,默认表是0开始,join一张表就有两张表,如果严格模式,tableIndex不在上下文表中那么将会抛错\"]},\"329\":{\"h\":\"单字段动态排序\",\"t\":[\"首先我们实现ObjectSort接口的方法,传入builder对象排序属性和是否正序即可\",\"@Data public class BlogSortRequest implements ObjectSort { //需要排序的属性 private String sort; //是否正序 private Boolean asc; @Override public void configure(ObjectSortBuilder builder) { if(EasyStringUtil.isNotBlank(sort)&&asc!=null){ builder.orderBy(sort,asc); } } } BlogSortRequest blogSortRequest = new BlogSortRequest(); blogSortRequest.setSort(\\\"title\\\"); blogSortRequest.setAsc(true); String sql = easyQuery.queryable(BlogEntity.class) .orderByObject(blogSortRequest) .select(o->o.column(BlogEntity::getId).column(BlogEntity::getTitle) .column(BlogEntity::getContent)) .toSQL(); // SELECT `id`,`title`,`content` FROM `t_blog` WHERE `deleted` = ? ORDER BY `title` ASC \"]},\"330\":{\"h\":\"多字段组合动态排序\",\"t\":[\"请求对象中有一个集合,集合内部是一个每个属性采用何种排序方法\",\" @Data public class BlogSortMultiRequest implements ObjectSort { //需要排序的属性集合 private List<SortConfig> orders=new ArrayList<>(); @Override public void configure(ObjectSortBuilder builder) { for (SortConfig order : orders) { builder.orderBy(order.getProperty(),order.getAsc()); } } @Data public static class SortConfig{ //需要排序的字段 private String property; //是否正序 private Boolean asc; } } BlogSortMultiRequest blogSortRequest = new BlogSortMultiRequest(); BlogSortMultiRequest.SortConfig sortConfig = new BlogSortMultiRequest.SortConfig(); sortConfig.setProperty(\\\"title\\\"); sortConfig.setAsc(true); blogSortRequest.getOrders().add(sortConfig); BlogSortMultiRequest.SortConfig sortConfig1 = new BlogSortMultiRequest.SortConfig(); sortConfig1.setProperty(\\\"star\\\"); sortConfig1.setAsc(false); blogSortRequest.getOrders().add(sortConfig1); String sql = easyQuery.queryable(BlogEntity.class) .orderByObject(blogSortRequest) .select(o->o.column(BlogEntity::getId).column(BlogEntity::getTitle) .column(BlogEntity::getContent)) .toSQL(); // SELECT `id`,`title`,`content` FROM `t_blog` WHERE `deleted` = ? ORDER BY `title` ASC,`star` DESC \"]},\"331\":{\"h\":\"join动态排序\",\"t\":[\" @Data public class BlogSortJoinRequest implements ObjectSort { private List<SortConfig> orders=new ArrayList<>(); @Override public void configure(ObjectSortBuilder builder) { for (SortConfig order : orders) { //如果采用 createTime 排序那么就使用第二张表 int tableIndex = Objects.equals(order.getProperty(), \\\"createTime\\\") ? 1 : 0; builder.orderBy(order.getProperty(),order.getAsc(),tableIndex); } } @Data public static class SortConfig{ private String property; private Boolean asc; } } BlogSortJoinRequest blogSortRequest = new BlogSortJoinRequest(); BlogSortJoinRequest.SortConfig sortConfig = new BlogSortJoinRequest.SortConfig(); sortConfig.setProperty(\\\"title\\\"); sortConfig.setAsc(true); blogSortRequest.getOrders().add(sortConfig); BlogSortJoinRequest.SortConfig sortConfig1 = new BlogSortJoinRequest.SortConfig(); sortConfig1.setProperty(\\\"createTime\\\"); sortConfig1.setAsc(false); blogSortRequest.getOrders().add(sortConfig1); String sql = easyQuery.queryable(BlogEntity.class) .innerJoin(Topic.class,(t,t1)->t.eq(t1,BlogEntity::getId, Topic::getId)) .orderByObject(blogSortRequest) .select(o->o.column(BlogEntity::getId).column(BlogEntity::getTitle) .column(BlogEntity::getContent)) .toSQL(); // SELECT t.`id`,t.`title`,t.`content` FROM `t_blog` t INNER JOIN `t_topic` t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? ORDER BY t.`title` ASC,t1.`create_time` DESC \"]},\"332\":{\"h\":\"UISort\",\"t\":[\"如果你不想为每个查询定义专门的排序类可以添加通用自行实现\",\" public class UISort implements ObjectSort { private final Map<String, Boolean> sort; public UISort(Map<String,Boolean> sort){ this.sort = sort; } @Override public void configure(ObjectSortBuilder builder) { for (Map.Entry<String, Boolean> s : sort.entrySet()) { //自行判断key和value是否为null 因为是包装类型可能会出现npe builder.orderBy(s.getKey(),s.getValue()); } } } \",\"排序交互全是属性所以完全可以避免sql注入的bug\",\"HashMap<String, Boolean> id = new HashMap<String, Boolean>() {{ put(\\\"id\\\", true);//id正序 put(\\\"title\\\", false);//标题倒序 }}; String sql = easyQuery.queryable(BlogEntity.class) .orderByObject(new UISort(id)) .toSQL(); Assert.assertEquals(\\\"SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? ORDER BY `id` ASC,`title` DESC\\\",sql); HashMap<String, Boolean> id = new HashMap<String, Boolean>() {{ put(\\\"id1\\\", true);//id1属性不在BlogEntity里面所以会进行报错 put(\\\"title\\\", false); }}; try { String sql = easyQuery.queryable(BlogEntity.class) .orderByObject(new UISort(id)) .toSQL(); }catch (EasyQueryOrderByInvalidOperationException exception){ Assert.assertEquals(\\\"id1\\\",exception.getPropertyName()); Assert.assertEquals(\\\"BlogEntity not found [id1] in entity class\\\",exception.getMessage()); } \"]},\"333\":{\"h\":\"动态表名\",\"t\":[\"easy-query针对分表对象目前已经支持了动态表名的处理,但是后续会将这一部分全部简化掉让用户无感。\"]},\"334\":{\"h\":\"api\",\"t\":[\"方法\",\"参数\",\"返回\",\"描述\",\"asTable(String tableName)\",\"String\",\"this\",\"设置最近表名名称\",\"asTable(Function<String,String> tableNameAs)\",\"Function<String,String>\",\"this\",\"设置最近表名名称\",\"asTable(String tableName)将当前表达式最近的一张表的表名修改成tableName,如果当前最近的表是正常的数据库表名,那么直接将表名改写,如果当前最近的表是匿名表比如嵌套queryable的表那么将alias改成对应的表名\",\"asTable(Function<String,String> tableNameAs)将当前表达式最近的一张表的表名修改成tableNameAs返回的表名,如果当前最近的表是正常的数据库表名,那么直接将表名改写,如果当前最近的表是匿名表比如嵌套queryable的表那么将alias改成对应的表名\",\"asTable(Function<String,String> tableNameAs)其中对应的参数是一个lambda表达式入参为现有表名,返回参数为最终确定的表名内部可以通过复杂计算甚至远程rpc调用都可以\"]},\"335\":{\"h\":\"案例\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.queryable(BlogEntity.class) .asTable(a -> \\\"aa_bb_cc\\\") .where(o -> o.eq(BlogEntity::getId, \\\"123\\\")).toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM aa_bb_cc t WHERE t.`deleted` = ? AND t.`id` = ? ==> Parameters: false(Boolean),123(String) <== Total: 0 List<BlogEntity> blogEntities = easyQuery.queryable(BlogEntity.class) .asTable(a->{ if(\\\"t_blog\\\".equals(a)){ return \\\"aa_bb_cc1\\\"; } return \\\"xxx\\\"; }) .where(o -> o.eq(BlogEntity::getId, \\\"123\\\")).toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM aa_bb_cc1 t WHERE t.`deleted` = ? AND t.`id` = ? ==> Parameters: false(Boolean),123(String) <== Total: 0 List<BlogEntity> x_t_blog = easyQuery .queryable(Topic.class) .asTable(o -> \\\"t_topic_123\\\") .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .asTable(\\\"x_t_blog\\\") .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle).then(t).eq(Topic::getId, \\\"3\\\")) .select(BlogEntity.class, (t, t1) -> t1.columnAll()).toList(); ==> Preparing: SELECT t1.`id`,t1.`create_time`,t1.`update_time`,t1.`create_by`,t1.`update_by`,t1.`deleted`,t1.`title`,t1.`content`,t1.`url`,t1.`star`,t1.`publish_time`,t1.`score`,t1.`status`,t1.`order`,t1.`is_top`,t1.`top` FROM t_topic_123 t INNER JOIN x_t_blog t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL AND t.`id` = ? ==> Parameters: false(Boolean),3(String) <== Total: 0 \"]},\"336\":{\"h\":\"关联查询 Fill\",\"t\":[\"easy-query提供了注解配置以外的自定义填充数据,主要是针对配置外的方法,具体api为fillOne、fillMany,可以再查询时自定义关联属性(各自一个),并且支持直接select vo\",\"说明!!!\",\"暂时不支持proxy模式\"]},\"337\":{\"h\":\"api说明\",\"t\":[\"<TREntity> Queryable<T1> fillOne(boolean condition,SQLFuncExpression1<SQLFillSelector, Queryable<TREntity>> fillSetterExpression, Property<TREntity, ?> targetProperty, Property<T1, ?> selfProperty, BiConsumer<T1, TREntity> produce, boolean consumeNull) <TREntity> Queryable<T1> fillMany(boolean condition, SQLFuncExpression1<SQLFillSelector, Queryable<TREntity>> fillSetterExpression, Property<TREntity, ?> targetProperty, Property<T1, ?> selfProperty, BiConsumer<T1, Collection<TREntity>> produce, boolean consumeNull) \",\"参数\",\"描述\",\"场景\",\"condition\",\"是否需要执行当前方法\",\"动态fill填充数据\",\"fillSetterExpression\",\"填充数据如何查询\",\"自定义填充数据\",\"targetProperty\",\"目标表就是fill返回的表的属性\",\"用于关联\",\"selfProperty\",\"当前主表的属性\",\"用于关联\",\"produce\",\"如何填充\",\"自定义填充数据\",\"consumeNull\",\"当关联结果为null是否也会调用produce\",\"过滤null或者不过滤\",\"List<Province> list = easyQuery.queryable(Province.class) .fillMany(x -> x.with(City.class).where(y -> y.eq(City::getCode, \\\"3306\\\")) , City::getProvinceCode , Province::getCode , (x, y) -> { x.setCities(new ArrayList<>(y)); }) .toList(); List<City> list1 = easyQuery.queryable(City.class) .fillOne(x -> x.with(Province.class), Province::getCode, City::getProvinceCode, (x, y) -> { x.setProvince(y); }, false) .toList(); \",\"vo转换\",\" EasyPageResult<Province> pageResult1 = easyQuery.queryable(Province.class) .fillMany(x -> x.with(City.class).where(y -> y.eq(City::getCode, \\\"3306\\\")).select(CityVO.class)//填充数据转成CityVO, , CityVO::getProvinceCode , Province::getCode , (x, y) -> { if (EasyCollectionUtil.isNotEmpty(y)) { CityVO first = EasyCollectionUtil.first(y);//获取第一条city并且赋值 x.setFirstCityName(first.getName()); } }, true) .toPageResult(1, 10); \"]},\"338\":{\"h\":\"分组\",\"t\":[\"easy-query提供了方便的分组查询功能的支持\",\"List<TopicGroupTestDTO> topicGroupTestDTOS = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"3\\\")) .groupBy(o->o.column(Topic::getId)) .select(TopicGroupTestDTO.class, o->o.columnAs(Topic::getId,TopicGroupTestDTO::getId).columnCount(Topic::getId,TopicGroupTestDTO::getIdCount)) .toList(); ==> Preparing: SELECT t.`id` AS `id`,COUNT(t.`id`) AS `idCount` FROM t_topic t WHERE t.`id` = ? GROUP BY t.`id` ==> Parameters: 3(String) <== Total: 1 List<TopicGroupTestDTO> topicGroupTestDTOS = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"3\\\")) .groupBy(o->o.column(Topic::getId)) //将上述查询的columnAs替换为column .select(TopicGroupTestDTO.class, o->o.column(Topic::getId).columnCount(Topic::getId,TopicGroupTestDTO::getIdCount)) .toList(); ==> Preparing: SELECT t.`id`,COUNT(t.`id`) AS `idCount` FROM t_topic t WHERE t.`id` = ? GROUP BY t.`id` ==> Parameters: 3(String) <== Total: 1 \",\"select将表示需要讲表达式进行对应结果映射到TopicGroupTestDTO对象上,TopicGroupTestDTO是一个数据接受对象不具有具体表名,select第二个参数表示需要映射的关系,columnAs方法和column如果两者对象在数据库列上映射是一样的那么可以用column也是一样的,columnCount表示需要对id列进行count聚合并且映射到TopicGroupTestDTO::getIdCount\"]},\"339\":{\"h\":\"多表查询\",\"t\":[\"easy-query提供了丰富的多表链接查询,并且支持匿名表链接查询\"]},\"340\":{\"h\":\"api变化\",\"t\":[\"当使用join操作后\",\"where存在两种重载,第一种就是单个参数,第二种是两个参数,单个参数为主表操作,两个参数为表顺序,可以通过链式调用then()来进行切换,select、groupBy.....同理\"]},\"341\":{\"h\":\"leftJoin\",\"t\":[\"Topic topic = easyQuery .queryable(Topic.class) .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where(o -> o.eq(Topic::getId, \\\"3\\\")) .firstOrNull(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM t_topic t LEFT JOIN t_blog t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),3(String) <== Total: 1 \"]},\"342\":{\"h\":\"innerJoin\",\"t\":[\" List<BlogEntity> blogEntities = easyQuery .queryable(Topic.class) .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle).then(t).eq(Topic::getId, \\\"3\\\")) .select(BlogEntity.class, (t, t1) -> t1.columnAll()) .toList(); ==> Preparing: SELECT t1.`id`,t1.`create_time`,t1.`update_time`,t1.`create_by`,t1.`update_by`,t1.`deleted`,t1.`title`,t1.`content`,t1.`url`,t1.`star`,t1.`publish_time`,t1.`score`,t1.`status`,t1.`order`,t1.`is_top`,t1.`top` FROM t_topic t INNER JOIN t_blog t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL AND t.`id` = ? ==> Parameters: false(Boolean),3(String) <== Total: 1 \"]},\"343\":{\"h\":\"嵌套Join\",\"t\":[\"//创建一个匿名表的表达式 Queryable<Topic> sql = easyQuery .queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"3\\\")); List<BlogEntity> topics = easyQuery .queryable(BlogEntity.class) .leftJoin(sql,(a,b)->a.eq(b,BlogEntity::getId,Topic::getId))//join匿名表 .where(o -> o.isNotNull(BlogEntity::getId).eq(BlogEntity::getId,\\\"3\\\")) .toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM t_blog t LEFT JOIN (SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM t_topic t WHERE t.`id` = ?) t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? AND t.`id` IS NOT NULL AND t.`id` = ? ==> Parameters: 3(String),false(Boolean),3(String) <== Total: 1 \"]},\"344\":{\"h\":\"group join\",\"t\":[\" Queryable<TopicGroupTestDTO> sql = easyQuery .queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"3\\\")) .groupBy(o->o.column(Topic::getId)) .select(TopicGroupTestDTO.class, o->o.columnAs(Topic::getId,TopicGroupTestDTO::getId).columnCount(Topic::getId,TopicGroupTestDTO::getIdCount)); List<BlogEntity> topics = easyQuery .queryable(BlogEntity.class) .leftJoin(sql,(a,b)->a.eq(b,BlogEntity::getId,TopicGroupTestDTO::getId)) .where(o -> o.isNotNull(BlogEntity::getId).eq(BlogEntity::getId,\\\"3\\\")) .toList(); ==> Preparing: SELECT t.`id`,t.`create_time`,t.`update_time`,t.`create_by`,t.`update_by`,t.`deleted`,t.`title`,t.`content`,t.`url`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM t_blog t LEFT JOIN (SELECT t.`id` AS `id`,COUNT(t.`id`) AS `idCount` FROM t_topic t WHERE t.`id` = ? GROUP BY t.`id`) t1 ON t.`id` = t1.`id` WHERE t.`deleted` = ? AND t.`id` IS NOT NULL AND t.`id` = ? ==> Parameters: 3(String),false(Boolean),3(String) <== Total: 1 \"]},\"345\":{\"h\":\"原生sql\",\"t\":[\"easy-query的不但支持表达式的强类型sql,也支持手写sql来实现crud\"]},\"346\":{\"h\":\"查询sqlQuery\",\"t\":[\"强类型结果返回\"]},\"347\":{\"h\":\"无参数强类型返回\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.sqlQuery(\\\"SELECT * FROM t_blog t\\\", BlogEntity.class); ==> Preparing: SELECT * FROM t_blog t <== Total: 100 \"]},\"348\":{\"h\":\"有参数强类型返回\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.sqlQuery(\\\"SELECT * FROM t_blog t where t.id=?\\\", BlogEntity.class, Collections.singletonList(\\\"1\\\")); ==> Preparing: SELECT * FROM t_blog t where t.id=? ==> Parameters: 1(String) <== Total: 1 \"]},\"349\":{\"h\":\"查询sqlQueryMap\",\"t\":[\"Map返回默认key忽略大小写\"]},\"350\":{\"h\":\"无参数Map返回\",\"t\":[\" List<Map<String, Object>> blogs = easyQuery.sqlQueryMap(\\\"SELECT * FROM t_blog t\\\"); ==> Preparing: SELECT * FROM t_blog t <== Total: 100 \"]},\"351\":{\"h\":\"有参数Map返回\",\"t\":[\"List<Map<String, Object>> blogs = easyQuery.sqlQueryMap(\\\"SELECT * FROM t_blog t where t.id=?\\\", Collections.singletonList(\\\"1\\\")); ==> Preparing: SELECT * FROM t_blog t where t.id=? ==> Parameters: 1(String) <== Total: 1 \"]},\"352\":{\"h\":\"执行\"},\"353\":{\"h\":\"无参数\",\"t\":[\"String newContent= UUID.randomUUID().toString(); long l = easyQuery.sqlExecute(\\\"update t_blog set content='\\\"+newContent +\\\"' where id='1'\\\") ==> Preparing: update t_blog set content='3af23d78-86f1-48b1-bc51-ce0e0f63113d' where id='1' <== Total: 1 \"]},\"354\":{\"h\":\"有参数\",\"t\":[\"String newContent= UUID.randomUUID().toString(); long l = easyQuery.sqlExecute(\\\"update t_blog set content=? where id=?\\\", Arrays.asList(newContent,\\\"1\\\")); ==> Preparing: update t_blog set content=? where id=? ==> Parameters: 0d93119a-9e57-4d71-a67b-58d24823a88b(String),1(String) <== Total: 1 \",\"easy-query默认提供了数据库自定义SQL片段,其中 《CaseWhen》 就是有数据库自定义片段来自行实现api\",\"如何设计api完全可以看用户自行实现。\"]},\"355\":{\"h\":\"sqlSegmentAs\",\"t\":[\"最好是封装自行实现,譬如case-when的实现就是扩展实现,如果没有这个封装的必要可以用sqlNativeSegment,支持属性和参数化\",\"建议参考 case when,如果临时使用建议使用 sqlNativeSegment\"]},\"356\":{\"h\":\"sqlNativeSegment\",\"t\":[\"无需编写复杂封装代码\",\"说明\",\"sqlNativeSegment一次个参数为原生数据库片段\",\"第二个参数为表达式,如果第一个原生sql片段存在变量比如表列或者参数值,那么可以通过第二个参数lambda选择expression或者value或format，expreesion传入当前表的属性表达式或者制定表的,value传递常量值会议参数形式体现在片段上,format会拼接到字符串上,拼接的规则底层为MessageFormat仅需满足此即可\",\"方法\",\"参数说明\",\"描述\",\"expression\",\"对象属性,或者其他表的对象属性或者表达式query\",\"如果是表对象属性那么无需管理表别名，哪怕是join下也可以自己适应,如果是query表达式那么可以实现子查询类似的功能\",\"value\",\"参数值\",\"将以参数形式\\\"?\\\"附加到sql片段上面\",\"constValue(已作废)\",\"常量值\",\"将以普通字符串拼接的形式拼接上去\",\"format\",\"常量值\",\"将以普通字符串拼接的形式拼接上去\",\"setAlias\",\"别名\",\"用于设置列别名一般用户查询较多\"]},\"357\":{\"h\":\"案例二\",\"t\":[\"OVER(Partition By ... Order By ...) 采用pgsql语法来实现\",\"案例来自 jimmer\",\"获取书本价格在所有书籍中的名次\",\"获取数据的价格在所属书店中的名次\",\" @Table(\\\"t_book_test\\\") @Data public class H2BookTest { @Column(primaryKey = true) private String id; private String name; private String edition; private String price; private String storeId; } String sql = easyQuery.queryable(H2BookTest.class) .select(o -> o.columnAll() .sqlNativeSegment(\\\"rank() over(order by {0} desc) as rank1\\\", it -> it.expression(H2BookTest::getPrice)) .sqlNativeSegment(\\\"rank() over(partition by {0} order by {1} desc) as rank2\\\", it -> it .expression(H2BookTest::getStoreId) .expression(H2BookTest::getPrice) ) ).toSQL(); SELECT id,name,edition,price,store_id, rank() over(order by price desc) as rank1, rank() over(partition by store_id order by price desc) as rank2 FROM t_book_test //别名自动设置 String sql = easyQuery.queryable(H2BookTest.class) .asAlias(\\\"x\\\") .select(o -> o.columnAll() .sqlNativeSegment(\\\"rank() over(order by {0} desc) as rank1\\\", it -> it.expression(H2BookTest::getPrice)) .sqlNativeSegment(\\\"rank() over(partition by {0} order by {1} desc) as rank2\\\", it -> it .expression(H2BookTest::getStoreId) .expression(H2BookTest::getPrice) ) ).toSQL(); SELECT x.id,x.name,x.edition,x.price,x.store_id, rank() over(order by x.price desc) as rank1, rank() over(partition by x.store_id order by x.price desc) as rank2 FROM t_book_test x //合并两个sql native segment String sql = easyQuery.queryable(H2BookTest.class) .asAlias(\\\"x\\\") .select(o -> o.columnAll() .sqlNativeSegment(\\\"rank() over(order by {0} desc) as rank1,rank() over(partition by {1} order by {2} desc) as rank2\\\", it -> it.expression(H2BookTest::getPrice) .expression(H2BookTest::getStoreId) .expression(H2BookTest::getPrice) ) ).toSQL(); SELECT x.id,x.name,x.edition,x.price,x.store_id, rank() over(order by x.price desc) as rank1, rank() over(partition by x.store_id order by x.price desc) as rank2 FROM t_book_test x String sql = easyQuery.queryable(H2BookTest.class) .where(o -> o.sqlNativeSegment(\\\"regexp_like({0},{1})\\\", it -> it.expression(H2BookTest::getPrice) .value(\\\"^Ste(v|ph)en$\\\"))) .select(o -> o.columnAll()).toSQL(); SELECT id,name,edition,price,store_id FROM t_book_test WHERE regexp_like(price,?) //join多表下的sql native segment String sql = easyQuery.queryable(H2BookTest.class) .leftJoin(DefTable.class,(t,t1)->t.eq(t1,H2BookTest::getPrice,DefTable::getMobile)) .where((o,o1) -> o.sqlNativeSegment(\\\"regexp_like({0},{1}) AND regexp_like({2},{1})\\\", it -> it .expression(H2BookTest::getPrice)//单参数使用默认表的也就是o.sqlNativeSegment的o表就是第一张表 .value(\\\"^Ste(v|ph)en$\\\") .expression(o1,DefTable::getAvatar))//使用第二张表的avatar ) .select(o -> o.columnAll()).toSQL(); SELECT t.id,t.name,t.edition,t.price,t.store_id FROM t_book_test t LEFT JOIN t_def_table t1 ON t.price = t1.mobile WHERE regexp_like(t.price,?) AND regexp_like(t1.avatar,?) \"]},\"358\":{\"h\":\"OR条件\",\"t\":[\"where默认提供了and和or关键字并且提供了泛型版本所以用户可以通过and和or来进行组合对应的条件,默认条件和条件之间用and进行链接\"]},\"359\":{\"h\":\"案例\",\"t\":[\"and内部使用or链接那么可以将and视为括号(....or....or....)\",\"Topic topic = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"1\\\").and( x -> x.like(Topic::getTitle, \\\"你好\\\") .or() .eq(Topic::getTitle, \\\"我是title\\\") .or() .le(Topic::getCreateTime, LocalDateTime.now()) )).firstOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE `id` = ? AND (`title` LIKE ? OR `title` = ? OR `create_time` <= ?) LIMIT 1 ==> Parameters: 1(String),%你好%(String),我是title(String),2023-07-05T06:25:17.356(LocalDateTime) <== Time Elapsed: 4(ms) <== Total: 1 \",\"没有and全部都是or以where为单位之间会以and进行组合\",\"List<Topic> topic2 = easyQuery.queryable(Topic.class) .where(o -> o.like(Topic::getTitle, \\\"你好\\\") .or() .eq(Topic::getTitle, \\\"我是title\\\") .or() .le(Topic::getCreateTime, LocalDateTime.now())).toList(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE (`title` LIKE ? OR `title` = ? OR `create_time` <= ?) ==> Parameters: %你好%(String),我是title(String),2023-07-05T06:30:24.572(LocalDateTime) <== Time Elapsed: 2(ms) <== Total: 43 \",\"和逻辑删除等组合\",\"BlogEntity blog = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"1\\\").and( x -> x.like(BlogEntity::getTitle, \\\"你好\\\") .or() .eq(BlogEntity::getTitle, \\\"我是title\\\") .or() .le(BlogEntity::getCreateTime, LocalDateTime.now()) )).firstOrNull(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `id` = ? AND (`title` LIKE ? OR `title` = ? OR `create_time` <= ?) LIMIT 1 ==> Parameters: false(Boolean),1(String),%你好%(String),我是title(String),2023-07-05T06:33:07.090(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 1 BlogEntity blog1 = easyQuery.queryable(BlogEntity.class) .where(o -> o.like(BlogEntity::getTitle, \\\"你好\\\") .or() .eq(BlogEntity::getTitle, \\\"我是title\\\") .or() .le(BlogEntity::getCreateTime, LocalDateTime.now())).firstOrNull(); ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND (`title` LIKE ? OR `title` = ? OR `create_time` <= ?) LIMIT 1 ==> Parameters: false(Boolean),%你好%(String),我是title(String),2023-07-05T06:34:07.310(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 1 \",\"多个and用or链接\",\"Topic topic3 = easyQuery.queryable(Topic.class) .where(o -> o.eq(Topic::getId, \\\"1\\\").or( x -> x.like(Topic::getTitle, \\\"你好\\\") .eq(Topic::getTitle, \\\"我是title\\\") .le(Topic::getCreateTime, LocalDateTime.now()) )).firstOrNull(); ==> Preparing: SELECT `id`,`stars`,`title`,`create_time` FROM `t_topic` WHERE (`id` = ? OR (`title` LIKE ? AND `title` = ? AND `create_time` <= ?)) LIMIT 1 ==> Parameters: 1(String),%你好%(String),我是title(String),2023-07-05T06:35:32.079(LocalDateTime) <== Time Elapsed: 3(ms) <== Total: 1 \"]},\"360\":{\"h\":\"分页\",\"t\":[\"easy-query提供了非常简易的分页查询功能,方便用户进行数据结果的分页查询\"]},\"361\":{\"h\":\"简单分页\",\"t\":[\" EasyPageResult<Topic> topicPageResult = easyQuery .queryable(Topic.class) .where(o -> o.isNotNull(Topic::getId)) .toPageResult(1, 20); ==> Preparing: SELECT COUNT(1) FROM t_topic t WHERE t.`id` IS NOT NULL <== Total: 1 ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM t_topic t WHERE t.`id` IS NOT NULL LIMIT 20 <== Total: 20 \"]},\"362\":{\"h\":\"join分页\",\"t\":[\"EasyPageResult<BlogEntity> page = easyQuery .queryable(Topic.class) .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle).then(t).eq(Topic::getId, \\\"3\\\")) .select(BlogEntity.class, (t, t1) -> t1.columnAll().columnIgnore(BlogEntity::getId)) .toPageResult(1, 20); ==> Preparing: SELECT COUNT(1) FROM t_topic t INNER JOIN t_blog t1 ON t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL AND t.`id` = ? ==> Parameters: 3(String) <== Total: 1, Query Use: 3(ms) ==> Preparing: SELECT t1.`create_time`,t1.`update_time`,t1.`create_by`,t1.`update_by`,t1.`deleted`,t1.`title`,t1.`content`,t1.`url`,t1.`star`,t1.`publish_time`,t1.`score`,t1.`status`,t1.`order`,t1.`is_top`,t1.`top` FROM t_topic t INNER JOIN t_blog t1 ON t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL AND t.`id` = ? LIMIT 1 ==> Parameters: 3(String) <== Total: 1, Query Use: 2(ms) \"]},\"363\":{\"h\":\"group分页\",\"t\":[\"EasyPageResult<BlogEntity> page = easyQuery .queryable(Topic.class) .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle)) .groupBy((t, t1)->t1.column(BlogEntity::getId)) .select(BlogEntity.class, (t, t1) -> t1.column(BlogEntity::getId).columnSum(BlogEntity::getScore)) .toPageResult(1, 20); ==> Preparing: SELECT COUNT(1) FROM (SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM t_topic t INNER JOIN t_blog t1 ON t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id`) t2 <== Total: 1, Query Use: 8(ms) ==> Preparing: SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM t_topic t INNER JOIN t_blog t1 ON t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id` LIMIT 20 <== Total: 20, Query Use: 2(ms) \"]},\"364\":{\"h\":\"自定义分页返回结果\",\"t\":[\"easy-query提供了自定义分页返回结果,用户可以自行定义分页结果,《替换框架行为❗️❗️❗️》\"]},\"365\":{\"h\":\"替换接口\",\"t\":[\"EasyPageResultProvider\",\"方法\",\"参数\",\"描述\",\"createPageResult\",\"long pageIndex, long pageSize,long total, List<T> data\",\"返回toPageResult的分页对象\",\"createShardingPageResult\",\"long pageIndex, long pageSize,long total, List<T> data,SequenceCountLine sequenceCountLine\",\"返回toShardingPageResult的分页对象\"]},\"366\":{\"h\":\"默认实现\",\"t\":[\" public class DefaultEasyPageResultProvider implements EasyPageResultProvider{ @Override public <T> EasyPageResult<T> createPageResult(long pageIndex, long pageSize,long total, List<T> data) { return new DefaultPageResult<>(total,data); } @Override public <T> EasyPageResult<T> createShardingPageResult(long pageIndex, long pageSize,long total, List<T> data,SequenceCountLine sequenceCountLine) { return new DefaultShardingPageResult<>(total,data,sequenceCountLine); } } public class DefaultPageResult<T> implements EasyPageResult<T> { private final long total; private final List<T> data; public DefaultPageResult(long total, List<T> data) { this.total = total; this.data = data; } public long getTotal() { return total; } public List<T> getData() { return data; } } public interface EasyShardingPageResult<T> extends EasyPageResult<T>{ List<Long> getTotalLines(); } public class DefaultShardingPageResult<T> implements EasyShardingPageResult<T> { private final long total; private final List<T> data; private final SequenceCountLine sequenceCountLine; public DefaultShardingPageResult(long total, List<T> data,SequenceCountLine sequenceCountLine) { this.total = total; this.data = data; this.sequenceCountLine = sequenceCountLine; } public long getTotal() { return total; } public List<T> getData() { return data; } @Override public List<Long> getTotalLines() { return sequenceCountLine.getTotalLines(); } } \"]},\"367\":{\"h\":\"无依赖使用自己的PageResult\",\"t\":[\"很多时候框架提供的EasyPageResult<T>提供了方便的同时让整个项目高度依赖easy-query这是一个非常不好的事情,所以easy-query在1.4.25提供了自定义PageResult<TResult>结果,并且提供了链式方法调用方便开发人员\"]},\"368\":{\"h\":\"框架提供的分页器\",\"t\":[\"Pager<TEntity,TPageResult> 用户可以自行实现分页\"]},\"369\":{\"h\":\"添加自己的分页返回结果接口\",\"t\":[\"//接口 public interface PageResult<T> { /** * 返回总数 * @return */ long getTotalCount(); /** * 结果内容 * @return */ List<T> getList(); } //实现 public class MyPageResult<TEntity> implements PageResult<TEntity> { private final long total; private final List<TEntity> list; public MyPageResult(long total, List<TEntity> list){ this.total = total; this.list = list; } @Override public long getTotalCount() { return total; } @Override public List<TEntity> getList() { return list; } } \"]},\"370\":{\"h\":\"自定义pager\",\"t\":[\" public class MyPager<TEntity> implements Pager<TEntity,PageResult<TEntity>> { private final long pageIndex; private final long pageSize; private final long pageTotal; public MyPager(long pageIndex, long pageSize){ this(pageIndex,pageSize,-1); } public MyPager(long pageIndex, long pageSize, long pageTotal){ this.pageIndex = pageIndex; this.pageSize = pageSize; this.pageTotal = pageTotal; } @Override public PageResult<TEntity> toResult(Query<TEntity> query) { EasyPageResult<TEntity> pageResult = query.toPageResult(pageIndex, pageSize,pageTotal); return new MyPageResult<>(pageResult.getTotal(),pageResult.getData()); } } \"]},\"371\":{\"h\":\"测试代码\",\"t\":[\"//业务代码返回自定义PageResult<TEntity> PageResult<TopicGenericKey> pageResult = easyQuery .queryable(TopicGenericKey.class) .whereById(\\\"1\\\") .toPageResult(new MyPager<>(1, 2)); Assert.assertEquals(1,pageResult.getTotalCount()); Assert.assertEquals(\\\"1\\\",pageResult.getList().get(0).getId()); \"]},\"372\":{\"h\":\"关联查询 Include\",\"t\":[\"easy-query 1.2.1+ 支持关联查询,支持多级关联查询,并且只支持first和tolist两个返回方法,支持vo对象返回支持include追加追踪、禁止、逻辑删除、where过滤、order、limit等一系列处理，但是返回结果必须是数据库对象实例(include方法内部),如果需要额外字段返回可以使用columnInclude/columnIncludeMany自定义返回\",\"说明!!!\",\"暂时不支持proxy模式\",\"类型\",\"描述\",\"场景\",\"OneToOne\",\"一对一\",\"学生和学生家庭信息\",\"OneToMany\",\"一对多\",\"班级和学生\",\"ManyToOne\",\"多对一\",\"学生和班级\",\"ManyToMany\",\"多对多\",\"班级和老师\",\"说明!!!\",\"include 内部属于独立查询,如果您需要差异更新并且没有配置默认启动追踪查询那么需要独立进行asTracking()等,include的后one或者many的第二个参数表示以多少关联属性为一组进行获取\",\" List<SchoolStudent> list1 = easyQuery.queryable(SchoolStudent.class) //一对一查询启用追踪并且对子查询逻辑删除禁用 .include(o -> o.one(SchoolStudent::getSchoolStudentAddress).asTracking().disableLogicDelete()) .toList(); List<SchoolStudent> list1 = easyQuery.queryable(SchoolStudent.class) //一对一查询启用追踪并且对子查询逻辑删除禁用 //如果查询学生有20个以上假如21个那么会先用20个id进行in查询,再用1个id进行查询最后进行合并 .include(o -> o.one(SchoolStudent::getSchoolStudentAddress,20)) .toList(); \"]},\"373\":{\"h\":\"Navigate\",\"t\":[\"属性\",\"是否必填\",\"默认值\",\"描述\",\"value\",\"true\",\"-\",\"表示当前对象和目标对象的关系RelationTypeEnum枚举\",\"selfProperty\",\"false\",\"-\",\"当前对象的哪个属性关联目标对象,空表示使用当前对象的主键\",\"targetProperty\",\"false\",\"-\",\"当前对象的selfProperty属性关联目标的哪个属性,空表示使用目标对象的主键\",\"mappingClass\",\"false\",\"Object.class\",\"中间表对象,必须是表对象实体字节\",\"selfMappingProperty\",\"false多对多必填\",\"-\",\"当前对象的selfProperty属性对应中间表的哪个属性,多对多不能为空\",\"targetMappingProperty\",\"false多对多必填\",\"-\",\"目标对象的targetProperty属性对应中间表的哪个属性,多对多不能为空\"]},\"374\":{\"h\":\"普通链接查询\",\"t\":[\"//班级表 @Table(\\\"school_class\\\") @Data @ToString public class SchoolClass { @Column(primaryKey = true)//主键 private String id; private String name; //一对多 一个班级多个学生 @Navigate(value = RelationTypeEnum.OneToMany, targetProperty = \\\"classId\\\") //完整配置,property忽略表示对应的主键 // @Navigate(value = RelationTypeEnum.OneToMany,selfProperty = \\\"id\\\",targetProperty = \\\"classId\\\") private List<SchoolStudent> schoolStudents; //中间表多对多配置,其中mappingClass表示中间表,selfMappingProperty表示中间表的哪个字段和当前表对应, //targetMappingProperty表示中间表的哪个字段和目标表的属性对应 @Navigate(value = RelationTypeEnum.ManyToMany , mappingClass = SchoolClassTeacher.class , selfMappingProperty = \\\"classId\\\" , targetMappingProperty = \\\"teacherId\\\") //完整配置其中自己的属性和目标属性忽略表示主键 // @Navigate(value = RelationTypeEnum.ManyToMany // , selfProperty = \\\"id\\\" // , targetProperty = \\\"id\\\" // , mappingClass = SchoolClassTeacher.class // , selfMappingProperty = \\\"classId\\\" // , targetMappingProperty = \\\"teacherId\\\") private List<SchoolTeacher> schoolTeachers; } //学生表 @Table(\\\"school_student\\\") @Data @ToString public class SchoolStudent { @Column(primaryKey = true) private String id; private String classId; private String name; @Navigate(value = RelationTypeEnum.ManyToOne,selfProperty = \\\"classId\\\",targetProperty = \\\"id\\\") private SchoolClass schoolClass; @Navigate(value = RelationTypeEnum.OneToOne,targetProperty = \\\"studentId\\\") private SchoolStudentAddress schoolStudentAddress; } //学生地址表 @Table(\\\"school_student_address\\\") @Data @ToString public class SchoolStudentAddress { private String id; private String studentId; private String address; @Navigate(value = RelationTypeEnum.ManyToOne,selfProperty = \\\"studentId\\\",targetProperty = \\\"id\\\") private SchoolStudent schoolStudent; } //教师表 @Table(\\\"school_teacher\\\") @Data @ToString public class SchoolTeacher { @Column(primaryKey = true) private String id; private String name; @Navigate(value = RelationTypeEnum.ManyToMany , mappingClass = SchoolClassTeacher.class , selfProperty = \\\"id\\\" , selfMappingProperty = \\\"teacherId\\\" , targetProperty = \\\"id\\\" , targetMappingProperty = \\\"classId\\\") private List<SchoolClass> schoolClasses; } //教师和班级的多对多关系表 @Table(\\\"school_class_teacher\\\") @Data @ToString public class SchoolClassTeacher { @Column(primaryKey = true) private String classId; @Column(primaryKey = true) private String teacherId; } \"]},\"375\":{\"h\":\"OneToOne\",\"t\":[\"学生和学生地址信息关系\",\" List<SchoolStudent> stus = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolStudentAddress)) .toList(); ==> Preparing: SELECT `id`,`class_id`,`name` FROM `school_student` <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `id`,`student_id`,`address` FROM `school_student_address` WHERE `student_id` IN (?,?,?) ==> Parameters: 1(String),2(String),3(String) <== Time Elapsed: 2(ms) <== Total: 3 [SchoolStudent(id=1, classId=class1, name=学生1, schoolClass=null, schoolStudentAddress=SchoolStudentAddress(id=address1, studentId=1, address=地址1, schoolStudent=null)), SchoolStudent(id=2, classId=class2, name=学生2, schoolClass=null, schoolStudentAddress=SchoolStudentAddress(id=address2, studentId=2, address=地址2, schoolStudent=null)), SchoolStudent(id=3, classId=class1, name=学生3, schoolClass=null, schoolStudentAddress=SchoolStudentAddress(id=address3, studentId=3, address=地址3, schoolStudent=null))] \"]},\"376\":{\"h\":\"OneToMany\",\"t\":[\"说明!!!\",\"一对多无论是否存在多的一方最终都会填充集合,永远不会为null\",\"List<SchoolClass> classes = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolStudents)) .toList(); ==> Preparing: SELECT `id`,`name` FROM `school_class` <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `id`,`class_id`,`name` FROM `school_student` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 3(ms) <== Total: 3 [SchoolClass(id=class1, name=班级1, schoolStudents=[SchoolStudent(id=1, classId=class1, name=学生1, schoolClass=null, schoolStudentAddress=null), SchoolStudent(id=3, classId=class1, name=学生3, schoolClass=null, schoolStudentAddress=null)], schoolTeachers=null), SchoolClass(id=class2, name=班级2, schoolStudents=[SchoolStudent(id=2, classId=class2, name=学生2, schoolClass=null, schoolStudentAddress=null)], schoolTeachers=null), SchoolClass(id=class3, name=班级3, schoolStudents=[], schoolTeachers=null)] \"]},\"377\":{\"h\":\"ManyToOne\",\"t\":[\"List<SchoolStudent> stus = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolClass)) .toList(); ==> Preparing: SELECT `id`,`class_id`,`name` FROM `school_student` <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `id`,`name` FROM `school_class` WHERE `id` IN (?,?) ==> Parameters: class2(String),class1(String) <== Time Elapsed: 2(ms) <== Total: 2 [SchoolStudent(id=1, classId=class1, name=学生1, schoolClass=SchoolClass(id=class1, name=班级1, schoolStudents=null, schoolTeachers=null), schoolStudentAddress=null), SchoolStudent(id=2, classId=class2, name=学生2, schoolClass=SchoolClass(id=class2, name=班级2, schoolStudents=null, schoolTeachers=null), schoolStudentAddress=null), SchoolStudent(id=3, classId=class1, name=学生3, schoolClass=SchoolClass(id=class1, name=班级1, schoolStudents=null, schoolTeachers=null), schoolStudentAddress=null)] \"]},\"378\":{\"h\":\"多对多\",\"t\":[\"班级和老师之间的关系\",\"说明!!!\",\"多对多无论是否存在多的一方最终都会填充集合,永远不会为null\",\"List<SchoolClass> classes = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolTeachers)) .toList(); ==> Preparing: SELECT `id`,`name` FROM `school_class` <== Time Elapsed: 1(ms) <== Total: 3 ==> Preparing: SELECT `class_id`,`teacher_id` FROM `school_class_teacher` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 3(ms) <== Total: 3 ==> Preparing: SELECT `id`,`name` FROM `school_teacher` WHERE `id` IN (?,?) ==> Parameters: teacher2(String),teacher1(String) <== Time Elapsed: 2(ms) <== Total: 2 [SchoolClass(id=class1, name=班级1, schoolStudents=null, schoolTeachers=[SchoolTeacher(id=teacher1, name=老师1, schoolClasses=null), SchoolTeacher(id=teacher2, name=老师2, schoolClasses=null)]), SchoolClass(id=class2, name=班级2, schoolStudents=null, schoolTeachers=[SchoolTeacher(id=teacher2, name=老师2, schoolClasses=null)]), SchoolClass(id=class3, name=班级3, schoolStudents=null, schoolTeachers=[])] \"]},\"379\":{\"h\":\"多次include\",\"t\":[\"查询班级下面的所有老师和学生\",\"List<SchoolClass> classes = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolTeachers)) .include(o -> o.many(SchoolClass::getSchoolStudents)) .toList(); ==> Preparing: SELECT `id`,`name` FROM `school_class` <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `class_id`,`teacher_id` FROM `school_class_teacher` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT `id`,`name` FROM `school_teacher` WHERE `id` IN (?,?) ==> Parameters: teacher2(String),teacher1(String) <== Time Elapsed: 2(ms) <== Total: 2 ==> Preparing: SELECT `id`,`class_id`,`name` FROM `school_student` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 1(ms) <== Total: 3 \"]},\"380\":{\"h\":\"多关联查询\"},\"381\":{\"h\":\"省市区\",\"t\":[\"@Table(\\\"t_province\\\") @Data @ToString public class Province { @Column(primaryKey = true) private String code; private String name; @Navigate(value = RelationTypeEnum.OneToMany,targetProperty = \\\"provinceCode\\\") private List<City> cities; } @Table(\\\"t_city\\\") @Data @ToString public class City { @Column(primaryKey = true) private String code; private String provinceCode; private String name; @Navigate(value = RelationTypeEnum.OneToMany,targetProperty = \\\"cityCode\\\") private List<Area> areas; } @Table(\\\"t_area\\\") @Data @ToString public class Area { @Column(primaryKey = true) private String code; private String provinceCode; private String cityCode; private String name; } \",\"获取对应的省份下的市区和区县\",\"List<Province> list = easyQuery.queryable(Province.class) .include(o -> o.many(Province::getCities).include(x -> x.many(City::getAreas))) .toList(); ==> Preparing: SELECT `code`,`name` FROM `t_province` <== Time Elapsed: 1(ms) <== Total: 2 ==> Preparing: SELECT `code`,`province_code`,`name` FROM `t_city` WHERE `province_code` IN (?,?) ==> Parameters: 33(String),32(String) <== Time Elapsed: 2(ms) <== Total: 24 ==> Preparing: SELECT `code`,`province_code`,`city_code`,`name` FROM `t_area` WHERE `city_code` IN (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ==> Parameters: 3211(String),3310(String),3210(String),3208(String),3307(String),3207(String),3306(String),3206(String),3305(String),3205(String),3304(String),3204(String),3303(String),3203(String),3302(String),3202(String),3213(String),3301(String),3201(String),3212(String),3311(String),3309(String),3209(String),3308(String) <== Time Elapsed: 4(ms) <== Total: 197 \",\"关联子查询过滤\",\" List<Province> provinces = easyQuery.queryable(Province.class) .include(o -> o.many(Province::getCities).where(x->x.eq(City::getCode,\\\"3306\\\")).include(x -> x.many(City::getAreas).where(y->y.eq(Area::getCode,\\\"330602\\\")))) .toList(); ==> Preparing: SELECT `code`,`name` FROM `t_province` <== Time Elapsed: 3(ms) <== Total: 2 ==> Preparing: SELECT `code`,`province_code`,`name` FROM `t_city` WHERE `province_code` IN (?,?) AND `code` = ? ==> Parameters: 33(String),32(String),3306(String) <== Time Elapsed: 3(ms) <== Total: 1 ==> Preparing: SELECT `code`,`province_code`,`city_code`,`name` FROM `t_area` WHERE `city_code` IN (?) AND `code` = ? ==> Parameters: 3306(String),330602(String) <== Time Elapsed: 2(ms) <== Total: 1 [Province(code=32, name=江苏省, cities=[]), Province(code=33, name=浙江省, cities=[City(code=3306, provinceCode=33, name=绍兴市, areas=[Area(code=330602, provinceCode=33, cityCode=3306, name=越城区)])])] \"]},\"382\":{\"h\":\"关联查询VO返回自定义列\",\"t\":[\"针对关联查询的返回结果如果需要支持vo对象返回,譬如学生和班级是一对多的关系,但是我查询学生的时候只希望联级查询班级的id、名称不希望查询出额外信息,那么可以通过vo的形式来返回自定义列的关联查询。\",\"说明!!!\",\"虽然include方法支持vo对象返回,但是需要满足返回对象必须包含navigate映射的属性,就是说navigate的selfProperty和targetProperty可以以不同的列返回,但是必须存在于返回结果中,因为关联查询采用的是splitQuery\",\"方法\",\"描述\",\"说明\",\"columnInclude\",\"如果映射属性是对象\",\"支持最后一个参数为表达式,用来实现VO查询需要实现的列处理,如果不填写默认columnAll\",\"columnIncludeMany\",\"如果映射属性是集合\",\"支持最后一个参数为表达式,用来实现VO查询需要实现的列处理,如果不填写默认columnAll\",\" List<SchoolStudent> list1 = easyQuery.queryable(SchoolStudent.class) //一对一查询启用追踪并且对子查询逻辑删除禁用 .include(o -> o.one(SchoolStudent::getSchoolStudentAddress).asTracking().disableLogicDelete()) .toList(); \",\"//学生VO对象 @Data public class SchoolStudentVO { private String id; private String classId; private String name; @Navigate(RelationTypeEnum.ManyToOne)//VO对象使用只需要定义关联关系,其余信息不需要定义,定义了也会忽略 private SchoolClassVO schoolClass; @Navigate(RelationTypeEnum.OneToOne)/VO对象使用只需要定义关联关系,其余信息不需要定义,定义了也会忽略 private SchoolStudentAddressVO schoolStudentAddress; } //学生地址VO对象 @Data @ToString public class SchoolStudentAddressVO { private String id; private String studentId; private String address; @Navigate(value = RelationTypeEnum.ManyToOne)/VO对象使用只需要定义关联关系,其余信息不需要定义,定义了也会忽略 private SchoolStudentVO schoolStudent; } //班级 @Data public class SchoolClassVO { private String id; private String name; @Navigate(RelationTypeEnum.OneToMany) private List<SchoolStudentVO> schoolStudents; @Navigate(RelationTypeEnum.ManyToMany) private List<SchoolTeacherVO> schoolTeachers; } //教师 @Data @ToString public class SchoolTeacherVO { private String id; private String name; } \",\"通过VO返回实现自定义列,并且实现额外的处理\",\"//查询学生表,并且额外查出对应的班级表 //一对一 List<SchoolStudentVO> list1 = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolClass)) .select(SchoolStudentVO.class,o->o .columnAll() //columnInclude表示单个关联属性的映射,多个采用columnIncludeMany,关联查询结果将学生表的班级 //信息映射到VO对的班级信息上面 .columnInclude(SchoolStudent::getSchoolClass,SchoolStudentVO::getSchoolClass) ) .toList(); ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t WHERE t.`id` IN (?,?) ==> Parameters: class2(String),class1(String) <== Time Elapsed: 1(ms) <== Total: 2 //一对一自定义列 List<SchoolStudentVO> list1 = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolClass)) .select(SchoolStudentVO.class,o->o .columnAll() //将学生表信息查询额外查询出班级表,并且班级表只查询id不查询其他信息 .columnInclude(SchoolStudent::getSchoolClass,SchoolStudentVO::getSchoolClass,s->s.column(SchoolClassVO::getId)) ) .toList(); ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t <== Time Elapsed: 8(ms) <== Total: 3 ==> Preparing: SELECT t.`id` FROM `school_class` t WHERE t.`id` IN (?,?) ==> Parameters: class2(String),class1(String) <== Time Elapsed: 3(ms) <== Total: 2 //一对一自定义sql List<SchoolStudentVO> list1 = easyQuery.queryable(SchoolStudent.class) .include(o -> o.one(SchoolStudent::getSchoolStudentAddress).asTracking().disableLogicDelete()) .select(SchoolStudentVO.class,o->o.columnAll() .columnInclude(SchoolStudent::getSchoolStudentAddress,SchoolStudentVO::getSchoolStudentAddress)) .toList(); ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t <== Time Elapsed: 8(ms) <== Total: 3 ==> Preparing: SELECT t.`id`,t.`student_id`,t.`address` FROM `school_student_address` t WHERE t.`student_id` IN (?,?,?) ==> Parameters: 1(String),2(String),3(String) <== Time Elapsed: 3(ms) <== Total: 3 //一对多 List<SchoolClassVO> list1 = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolStudents)) .select(SchoolClassVO.class,o->o.columnAll() .columnIncludeMany(SchoolClass::getSchoolStudents,SchoolClassVO::getSchoolStudents)) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t <== Time Elapsed: 2(ms) <== Total: 3 ==> Preparing: SELECT t.`id`,t.`class_id`,t.`name` FROM `school_student` t WHERE t.`class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 2(ms) <== Total: 3 //多对多 List<SchoolClassVO> list2 = easyQuery.queryable(SchoolClass.class) .include(o -> o.many(SchoolClass::getSchoolTeachers)) .select(SchoolClassVO.class,o->o.columnAll() .columnIncludeMany(SchoolClass::getSchoolTeachers,SchoolClassVO::getSchoolTeachers)) .toList(); ==> Preparing: SELECT t.`id`,t.`name` FROM `school_class` t <== Time Elapsed: 13(ms) <== Total: 3 ==> Preparing: SELECT `class_id`,`teacher_id` FROM `school_class_teacher` WHERE `class_id` IN (?,?,?) ==> Parameters: class3(String),class2(String),class1(String) <== Time Elapsed: 7(ms) <== Total: 3 ==> Preparing: SELECT t.`id`,t.`name` FROM `school_teacher` t WHERE t.`id` IN (?,?) ==> Parameters: teacher2(String),teacher1(String) <== Time Elapsed: 8(ms) <== Total: 2 \"]},\"383\":{\"h\":\"表达式复用\",\"t\":[\"针对复杂表达式很多时候我们需要复用表达式,而不是重复定义,我们可以使用easy-query提供的cloneQueryable方法来克隆一个一模一样的, 因为where、order、select等会让当前表达式的内容是追加上去的而不是重新生成一个新的\",\"//首先我们定义一个表达式 Queryable<BlogEntity> sql = easyQuery .queryable(Topic.class) .innerJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where((t, t1) -> t1.isNotNull(BlogEntity::getTitle)) .groupBy((t, t1) -> t1.column(BlogEntity::getId)) .select(BlogEntity.class, (t, t1) -> t1.column(BlogEntity::getId).columnSum(BlogEntity::getScore)); //克隆一个新的 Queryable<BlogEntity> blogEntityQueryable = sql.cloneQueryable(); //对其添加select常量 String countSql = sql.cloneQueryable().select(\\\"COUNT(1)\\\").toSQL(); Assert.assertEquals(\\\"SELECT COUNT(1) FROM (SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id`) t2\\\", countSql); //对其limit String limitSql = sql.limit(2, 2).toSQL(); Assert.assertEquals(\\\"SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id` LIMIT 2 OFFSET 2\\\", limitSql); //在对原先的进行操作发现select和limit并没有赋值上去,所以cloneQueryable生效 String sql1 = blogEntityQueryable.select(Long.class, o -> o.columnCount(BlogEntity::getId)).toSQL(); Assert.assertEquals(\\\"SELECT COUNT(t2.`id`) AS `id` FROM (SELECT t1.`id`,SUM(t1.`score`) AS `score` FROM `t_topic` t INNER JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`title` IS NOT NULL GROUP BY t1.`id`) t2\\\", sql1); \"]},\"384\":{\"h\":\"自定义列输出\",\"t\":[\"easy-query的select目前支持两种方式返回自定义列，一个是自己手动进行select的column一个是加入返回对象，返回对象被解析的columnName和sql的返回列名一致才会\"]},\"385\":{\"h\":\"java对象\",\"t\":[\" @Data public class BlogEntityTest2 { /** * 标题 */ private String title; /** * 内容 */ private String content; /** * 博客链接 */ @Column(\\\"my_url\\\") private String url; /** * 点赞数 */ private Integer star; /** * 发布时间 */ private LocalDateTime publishTime; /** * 评分 */ private BigDecimal score; /** * 状态 */ private Integer status; /** * 排序 */ private BigDecimal order; /** * 是否置顶 */ private Boolean isTop; /** * 是否置顶 */ private Boolean top; } \"]},\"386\":{\"h\":\"输出指定列\",\"t\":[\"List<BlogEntityTest2> blogEntityTest2s = easyQuery.queryable(BlogEntity.class) .select(BlogEntityTest2.class, o -> o.columnAs(BlogEntity::getUrl, BlogEntityTest2::getUrl)).toList(); ==> Preparing: SELECT t.`url` AS `my_url` FROM t_blog t WHERE t.`deleted` = ? ==> Parameters: false(Boolean) <== Total: 100 \"]},\"387\":{\"h\":\"相同属性不同列名不映射\",\"t\":[\"BlogEntity.url和BlogEntityTest2.url在Bean层面拥有一样的属性名称一样的属性类型,但是因为BlogEntityTest2.url映射到my_url列上所以无法自动映射\",\"List<BlogEntityTest2> blogEntityTest2s = easyQuery.queryable(BlogEntity.class) .select(BlogEntityTest2.class).toList(); ==> Preparing: SELECT t.`title`,t.`content`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM t_blog t WHERE t.`deleted` = ? ==> Parameters: false(Boolean) <== Total: 100 \"]},\"388\":{\"h\":\"全字段查询\",\"t\":[\"全字段查询自动以resultClass为主映射columnName相同列\",\"List<BlogEntityTest2> blogEntityTest2s = easyQuery.queryable(BlogEntity.class) .select(BlogEntityTest2.class,o->o.columnAll()).toList(); ==> Preparing: SELECT t.`title`,t.`content`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM t_blog t WHERE t.`deleted` = ? ==> Parameters: false(Boolean) <== Total: 100 \"]},\"389\":{\"h\":\"追加映射字段\",\"t\":[\"List<BlogEntityTest2> blogEntityTest2s = easyQuery.queryable(BlogEntity.class) .select(BlogEntityTest2.class,o->o.columnAll().columnAs(BlogEntity::getUrl,BlogEntityTest2::getUrl)).toList(); ==> Preparing: SELECT t.`title`,t.`content`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top`,t.`url` AS `my_url` FROM t_blog t WHERE t.`deleted` = ? ==> Parameters: false(Boolean) <== Total: 100 \"]},\"390\":{\"h\":\"忽略查询字段\",\"t\":[\"查询映射到对象BlogEntityTest2在原来的查询结果上忽略BlogEntity.title字段的查询映射,因为columnAll如果真是查询表所有字段但是映射到BlogEntityTest2后会丢失所以没有必要查询全字段,直接查询映射字段即可\",\"List<BlogEntityTest2> blogEntityTest2s = easyQuery.queryable(BlogEntity.class) .select(BlogEntityTest2.class,o->o.columnAll().columnIgnore(BlogEntity::getTitle).columnAs(BlogEntity::getUrl,BlogEntityTest2::getUrl)).toList(); ==> Preparing: SELECT t.`content`,t.`star`,t.`publish_time`,t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top`,t.`url` AS `my_url` FROM t_blog t WHERE t.`deleted` = ? ==> Parameters: false(Boolean) <== Total: 100 \"]},\"391\":{\"h\":\"连表统计 Select (Count...)\",\"t\":[\"easy-query可以实现连表统计,方便用户针对连表统计时进行操作而不需要手写sql,并且支持分片\",\"实现sql\",\"select a,b,c,(select count(t1.id) from a t1) as xx from b \"]},\"392\":{\"h\":\"count连表统计\",\"t\":[\" @Data public class TopicSubQueryBlog { private String id; private Integer stars; private String title; private LocalDateTime createTime; private Long blogCount; } \",\" Queryable<BlogEntity> queryable = easyQuery.queryable(BlogEntity.class); List<TopicSubQueryBlog> list = easyQuery .queryable(Topic.class) .where(t -> t.isNotNull(Topic::getTitle)) .select(TopicSubQueryBlog.class, o -> o.columnAll().columnSubQueryAs(()->{ return queryable.where(x -> x.eq(o, BlogEntity::getId, Topic::getId)).select(Long.class, x->x.columnCount(BlogEntity::getId)); }, TopicSubQueryBlog::getBlogCount))toList(); \",\" ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time`,(SELECT COUNT(t1.`id`) AS `id` FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = t.`id`) AS `blog_count` FROM `t_topic` t WHERE t.`title` IS NOT NULL ==> Parameters: false(Boolean) <== Time Elapsed: 4(ms) <== Total: 99 \"]},\"393\":{\"h\":\"sum连表统计\",\"t\":[\" Queryable<BlogEntity> queryable = easyQuery.queryable(BlogEntity.class); List<TopicSubQueryBlog> list = easyQuery .queryable(Topic.class) .where(t -> t.isNotNull(Topic::getTitle)) .select(TopicSubQueryBlog.class, o -> o.columnAll().columnSubQueryAs(()->{ return queryable.where(x -> x.eq(o, BlogEntity::getId, Topic::getId)).select(Long.class, x->x.columnSum(BlogEntity::getStar)); }, TopicSubQueryBlog::getBlogCount)).toList(); \",\"==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time`,(SELECT SUM(t1.`star`) AS `star` FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = t.`id`) AS `blog_count` FROM `t_topic` t WHERE t.`title` IS NOT NULL ==> Parameters: false(Boolean) <== Time Elapsed: 14(ms) <== Total: 99 \",\"max、min 同理\"]},\"394\":{\"h\":\"select\",\"t\":[\"easy-query的select是用来终结当前表达式生成新的表达式的方式\"]},\"395\":{\"h\":\"select后置风格\",\"t\":[\"和原生SQL不同，在easy-query提供的DSL中，select语句出现在where，orderBy，groupBy，having等之后,如果表达式调用了select那么这个sql就是确定了的如果再次调用where那么前面的表达式将被视为别名表\"]},\"396\":{\"h\":\"API\",\"t\":[\"方法\",\"参数\",\"返回\",\"描述\",\"select(SqlExpression selectExpression)\",\"列选择器\",\"this\",\"返回当前Queryable对象指定的列,用于按需查询\",\"select(Class<TR> resultClass)\",\"列选择器返回对象\",\"this\",\"返回当前Queryable对象属性映射所对应的列名和返回结果属性列名一样的列,即两者属性名可以不一致但是只要两者属性名都是映射为相同columnName即可互相映射，如果返回结果属性类型不包容原属性类型，比如String->Integer 那么可能会出现转换失败\",\"select(Class<TR> resultClass, SqlExpression selectExpression)\",\"列选择器返回对象,列选择器\",\"this\",\"返回当前Queryable对象属性映射所对应的列名和返回结果属性列名一样的列,即两者属性名可以不一致但是只要两者属性名都是映射为相同columnName即可互相映射，如果返回结果属性类型不包容原属性类型，比如String->Integer 那么可能会出现转换失败,区别就是可以自己手动指定列,\",\"说明!!!\",\"代理模式下select的第一个参数是selector选择器,第二个参数开始才是真正的表\"]},\"397\":{\"h\":\"selector说明\",\"t\":[\" @Data @Table(\\\"t_topic\\\") @ToString public class Topic { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } @Data public class BaseEntity implements Serializable { private static final long serialVersionUID = -4834048418175625051L; @Column(primaryKey = true) private String id; /** * 创建时间;创建时间 */ private LocalDateTime createTime; /** * 修改时间;修改时间 */ private LocalDateTime updateTime; /** * 创建人;创建人 */ private String createBy; /** * 修改人;修改人 */ private String updateBy; /** * 是否删除;是否删除 */ @LogicDelete(strategy = LogicDeleteStrategyEnum.BOOLEAN) private Boolean deleted; } @Data @Table(\\\"t_blog\\\") @Accessors(chain = true) public class BlogEntity extends BaseEntity{ /** * 标题 */ private String title; /** * 内容 */ @Column(large = true) private String content; /** * 博客链接 */ private String url; /** * 点赞数 */ private Integer star; /** * 发布时间 */ private LocalDateTime publishTime; /** * 评分 */ private BigDecimal score; /** * 状态 */ private Integer status; /** * 排序 */ private BigDecimal order; /** * 是否置顶 */ private Boolean isTop; /** * 是否置顶 */ private Boolean top; } \"]},\"398\":{\"h\":\"按需返回VO对象\",\"t\":[\"定义返回的VO\",\" @Data @ToString public class BlogEntityVO1 { /** * 评分 */ private BigDecimal score; /** * 状态 */ @Column(value = \\\"status\\\") private Integer abc; /** * 排序 */ private BigDecimal order; /** * 是否置顶 */ private Boolean isTop; /** * 是否置顶 */ private Boolean top; } BlogEntityVO1 blogEntityVO1 = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"2\\\")) .select(BlogEntityVO1.class).firstOrNull(); //生成的sql按需只返回VO对象有的并且自动映射到abc属性上 ==> Preparing: SELECT t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),2(String) <== Time Elapsed: 2(ms) <== Total: 1 BlogEntityVO1(score=1.20, abc=1, order=2.40, isTop=true, top=true) //调用了columnAll但是并不会查询所有列,只会查询映射到VO上的列 BlogEntityVO1 blogEntityVO1 = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"2\\\")) .select(BlogEntityVO1.class,o->o.columnAll()).firstOrNull(); ==> Preparing: SELECT t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),2(String) <== Time Elapsed: 2(ms) <== Total: 1 BlogEntityVO1(score=1.20, abc=1, order=2.40, isTop=true, top=true) //如果select第二个参数过后没有任何select projects那么会自动调用columnAll防止出现select * BlogEntityVO1 blogEntityVO1 = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"2\\\")) .select(BlogEntityVO1.class,o->o.columnIgnore(BlogEntity::getId)).firstOrNull(); ==> Preparing: SELECT t.`score`,t.`status`,t.`order`,t.`is_top`,t.`top` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),2(String) <== Time Elapsed: 2(ms) <== Total: 1 BlogEntityVO1(score=1.20, abc=1, order=2.40, isTop=true, top=true) //仅查询单个列那么只返回单个列，并且主动设置映射到对应的数据上 BlogEntityVO1 blogEntityVO1 = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"2\\\")) .select(BlogEntityVO1.class,o->o.columnIgnore(BlogEntity::getId).columnAs(BlogEntity::getOrder,BlogEntityVO1::getScore)).firstOrNull(); ==> Preparing: SELECT t.`order` AS `score` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),2(String) <== Time Elapsed: 2(ms) <== Total: 1 BlogEntityVO1(score=2.40, abc=null, order=null, isTop=null, top=null) BlogEntityVO1 blogEntityVO1 = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"2\\\")) .select(BlogEntityVO1.class,o->o.columnAll().columnIgnore(BlogEntity::getScore)).firstOrNull(); ==> Preparing: SELECT t.`status`,t.`order`,t.`is_top`,t.`top` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),2(String) <== Time Elapsed: 2(ms) <== Total: 1 BlogEntityVO1(score=null, abc=1, order=2.40, isTop=true, top=true) \",\"如果出现多表属性映射,可以将相识度高的先进行columnAll然后将不需要的columnIgnore剩下的可以进行columnAs这样比手写一个一个的columnAs方便很多\"]},\"399\":{\"h\":\"按需快速join返回列\",\"t\":[\"这边限制VO对象返回Topic的id其他都是Blog的属性\",\" @Data @ToString public class BlogEntityVO2 { /** * 希望返回Topic的id其他都是Blog的属性 */ private String id; /** * 标题 */ private String title; /** * 内容 */ @Column(large = true) private String content; /** * 博客链接 */ private String url; /** * 点赞数 */ private Integer star; /** * 发布时间 */ private LocalDateTime publishTime; /** * 评分 */ private BigDecimal score; /** * 状态 */ private Integer status; /** * 排序 */ private BigDecimal order; /** * 是否置顶 */ private Boolean isTop; /** * 是否置顶 */ private Boolean top; } BlogEntityVO2 blogEntityVO1 = easyQuery.queryable(Topic.class) .leftJoin(BlogEntity.class,(t,t1)->t.eq(t1,Topic::getId,BlogEntity::getId)) .where(o -> o.eq(Topic::getId, \\\"2\\\")) //直接先对第二张表进行全字段获取然后忽略掉id在对第二张表进行id获取 .select(BlogEntityVO2.class,(t,t1)->t1.columnAll().columnIgnore(BlogEntity::getId).then(t).column(Topic::getId) //.columnAs(Topic::getId,BlogEntityVO2::getId)//如果属性对应的columnName不一致需要as处理 ).firstOrNull(); ==> Preparing: SELECT t1.`title`,t1.`content`,t1.`url`,t1.`star`,t1.`publish_time`,t1.`score`,t1.`status`,t1.`order`,t1.`is_top`,t1.`top`,t.`id` FROM `t_topic` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),2(String) <== Time Elapsed: 2(ms) <== Total: 1 BlogEntityVO2(id=2, title=title2, content=content2, url=http://blog.easy-query.com/2, star=2, publishTime=null, score=1.20, status=1, order=2.40, isTop=true, top=true) BlogEntityVO2 blogEntityVO1 = easyQuery.queryable(Topic.class) .leftJoin(BlogEntity.class,(t,t1)->t.eq(t1,Topic::getId,BlogEntity::getId)) .where(o -> o.eq(Topic::getId, \\\"2\\\")) .select(BlogEntityVO2.class,(t,t1)->t1.columnAll().then(t).column(Topic::getId)//如果不进行忽略两个id都查询,但是默认会把后面的覆盖掉前面的 ).firstOrNull(); ==> Preparing: SELECT t1.`id`,t1.`title`,t1.`content`,t1.`url`,t1.`star`,t1.`publish_time`,t1.`score`,t1.`status`,t1.`order`,t1.`is_top`,t1.`top`,t.`id` FROM `t_topic` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t.`id` = ? LIMIT 1 ==> Parameters: false(Boolean),2(String) <== Time Elapsed: 2(ms) <== Total: 1 BlogEntityVO2(id=2, title=title2, content=content2, url=http://blog.easy-query.com/2, star=2, publishTime=null, score=1.20, status=1, order=2.40, isTop=true, top=true) \"]},\"400\":{\"h\":\"toMap\",\"t\":[\" Map<String, Object> map = easyQuery.queryable(Topic.class) .leftJoin(BlogEntity.class, (t, t1) -> t.eq(t1, Topic::getId, BlogEntity::getId)) .where(o -> o.eq(Topic::getId, \\\"2\\\")) .select(BlogEntityVO2.class, (t, t1) -> t1.columnAll().then(t).column(Topic::getId)//如果不进行忽略两个id都查询,但是默认会把后面的覆盖掉前面的 ).toMap(); //相同的代码如果使用toMap将会抛出 IllegalStateException 异常:Duplicate key found: id \"]},\"401\":{\"h\":\"大数据流式查询返回❗️❗️❗️\",\"t\":[\"easy-query提供了大数据流式返回,针对大数据量的数据无法一次在内存中获取,那么可以通过使用当前方法返回对应的结果集,通常用于excel或者部分文件写入功能,并且支持分表分库\",\"注意\",\"需要配合java8的try resource或者try finally close来关闭资源,并且需要自行处理SQLException,和mybatis不同的是期间无需开始事务也可以使用\",\"注意\",\"如果本次采用toStreamResult那么将不会支持include和fillMany和fillOne的api\"]},\"402\":{\"h\":\"案例\",\"t\":[\" try(JdbcStreamResult<BlogEntity> streamResult = easyQuery.queryable(BlogEntity.class).where(o -> o.le(BlogEntity::getStar, 100)).orderByAsc(o -> o.column(BlogEntity::getCreateTime)).toStreamResult()){ LocalDateTime begin = LocalDateTime.of(2020, 1, 1, 1, 1, 1); int i = 0; for (BlogEntity blog : streamResult.getStreamIterable()) { String indexStr = String.valueOf(i); Assert.assertEquals(indexStr, blog.getId()); Assert.assertEquals(indexStr, blog.getCreateBy()); Assert.assertEquals(begin.plusDays(i), blog.getCreateTime()); Assert.assertEquals(indexStr, blog.getUpdateBy()); Assert.assertEquals(begin.plusDays(i), blog.getUpdateTime()); Assert.assertEquals(\\\"title\\\" + indexStr, blog.getTitle()); // Assert.assertEquals(\\\"content\\\" + indexStr, blog.getContent()); Assert.assertEquals(\\\"http://blog.easy-query.com/\\\" + indexStr, blog.getUrl()); Assert.assertEquals(i, (int) blog.getStar()); Assert.assertEquals(0, new BigDecimal(\\\"1.2\\\").compareTo(blog.getScore())); Assert.assertEquals(i % 3 == 0 ? 0 : 1, (int) blog.getStatus()); Assert.assertEquals(0, new BigDecimal(\\\"1.2\\\").multiply(BigDecimal.valueOf(i)).compareTo(blog.getOrder())); Assert.assertEquals(i % 2 == 0, blog.getIsTop()); Assert.assertEquals(i % 2 == 0, blog.getTop()); Assert.assertEquals(false, blog.getDeleted()); i++; } } catch (SQLException e) { throw new RuntimeException(e); } ==> Preparing: SELECT `id`,`create_time`,`update_time`,`create_by`,`update_by`,`deleted`,`title`,`content`,`url`,`star`,`publish_time`,`score`,`status`,`order`,`is_top`,`top` FROM `t_blog` WHERE `deleted` = ? AND `star` <= ? ORDER BY `create_time` ASC ==> Parameters: false(Boolean),100(Integer) <== Time Elapsed: 6(ms) \"]},\"403\":{\"h\":\"子查询 In/Exists\",\"t\":[\"easy-qeury提供支持子查询包括exists、not exists、in、not in\"]},\"404\":{\"h\":\"EXISTS\",\"t\":[\"//SELECT * FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = ? Queryable<BlogEntity> subQueryable = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"1\\\")); List<Topic> x = easyQuery .queryable(Topic.class).where(o -> o.exists(subQueryable.where(q -> q.eq(o, BlogEntity::getId, Topic::getId)))).toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE EXISTS (SELECT 1 FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = ? AND t1.`id` = t.`id`) ==> Parameters: false(Boolean),1(String) <== Time Elapsed: 3(ms) <== Total: 1 \"]},\"405\":{\"h\":\"NOT EXISTS\",\"t\":[\"//SELECT * FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = ? Queryable<BlogEntity> subQueryable = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"1\\\")); List<Topic> x = easyQuery .queryable(Topic.class).where(o -> o.notExists(subQueryable.where(q -> q.eq(o, BlogEntity::getId, Topic::getId)))).toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE NOT EXISTS (SELECT 1 FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = ? AND t1.`id` = t.`id`) ==> Parameters: false(Boolean),1(String) <== Time Elapsed: 3(ms) <== Total: 100 \"]},\"406\":{\"h\":\"IN\",\"t\":[\"//SELECT t1.`id` FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = ? Queryable<String> idQueryable = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"123\\\")) .select(String.class, o -> o.column(BlogEntity::getId));//如果子查询in string那么就需要select string，如果integer那么select要integer 两边需要一致 List<Topic> list = easyQuery .queryable(Topic.class).where(o -> o.in(Topic::getId, idQueryable)).toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`id` IN (SELECT t1.`id` FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = ?) ==> Parameters: false(Boolean),123(String) <== Time Elapsed: 2(ms) <== Total: 0 \"]},\"407\":{\"h\":\"NOT IN\",\"t\":[\"//SELECT t1.`id` FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = ? Queryable<String> idQueryable = easyQuery.queryable(BlogEntity.class) .where(o -> o.eq(BlogEntity::getId, \\\"1\\\")) .select(String.class, o -> o.column(BlogEntity::getId)); List<Topic> list = easyQuery .queryable(Topic.class).where(o -> o.notIn(Topic::getId, idQueryable)).toList(); ==> Preparing: SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`id` NOT IN (SELECT t1.`id` FROM `t_blog` t1 WHERE t1.`deleted` = ? AND t1.`id` = ?) ==> Parameters: false(Boolean),1(String) <== Time Elapsed: 4(ms) <== Total: 100 \"]},\"408\":{\"h\":\"map结果返回\",\"t\":[\"easy-query针对查询结果支持将结果动态返回以Map<String,Object>格式返回,默认Key忽略大小写(Locale.ENGLISH)\"]},\"409\":{\"h\":\"查询sqlQuery\",\"t\":[\"强类型结果返回\"]},\"410\":{\"h\":\"无参数强类型返回\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.sqlQuery(\\\"SELECT * FROM t_blog t\\\", BlogEntity.class); ==> Preparing: SELECT * FROM t_blog t <== Total: 100 \"]},\"411\":{\"h\":\"有参数强类型返回\",\"t\":[\"List<BlogEntity> blogEntities = easyQuery.sqlQuery(\\\"SELECT * FROM t_blog t where t.id=?\\\", BlogEntity.class, Collections.singletonList(\\\"1\\\")); ==> Preparing: SELECT * FROM t_blog t where t.id=? ==> Parameters: 1(String) <== Total: 1 \"]},\"412\":{\"h\":\"查询sqlQueryMap\",\"t\":[\"Map返回默认key忽略大小写\"]},\"413\":{\"h\":\"无参数Map返回\",\"t\":[\" List<Map<String, Object>> blogs = easyQuery.sqlQueryMap(\\\"SELECT * FROM t_blog t\\\"); ==> Preparing: SELECT * FROM t_blog t <== Total: 100 \"]},\"414\":{\"h\":\"有参数Map返回\",\"t\":[\"List<Map<String, Object>> blogs = easyQuery.sqlQueryMap(\\\"SELECT * FROM t_blog t where t.id=?\\\", Collections.singletonList(\\\"1\\\")); ==> Preparing: SELECT * FROM t_blog t where t.id=? ==> Parameters: 1(String) <== Total: 1 \"]},\"415\":{\"h\":\"Map\",\"t\":[\"返回结果为Map<String,Object> ,默认Key忽略大小写(Locale.ENGLISH)\"]},\"416\":{\"h\":\"联合查询 UNION (ALL)\",\"t\":[\"easy-query支持union，union all，并且支持对应的union下的分片查询\",\"实现sql\",\"select * from ( select a,b from t union select c,d from t1 ) t where t.id='1' \",\"警告\",\"！！！union或者union all需要表达式Queryable<T>都是相同的，您也可以自定义对象来返回对应的结果集\",\"数据库建表脚本\",\"create table t_topic ( id varchar(32) not null comment '主键ID'primary key, stars int not null comment '点赞数', title varchar(50) null comment '标题', create_time datetime not null comment '创建时间' )comment '主题表'; \",\"java实体对象\",\"@Data @Table(\\\"t_topic\\\") public class Topic { @Column(primaryKey = true) private String id; private Integer stars; private String title; private LocalDateTime createTime; } \"]},\"417\":{\"h\":\"单表union\",\"t\":[\" Queryable<Topic> q1 = easyQuery .queryable(Topic.class); Queryable<Topic> q2 = easyQuery .queryable(Topic.class); Queryable<Topic> q3 = easyQuery .queryable(Topic.class); List<Topic> list = q1.union(q2, q3).where(o -> o.eq(Topic::getId, \\\"123321\\\")).toList(); \",\" ==> Preparing: SELECT t1.`id`,t1.`stars`,t1.`title`,t1.`create_time` FROM ( SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t UNION SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t UNION SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t ) t1 WHERE t1.`id` = ? ==> Parameters: 123321(String) <== Time Elapsed: 19(ms) <== Total: 0 \"]},\"418\":{\"h\":\"复杂union\",\"t\":[\"//where id Queryable<Topic> q1 = easyQuery .queryable(Topic.class).where(o->o.eq(Topic::getId,\\\"123\\\")); //where create time Queryable<Topic> q2 = easyQuery .queryable(Topic.class).where(o->o.ge(Topic::getCreateTime,LocalDateTime.of(2020,1,1,1,1))); //join Queryable<Topic> q3 = easyQuery .queryable(Topic.class).leftJoin(BlogEntity.class,(t,t1)->t.eq(t1,Topic::getId,BlogEntity::getId)) .where((t,t1)->t1.isNotNull(BlogEntity::getContent).then(t).isNotNull(Topic::getStars)); List<Topic> list = q1.union(q2, q3).where(o -> o.eq(Topic::getId, \\\"123321\\\")).toList(); \",\"==> Preparing: SELECT t1.`id`,t1.`stars`,t1.`title`,t1.`create_time` FROM ( SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`id` = ? UNION SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t WHERE t.`create_time` >= ? UNION SELECT t.`id`,t.`stars`,t.`title`,t.`create_time` FROM `t_topic` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`content` IS NOT NULL AND t.`stars` IS NOT NULL ) t1 WHERE t1.`id` = ? ==> Parameters: 123(String),2020-01-01T01:01(LocalDateTime),false(Boolean),123321(String) <== Time Elapsed: 10(ms) <== Total: 0 \"]},\"419\":{\"h\":\"自定义结果集\",\"t\":[\" @Data public class TopicUnion { private String id; private Integer stars; @Column(\\\"title\\\")//列名需要对应 private String abc; } \",\" Queryable<TopicUnion> q1 = easyQuery .queryable(Topic.class).where(o->o.eq(Topic::getId,\\\"123\\\")).select(TopicUnion.class); Queryable<TopicUnion> q2 = easyQuery .queryable(Topic.class) .where(o->o.ge(Topic::getCreateTime,LocalDateTime.of(2020,1,1,1,1))) .select(TopicUnion.class); Queryable<TopicUnion> q3 = easyQuery .queryable(Topic.class).leftJoin(BlogEntity.class,(t,t1)->t.eq(t1,Topic::getId,BlogEntity::getId)) .where((t,t1)->t1.isNotNull(BlogEntity::getContent).then(t).isNotNull(Topic::getStars)) .select(TopicUnion.class); List<TopicUnion> list = q1.union(q2, q3).where(o -> o.eq(TopicUnion::getId, \\\"123321\\\")).toList(); \",\"==> Preparing: SELECT t2.`id`,t2.`stars`,t2.`title` FROM ( SELECT t.`id`,t.`stars`,t.`title` FROM `t_topic` t WHERE t.`id` = ? UNION SELECT t.`id`,t.`stars`,t.`title` FROM `t_topic` t WHERE t.`create_time` >= ? UNION SELECT t.`id`,t.`stars`,t.`title` FROM `t_topic` t LEFT JOIN `t_blog` t1 ON t1.`deleted` = ? AND t.`id` = t1.`id` WHERE t1.`content` IS NOT NULL AND t.`stars` IS NOT NULL ) t2 WHERE t2.`id` = ? ==> Parameters: 123(String),2020-01-01T01:01(LocalDateTime),false(Boolean),123321(String) <== Time Elapsed: 6(ms) <== Total: 0 \"]},\"420\":{\"h\":\"不同表union\",\"t\":[\"Queryable<TopicUnion> q1 = easyQuery .queryable(Topic.class).where(o->o.eq(Topic::getId,\\\"123\\\")).select(TopicUnion.class); Queryable<TopicUnion> q2 = easyQuery .queryable(BlogEntity.class) .where(o->o.ge(BlogEntity::getCreateTime,LocalDateTime.of(2020,1,1,1,1))) .select(TopicUnion.class,o->o.columnAs(BlogEntity::getId,TopicUnion::getId) .columnAs(BlogEntity::getStar,TopicUnion::getStars) .columnAs(BlogEntity::getContent,TopicUnion::getAbc) ); List<TopicUnion> list = q1.unionAll(q2).where(o -> o.eq(TopicUnion::getId, \\\"123321\\\")).toList(); \",\"==> Preparing: SELECT t2.`id`,t2.`stars`,t2.`title` FROM ( SELECT t.`id`,t.`stars`,t.`title` FROM `t_topic` t WHERE t.`id` = ? UNION ALL SELECT t.`id` AS `id`,t.`star` AS `stars`,t.`content` AS `title` FROM `t_blog` t WHERE t.`deleted` = ? AND t.`create_time` >= ? ) t2 WHERE t2.`id` = ? ==> Parameters: 123(String),false(Boolean),2020-01-01T01:01(LocalDateTime),123321(String) <== Time Elapsed: 5(ms) <== Total: 0 \"]},\"421\":{\"h\":\"条件比较\",\"t\":[\"easy-query的查询、修改、删除核心过滤方法就是WherePredicate和SqlPredicate两种是同一种东西,条件比较永远是columncomparevalue,column永远在左侧\"]},\"422\":{\"h\":\"API\",\"t\":[\"说明!!!\",\"代理模式下where的第一个参数是filter过滤器,第二个参数开始才是真正的表\",\"方法\",\"sql\",\"描述\",\"gt\",\">\",\"列 大于 值\",\"ge\",\">=\",\"列 大于等于 值\",\"eq\",\"=\",\"列 等于 值\",\"ne\",\"<>\",\"列 不等于 值\",\"le\",\"<=\",\"列 小于等于 值\",\"lt\",\"<\",\"列 小于 值\",\"likeMatchLeft\",\"like word%\",\"列左匹配\",\"likeMatchRight\",\"like %word\",\"列右匹配\",\"like\",\"like %word%\",\"列包含值\",\"notLikeMatchLeft\",\"not like word%\",\"列 不匹配左侧\",\"notLikeMatchRight\",\"not like %word\",\"列 不匹配右侧\",\"notLike\",\"not like %word%\",\"列不包含值\",\"isNull\",\"is null\",\"列 为null\",\"isNotNull\",\"is not null\",\"列 不为null\",\"in\",\"in\",\"列 在集合内部,集合为空返回False\",\"notIn\",\"not in\",\"列 不在集合内部,集合为空返回True\",\"rangeOpenClosed\",\"< x <=\",\"区间 (left..right] = {x | left < x <= right} 一般用于范围比如时间,小的时间在前大的时间在后\",\"rangeOpen\",\"< x <\",\"区间 (left..right) = {x | left < x < right} 一般用于范围比如时间,小的时间在前大的时间在后\",\"rangeClosedOpen\",\"<= x <\",\"[left..right) = {x | left <= x < right} 一般用于范围比如时间,小的时间在前大的时间在后\",\"rangeClosed\",\"<= x <=\",\"[left..right] = {x | left <= x <= right} 一般用于范围比如时间,小的时间在前大的时间在后\",\"columnFunc\",\"自定义\",\"自定义函数包裹column\",\"exists\",\"存在\",\"使用子查询queryable\",\"notExists\",\"不存在\",\"使用子查询queryable\"]},\"423\":{\"h\":\"动态条件\",\"t\":[\"eq、ge、isNull、isNotNull...... 一些列方法都有对应的重载,其中第一个参数boolean condition表示是否追加对应的条件,并且where一样存在重载\",\"SysUser sysUser = easyQuery.queryable(SysUser.class) .where(o -> o.eq(SysUser::getId, \\\"123xxx\\\") .like(false,SysUser::getPhone,\\\"133\\\"))//表达式like第一个参数为false所以不会添加phone的like条件到sql中 .firstOrNull() ==> Preparing: SELECT `id`,`create_time`,`username`,`phone`,`id_card`,`address` FROM `easy-query-test`.`t_sys_user` WHERE `id` = ? LIMIT 1 ==> Parameters: 123xxx(String) <== Time Elapsed: 3(ms) <== Total: 0 \"]},\"424\":{\"h\":\"null pointer\",\"t\":[\" Map<String,String> phone=null; SysUser sysUser = easyQuery.queryable(SysUser.class) .where(o -> o.eq(SysUser::getId, \\\"123xxx\\\") .like(phone!=null&&phone.containsKey(\\\"phone\\\"),SysUser::getPhone,phone.get(\\\"phone\\\"))) .firstOrNull(); //虽然我们对phone进行了判断非null并且包含对应的phone的key,但是因为第二个参数是直接获取值会导致phone.get(\\\"phone\\\")的phone还是null所以会报错空指针异常 \"]},\"425\":{\"h\":\"动态条件2\",\"t\":[\"Map<String,String> phone=null; SysUser sysUser = easyQuery.queryable(SysUser.class) .where(o -> o.eq(SysUser::getId, \\\"123xxx\\\")) .where(phone!=null&&phone.containsKey(\\\"phone\\\"),o -> o.like(SysUser::getPhone,phone.get(\\\"phone\\\")))//where与where之间采用and链接 .firstOrNull(); ==> Preparing: SELECT `id`,`create_time`,`username`,`phone`,`id_card`,`address` FROM `easy-query-test`.`t_sys_user` WHERE `id` = ? LIMIT 1 ==> Parameters: 123xxx(String) <== Time Elapsed: 2(ms) <== Total: 0 \"]},\"426\":{\"h\":\"超级功能\",\"t\":[\"easy-query的超级功能主要是分表分库和读写分离,作者有着多年的分库分表经验,并且在其他语言上也有一套相对完善的分表分库orm扩展 (sharding-core)[https://github.com/dotnetcore/sharding-core]\"]},\"427\":{\"h\":\"目录\",\"t\":[\"《分表》 数据库表进行分表处理\",\"《分库》 数据库对象分库处理\"]},\"428\":{\"h\":\"案例源码\",\"t\":[\"所有的超级功能的案例源码都在easy-query-sample\"]},\"429\":{\"h\":\"分库分表\",\"t\":[\"easy-query提供了高效,高性能的分片机制,完美的屏蔽分片带来的业务复杂度,不同于sharding-jdbc的sql的antlr解析采用自带的表达式解析性能高效,并且不同于ShardingSphere-Proxy的代理模式,导致未分片的对象也需要走代理,并且需要多次jdbc,easy-query采用客户端分片保证分片下的高性能查询结果返回,并且原生orm框架自带无需使用额外组件,更少的依赖来保证程序的健壮与可控\"]},\"430\":{\"h\":\"创建数据库\",\"t\":[\"我们还是以订单表作为分库分表的对象，默认按订单id进行分库,后续按订单uid进行分表\",\"订单id取模3进行分库,uid模2进行分表\"]},\"431\":{\"h\":\"配置文件\",\"t\":[\"因为分片涉及到跨表聚合所以需要设置默认数据源的连接池大小，并且设置分片可用数据源大小\",\" server: port: 8081 spring: datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/easy_sample?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root druid: initial-size: 10 max-active: 100 easy-query: enable: true name-conversion: underlined database: mysql defaultDataSourceMergePoolSize: 50 \",\"我们设置了最大连接数100,分片可用连接池数50保证至少有50个连接可以给非分片用,当然另外50个非分片会和分片进行竞争\"]},\"432\":{\"h\":\"添加额外数据源\",\"t\":[\"默认springboot下的数据源name为ds0所以我们还需要额外添加4个数据源\",\"springboot启动后我们可以通过数据库或者其他方式来获取链接字符串来手动构建datasource,启动后会创建ds1-ds4一共4个数据源额外加一个默认数据源一共5个\",\" @Component public class ShardingInitRunner implements ApplicationRunner { @Autowired private EasyQuery easyQuery; @Override public void run(ApplicationArguments args) throws Exception { Map<String, DataSource> dataSources = createDataSources(); DataSourceManager dataSourceManager = easyQuery.getRuntimeContext().getDataSourceManager(); for (Map.Entry<String, DataSource> stringDataSourceEntry : dataSources.entrySet()) { dataSourceManager.addDataSource(stringDataSourceEntry.getKey(), stringDataSourceEntry.getValue(), 60); } System.out.println(\\\"初始化完成\\\"); } private Map<String, DataSource> createDataSources() { HashMap<String, DataSource> stringDataSourceHashMap = new HashMap<>(); for (int i = 1; i < 3; i++) { //可以通过数据库查询或者其他方式来存储额外数据源 DataSource dataSource = createDataSource(\\\"ds\\\" + i, \\\"jdbc:mysql://127.0.0.1:3306/easy_sample\\\"+i+\\\"?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\", \\\"root\\\", \\\"root\\\"); stringDataSourceHashMap.put(\\\"ds\\\" + i, dataSource); } return stringDataSourceHashMap; } private DataSource createDataSource(String dsName, String url, String username, String password) { // 设置properties Properties properties = new Properties(); properties.setProperty(\\\"name\\\", dsName); properties.setProperty(\\\"driverClassName\\\", \\\"com.mysql.cj.jdbc.Driver\\\"); properties.setProperty(\\\"url\\\", url); properties.setProperty(\\\"username\\\", username); properties.setProperty(\\\"password\\\", password); properties.setProperty(\\\"initialSize\\\", \\\"10\\\"); properties.setProperty(\\\"maxActive\\\", \\\"100\\\"); try { return DruidDataSourceFactory.createDataSource(properties); } catch (Exception e) { throw new EasyQueryException(e); } } } \"]},\"433\":{\"h\":\"新增\",\"t\":[\" @RestController @RequestMapping(\\\"/orderShardingDataSourceAndTable\\\") @RequiredArgsConstructor(onConstructor_ = @Autowired) public class OrderShardingDataSourceAndTableController { private final EasyQuery easyQuery; @GetMapping(\\\"/add\\\") public Object add() { ArrayList<TDsOrderEntity> orderEntities = new ArrayList<>(100); List<String> users = Arrays.asList(\\\"xiaoming\\\", \\\"xiaohong\\\", \\\"xiaolan\\\"); for (int i = 0; i < 10; i++) { TDsOrderEntity orderEntity = new TDsOrderEntity(); orderEntity.setId(String.valueOf(i)); int i1 = i % 3; String uid = users.get(i1); orderEntity.setUid(uid); orderEntity.setOrderNo(i); orderEntity.setStatus(i1); orderEntity.setCreateTime(LocalDateTime.now()); orderEntities.add(orderEntity); } long l = easyQuery.insertable(orderEntities).executeRows(); return \\\"成功插入:\\\"+l; } } \",\": ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `t_ds_order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 1(String),xiaohong(String),1(Integer),1(Integer),2023-09-06T08:46:52.192684(LocalDateTime) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 2(String),xiaolan(String),2(Integer),2(Integer),2023-09-06T08:46:52.192688(LocalDateTime) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 0(String),xiaoming(String),0(Integer),0(Integer),2023-09-06T08:46:52.192664(LocalDateTime) : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `t_ds_order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 4(String),xiaohong(String),4(Integer),1(Integer),2023-09-06T08:46:52.192693(LocalDateTime) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 3(String),xiaoming(String),3(Integer),0(Integer),2023-09-06T08:46:52.192691(LocalDateTime) : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 5(String),xiaolan(String),5(Integer),2(Integer),2023-09-06T08:46:52.192696(LocalDateTime) : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `t_ds_order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 7(String),xiaohong(String),7(Integer),1(Integer),2023-09-06T08:46:52.192701(LocalDateTime) : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 8(String),xiaolan(String),8(Integer),2(Integer),2023-09-06T08:46:52.192703(LocalDateTime) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 6(String),xiaoming(String),6(Integer),0(Integer),2023-09-06T08:46:52.192698(LocalDateTime) : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `t_ds_order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 9(String),xiaoming(String),9(Integer),0(Integer),2023-09-06T08:46:52.192705(LocalDateTime) : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 \",\"新增数据插入到对应数据库的对应表 无感支持分库分表插入\"]},\"434\":{\"h\":\"修改\",\"t\":[\"进修改时间所以只会变更时间\",\" @GetMapping(\\\"/edit\\\") @EasyQueryTrack public Object edit() { TDsOrderEntity orderEntity = easyQuery.queryable(TDsOrderEntity.class) .asTracking() .where(o->o.eq(TDsOrderEntity::getId,\\\"1\\\")).firstNotNull(\\\"未找到对应的订单\\\"); orderEntity.setCreateTime(LocalDateTime.now()); easyQuery.updatable(orderEntity) .executeRows(); return orderEntity; } \",\": ==> SHARDING_EXECUTOR_1, name:ds1, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `t_ds_order_01` WHERE `id` = ? LIMIT 1 : ==> SHARDING_EXECUTOR_2, name:ds1, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `t_ds_order_00` WHERE `id` = ? LIMIT 1 : ==> SHARDING_EXECUTOR_1, name:ds1, Parameters: 1(String) : ==> SHARDING_EXECUTOR_2, name:ds1, Parameters: 1(String) : <== SHARDING_EXECUTOR_1, name:ds1, Time Elapsed: 7(ms) : <== SHARDING_EXECUTOR_2, name:ds1, Time Elapsed: 9(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds1, Preparing: UPDATE `t_ds_order_01` SET `create_time` = ? WHERE `id` = ? : ==> http-nio-8081-exec-1, name:ds1, Parameters: 2023-09-06T08:48:41.358198(LocalDateTime),1(String) : <== http-nio-8081-exec-1, name:ds1, Total: 1 \",\"对象更新精确命中对应的库和对应的表\",\"java并发更新\",\" @GetMapping(\\\"/concurrentEdit\\\") @EasyQueryTrack public Object concurrentEdit() { TDsOrderEntity orderEntity = easyQuery.queryable(TDsOrderEntity.class) .asTracking() .where(o->o.eq(TDsOrderEntity::getId,\\\"2\\\")).firstNotNull(\\\"未找到对应的订单\\\"); if(!Objects.equals(2,orderEntity.getStatus())){ throw new RuntimeException(\\\"订单状态不是2\\\"); } orderEntity.setCreateTime(LocalDateTime.now()); orderEntity.setStatus(3); easyQuery.updatable(orderEntity) .whereColumns(o->o.columnKeys().column(TDsOrderEntity::getStatus)) .executeRows(1,\\\"并发修改失败\\\"); return orderEntity; } \",\"并发更新分库,高性能命中对应的库和表\",\": ==> SHARDING_EXECUTOR_1, name:ds2, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `t_ds_order_01` WHERE `id` = ? LIMIT 1 : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `t_ds_order_00` WHERE `id` = ? LIMIT 1 : ==> SHARDING_EXECUTOR_1, name:ds2, Parameters: 2(String) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 2(String) : <== SHARDING_EXECUTOR_2, name:ds2, Time Elapsed: 8(ms) : <== SHARDING_EXECUTOR_1, name:ds2, Time Elapsed: 9(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds2, Preparing: UPDATE `t_ds_order_00` SET `status` = ?,`create_time` = ? WHERE `id` = ? AND `status` = ? : ==> http-nio-8081-exec-1, name:ds2, Parameters: 3(Integer),2023-09-06T08:50:50.959225(LocalDateTime),2(String),2(Integer) : <== http-nio-8081-exec-1, name:ds2, Total: 1 \"]},\"435\":{\"h\":\"分库\",\"t\":[\"easy-query提供了高效,高性能的分片机制,完美的屏蔽分片带来的业务复杂度,不同于sharding-jdbc的sql的antlr解析采用自带的表达式解析性能高效,并且不同于ShardingSphere-Proxy的代理模式,导致未分片的对象也需要走代理,并且需要多次jdbc,easy-query采用客户端分片保证分片下的高性能查询结果返回,并且原生orm框架自带无需使用额外组件,更少的依赖来保证程序的健壮与可控\"]},\"436\":{\"h\":\"创建数据库\",\"t\":[\"我们以订单表为例来实现订单的简单取模分库,将订单表按5取模进行分库分为ds0,ds1,ds2,ds3,ds4一共5个数据源\"]},\"437\":{\"h\":\"配置文件\",\"t\":[\"因为分片涉及到跨表聚合所以需要设置默认数据源的连接池大小，并且设置分片可用数据源大小\",\" server: port: 8081 spring: datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/easy_sample?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root druid: initial-size: 10 max-active: 100 easy-query: enable: true name-conversion: underlined database: mysql defaultDataSourceMergePoolSize: 50 \",\"我们设置了最大连接数100,分片可用连接池数50保证至少有50个连接可以给非分片用,当然另外50个非分片会和分片进行竞争\"]},\"438\":{\"h\":\"添加额外数据源\",\"t\":[\"默认springboot下的数据源name为ds0所以我们还需要额外添加4个数据源\",\"springboot启动后我们可以通过数据库或者其他方式来获取链接字符串来手动构建datasource,启动后会创建ds1-ds4一共4个数据源额外加一个默认数据源一共5个\",\" @Component public class ShardingInitRunner implements ApplicationRunner { @Autowired private EasyQuery easyQuery; @Override public void run(ApplicationArguments args) throws Exception { Map<String, DataSource> dataSources = createDataSources(); DataSourceManager dataSourceManager = easyQuery.getRuntimeContext().getDataSourceManager(); for (Map.Entry<String, DataSource> stringDataSourceEntry : dataSources.entrySet()) { dataSourceManager.addDataSource(stringDataSourceEntry.getKey(), stringDataSourceEntry.getValue(), 60); } System.out.println(\\\"初始化完成\\\"); } private Map<String, DataSource> createDataSources() { HashMap<String, DataSource> stringDataSourceHashMap = new HashMap<>(); for (int i = 1; i < 5; i++) { //可以通过数据库查询或者其他方式来存储额外数据源 DataSource dataSource = createDataSource(\\\"ds\\\" + i, \\\"jdbc:mysql://127.0.0.1:3306/easy_sample\\\"+i+\\\"?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true\\\", \\\"root\\\", \\\"root\\\"); stringDataSourceHashMap.put(\\\"ds\\\" + i, dataSource); } return stringDataSourceHashMap; } private DataSource createDataSource(String dsName, String url, String username, String password) { // 设置properties Properties properties = new Properties(); properties.setProperty(\\\"name\\\", dsName); properties.setProperty(\\\"driverClassName\\\", \\\"com.mysql.cj.jdbc.Driver\\\"); properties.setProperty(\\\"url\\\", url); properties.setProperty(\\\"username\\\", username); properties.setProperty(\\\"password\\\", password); properties.setProperty(\\\"initialSize\\\", \\\"10\\\"); properties.setProperty(\\\"maxActive\\\", \\\"100\\\"); try { return DruidDataSourceFactory.createDataSource(properties); } catch (Exception e) { throw new EasyQueryException(e); } } } \"]},\"439\":{\"h\":\"新增\",\"t\":[\" @RestController @RequestMapping(\\\"/orderShardingDataSource\\\") @RequiredArgsConstructor(onConstructor_ = @Autowired) public class OrderShardingDataSourceController { private final EasyQuery easyQuery; @GetMapping(\\\"/add\\\") public Object add() { ArrayList<DsOrderEntity> orderEntities = new ArrayList<>(100); List<String> users = Arrays.asList(\\\"xiaoming\\\", \\\"xiaohong\\\", \\\"xiaolan\\\"); for (int i = 0; i < 10; i++) { DsOrderEntity orderEntity = new DsOrderEntity(); orderEntity.setId(String.valueOf(i)); int i1 = i % 3; String uid = users.get(i1); orderEntity.setUid(uid); orderEntity.setOrderNo(i); orderEntity.setStatus(i1); orderEntity.setCreateTime(LocalDateTime.now()); orderEntities.add(orderEntity); } long l = easyQuery.insertable(orderEntities).executeRows(); return \\\"成功插入:\\\"+l; } } \",\": ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 2(String),xiaolan(String),2(Integer),2(Integer),2023-09-04T22:02:31.509635(LocalDateTime) : ==> SHARDING_EXECUTOR_5, name:ds3, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_5, name:ds3, Parameters: 0(String),xiaoming(String),0(Integer),0(Integer),2023-09-04T22:02:31.509610(LocalDateTime) : ==> SHARDING_EXECUTOR_4, name:ds4, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_4, name:ds4, Parameters: 1(String),xiaohong(String),1(Integer),1(Integer),2023-09-04T22:02:31.509631(LocalDateTime) : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 4(String),xiaohong(String),4(Integer),1(Integer),2023-09-04T22:02:31.509640(LocalDateTime) : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 3(String),xiaoming(String),3(Integer),0(Integer),2023-09-04T22:02:31.509637(LocalDateTime) : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : ==> SHARDING_EXECUTOR_1, name:ds0, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_1, name:ds0, Parameters: 7(String),xiaohong(String),7(Integer),1(Integer),2023-09-04T22:02:31.509647(LocalDateTime) : <== SHARDING_EXECUTOR_4, name:ds4, Total: 1 : ==> SHARDING_EXECUTOR_4, name:ds4, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_4, name:ds4, Parameters: 6(String),xiaoming(String),6(Integer),0(Integer),2023-09-04T22:02:31.509645(LocalDateTime) : <== SHARDING_EXECUTOR_5, name:ds3, Total: 1 : ==> SHARDING_EXECUTOR_5, name:ds3, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_5, name:ds3, Parameters: 5(String),xiaolan(String),5(Integer),2(Integer),2023-09-04T22:02:31.509642(LocalDateTime) : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 : ==> SHARDING_EXECUTOR_2, name:ds2, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_2, name:ds2, Parameters: 9(String),xiaoming(String),9(Integer),0(Integer),2023-09-04T22:02:31.509652(LocalDateTime) : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : <== SHARDING_EXECUTOR_4, name:ds4, Total: 1 : <== SHARDING_EXECUTOR_1, name:ds0, Total: 1 : ==> SHARDING_EXECUTOR_3, name:ds1, Preparing: INSERT INTO `ds_order` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> SHARDING_EXECUTOR_3, name:ds1, Parameters: 8(String),xiaolan(String),8(Integer),2(Integer),2023-09-04T22:02:31.509650(LocalDateTime) : <== SHARDING_EXECUTOR_5, name:ds3, Total: 1 : <== SHARDING_EXECUTOR_3, name:ds1, Total: 1 : <== SHARDING_EXECUTOR_2, name:ds2, Total: 1 \",\"name ds0-ds4分别对应分库插入的数据源。\"]},\"440\":{\"h\":\"修改\",\"t\":[\"进修改时间所以只会变更时间\",\" @GetMapping(\\\"/edit\\\") @EasyQueryTrack public Object edit() { DsOrderEntity orderEntity = easyQuery.queryable(DsOrderEntity.class) .asTracking() .where(o->o.eq(DsOrderEntity::getId,\\\"1\\\")).firstNotNull(\\\"未找到对应的订单\\\"); orderEntity.setCreateTime(LocalDateTime.now()); easyQuery.updatable(orderEntity) .executeRows(); return orderEntity; } \",\"对象更新可以通过id直接路由到对应的库保证用户无感更新,且数据高性能更新\",\": ==> http-nio-8081-exec-4, name:ds4, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `ds_order` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-4, name:ds4, Parameters: 1(String) : <== http-nio-8081-exec-4, name:ds4, Time Elapsed: 26(ms) : <== Total: 1 : ==> http-nio-8081-exec-4, name:ds4, Preparing: UPDATE `ds_order` SET `create_time` = ? WHERE `id` = ? : ==> http-nio-8081-exec-4, name:ds4, Parameters: 2023-09-05T08:47:48.703659(LocalDateTime),1(String) : <== http-nio-8081-exec-4, name:ds4, Total: 1 \",\"java并发更新\",\" @GetMapping(\\\"/concurrentEdit\\\") @EasyQueryTrack public Object concurrentEdit() { DsOrderEntity orderEntity = easyQuery.queryable(DsOrderEntity.class) .asTracking() .where(o->o.eq(DsOrderEntity::getId,\\\"2\\\")).firstNotNull(\\\"未找到对应的订单\\\"); if(!Objects.equals(2,orderEntity.getStatus())){ throw new RuntimeException(\\\"订单状态不是2\\\"); } orderEntity.setCreateTime(LocalDateTime.now()); orderEntity.setStatus(3); easyQuery.updatable(orderEntity) .whereColumns(o->o.columnKeys().column(DsOrderEntity::getStatus)) .executeRows(1,\\\"并发修改失败\\\"); return orderEntity; } \",\"并发更新分库,高性能命中对应的库\",\": ==> http-nio-8081-exec-1, name:ds0, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `ds_order` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-1, name:ds0, Parameters: 2(String) : <== http-nio-8081-exec-1, name:ds0, Time Elapsed: 6(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds0, Preparing: UPDATE `ds_order` SET `status` = ?,`create_time` = ? WHERE `id` = ? AND `status` = ? : ==> http-nio-8081-exec-1, name:ds0, Parameters: 3(Integer),2023-09-05T08:54:19.189373(LocalDateTime),2(String),2(Integer) : <== http-nio-8081-exec-1, name:ds0, Total: 1 \"]},\"441\":{\"h\":\"分表\",\"t\":[\"easy-query提供了高效,高性能的分片机制,完美的屏蔽分片带来的业务复杂度,不同于sharding-jdbc的sql的antlr解析采用自带的表达式解析性能高效,并且不同于ShardingSphere-Proxy的代理模式,导致未分片的对象也需要走代理,并且需要多次jdbc,easy-query采用客户端分片保证分片下的高性能查询结果返回,并且原生orm框架自带无需使用额外组件,更少的依赖来保证程序的健壮与可控\"]},\"442\":{\"h\":\"创建表\",\"t\":[\"我们以订单表为例来实现订单的简单取模分表,将订单表按5取模进行分表分为t_order_00、t_order_01....t_order_04\"]},\"443\":{\"h\":\"配置文件\",\"t\":[\"因为分片涉及到跨表聚合所以需要设置默认数据源的连接池大小，并且设置分片可用数据源大小\",\" server: port: 8081 spring: datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/easy_sample?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&rewriteBatchedStatements=true username: root password: root druid: initial-size: 10 max-active: 100 easy-query: enable: true name-conversion: underlined database: mysql defaultDataSourceMergePoolSize: 50 \",\"我们设置了最大连接数100,分片可用连接池数50\"]},\"444\":{\"h\":\"新增\",\"t\":[\" @RestController @RequestMapping(\\\"/orderShardingTable\\\") @RequiredArgsConstructor(onConstructor_ = @Autowired) public class OrderShardingTableController { private final EasyQuery easyQuery; @GetMapping(\\\"/add\\\") public Object add() { ArrayList<OrderEntity> orderEntities = new ArrayList<>(100); List<String> users = Arrays.asList(\\\"xiaoming\\\", \\\"xiaohong\\\", \\\"xiaolan\\\"); for (int i = 0; i < 10; i++) { OrderEntity orderEntity = new OrderEntity(); orderEntity.setId(String.valueOf(i)); int i1 = i % 3; String uid = users.get(i1); orderEntity.setUid(uid); orderEntity.setOrderNo(i); orderEntity.setStatus(i1); orderEntity.setCreateTime(LocalDateTime.now()); orderEntities.add(orderEntity); } long l = easyQuery.insertable(orderEntities).executeRows(); return \\\"成功插入:\\\"+l; } } \",\" : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_03` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 0(String),xiaoming(String),0(Integer),0(Integer),2023-09-02T15:15:29.391349(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_04` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 1(String),xiaohong(String),1(Integer),1(Integer),2023-09-02T15:15:29.391420(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 2(String),xiaolan(String),2(Integer),2(Integer),2023-09-02T15:15:29.391433(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 3(String),xiaoming(String),3(Integer),0(Integer),2023-09-02T15:15:29.391445(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_02` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 4(String),xiaohong(String),4(Integer),1(Integer),2023-09-02T15:15:29.391457(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_03` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 5(String),xiaolan(String),5(Integer),2(Integer),2023-09-02T15:15:29.391469(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_04` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 6(String),xiaoming(String),6(Integer),0(Integer),2023-09-02T15:15:29.391481(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_00` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 7(String),xiaohong(String),7(Integer),1(Integer),2023-09-02T15:15:29.391492(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_01` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 8(String),xiaolan(String),8(Integer),2(Integer),2023-09-02T15:15:29.391504(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 : ==> http-nio-8081-exec-4, name:ds0, Preparing: INSERT INTO `order_02` (`id`,`uid`,`order_no`,`status`,`create_time`) VALUES (?,?,?,?,?) : ==> http-nio-8081-exec-4, name:ds0, Parameters: 9(String),xiaoming(String),9(Integer),0(Integer),2023-09-02T15:15:29.391516(LocalDateTime) : <== http-nio-8081-exec-4, name:ds0, Total: 1 \"]},\"445\":{\"h\":\"修改\",\"t\":[\"进修改时间所以只会变更时间\",\"@GetMapping(\\\"/edit\\\") @EasyQueryTrack public Object edit() { OrderEntity orderEntity = easyQuery.queryable(OrderEntity.class) .asTracking() .where(o->o.eq(OrderEntity::getId,\\\"1\\\")).firstNotNull(\\\"未找到对应的订单\\\"); orderEntity.setCreateTime(LocalDateTime.now()); easyQuery.updatable(orderEntity) .executeRows(); return orderEntity; } \",\": ==> http-nio-8081-exec-1, name:ds0, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `order_04` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-1, name:ds0, Parameters: 1(String) : <== http-nio-8081-exec-1, name:ds0, Time Elapsed: 20(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds0, Preparing: UPDATE `order_04` SET `create_time` = ? WHERE `id` = ? : ==> http-nio-8081-exec-1, name:ds0, Parameters: 2023-09-02T15:20:13.029025(LocalDateTime),1(String) : <== http-nio-8081-exec-1, name:ds0, Total: 1 \",\"并发更新，将订单状态为2的数据改为3,并且需要支持并发操作\",\" @GetMapping(\\\"/concurrentEdit\\\") @EasyQueryTrack public Object concurrentEdit() { OrderEntity orderEntity = easyQuery.queryable(OrderEntity.class) .asTracking() .where(o->o.eq(OrderEntity::getId,\\\"2\\\")).firstNotNull(\\\"未找到对应的订单\\\"); if(!Objects.equals(2,orderEntity.getStatus())){ throw new RuntimeException(\\\"订单状态不是2\\\"); } orderEntity.setCreateTime(LocalDateTime.now()); orderEntity.setStatus(3); easyQuery.updatable(orderEntity) .whereColumns(o->o.columnKeys().column(OrderEntity::getStatus)) .executeRows(1,\\\"并发修改失败\\\"); return orderEntity; } \",\" : ==> http-nio-8081-exec-1, name:ds0, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `order_00` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-1, name:ds0, Parameters: 2(String) : <== http-nio-8081-exec-1, name:ds0, Time Elapsed: 5(ms) : <== Total: 1 : ==> http-nio-8081-exec-1, name:ds0, Preparing: UPDATE `order_00` SET `status` = ?,`create_time` = ? WHERE `id` = ? AND `status` = ? : ==> http-nio-8081-exec-1, name:ds0, Parameters: 3(Integer),2023-09-02T15:23:51.745936(LocalDateTime),2(String),2(Integer) : <== http-nio-8081-exec-1, name:ds0, Total: 1 \"]},\"446\":{\"h\":\"删除\",\"t\":[\" @GetMapping(\\\"/delete\\\") public Object delete() { OrderEntity orderEntity = easyQuery.queryable(OrderEntity.class) .asTracking() .where(o->o.eq(OrderEntity::getId,\\\"3\\\")).firstNotNull(\\\"未找到对应的订单\\\"); orderEntity.setCreateTime(LocalDateTime.now()); easyQuery.deletable(orderEntity) .allowDeleteStatement(true) .executeRows(); return orderEntity; } \",\"使用分片键删除可以精确到对应的分片表\",\": ==> http-nio-8081-exec-3, name:ds0, Preparing: SELECT `id`,`uid`,`order_no`,`status`,`create_time` FROM `order_01` WHERE `id` = ? LIMIT 1 : ==> http-nio-8081-exec-3, name:ds0, Parameters: 3(String) : <== http-nio-8081-exec-3, name:ds0, Time Elapsed: 6(ms) : <== Total: 1 : ==> http-nio-8081-exec-3, name:ds0, Preparing: DELETE FROM `order_01` WHERE `id` = ? : ==> http-nio-8081-exec-3, name:ds0, Parameters: 3(String) : <== http-nio-8081-exec-3, name:ds0, Total: 1 \"]},\"447\":{\"h\":\"对象设计\",\"t\":[\"easy-query的实战环境会尽可能的给大家带来实际开发过程中我们采用的设计类型，并且给大家带来更多的解决方案\",\"默认我们都会通过新建一个基类类满足公用的对象,并且会对数据库进行额外设计字段，比如id，createTime，createBy，updateTime，updateBy，deleted，deleteTime，deleteBy\",\" @Data public abstract class BaseEntity implements Serializable, Cloneable { private static final long serialVersionUID = -1L; /** * 记录标识;记录标识 */ @Column(primaryKey = true) private String id; /** * 创建时间;创建时间 */ @UpdateIgnore private LocalDateTime createTime; /** * 修改时间;修改时间 */ private LocalDateTime updateTime; /** * 创建人;创建人 */ @UpdateIgnore private String createBy; /** * 修改人;修改人 */ private String updateBy; /** * 是否删除;是否删除 */ @LogicDelete(strategy = LogicDeleteStrategyEnum.CUSTOM,strategyName = CommonConstant.DeleteStrategy.DELETE_WITH_USER_TIME) @UpdateIgnore private Boolean deleted; /** * 删除人 */ @UpdateIgnore private String deleteBy; /** * 删除时间 */ @UpdateIgnore private LocalDateTime deleteTime; } \",\"然后我们会添加对应的自动添加处理，新建拦截器,需要支持对象插入的时候可以进行创建人和创建时间的自动赋值,对象修改时可以进行修改人和修改时间的自动赋值，表达式更新的时候也可以对修改时间和修改人进行自动处理\",\" @Component @AllArgsConstructor(onConstructor_ = @Autowired) public class DefaultEntityInterceptor implements EntityInterceptor, UpdateSetInterceptor { private final CurrentUser currentUser;//对springboot进行的封装可以通过jwt获取对应的当前操作人用户 /** * 添加默认的数据 * * @param entityClass * @param entityInsertExpressionBuilder * @param entity */ @Override public void configureInsert(Class<?> entityClass, EntityInsertExpressionBuilder entityInsertExpressionBuilder, Object entity) { BaseEntity baseEntity = (BaseEntity) entity; if (baseEntity.getCreateTime() == null) { baseEntity.setCreateTime(LocalDateTime.now()); } if (baseEntity.getCreateBy() == null) { String userId = StringUtils.defaultString(currentUser.getUserId()); baseEntity.setCreateBy(userId); } if (baseEntity.getUpdateTime() == null) { baseEntity.setUpdateTime(LocalDateTime.now()); } if (baseEntity.getUpdateBy() == null) { String userId = StringUtils.defaultString(currentUser.getUserId()); baseEntity.setUpdateBy(userId); } if (baseEntity.getDeleted() == null) { baseEntity.setDeleted(false); } if (baseEntity.getId() == null) { baseEntity.setId(IdHelper.nextId()); } } /** * 添加更新对象参数 * * @param entityClass * @param entityUpdateExpressionBuilder * @param entity */ @Override public void configureUpdate(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, Object entity) { BaseEntity baseEntity = (BaseEntity) entity; baseEntity.setUpdateTime(LocalDateTime.now()); String userId = StringUtils.defaultString(currentUser.getUserId()); baseEntity.setUpdateBy(userId); } /** * 表达式更新set参数添加 * * @param entityClass * @param entityUpdateExpressionBuilder * @param columnSetter */ @Override public void configure(Class<?> entityClass, EntityUpdateExpressionBuilder entityUpdateExpressionBuilder, ColumnSetter<Object> columnSetter) { String updateBy = \\\"updateBy\\\"; String updateTime = \\\"updateTime\\\"; //是否已经set了 if (!entityUpdateExpressionBuilder.getSetColumns().containsOnce(entityClass, updateBy)) { String userId = StringUtils.defaultString(currentUser.getUserId()); columnSetter.set(updateBy, userId); } if (!entityUpdateExpressionBuilder.getSetColumns().containsOnce(entityClass, updateTime)) { columnSetter.set(updateTime, LocalDateTime.now()); } } @Override public String name() { return CommonConstant.Interceptor.DEFAULT_INTERCEPTOR; } @Override public boolean apply(Class<?> entityClass) { return BaseEntity.class.isAssignableFrom(entityClass); } } \",\"创建时间和创建人和修改时间修改人已经添加的情况下我们还需要对删除时间删除人进行处理\",\" @Component @RequiredArgsConstructor(onConstructor_ = @Autowired) public class MyBooleanLogicDeleteStrategy extends AbstractLogicDeleteStrategy { private final CurrentUser currentUser; private static final Set<Class<?>> allowedPropertyTypes =new HashSet<>(Arrays.asList(Boolean.class,boolean.class)); @Override public String getStrategy() { return CommonConstant.DeleteStrategy.DELETE_WITH_USER_TIME; } @Override public Set<Class<?>> allowedPropertyTypes() { return allowedPropertyTypes; } @Override protected SQLExpression1<WherePredicate<Object>> getPredicateFilterExpression(LogicDeleteBuilder builder, String propertyName) { return o -> o.eq(propertyName, false); } @Override protected SQLExpression1<ColumnSetter<Object>> getDeletedSQLExpression(LogicDeleteBuilder builder, String propertyName) { //表达式内部的参数不可以提取出来,如果提取出来那么就确定了,而不是实时的 return o -> o.set(propertyName, true).set(\\\"deleteBy\\\",currentUser.getUserId()).set(\\\"deleteTime\\\", LocalDateTime.now()); } } \",\"这样我们就完成了新增自动填充创建信息和修改信息,删除自动填充删除信息,而不需要认为手动赋值\"]},\"448\":{\"h\":\"主要功能与配置演示\"},\"449\":{\"h\":\"目录\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\"]},\"450\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"451\":{\"h\":\"密码加密的文章\",\"t\":[\"实际的文章内容。\",\"段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。\",\"段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。\"]},\"452\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"453\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"454\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"455\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"456\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"457\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"458\":{\"h\":\"自定义容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"459\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"460\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"461\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"462\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"463\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注[1].\",\"查看详情\"]},\"464\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"465\":{\"h\":\"任务列表\",\"t\":[\" 计划 1\",\" 计划 2\",\"查看详情\"]},\"466\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"467\":{\"h\":\"图表\",\"t\":[\"查看详情\"]},\"468\":{\"h\":\"Echarts\",\"t\":[\"查看详情\"]},\"469\":{\"h\":\"流程图\",\"t\":[\"查看详情\"]},\"470\":{\"h\":\"Mermaid\",\"t\":[\"查看详情\"]},\"471\":{\"h\":\"Tex 语法\",\"t\":[\"∂ωr∂r​(ωyω​)=(ωyω​){(logy)r+i=1∑r​ωi(−1)ir⋯(r−i+1)(logy)r−i​}\",\"查看详情\"]},\"472\":{\"h\":\"导入文件\",\"t\":[\"Markdown 展示\",\"页面展示\",\"禁用展示\",\"加密展示\",\"查看详情\"]},\"473\":{\"h\":\"代码演示\",\"t\":[\"查看详情\"]},\"474\":{\"h\":\"样式化\",\"t\":[\"向 Mr.Hope 捐赠一杯咖啡。 \",\"查看详情\"]},\"475\":{\"h\":\"交互演示\",\"t\":[\"查看详情\"]},\"476\":{\"h\":\"Vue 交互演示\",\"t\":[\"查看详情\"]},\"477\":{\"h\":\"幻灯片\",\"t\":[\"查看详情\",\"这是脚注内容 ↩︎\"]},\"478\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"479\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"480\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"提示\",\"你可以将图片和 Markdown 文件放置在一起，但是你需要使用相对链接./ 进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\",\"主题包含了一个自定义徽章可以使用:\",\"文字结尾应该有深蓝色的 徽章文字 徽章。 \"]},\"481\":{\"h\":\"页面结构\",\"t\":[\"此页面应当包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"导航栏\",\"侧边栏\",\"页脚\",\"返回顶部按钮\",\"你可以通过主题选项和页面 Frontmatter 自定义它们。\"]},\"482\":{\"h\":\"指南\"},\"483\":{\"h\":\"功能亮点\"},\"484\":{\"h\":\"Bar\",\"t\":[\"baz\",\"...\"]},\"485\":{\"h\":\"Foo\",\"t\":[\"ray\",\"...\"]},\"486\":{\"h\":\"Bar 功能\"},\"487\":{\"h\":\"介绍\",\"t\":[\"我们支持 bar 功能，...\"]},\"488\":{\"h\":\"详情\",\"t\":[\"baz\",\"...\"]},\"489\":{\"h\":\"Baz\",\"t\":[\"功能详情...\"]},\"490\":{\"h\":\"Foo 功能\"},\"491\":{\"h\":\"介绍\",\"t\":[\"我们支持 foo 功能，...\"]},\"492\":{\"h\":\"详情\",\"t\":[\"ray\",\"...\"]},\"493\":{\"h\":\"Ray\",\"t\":[\"功能详情...\"]}},\"dirtCount\":0,\"index\":[[\"详情\",{\"0\":{\"488\":1,\"492\":1}}],[\"详情容器\",{\"1\":{\"458\":1}}],[\"徽章\",{\"1\":{\"480\":1}}],[\"徽章文字\",{\"1\":{\"480\":1}}],[\"日\",{\"1\":{\"479\":1}}],[\"日志配置\",{\"0\":{\"287\":1},\"1\":{\"210\":1}}],[\"月\",{\"1\":{\"479\":1}}],[\"年\",{\"1\":{\"479\":1}}],[\"写作日期为\",{\"1\":{\"479\":1}}],[\"幻灯片\",{\"0\":{\"477\":1}}],[\"幻灯片页\",{\"0\":{\"63\":1}}],[\"交互演示\",{\"0\":{\"475\":1,\"476\":1}}],[\"捐赠一杯咖啡\",{\"1\":{\"474\":1}}],[\"向\",{\"1\":{\"474\":1}}],[\"样式化\",{\"0\":{\"474\":1}}],[\"流程图\",{\"0\":{\"469\":1}}],[\"图表\",{\"0\":{\"467\":1}}],[\"图片增强\",{\"0\":{\"466\":1}}],[\"计划\",{\"1\":{\"465\":2}}],[\"任务列表\",{\"0\":{\"465\":1}}],[\"标签为\",{\"1\":{\"479\":1}}],[\"标记\",{\"0\":{\"464\":1}}],[\"标题和页面信息\",{\"1\":{\"481\":1}}],[\"标题倒序\",{\"1\":{\"332\":1}}],[\"标题9\",{\"1\":{\"168\":1}}],[\"标题8\",{\"1\":{\"168\":1}}],[\"标题7\",{\"1\":{\"168\":1}}],[\"标题6\",{\"1\":{\"168\":1}}],[\"标题5\",{\"1\":{\"168\":1}}],[\"标题4\",{\"1\":{\"168\":1}}],[\"标题3\",{\"1\":{\"168\":1}}],[\"标题2\",{\"1\":{\"168\":1}}],[\"标题\",{\"1\":{\"162\":1,\"166\":2,\"201\":1,\"321\":1,\"322\":4,\"324\":1,\"325\":4,\"385\":1,\"397\":1,\"399\":1,\"416\":1}}],[\"标题1\",{\"1\":{\"133\":1,\"168\":1,\"169\":1}}],[\"标题0\",{\"1\":{\"129\":1,\"167\":1,\"168\":1,\"169\":1}}],[\"脚注\",{\"0\":{\"463\":1}}],[\"查看详情\",{\"1\":{\"458\":1,\"459\":1,\"460\":1,\"461\":1,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"466\":1,\"467\":1,\"468\":1,\"469\":1,\"470\":1,\"471\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"476\":1,\"477\":1}}],[\"查询映射到对象blogentitytest2在原来的查询结果上忽略blogentity\",{\"1\":{\"390\":1}}],[\"查询学生表\",{\"1\":{\"382\":1}}],[\"查询班级下面的所有老师和学生\",{\"1\":{\"379\":1}}],[\"查询sqlquerymap\",{\"0\":{\"349\":1,\"412\":1}}],[\"查询sqlquery\",{\"0\":{\"346\":1,\"409\":1}}],[\"查询对分组结果进行筛选\",{\"1\":{\"310\":1}}],[\"查询对象\",{\"0\":{\"321\":1,\"324\":1},\"1\":{\"310\":1}}],[\"查询分组\",{\"1\":{\"310\":1}}],[\"查询添加astracking或者\",{\"1\":{\"206\":1}}],[\"查询过滤租户id\",{\"1\":{\"122\":1}}],[\"查询\",{\"0\":{\"306\":1},\"1\":{\"121\":1,\"122\":1,\"127\":1,\"129\":1,\"139\":1,\"310\":1}}],[\"查询使用astracking使当前查询结果添加到追踪上下文\",{\"1\":{\"99\":1}}],[\"查询语句采用手机号列解密\",{\"1\":{\"94\":1}}],[\"查询数据\",{\"0\":{\"94\":1}}],[\"危险容器\",{\"1\":{\"458\":1}}],[\"与\",{\"1\":{\"458\":1}}],[\"信息容器\",{\"1\":{\"458\":1}}],[\"信息映射到vo对的班级信息上面\",{\"1\":{\"382\":1}}],[\"安全的在\",{\"1\":{\"458\":1}}],[\"安装依赖\",{\"0\":{\"192\":1}}],[\"语法\",{\"0\":{\"471\":1},\"1\":{\"457\":1}}],[\"语法进行了扩展\",{\"1\":{\"456\":1}}],[\"语法扩展\",{\"1\":{\"455\":1}}],[\"语义上面来讲代理模式最好\",{\"1\":{\"236\":1}}],[\"插件来实现\",{\"1\":{\"455\":1}}],[\"插入列策略\",{\"1\":{\"260\":1}}],[\"插入成功返回1\",{\"1\":{\"174\":1}}],[\"插入时如果主键或者唯一索引存在就忽略插入\",{\"1\":{\"173\":1}}],[\"插入sql\",{\"1\":{\"167\":1}}],[\"插入\",{\"1\":{\"139\":1,\"143\":1}}],[\"插入的时候确定了自动填充\",{\"1\":{\"117\":1}}],[\"插入语句采用手机号加密\",{\"1\":{\"93\":1}}],[\"插入数据测试\",{\"0\":{\"78\":1}}],[\"扩展\",{\"0\":{\"455\":1,\"456\":1},\"1\":{\"456\":1}}],[\"演示\",{\"1\":{\"453\":1}}],[\"还不会编写\",{\"1\":{\"453\":1}}],[\"还是上述案例假设第三个线程获取到了5个链接但是获取的时间超过了multiconnwaittimeoutmillis时间的80\",{\"1\":{\"246\":1}}],[\"介绍\",{\"0\":{\"453\":1,\"487\":1,\"491\":1},\"1\":{\"453\":1,\"454\":1}}],[\"因此可以借助于\",{\"1\":{\"455\":1}}],[\"因此\",{\"1\":{\"452\":1}}],[\"因为分片涉及到跨表聚合所以需要设置默认数据源的连接池大小\",{\"1\":{\"431\":1,\"437\":1,\"443\":1}}],[\"因为columnall如果真是查询表所有字段但是映射到blogentitytest2后会丢失所以没有必要查询全字段\",{\"1\":{\"390\":1}}],[\"因为content不一样所以返回行数2\",{\"1\":{\"174\":1}}],[\"因为where\",{\"1\":{\"383\":1}}],[\"因为关联查询采用的是splitquery\",{\"1\":{\"382\":1}}],[\"因为是包装类型可能会出现npe\",{\"1\":{\"332\":1}}],[\"因为是查询单条数据所以可以近似理解为表达式生成sql的能力差距大概是5\",{\"1\":{\"184\":1}}],[\"因为update会使用track追踪模式更新所以这边json对象必须要重写equals和hashcode\",{\"1\":{\"301\":1}}],[\"因为默认添加了track的aop如果启动报错那么就添加一下aop\",{\"1\":{\"268\":1}}],[\"因为默认为非null列插入所以执行的sql是单条单条执行\",{\"1\":{\"245\":1}}],[\"因为easy\",{\"1\":{\"267\":1,\"273\":1}}],[\"因为连接池为20如果单次查询需要21那么会一直等待直到超时也获取不到21个\",{\"1\":{\"246\":1}}],[\"因为查询未带分片键\",{\"1\":{\"246\":1}}],[\"因为考虑到有时候可能需要查看sql而不是将log输出\",{\"1\":{\"245\":1}}],[\"因为没有数据需要被修改\",{\"1\":{\"206\":1}}],[\"因为没有null列所以不会生成sql返回受影响行数也是0\",{\"1\":{\"160\":1}}],[\"因为允许删除命令仅对当前sql生成为delete语句才会生效判断\",{\"1\":{\"164\":1}}],[\"因为开启了追踪但是对象数据没有发生变化\",{\"1\":{\"108\":1}}],[\"因为程序认为本次没有任何需要变更的数据也就不需要更新\",{\"1\":{\"108\":1}}],[\"因为为了高性能默认easy\",{\"1\":{\"96\":1}}],[\"文章标题列表\",{\"1\":{\"481\":1}}],[\"文件夹的图片\",{\"1\":{\"480\":1}}],[\"文件放置在一起\",{\"1\":{\"480\":1}}],[\"文件\",{\"1\":{\"452\":1}}],[\"文件生成页面\",{\"1\":{\"452\":1}}],[\"文字结尾应该有深蓝色的\",{\"1\":{\"480\":1}}],[\"文字\",{\"1\":{\"451\":2}}],[\"文字段落\",{\"1\":{\"451\":24}}],[\"文档主题\",{\"0\":{\"4\":1}}],[\"段落\",{\"1\":{\"451\":2}}],[\"密码加密的文章\",{\"0\":{\"451\":1}}],[\"页脚\",{\"1\":{\"450\":1,\"481\":1}}],[\"页面结构\",{\"0\":{\"481\":1}}],[\"页面内容\",{\"0\":{\"480\":1}}],[\"页面配置\",{\"0\":{\"478\":1},\"1\":{\"479\":1}}],[\"页面引入配置\",{\"1\":{\"454\":1}}],[\"页面信息\",{\"0\":{\"479\":1},\"1\":{\"450\":1}}],[\"页面展示\",{\"1\":{\"449\":1,\"472\":1}}],[\"评论\",{\"1\":{\"450\":1,\"481\":1}}],[\"评分\",{\"1\":{\"321\":1,\"324\":1,\"385\":1,\"397\":1,\"398\":1,\"399\":1}}],[\"贡献者\",{\"1\":{\"450\":1,\"481\":1}}],[\"路径导航\",{\"1\":{\"450\":1,\"481\":1}}],[\"侧边栏\",{\"1\":{\"450\":1,\"481\":1}}],[\"你需要阅读\",{\"1\":{\"454\":1}}],[\"你应该创建和编写\",{\"1\":{\"452\":1}}],[\"你可以通过主题选项和页面\",{\"1\":{\"481\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"450\":1}}],[\"你可以将图片和\",{\"1\":{\"480\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"480\":1}}],[\"你可以在\",{\"1\":{\"479\":1}}],[\"你可以标记\",{\"1\":{\"464\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"452\":1}}],[\"你好\",{\"1\":{\"359\":10}}],[\"布局与功能禁用\",{\"0\":{\"450\":1}}],[\"展示\",{\"0\":{\"452\":1},\"1\":{\"449\":1,\"472\":1}}],[\"而不需要认为手动赋值\",{\"1\":{\"447\":1}}],[\"而不是实时的\",{\"1\":{\"447\":1}}],[\"而不是重复定义\",{\"1\":{\"383\":1}}],[\"而不是无脑的对对象进行全字段更新\",{\"1\":{\"206\":1}}],[\"而不是普通的对象属性列\",{\"1\":{\"110\":1}}],[\"记录标识\",{\"1\":{\"447\":2}}],[\"记录器级别的配置示例\",{\"1\":{\"258\":1,\"260\":1}}],[\"订单状态不是2\",{\"1\":{\"434\":1,\"440\":1,\"445\":1}}],[\"订单id取模3进行分库\",{\"1\":{\"430\":1}}],[\"进行引用\",{\"1\":{\"480\":2}}],[\"进修改时间所以只会变更时间\",{\"1\":{\"434\":1,\"440\":1,\"445\":1}}],[\"进首页qq群后或者后续等待作者发布\",{\"1\":{\"278\":1}}],[\"成功插入\",{\"1\":{\"433\":1,\"439\":1,\"444\":1}}],[\"成对使用\",{\"1\":{\"102\":2}}],[\"导入文件\",{\"0\":{\"472\":1}}],[\"导航栏\",{\"1\":{\"450\":1,\"481\":1}}],[\"导航属性\",{\"1\":{\"226\":1}}],[\"导致未分片的对象也需要走代理\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"超级功能\",{\"0\":{\"426\":1}}],[\"超时\",{\"1\":{\"196\":1}}],[\"存在\",{\"1\":{\"422\":1}}],[\"存在至少一条返回true\",{\"1\":{\"310\":1}}],[\"|\",{\"1\":{\"422\":4}}],[\"区间\",{\"1\":{\"422\":2}}],[\"区别就是可以自己手动指定列\",{\"1\":{\"396\":1}}],[\"区别在于使用like或者like相关查询的时候会将入参进行相同方式加密后匹配\",{\"1\":{\"76\":1}}],[\"集合为空返回true\",{\"1\":{\"422\":1}}],[\"集合为空返回false\",{\"1\":{\"422\":1}}],[\"集合内部是一个每个属性采用何种排序方法\",{\"1\":{\"330\":1}}],[\"联合查询\",{\"0\":{\"416\":1}}],[\"两边需要一致\",{\"1\":{\"406\":1}}],[\"两个参数为表顺序\",{\"1\":{\"340\":1}}],[\"子查询\",{\"0\":{\"403\":1}}],[\"通常用于excel或者部分文件写入功能\",{\"1\":{\"401\":1}}],[\"通过\",{\"1\":{\"454\":1,\"457\":1}}],[\"通过vo返回实现自定义列\",{\"1\":{\"382\":1}}],[\"通过springboot上传json对象实现条件查询\",{\"1\":{\"319\":1}}],[\"通过默认的bootstrapper的方法replaceservice来实现替换\",{\"1\":{\"293\":1}}],[\"通过easy\",{\"1\":{\"271\":1}}],[\"通过配置文件可以直接配置上述选项\",{\"1\":{\"247\":1}}],[\"通过字符串属性方式来实现查询\",{\"1\":{\"242\":1,\"266\":1}}],[\"通过对查询数据采用非追踪查询后续再修改数据前将其进行添加到追踪里面可以保证更新也是差异更新\",{\"1\":{\"206\":1}}],[\"通过添加链式方法disablelogicdelete\",{\"1\":{\"129\":1}}],[\"异常\",{\"1\":{\"400\":1}}],[\"异常为\",{\"1\":{\"203\":1}}],[\"希望返回topic的id其他都是blog的属性\",{\"1\":{\"399\":1}}],[\"调用了columnall但是并不会查询所有列\",{\"1\":{\"398\":1}}],[\"定义返回的vo\",{\"1\":{\"398\":1}}],[\"定义了也会忽略\",{\"1\":{\"382\":3}}],[\"即两者属性名可以不一致但是只要两者属性名都是映射为相同columnname即可互相映射\",{\"1\":{\"396\":2}}],[\"连表统计\",{\"0\":{\"391\":1}}],[\"连接数严格会选择少开连接数在内存归并\",{\"1\":{\"196\":1}}],[\"连接池\",{\"1\":{\"192\":1}}],[\"忽略查询字段\",{\"0\":{\"390\":1}}],[\"追加映射字段\",{\"0\":{\"389\":1}}],[\"追踪\",{\"1\":{\"209\":1}}],[\"追踪注意点及说明\",{\"1\":{\"206\":1}}],[\"追踪更新查询\",{\"1\":{\"107\":1}}],[\"追踪更新\",{\"0\":{\"107\":1}}],[\"追踪查询\",{\"1\":{\"59\":1}}],[\"博客链接\",{\"1\":{\"385\":1,\"397\":1,\"399\":1}}],[\"克隆一个新的\",{\"1\":{\"383\":1}}],[\"省市区\",{\"0\":{\"381\":1}}],[\"永远不会为null\",{\"1\":{\"376\":1,\"378\":1}}],[\"教师\",{\"1\":{\"382\":1}}],[\"教师和班级的多对多关系表\",{\"1\":{\"374\":1}}],[\"教师表\",{\"1\":{\"374\":1}}],[\"班级\",{\"1\":{\"382\":1}}],[\"班级表\",{\"1\":{\"374\":1}}],[\"班级和老师之间的关系\",{\"1\":{\"378\":1}}],[\"班级和老师\",{\"1\":{\"372\":1}}],[\"班级和学生\",{\"1\":{\"372\":1}}],[\"普通链接查询\",{\"0\":{\"374\":1}}],[\"普通用户\",{\"1\":{\"274\":1,\"277\":1}}],[\"中设置页面信息\",{\"1\":{\"479\":1}}],[\"中使用\",{\"1\":{\"458\":1}}],[\"中的\",{\"1\":{\"456\":1}}],[\"中很重要的一个概念\",{\"1\":{\"454\":1}}],[\"中间表多对多配置\",{\"1\":{\"374\":1}}],[\"中间表对象\",{\"1\":{\"373\":1}}],[\"中文值\",{\"1\":{\"274\":1}}],[\"中文单字符不支持查询所以是空\",{\"1\":{\"84\":1}}],[\"中文两个为一组\",{\"1\":{\"80\":1}}],[\"中文一个字符占两个长度\",{\"1\":{\"80\":1}}],[\"空表示使用目标对象的主键\",{\"1\":{\"373\":1}}],[\"空表示使用当前对象的主键\",{\"1\":{\"373\":1}}],[\"等于\",{\"1\":{\"422\":1}}],[\"等\",{\"1\":{\"372\":1}}],[\"学生地址vo对象\",{\"1\":{\"382\":1}}],[\"学生地址表\",{\"1\":{\"374\":1}}],[\"学生vo对象\",{\"1\":{\"382\":1}}],[\"学生表\",{\"1\":{\"374\":1}}],[\"学生和学生地址信息关系\",{\"1\":{\"375\":1}}],[\"学生和学生家庭信息\",{\"1\":{\"372\":1}}],[\"学生和班级\",{\"1\":{\"372\":1}}],[\"学习指南\",{\"0\":{\"60\":1}}],[\"禁用了如下功能\",{\"1\":{\"450\":1}}],[\"禁用展示\",{\"1\":{\"449\":1,\"472\":1}}],[\"禁用逻辑删除\",{\"0\":{\"129\":1},\"1\":{\"165\":1}}],[\"禁止\",{\"1\":{\"372\":1}}],[\"业务代码返回自定义pageresult<tentity>\",{\"1\":{\"371\":1}}],[\"替换接口\",{\"0\":{\"365\":1}}],[\"替换框架行为❗️❗️❗️\",{\"0\":{\"289\":1},\"1\":{\"364\":1}}],[\"替换框架内部的属性和列转换模式改为大写转下划线\",{\"1\":{\"194\":1,\"248\":1}}],[\"我在右对齐\",{\"1\":{\"461\":1}}],[\"我是居中的\",{\"1\":{\"461\":1}}],[\"我是title\",{\"1\":{\"359\":10}}],[\"我们支持\",{\"1\":{\"487\":1,\"491\":1}}],[\"我们以订单表为例来实现订单的简单取模分表\",{\"1\":{\"442\":1}}],[\"我们以订单表为例来实现订单的简单取模分库\",{\"1\":{\"436\":1}}],[\"我们设置了最大连接数100\",{\"1\":{\"431\":1,\"437\":1,\"443\":1}}],[\"我们还是以订单表作为分库分表的对象\",{\"1\":{\"430\":1}}],[\"我们可以使用easy\",{\"1\":{\"383\":1}}],[\"我们可能会有这样的需求这边需要查询出几百上万条数据\",{\"1\":{\"206\":1}}],[\"我们在原先的拦截器上再次实现updatesetinterceptor让原先的拦截器支持表达式set\",{\"1\":{\"118\":1}}],[\"^ste\",{\"1\":{\"357\":2}}],[\"合并两个sql\",{\"1\":{\"357\":1}}],[\"采用pgsql语法来实现\",{\"1\":{\"357\":1}}],[\"采用变量是因为可能出现join附带别名所以需要变量\",{\"1\":{\"92\":1}}],[\"别名自动设置\",{\"1\":{\"357\":1}}],[\"别名\",{\"1\":{\"356\":1}}],[\"常量值\",{\"1\":{\"356\":2}}],[\"常见问题\",{\"0\":{\"9\":1}}],[\"已作废\",{\"1\":{\"356\":1}}],[\"附加到sql片段上面\",{\"1\":{\"356\":1}}],[\"拼接的规则底层为messageformat仅需满足此即可\",{\"1\":{\"356\":1}}],[\"执行\",{\"0\":{\"352\":1}}],[\"执行线程数\",{\"1\":{\"196\":1}}],[\"同理\",{\"1\":{\"340\":1,\"393\":1}}],[\"同时支持\",{\"1\":{\"251\":1}}],[\"过滤null或者不过滤\",{\"1\":{\"337\":1}}],[\"场景\",{\"1\":{\"337\":1,\"372\":1}}],[\"暂时不支持proxy模式\",{\"1\":{\"336\":1,\"372\":1}}],[\"各自一个\",{\"1\":{\"336\":1}}],[\"关于这些扩展\",{\"1\":{\"456\":1}}],[\"关联子查询过滤\",{\"1\":{\"381\":1}}],[\"关联查询结果将学生表的班级\",{\"1\":{\"382\":1}}],[\"关联查询vo返回自定义列\",{\"0\":{\"382\":1}}],[\"关联查询\",{\"0\":{\"336\":1,\"372\":1}}],[\"关闭事务\",{\"1\":{\"199\":1}}],[\"首先我们定义一个表达式\",{\"1\":{\"383\":1}}],[\"首先我们实现objectsort接口的方法\",{\"1\":{\"329\":1}}],[\"首先我们引入fastjson2\",{\"1\":{\"301\":1}}],[\"构建条件\",{\"1\":{\"325\":1}}],[\"动态fill填充数据\",{\"1\":{\"337\":1}}],[\"动态表名\",{\"0\":{\"333\":1}}],[\"动态排序\",{\"0\":{\"326\":1}}],[\"动态查询条件\",{\"0\":{\"325\":1}}],[\"动态条件2\",{\"0\":{\"425\":1}}],[\"动态条件\",{\"0\":{\"319\":1,\"322\":1,\"423\":1},\"1\":{\"320\":1}}],[\"为了丰富文档写作\",{\"1\":{\"456\":1}}],[\"为了测试防止数据被删掉\",{\"1\":{\"133\":1}}],[\"为每个\",{\"1\":{\"454\":1}}],[\"为null\",{\"1\":{\"422\":1}}],[\"为空表示使用当前属性名\",{\"1\":{\"324\":1}}],[\"严格模式下所有属性必须在对象属性里面不然会报错\",{\"1\":{\"327\":1}}],[\"严格模式\",{\"1\":{\"324\":1}}],[\"虽然我们对phone进行了判断非null并且包含对应的phone的key\",{\"1\":{\"424\":1}}],[\"虽然我们没有在表达式中设置需要set的属性\",{\"1\":{\"119\":1}}],[\"虽然include方法支持vo对象返回\",{\"1\":{\"382\":1}}],[\"虽然id为空但是还是加入到了sql中\",{\"1\":{\"323\":1}}],[\"恢复如果后面没有自定义where那么不需要恢复\",{\"1\":{\"323\":1}}],[\"右侧同理\",{\"1\":{\"322\":2}}],[\"右链接\",{\"1\":{\"310\":1}}],[\"排序交互全是属性所以完全可以避免sql注入的bug\",{\"1\":{\"332\":1}}],[\"排序那么就使用第二张表\",{\"1\":{\"331\":1}}],[\"排序属性表示按这个属性排序\",{\"1\":{\"328\":1}}],[\"排序属性\",{\"1\":{\"328\":2}}],[\"排序\",{\"1\":{\"321\":1,\"324\":1,\"385\":1,\"397\":1,\"398\":1,\"399\":1}}],[\"状态\",{\"1\":{\"321\":1,\"324\":1,\"385\":1,\"397\":1,\"398\":1,\"399\":1}}],[\"发布时间\",{\"1\":{\"321\":1,\"324\":1,\"385\":1,\"397\":1,\"399\":1}}],[\"缺点\",{\"1\":{\"320\":1}}],[\"缺少aop依赖\",{\"1\":{\"10\":1,\"268\":1}}],[\"优点\",{\"1\":{\"320\":1}}],[\"基本类型查询\",{\"0\":{\"311\":1}}],[\"基础配置kotlin\",{\"0\":{\"238\":1}}],[\"基础配置java\",{\"0\":{\"233\":1}}],[\"基础\",{\"0\":{\"61\":1}}],[\"左链接\",{\"1\":{\"310\":1}}],[\"左林右李02\",{\"1\":{\"73\":1}}],[\"嵌套join\",{\"0\":{\"343\":1}}],[\"嵌套多表\",{\"0\":{\"309\":1}}],[\"嵌套的sql表达式\",{\"1\":{\"306\":1}}],[\"复杂union\",{\"0\":{\"418\":1}}],[\"复杂\",{\"1\":{\"306\":1}}],[\"参考众多c\",{\"1\":{\"306\":1}}],[\"参数值\",{\"1\":{\"356\":1}}],[\"参数说明\",{\"1\":{\"356\":1}}],[\"参数为符合条件的表达式\",{\"1\":{\"310\":1}}],[\"参数表示数据库隔离级别\",{\"1\":{\"199\":1}}],[\"参数2表示第二张表\",{\"1\":{\"152\":2,\"154\":4}}],[\"参数1表示第一张表topic\",{\"1\":{\"152\":2,\"154\":4}}],[\"参数无\",{\"1\":{\"87\":2,\"88\":1}}],[\"参数\",{\"1\":{\"75\":1,\"87\":1,\"88\":2,\"102\":1,\"103\":1,\"104\":1,\"138\":1,\"310\":1,\"328\":1,\"334\":1,\"337\":1,\"365\":1,\"396\":1}}],[\"控制台\",{\"0\":{\"297\":1}}],[\"功能详情\",{\"1\":{\"489\":1,\"493\":1}}],[\"功能亮点\",{\"0\":{\"483\":1}}],[\"功能\",{\"0\":{\"486\":1,\"490\":1},\"1\":{\"295\":2,\"487\":1,\"491\":1}}],[\"接口\",{\"1\":{\"295\":1,\"369\":1}}],[\"接下来我将使用数据库函数来实现\",{\"1\":{\"90\":1}}],[\"接下来我们将使用easy\",{\"1\":{\"85\":1}}],[\"放在最后面可以替换掉前面所有方法\",{\"1\":{\"293\":1}}],[\"具体api为fillone\",{\"1\":{\"336\":1}}],[\"具体代码以最新版源码为准\",{\"1\":{\"290\":1}}],[\"具有非常强悍的实际实践意义\",{\"1\":{\"64\":1}}],[\"框架提供的分页器\",{\"0\":{\"368\":1}}],[\"框架提供了一个可选conditiondefaultaccepter\",{\"1\":{\"323\":1}}],[\"框架内部使用量大量的依赖注入\",{\"1\":{\"290\":1}}],[\"框架会自动处理\",{\"1\":{\"246\":1}}],[\"完美的屏蔽分片带来的业务复杂度\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"完整配置其中自己的属性和目标属性忽略表示主键\",{\"1\":{\"374\":1}}],[\"完整配置\",{\"1\":{\"374\":1}}],[\"完整的pom\",{\"0\":{\"286\":1}}],[\"完全可以自行自定义实现\",{\"1\":{\"289\":1}}],[\"结果内容\",{\"1\":{\"369\":1}}],[\"结束\",{\"1\":{\"288\":9}}],[\"结论\",{\"0\":{\"179\":1},\"1\":{\"179\":1}}],[\"传入builder对象排序属性和是否正序即可\",{\"1\":{\"329\":1}}],[\"传入单个字符串string参数\",{\"1\":{\"288\":1}}],[\"传入对应的值来表示是否查询\",{\"1\":{\"158\":1}}],[\"应为\",{\"1\":{\"285\":1}}],[\"运行只要有对应的sql打印就说明已经ok\",{\"1\":{\"284\":1}}],[\"运行\",{\"0\":{\"284\":1}}],[\"运行时内存节省\",{\"1\":{\"251\":1}}],[\"生成的sql按需只返回vo对象有的并且自动映射到abc属性上\",{\"1\":{\"398\":1}}],[\"生成代码\",{\"1\":{\"283\":1}}],[\"生成delete语句\",{\"1\":{\"165\":1}}],[\"编辑此页链接\",{\"1\":{\"450\":1}}],[\"编译\",{\"0\":{\"283\":1}}],[\"编码\",{\"1\":{\"89\":1}}],[\"输出指定列\",{\"0\":{\"386\":1}}],[\"输出\",{\"1\":{\"277\":1}}],[\"输入url\",{\"1\":{\"258\":1}}],[\"小的时间在前大的时间在后\",{\"1\":{\"422\":4}}],[\"小于\",{\"1\":{\"422\":1}}],[\"小于等于\",{\"1\":{\"422\":1}}],[\"小刚\",{\"1\":{\"274\":1,\"277\":1}}],[\"小明\",{\"1\":{\"274\":1,\"277\":1}}],[\"性别\",{\"1\":{\"274\":1}}],[\"性能\",{\"1\":{\"182\":2}}],[\"性能说明\",{\"0\":{\"178\":1}}],[\"性能比较\",{\"0\":{\"182\":1},\"1\":{\"149\":1}}],[\"姓名\",{\"1\":{\"274\":1}}],[\"管理员\",{\"1\":{\"274\":1,\"277\":1}}],[\"女\",{\"1\":{\"274\":1,\"277\":1}}],[\"男\",{\"1\":{\"274\":1,\"277\":1}}],[\"没有and全部都是or以where为单位之间会以and进行组合\",{\"1\":{\"359\":1}}],[\"没有匹配数返回0\",{\"1\":{\"310\":1}}],[\"没有查询到数据\",{\"1\":{\"273\":2}}],[\"没有需要修改的所以返回1\",{\"1\":{\"174\":1}}],[\"根据id\",{\"1\":{\"273\":2}}],[\"静态方法\",{\"1\":{\"273\":1}}],[\"额外配置\",{\"0\":{\"261\":1}}],[\"y\",{\"1\":{\"337\":11,\"381\":1}}],[\"yml\",{\"1\":{\"258\":1}}],[\"your\",{\"1\":{\"47\":2}}],[\"you\",{\"1\":{\"16\":1,\"18\":2,\"19\":1,\"20\":2,\"31\":1,\"46\":1,\"47\":3,\"48\":1}}],[\"zaxxer\",{\"1\":{\"258\":1,\"260\":1,\"284\":1}}],[\"zaxxer<\",{\"1\":{\"192\":1,\"255\":1,\"280\":1,\"286\":1}}],[\"$\",{\"1\":{\"256\":1,\"262\":1,\"263\":1}}],[\"快速开始\",{\"0\":{\"253\":1}}],[\"快速get\",{\"1\":{\"192\":1}}],[\"打包可以缩到\",{\"1\":{\"251\":1}}],[\"高性能命中对应的库\",{\"1\":{\"440\":1}}],[\"高性能命中对应的库和表\",{\"1\":{\"434\":1}}],[\"高性能的分片机制\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"高\",{\"1\":{\"251\":1}}],[\"高级功能\",{\"0\":{\"64\":1}}],[\"～\",{\"1\":{\"251\":1}}],[\"什么是solon\",{\"0\":{\"251\":1}}],[\"国产框架solon配置\",{\"0\":{\"249\":1,\"250\":1}}],[\"此页面应当包含\",{\"1\":{\"481\":1}}],[\"此文字有脚注\",{\"1\":{\"463\":1}}],[\"此处用于配置系统默认配置选项\",{\"1\":{\"248\":1,\"293\":1}}],[\"此方法引发batchupdateexception\",{\"1\":{\"73\":1}}],[\"线程池有界队列大小\",{\"1\":{\"246\":1}}],[\"譬如学生和班级是一对多的关系\",{\"1\":{\"382\":1}}],[\"譬如case\",{\"1\":{\"355\":1}}],[\"譬如按时间分片\",{\"1\":{\"246\":1}}],[\"譬如我有一个库存冗余字段\",{\"1\":{\"66\":1}}],[\"涉及entity操作比如update对象\",{\"1\":{\"246\":1}}],[\"否则可能会导致程序假死\",{\"1\":{\"246\":1}}],[\"否则每个查询对象都会添加到当前追踪上下文中\",{\"1\":{\"109\":3}}],[\"尽可能的一次性查询所有的表\",{\"1\":{\"246\":1}}],[\"就是说navigate的selfproperty和targetproperty可以以不同的列返回\",{\"1\":{\"382\":1}}],[\"就是说如果存在跨表或者跨库查询那么本次查询将会严格控制内存\",{\"1\":{\"246\":1}}],[\"就是有数据库自定义片段来自行实现api\",{\"1\":{\"354\":1}}],[\"就是还是以maxshardingquerylimit作为最大链接数尽可能少的使用连接数去执行跨分片的查询归并\",{\"1\":{\"246\":1}}],[\"就是比如select\",{\"1\":{\"196\":1,\"246\":1}}],[\"必须是表对象实体字节\",{\"1\":{\"373\":1}}],[\"必须写到对应的where前面后续的where才会生效\",{\"1\":{\"323\":1}}],[\"必须要实现一个构造函数\",{\"1\":{\"288\":1}}],[\"必须要设置对应的版本号\",{\"1\":{\"245\":1}}],[\"必须设置generatedkey为true\",{\"1\":{\"111\":1}}],[\"被记录到日志里面\",{\"1\":{\"245\":1}}],[\"被追踪的返回结果对象必须要满足是数据库实体才可以\",{\"1\":{\"206\":1}}],[\"启动后会创建ds1\",{\"1\":{\"432\":1,\"438\":1}}],[\"启动快\",{\"1\":{\"251\":1}}],[\"启动报错\",{\"0\":{\"10\":1,\"268\":1}}],[\"启用default表示默认的对象和数据库映射关系为属性名如属性名userage那么对应数据库也是userage列名\",{\"1\":{\"245\":1}}],[\"建议参考\",{\"1\":{\"355\":1}}],[\"建议使用逻辑删除来规避\",{\"1\":{\"245\":1}}],[\"建议和实际数据库连接池大小一致或者比实际稍小\",{\"1\":{\"196\":1}}],[\"建议和\",{\"1\":{\"158\":1}}],[\"推荐\",{\"1\":{\"242\":4,\"266\":4}}],[\"依赖注入\",{\"1\":{\"242\":1,\"266\":1}}],[\"依然是\",{\"1\":{\"185\":1}}],[\"提示\",{\"1\":{\"480\":1}}],[\"提示容器\",{\"1\":{\"458\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"457\":1}}],[\"提供了以kotlin语法强类型\",{\"1\":{\"243\":1}}],[\"提供了以java语法强类型\",{\"1\":{\"237\":1}}],[\"提供了apt自动生成代理对象\",{\"1\":{\"237\":1,\"243\":1}}],[\"提供了代理模式支持apt模式以非lambda形式的强类型sql语法\",{\"1\":{\"237\":1,\"243\":1}}],[\"提交事务\",{\"1\":{\"199\":1}}],[\"且数据高性能更新\",{\"1\":{\"440\":1}}],[\"且属性名需要一致\",{\"1\":{\"320\":1}}],[\"且必须大于等于maxshardingquerylimit\",{\"1\":{\"246\":1}}],[\"且必须设置小于等于datasource的连接池大小\",{\"1\":{\"246\":1}}],[\"且可以互相调用\",{\"1\":{\"235\":1}}],[\"且是否使用astracking查询或者查询后是否已经添加到当前追踪上下\",{\"1\":{\"109\":3}}],[\"搜索com\",{\"1\":{\"234\":1,\"239\":1,\"241\":1,\"252\":1,\"265\":1}}],[\"获取对应的省份下的市区和区县\",{\"1\":{\"381\":1}}],[\"获取数据的价格在所属书店中的名次\",{\"1\":{\"357\":1}}],[\"获取书本价格在所有书籍中的名次\",{\"1\":{\"357\":1}}],[\"获取第一条city并且赋值\",{\"1\":{\"337\":1}}],[\"获取枚举值\",{\"1\":{\"299\":1}}],[\"获取最新\",{\"0\":{\"234\":1,\"239\":1,\"241\":1,\"252\":1,\"265\":1}}],[\"获取当前线程追踪上下文没有这返回null\",{\"1\":{\"102\":1}}],[\"程序那么请直接点击跳转\",{\"1\":{\"233\":2}}],[\"并发更新\",{\"1\":{\"445\":1}}],[\"并发更新分库\",{\"1\":{\"434\":1,\"440\":1}}],[\"并发修改失败\",{\"1\":{\"434\":1,\"440\":1,\"445\":1}}],[\"并不会合并批处理\",{\"1\":{\"245\":1}}],[\"并不是不可以执行delete操作而是不可以在执行delete后生成delete语句\",{\"1\":{\"245\":1}}],[\"并不是利用数据库加解密函数\",{\"1\":{\"223\":1}}],[\"并且会对数据库进行额外设计字段\",{\"1\":{\"447\":1}}],[\"并且设置分片可用数据源大小\",{\"1\":{\"431\":1,\"437\":1,\"443\":1}}],[\"并且原生orm框架自带无需使用额外组件\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"并且不同于shardingsphere\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"并且在其他语言上也有一套相对完善的分表分库orm扩展\",{\"1\":{\"426\":1}}],[\"并且在springboot下可以跨非代理方法生效\",{\"1\":{\"198\":1}}],[\"并且where一样存在重载\",{\"1\":{\"423\":1}}],[\"并且where条件也会追加版本号\",{\"1\":{\"142\":1}}],[\"并且需要支持并发操作\",{\"1\":{\"445\":1}}],[\"并且需要多次jdbc\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"并且需要自行处理sqlexception\",{\"1\":{\"401\":1}}],[\"并且需要当前上下文开启追踪模式不然无法使用\",{\"1\":{\"66\":1}}],[\"并且主动设置映射到对应的数据上\",{\"1\":{\"398\":1}}],[\"并且班级表只查询id不查询其他信息\",{\"1\":{\"382\":1}}],[\"并且额外查出对应的班级表\",{\"1\":{\"382\":1}}],[\"并且实现额外的处理\",{\"1\":{\"382\":1}}],[\"并且只支持first和tolist两个返回方法\",{\"1\":{\"372\":1}}],[\"并且提供了链式方法调用方便开发人员\",{\"1\":{\"367\":1}}],[\"并且拥有强类型语法提示\",{\"1\":{\"306\":1}}],[\"并且使用接口依赖模式开发\",{\"1\":{\"290\":1}}],[\"并且框架提供了自动apt编译插件修改entity数据库对象无需build也会自动修改对应的apt文件\",{\"1\":{\"278\":1}}],[\"并且支持对应的union下的分片查询\",{\"1\":{\"416\":1}}],[\"并且支持分表分库\",{\"1\":{\"401\":1}}],[\"并且支持分片\",{\"1\":{\"391\":1}}],[\"并且支持匿名表链接查询\",{\"1\":{\"339\":1}}],[\"并且支持直接select\",{\"1\":{\"336\":1}}],[\"并且支持map等数据结构\",{\"1\":{\"311\":1}}],[\"并且支持在数据库层面进行like搜索处理\",{\"1\":{\"223\":1}}],[\"并且支持所有数据库\",{\"1\":{\"74\":1}}],[\"并且生成差异更新语句\",{\"1\":{\"206\":1}}],[\"并且增加了获取1w条记录的性能测试\",{\"1\":{\"182\":1}}],[\"并且update只更新star和content两个字段\",{\"1\":{\"174\":1}}],[\"并且很方便的使用\",{\"1\":{\"170\":1}}],[\"并且默认需要使insertstrategy用all\",{\"1\":{\"168\":1}}],[\"并且如果配置或者没有配置noversionerror\",{\"1\":{\"141\":1,\"142\":1}}],[\"并且strategyname不可以为空\",{\"1\":{\"132\":1}}],[\"并且用户也可以自定义实现更多的逻辑删除\",{\"1\":{\"124\":1}}],[\"并且用户使用全程无感\",{\"1\":{\"122\":1}}],[\"并且系统提供了大量的默认逻辑删除策略\",{\"1\":{\"124\":1}}],[\"并且可以支持模糊查询\",{\"1\":{\"74\":1}}],[\"并且是更新计数\",{\"1\":{\"73\":1}}],[\"并且给大家带来更多的解决方案\",{\"1\":{\"62\":1,\"447\":1}}],[\"拥有非常高的性能\",{\"1\":{\"223\":1}}],[\"乐观锁也就是版本号\",{\"1\":{\"218\":1}}],[\"乐观锁版本号\",{\"0\":{\"134\":1},\"1\":{\"59\":1}}],[\"防止全字段更新把原字段改为null\",{\"1\":{\"216\":1,\"217\":1}}],[\"后续按订单uid进行分表\",{\"1\":{\"430\":1}}],[\"后续才会判断conditionaccepter\",{\"1\":{\"323\":1}}],[\"后续的where才会添加到条件中\",{\"1\":{\"323\":1}}],[\"后续会支持\",{\"1\":{\"167\":1}}],[\"后获取自增id后将会填充到里面\",{\"1\":{\"213\":2}}],[\"弃用\",{\"1\":{\"213\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"478\":1}}],[\"注入字典翻译服务\",{\"1\":{\"276\":1}}],[\"注解说明\",{\"0\":{\"211\":1}}],[\"注意必须是配置多数据源的其中一个\",{\"1\":{\"259\":1}}],[\"注意\",{\"0\":{\"209\":1},\"1\":{\"268\":1,\"294\":1,\"301\":1,\"401\":2}}],[\"注意这个值的设置不可以大于数据库连接池数量\",{\"1\":{\"196\":1}}],[\"注意这边列会自动带上具体的表名而不是简单的拼接所以在join条件下也无需关心别名\",{\"1\":{\"96\":1}}],[\"注意表达式应该以select作为整个表达式的终结方法\",{\"1\":{\"150\":1}}],[\"注意点及说明\",{\"1\":{\"150\":1,\"284\":1,\"285\":1,\"323\":1}}],[\"针对大数据量的数据无法一次在内存中获取\",{\"1\":{\"401\":1}}],[\"针对复杂表达式很多时候我们需要复用表达式\",{\"1\":{\"383\":1}}],[\"针对关联查询的返回结果如果需要支持vo对象返回\",{\"1\":{\"382\":1}}],[\"针对默认配置参数进行说明\",{\"1\":{\"210\":1}}],[\"针对分表分库时有效\",{\"1\":{\"88\":1}}],[\"策略默认\",{\"1\":{\"327\":1}}],[\"策略\",{\"1\":{\"209\":1}}],[\"策略更新\",{\"0\":{\"208\":1}}],[\"策略新增\",{\"0\":{\"171\":1}}],[\"选择性追踪\",{\"1\":{\"206\":1}}],[\"清晰的看到差异更新只会更新需要更新的列\",{\"1\":{\"206\":1}}],[\"正确的用法\",{\"1\":{\"206\":1}}],[\"正常情况下如果用户想使用差异更新\",{\"1\":{\"206\":1}}],[\"未找到对应的订单\",{\"1\":{\"434\":2,\"440\":2,\"445\":2,\"446\":1}}],[\"未找到对应的数据\",{\"1\":{\"206\":3}}],[\"未找到当前主题数据\",{\"1\":{\"164\":1}}],[\"错误\",{\"0\":{\"285\":1}}],[\"错误的用法\",{\"1\":{\"206\":1}}],[\"错误了\",{\"1\":{\"200\":1}}],[\"抛错后数据将不会被更新\",{\"1\":{\"203\":1}}],[\"抛错错误\",{\"1\":{\"161\":1}}],[\"会使用\",{\"1\":{\"455\":1}}],[\"会自动开启事务\",{\"1\":{\"203\":2}}],[\"会在target包下的xgenerated\",{\"1\":{\"193\":1}}],[\"判断受影响行数并且进行报错\",{\"1\":{\"203\":1}}],[\"批量修改和表达式修改数据的方法\",{\"1\":{\"201\":1}}],[\"批量插入需要jdbc链接字符串开启\",{\"1\":{\"168\":1}}],[\"有参数\",{\"0\":{\"354\":1}}],[\"有参数map返回\",{\"0\":{\"351\":1,\"414\":1}}],[\"有参数强类型返回\",{\"0\":{\"348\":1,\"411\":1}}],[\"有时候我们的case\",{\"1\":{\"318\":1}}],[\"有时候你可能需要这个方法那么可以在springboot中通过begintransaction来开启事务\",{\"1\":{\"200\":1}}],[\"有洁癖的用户多一个选择\",{\"1\":{\"306\":1}}],[\"有些用户喜欢数据库对象是和数据库列类型一一对应的\",{\"1\":{\"300\":1}}],[\"有利于了解如何进行优化\",{\"1\":{\"244\":1}}],[\"有注解\",{\"1\":{\"200\":1}}],[\"有可能因为每个人的电脑性能不同\",{\"1\":{\"183\":1}}],[\"哪张表默认\",{\"1\":{\"328\":1}}],[\"哪怕是join下也可以自己适应\",{\"1\":{\"356\":1}}],[\"哪怕传递了也不会生效不会报错\",{\"1\":{\"328\":1}}],[\"哪怕this\",{\"1\":{\"200\":1}}],[\"哪些对象允许采用当前拦截器\",{\"1\":{\"114\":1}}],[\"内部属于独立查询\",{\"1\":{\"372\":1}}],[\"内部调用this\",{\"1\":{\"200\":1}}],[\"内容\",{\"1\":{\"321\":1,\"324\":1,\"385\":1,\"397\":1,\"399\":1,\"455\":1}}],[\"内链接\",{\"1\":{\"310\":1}}],[\"内存严格表示会多开连接数\",{\"1\":{\"196\":1}}],[\"包含\",{\"1\":{\"458\":1}}],[\"包括增删改查\",{\"1\":{\"246\":1}}],[\"包括提交前提交后等处理\",{\"1\":{\"199\":1}}],[\"包依赖关系\",{\"0\":{\"270\":1},\"1\":{\"210\":1}}],[\"包名\",{\"1\":{\"8\":1}}],[\"回滚事务\",{\"1\":{\"199\":1}}],[\"唯一限制就是当前线程内的\",{\"1\":{\"198\":1}}],[\"假设连接池大小为100\",{\"1\":{\"246\":1}}],[\"假设单次查询涉及到跨13张表查询\",{\"1\":{\"246\":1}}],[\"假设线程池为3并且不设置当前值\",{\"1\":{\"196\":1}}],[\"假设我定义了mysql的函数mysqlnextid自动生成主键id由mysql数据库函数来实现\",{\"1\":{\"111\":1}}],[\"核心线程数采用executorcorepoolsize并且需要比\",{\"1\":{\"196\":1}}],[\"系统自动选择有内存严格和连接数严格\",{\"1\":{\"196\":1}}],[\"系统默认实现\",{\"0\":{\"68\":1}}],[\"也支持手写sql来实现crud\",{\"1\":{\"345\":1}}],[\"也可以不添加后续手动添加\",{\"1\":{\"212\":1}}],[\"也可以讲queryable\",{\"1\":{\"194\":1}}],[\"也就是sql\",{\"1\":{\"7\":1}}],[\"分类为\",{\"1\":{\"479\":1}}],[\"分库分表\",{\"0\":{\"429\":1}}],[\"分库\",{\"0\":{\"435\":1},\"1\":{\"427\":1}}],[\"分库数据源\",{\"1\":{\"263\":1}}],[\"分库数量\",{\"1\":{\"196\":1}}],[\"分页\",{\"0\":{\"360\":1}}],[\"分页查询速度\",{\"1\":{\"187\":1}}],[\"分页查询\",{\"0\":{\"187\":1}}],[\"分组\",{\"0\":{\"338\":1}}],[\"分别是table\",{\"1\":{\"323\":1}}],[\"分别对应上下文10张表\",{\"1\":{\"194\":1}}],[\"分表\",{\"0\":{\"441\":1},\"1\":{\"427\":1}}],[\"分表分库特有配置\",{\"0\":{\"246\":1}}],[\"分表设置与否无关紧要\",{\"1\":{\"196\":1}}],[\"分片可用连接池数50\",{\"1\":{\"443\":1}}],[\"分片可用连接池数50保证至少有50个连接可以给非分片用\",{\"1\":{\"431\":1,\"437\":1}}],[\"分片链接模式\",{\"1\":{\"260\":1}}],[\"分片数目\",{\"1\":{\"246\":1}}],[\"分片初始化器\",{\"1\":{\"212\":1,\"263\":1}}],[\"分片聚合最大线程数\",{\"1\":{\"246\":1}}],[\"分片聚合超时时间默认60秒单位\",{\"1\":{\"246\":1}}],[\"分片聚合超时时间默认30秒\",{\"1\":{\"196\":1}}],[\"分片聚合执行线程队列\",{\"1\":{\"196\":1}}],[\"分片默认行为配置\",{\"0\":{\"195\":1}}],[\"初始化完成\",{\"1\":{\"432\":1,\"438\":1}}],[\"初始化属性模式\",{\"1\":{\"194\":1}}],[\"初始化连接池\",{\"1\":{\"194\":1}}],[\"初始化代码\",{\"0\":{\"194\":1}}],[\"工具栏点击build\",{\"1\":{\"193\":1}}],[\"可能会有小伙伴认为这种做法太复杂了有没有建议的方法\",{\"1\":{\"206\":1}}],[\"可选\",{\"1\":{\"192\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"452\":1}}],[\"可以将相识度高的先进行columnall然后将不需要的columnignore剩下的可以进行columnas这样比手写一个一个的columnas方便很多\",{\"1\":{\"398\":1}}],[\"可以再查询时自定义关联属性\",{\"1\":{\"336\":1}}],[\"可以再运行时修改\",{\"1\":{\"212\":1}}],[\"可以快速实现基于dto的条件查询\",{\"1\":{\"320\":1}}],[\"可以帮助不想写sql的用户\",{\"1\":{\"306\":1}}],[\"可以帮你摆脱很多无意义的操作\",{\"1\":{\"64\":1}}],[\"可以被替换的接口\",{\"0\":{\"290\":1}}],[\"可以在运行时修改\",{\"1\":{\"212\":1}}],[\"可以返回数据库执行修改后的受影响行数\",{\"1\":{\"201\":1}}],[\"可以返回数据库执行插入后的受影响行数\",{\"1\":{\"166\":1}}],[\"可以到\",{\"1\":{\"189\":1}}],[\"可以采用逻辑删除来处理数据的删除\",{\"1\":{\"161\":1}}],[\"可以保证在高并发下数据一致性更新的问题\",{\"1\":{\"134\":1}}],[\"可以禁用当前表达式的逻辑删除\",{\"1\":{\"129\":1}}],[\"可以通过数据库查询或者其他方式来存储额外数据源\",{\"1\":{\"432\":1,\"438\":1}}],[\"可以通过链式调用then\",{\"1\":{\"340\":1}}],[\"可以通过指定条件\",{\"1\":{\"324\":1}}],[\"可以通过api接口来实现物理删除\",{\"1\":{\"161\":1}}],[\"可以通过调用api接口querylargecolumn\",{\"1\":{\"158\":1}}],[\"可以通过调用insert或者update的batch方法来手动使用或者禁用\",{\"1\":{\"71\":2,\"245\":2}}],[\"可以通过noversionignore来忽略\",{\"1\":{\"141\":1,\"142\":1}}],[\"可以通过noversionerror或者noversionignore来配置\",{\"1\":{\"135\":1}}],[\"可以通过threadlocal来表示当前启用值\",{\"1\":{\"123\":1}}],[\"可以新建一个表达式拦截器predicatefilterinterceptor\",{\"1\":{\"123\":1}}],[\"可以做到表结构完美隔离租户之间的数据\",{\"1\":{\"122\":1}}],[\"可以动态生成updatesql语句\",{\"1\":{\"104\":1}}],[\"可以实现列表title的排序并且支持多级排序\",{\"1\":{\"326\":1}}],[\"可以实现任意复杂条件构建\",{\"1\":{\"320\":1}}],[\"可以实现数据库对象属性枚举转换的功能或者对象string转json对象的功能\",{\"1\":{\"294\":1}}],[\"可以实现高性能的加密列like\",{\"1\":{\"96\":1}}],[\"可以实现功能复杂的数据库列加密\",{\"1\":{\"74\":1}}],[\"可以完美的实现java对象和数据库列的函数互相交换\",{\"1\":{\"89\":1}}],[\"可以自定义实现\",{\"1\":{\"224\":1}}],[\"可以自定义枚举或者json等\",{\"1\":{\"213\":1}}],[\"可以自定义\",{\"1\":{\"66\":1}}],[\"可以自己实现软删除或者使用系统默认定义的软删除\",{\"1\":{\"59\":1}}],[\"代码演示\",{\"0\":{\"473\":1}}],[\"代码块\",{\"0\":{\"459\":1}}],[\"代码\",{\"1\":{\"458\":1}}],[\"代码注意点\",{\"0\":{\"72\":1}}],[\"代理模式下where的第一个参数是filter过滤器\",{\"1\":{\"422\":1}}],[\"代理模式下select的第一个参数是selector选择器\",{\"1\":{\"396\":1}}],[\"代理属性三种api接口调用\",{\"1\":{\"235\":1}}],[\"代理api\",{\"1\":{\"192\":1}}],[\"下一篇\",{\"1\":{\"450\":1}}],[\"下载源码后\",{\"1\":{\"189\":1}}],[\"下面所有方法包括where\",{\"1\":{\"150\":1}}],[\"想进一步进行更多测试的同学\",{\"1\":{\"189\":1}}],[\"更少的依赖来保证程序的健壮与可控\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"更简单\",{\"1\":{\"251\":1}}],[\"更小\",{\"1\":{\"251\":1}}],[\"更快\",{\"1\":{\"251\":1}}],[\"更符合sql语法\",{\"1\":{\"236\":1}}],[\"更加直观\",{\"1\":{\"194\":1}}],[\"更多的测试\",{\"0\":{\"189\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"481\":1}}],[\"更新时间\",{\"1\":{\"450\":1}}],[\"更新删除无版本号报错\",{\"1\":{\"260\":1}}],[\"更新列策略\",{\"1\":{\"260\":1}}],[\"更新列拦截器\",{\"1\":{\"113\":1}}],[\"更新优先级顺序\",{\"1\":{\"209\":1}}],[\"更新失败\",{\"1\":{\"203\":1}}],[\"更新指定列\",{\"0\":{\"203\":1}}],[\"更新null列\",{\"1\":{\"160\":1}}],[\"更新not\",{\"1\":{\"160\":1}}],[\"更新添加租户id条件\",{\"1\":{\"122\":1}}],[\"更新的时候也会自动更新时间\",{\"1\":{\"117\":1}}],[\"更新数据\",{\"0\":{\"95\":1}}],[\"更新前的实体拦截修改\",{\"1\":{\"65\":1}}],[\"远快于\",{\"1\":{\"187\":1,\"188\":1}}],[\"是采用流失聚合还是内存聚合\",{\"1\":{\"246\":1}}],[\"是\",{\"1\":{\"186\":1,\"454\":1}}],[\"是否删除\",{\"1\":{\"397\":2,\"447\":2}}],[\"是否必填\",{\"1\":{\"373\":1}}],[\"是否需要执行当前方法\",{\"1\":{\"337\":1}}],[\"是否正序表示排序是否使用asc\",{\"1\":{\"328\":1}}],[\"是否正序\",{\"1\":{\"328\":1,\"329\":1,\"330\":1}}],[\"是否为严格模式\",{\"1\":{\"327\":1}}],[\"是否允许空字符串\",{\"1\":{\"324\":1}}],[\"是否置顶\",{\"1\":{\"321\":1,\"324\":1,\"385\":2,\"397\":2,\"398\":2,\"399\":2}}],[\"是否支持\",{\"1\":{\"315\":1}}],[\"是否支持模糊查询\",{\"1\":{\"76\":1}}],[\"是否打印执行sql\",{\"1\":{\"245\":1}}],[\"是否是自增列\",{\"1\":{\"213\":2}}],[\"是否将当前对象添加到了追踪上下文\",{\"1\":{\"206\":1}}],[\"是否已经set了\",{\"1\":{\"119\":1,\"447\":1}}],[\"是否默认添加到表达式中前提是apply为true\",{\"1\":{\"114\":1}}],[\"要注意是否开启了追踪spring\",{\"1\":{\"206\":1}}],[\"要求返回的数据为\",{\"1\":{\"185\":1,\"186\":1}}],[\"要么从不继续处理命令\",{\"1\":{\"73\":1}}],[\"要么总是继续处理命令\",{\"1\":{\"73\":1}}],[\"倍左右\",{\"1\":{\"187\":1}}],[\"倍\",{\"1\":{\"184\":1,\"185\":1,\"186\":1,\"188\":1,\"251\":2}}],[\"轮的测试结果\",{\"1\":{\"184\":1,\"185\":1,\"186\":1,\"187\":1,\"188\":1}}],[\"轮\",{\"1\":{\"183\":1}}],[\"每个数据源10个\",{\"1\":{\"246\":1}}],[\"每个库\",{\"1\":{\"183\":1}}],[\"每次测试\",{\"1\":{\"183\":1}}],[\"则性能越高\",{\"1\":{\"183\":1}}],[\"谁消耗的时间越少\",{\"1\":{\"183\":1}}],[\"之后通过打印时间戳的方式进行对比\",{\"1\":{\"183\":1}}],[\"开始\",{\"1\":{\"288\":9}}],[\"开始分片表为2020年1月那么如果你查下2019年或者查询未来的时间那么框架内部还没有这个时间所以本次查询获取到的路由为空\",{\"1\":{\"246\":1}}],[\"开始之前先进行预热\",{\"1\":{\"183\":1}}],[\"开启上下文追踪当时没有讲查询结果对象附加到当前上下文\",{\"1\":{\"206\":1}}],[\"开启追踪后对象属性不修改更新\",{\"0\":{\"108\":1}}],[\"开发人员那么肯定这种模式相对的会更加适合您的开发理念\",{\"1\":{\"190\":1}}],[\"条数据\",{\"1\":{\"183\":1,\"185\":1,\"186\":1}}],[\"条件比较永远是columncomparevalue\",{\"1\":{\"421\":1}}],[\"条件比较\",{\"0\":{\"421\":1}}],[\"条件拦截\",{\"1\":{\"323\":1}}],[\"条件拦截器\",{\"1\":{\"113\":1}}],[\"条件接收器\",{\"1\":{\"323\":1}}],[\"条件接受\",{\"0\":{\"323\":1}}],[\"条件仅支持and\",{\"1\":{\"320\":1}}],[\"条件更新\",{\"1\":{\"59\":1}}],[\"和mybatis不同的是期间无需开始事务也可以使用\",{\"1\":{\"401\":1}}],[\"和原生sql不同\",{\"1\":{\"395\":1}}],[\"和逻辑删除等组合\",{\"1\":{\"359\":1}}],[\"和java\",{\"1\":{\"306\":1}}],[\"和\",{\"1\":{\"183\":1,\"453\":1,\"479\":1}}],[\"和set列\",{\"1\":{\"177\":1}}],[\"方便用户针对连表统计时进行操作而不需要手写sql\",{\"1\":{\"391\":1}}],[\"方便用户进行数据结果的分页查询\",{\"1\":{\"360\":1}}],[\"方面的对比\",{\"1\":{\"182\":1}}],[\"方法名\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"138\":1}}],[\"方法\",{\"1\":{\"75\":1,\"83\":1,\"87\":1,\"88\":1,\"90\":1,\"91\":1,\"114\":1,\"117\":1,\"119\":1,\"121\":1,\"156\":1,\"196\":1,\"199\":1,\"295\":1,\"310\":1,\"316\":1,\"327\":1,\"328\":1,\"334\":1,\"356\":1,\"365\":1,\"382\":1,\"396\":1,\"422\":1}}],[\"方法将返回\",{\"1\":{\"73\":1}}],[\"再用1个id进行查询最后进行合并\",{\"1\":{\"372\":1}}],[\"再获取1w条记录的情况下更是遥遥领先与另外两个框架\",{\"1\":{\"182\":1}}],[\"再他们的基础上删除了json的typehandler\",{\"1\":{\"182\":1}}],[\"增加了自己的测试代码\",{\"1\":{\"182\":1}}],[\"以便\",{\"1\":{\"452\":1}}],[\"以下所有测试来自于beetlsql\",{\"1\":{\"179\":1}}],[\"以mybatis\",{\"1\":{\"149\":1}}],[\"都是依托于网上orm的性能测试后加入其中\",{\"1\":{\"178\":1}}],[\"很多时候框架提供的easypageresult<t>提供了方便的同时让整个项目高度依赖easy\",{\"1\":{\"367\":1}}],[\"很多时候我们设置id自增那么需要在插入的时候回填对应的主键自增信息所以easy\",{\"1\":{\"170\":1}}],[\"很多用户可能对现有的很多系统拥有的逻辑删除都表示非常弱鸡\",{\"1\":{\"130\":1}}],[\"多个采用columnincludemany\",{\"1\":{\"382\":1}}],[\"多个and用or链接\",{\"1\":{\"359\":1}}],[\"多关联查询\",{\"0\":{\"380\":1}}],[\"多次include\",{\"0\":{\"379\":1}}],[\"多次set表示set拼接\",{\"1\":{\"203\":1}}],[\"多字段组合动态排序\",{\"0\":{\"330\":1}}],[\"多条件casewhen\",{\"0\":{\"318\":1}}],[\"多条插入\",{\"0\":{\"168\":1}}],[\"多数据源\",{\"0\":{\"269\":1}}],[\"多对多无论是否存在多的一方最终都会填充集合\",{\"1\":{\"378\":1}}],[\"多对多不能为空\",{\"1\":{\"373\":2}}],[\"多对多\",{\"0\":{\"378\":1},\"1\":{\"226\":1,\"372\":1,\"382\":1}}],[\"多对一\",{\"1\":{\"226\":1,\"372\":1}}],[\"多表查询\",{\"0\":{\"339\":1}}],[\"多表查询api\",{\"0\":{\"152\":1}}],[\"多表\",{\"0\":{\"308\":1}}],[\"多表自定义结果api\",{\"0\":{\"154\":1}}],[\"多表返回表达式\",{\"0\":{\"153\":1}}],[\"多表join查询\",{\"1\":{\"59\":1,\"96\":1}}],[\"物理删除时抛出异常\",{\"1\":{\"260\":1}}],[\"物理删除\",{\"1\":{\"165\":1}}],[\"强类型结果返回\",{\"1\":{\"346\":1,\"409\":1}}],[\"强类型api\",{\"1\":{\"237\":2,\"243\":2}}],[\"强类型的java对象查询orm框架支持分库分表读写分离\",{\"1\":{\"58\":1}}],[\"强制物理删除\",{\"0\":{\"165\":1}}],[\"点赞数\",{\"1\":{\"162\":1,\"166\":1,\"201\":1,\"321\":1,\"324\":1,\"385\":1,\"397\":1,\"399\":1,\"416\":1}}],[\"主题包含了一个自定义徽章可以使用\",{\"1\":{\"480\":1}}],[\"主题扩展了更多\",{\"1\":{\"457\":1}}],[\"主题扩展\",{\"0\":{\"457\":1}}],[\"主题表\",{\"1\":{\"162\":1,\"166\":1,\"201\":1,\"416\":1}}],[\"主键\",{\"1\":{\"310\":1,\"374\":1}}],[\"主键id\",{\"1\":{\"162\":1,\"166\":1,\"201\":1,\"416\":1}}],[\"主要从\",{\"1\":{\"452\":1}}],[\"主要功能与配置演示\",{\"0\":{\"448\":1}}],[\"主要是针对配置外的方法\",{\"1\":{\"336\":1}}],[\"主要是针对当前数据的库存或者金额等数据进行原子更新\",{\"1\":{\"66\":1}}],[\"主要是影响分片后的聚合模式\",{\"1\":{\"246\":1}}],[\"主要原因是\",{\"1\":{\"10\":1,\"268\":1}}],[\"允许那些属性可以排序\",{\"1\":{\"328\":1}}],[\"允许删除命令\",{\"1\":{\"161\":1}}],[\"允许datetime类型的属性\",{\"1\":{\"132\":1,\"262\":1}}],[\"大数据流式查询返回❗️❗️❗️\",{\"0\":{\"401\":1}}],[\"大字段依旧查询\",{\"1\":{\"260\":1}}],[\"大字段字段不需要update时更新\",{\"1\":{\"216\":1,\"217\":1}}],[\"大概是\",{\"1\":{\"184\":1,\"187\":1,\"188\":1}}],[\"大括号方式执行顺序就是代码顺序\",{\"1\":{\"152\":1,\"154\":2}}],[\"大于等于\",{\"1\":{\"422\":1}}],[\"大于\",{\"1\":{\"422\":1}}],[\"大于0表示被删除\",{\"1\":{\"128\":1}}],[\"大于或等于零的数字\",{\"1\":{\"73\":1}}],[\"链接\",{\"1\":{\"450\":1,\"458\":1}}],[\"链接字符串需要添加rewritebatchedstatements=true\",{\"1\":{\"71\":2,\"245\":2}}],[\"链式添加\",{\"0\":{\"169\":1}}],[\"链式写法期间可以通过then来切换操作表\",{\"1\":{\"152\":1,\"154\":2}}],[\"单词\",{\"1\":{\"462\":1}}],[\"单参数使用默认表的也就是o\",{\"1\":{\"357\":1}}],[\"单个参数为主表操作\",{\"1\":{\"340\":1}}],[\"单个条件where参数为主表topic\",{\"1\":{\"152\":1,\"154\":2}}],[\"单字段动态排序\",{\"0\":{\"329\":1}}],[\"单条插入\",{\"0\":{\"167\":1}}],[\"单表union\",{\"0\":{\"417\":1}}],[\"单表api使用\",{\"0\":{\"151\":1}}],[\"单表\",{\"1\":{\"94\":1}}],[\"单表查询\",{\"0\":{\"307\":1},\"1\":{\"59\":1}}],[\"第二个参数开始才是真正的表\",{\"1\":{\"396\":1,\"422\":1}}],[\"第二个参数为表达式\",{\"1\":{\"356\":1}}],[\"第二个join采用三参数\",{\"1\":{\"152\":1,\"154\":2}}],[\"第二种是两个参数\",{\"1\":{\"340\":1}}],[\"第二种写法提取表变量\",{\"1\":{\"194\":1}}],[\"第一种就是单个参数\",{\"1\":{\"340\":1}}],[\"第一种写法\",{\"1\":{\"194\":1}}],[\"第一张表也可以通过columnall将全部字段映射上去\",{\"1\":{\"154\":2}}],[\"第一个join采用双参数\",{\"1\":{\"152\":1,\"154\":2}}],[\"第三个参数表示第三张表\",{\"1\":{\"152\":1,\"154\":2}}],[\"操作\",{\"1\":{\"150\":1}}],[\"相同的代码如果使用tomap将会抛出\",{\"1\":{\"400\":1}}],[\"相同属性不同列名不映射\",{\"0\":{\"387\":1}}],[\"相对性能会稍微低一点\",{\"1\":{\"245\":1}}],[\"相当于select之后就是对之前的表达式进行匿名表处理\",{\"1\":{\"150\":1}}],[\"相关配置\",{\"0\":{\"135\":1}}],[\"相关博客\",{\"0\":{\"97\":1}}],[\"相关信息\",{\"1\":{\"20\":1,\"454\":1}}],[\"事务\",{\"0\":{\"197\":1},\"1\":{\"149\":1}}],[\"指定本次查询最近的表的表名\",{\"1\":{\"310\":2}}],[\"指定列更新或条件\",{\"0\":{\"207\":1}}],[\"指示默认的个别数据库行为语句没办法生成\",{\"1\":{\"237\":1,\"243\":1}}],[\"指引\",{\"0\":{\"149\":1,\"210\":1}}],[\"指南\",{\"0\":{\"57\":1,\"482\":1}}],[\"+l\",{\"1\":{\"433\":1,\"439\":1,\"444\":1}}],[\"+newcontent\",{\"1\":{\"353\":1}}],[\"+name+\",{\"1\":{\"292\":1,\"293\":1}}],[\"+\",{\"1\":{\"170\":1,\"173\":3,\"174\":3,\"176\":1,\"177\":1,\"184\":3,\"185\":3,\"186\":3,\"188\":6,\"206\":3,\"273\":6,\"299\":1,\"353\":1,\"402\":3,\"432\":2,\"438\":2}}],[\"+i+\",{\"1\":{\"432\":1,\"438\":1}}],[\"+i\",{\"1\":{\"166\":1}}],[\"+id\",{\"1\":{\"139\":1,\"143\":1,\"144\":1}}],[\"+abxnyba==avtylqlfeztwfoynb0x+cw==\",{\"1\":{\"84\":1}}],[\"+abxnyba==avtylqlfeztwfoynb0x+cw==xorntdpvndrdid+jlsmh4w==s+w1g858r9lawlqhsbhw9a==vrhlsnycy28x4io+srasca==xngerbsmiv4jd+imjzyd6w==\",{\"1\":{\"84\":2}}],[\"返回顶部按钮\",{\"1\":{\"450\":1,\"481\":1}}],[\"返回当前queryable对象属性映射所对应的列名和返回结果属性列名一样的列\",{\"1\":{\"396\":2}}],[\"返回当前queryable对象指定的列\",{\"1\":{\"396\":1}}],[\"返回当前表达式在数据库中命中的所有结果\",{\"1\":{\"310\":1}}],[\"返回当前表达式在数据库中命中的第一条\",{\"1\":{\"310\":1}}],[\"返回当前表达式在数据库中命中的条数有多少\",{\"1\":{\"310\":1}}],[\"返回当前表达式是在数据库中是否所有的都匹配\",{\"1\":{\"310\":1}}],[\"返回当前表达式是在数据库中是否存在匹配项\",{\"1\":{\"310\":1}}],[\"返回当前表达式即将执行的sql语句\",{\"1\":{\"310\":1}}],[\"返回对象被解析的columnname和sql的返回列名一致才会\",{\"1\":{\"384\":1}}],[\"返回总数\",{\"1\":{\"369\":1}}],[\"返回toshardingpageresult的分页对象\",{\"1\":{\"365\":1}}],[\"返回topageresult的分页对象\",{\"1\":{\"365\":1}}],[\"返回参数为最终确定的表名内部可以通过复杂计算甚至远程rpc调用都可以\",{\"1\":{\"334\":1}}],[\"返回\",{\"1\":{\"310\":1,\"334\":1,\"396\":1}}],[\"返回hello\",{\"1\":{\"258\":1}}],[\"返回更新后的版本信息\",{\"1\":{\"138\":1}}],[\"返回结果bigdecimal防止结果溢出\",{\"1\":{\"310\":1}}],[\"返回结果rows为2\",{\"1\":{\"169\":1}}],[\"返回结果rows为10\",{\"1\":{\"168\":1}}],[\"返回结果rows为1\",{\"1\":{\"167\":1}}],[\"返回结果为map<string\",{\"1\":{\"314\":1,\"415\":1}}],[\"返回结果为当前方法的聚合类型\",{\"1\":{\"88\":1}}],[\"返回结果为数据库片段\",{\"1\":{\"88\":1}}],[\"返回结果为属性名也就是列所对应的属性\",{\"1\":{\"87\":1}}],[\"返回结果为columnfunction接口\",{\"1\":{\"87\":1}}],[\"返回结果\",{\"1\":{\"87\":1,\"88\":1}}],[\"到这边位我们已经适配好了\",{\"1\":{\"273\":1}}],[\"到这里为止我们就完全实现了逻辑删除自定义并且支持更新多字段\",{\"1\":{\"133\":1}}],[\"到目前为止基本上大部分的业务需求已经可以实现了\",{\"1\":{\"119\":1}}],[\"959225\",{\"1\":{\"434\":1}}],[\"9e57\",{\"1\":{\"354\":1}}],[\"971\",{\"1\":{\"322\":4}}],[\"9100\",{\"1\":{\"188\":2}}],[\"9000\",{\"1\":{\"188\":2}}],[\"9300\",{\"1\":{\"188\":1}}],[\"9200\",{\"1\":{\"188\":1}}],[\"9\",{\"1\":{\"168\":1,\"208\":2,\"299\":3,\"301\":1,\"433\":2,\"434\":2,\"439\":2,\"444\":2}}],[\"99\",{\"1\":{\"170\":1,\"176\":1,\"177\":1,\"392\":1,\"393\":1}}],[\"997\",{\"1\":{\"164\":3}}],[\"999\",{\"1\":{\"163\":2,\"164\":1,\"170\":3,\"176\":2,\"177\":2}}],[\"944\",{\"1\":{\"133\":1}}],[\"9876543210\",{\"1\":{\"107\":2,\"109\":2}}],[\"98\",{\"1\":{\"69\":1}}],[\"上下角标\",{\"0\":{\"460\":1}}],[\"上一篇\",{\"1\":{\"450\":1}}],[\"上一篇文章我们讲解了如何使用java代码来实现数据库列的加密解密\",{\"1\":{\"90\":1}}],[\"上面的是错误用法\",{\"1\":{\"132\":1,\"262\":1}}],[\"新的生态型应用开发框架\",{\"1\":{\"251\":1}}],[\"新建拦截器\",{\"1\":{\"447\":1}}],[\"新建项目\",{\"0\":{\"279\":1}}],[\"新建一个类来实现接口nameconversion\",{\"1\":{\"292\":1,\"293\":1}}],[\"新建一个日志打印的实现继承com\",{\"1\":{\"288\":1}}],[\"新建一个springboot项目\",{\"0\":{\"272\":1}}],[\"新建一个静态帮助类来模拟当前用户因为我们这次自定义需要实现两个甚至多个字段逻辑删除处理\",{\"1\":{\"132\":1}}],[\"新建datasource注入\",{\"0\":{\"256\":1}}],[\"新建java\",{\"0\":{\"254\":1}}],[\"新建java类\",{\"0\":{\"193\":1}}],[\"新增控制器\",{\"0\":{\"257\":1}}],[\"新增演示\",{\"1\":{\"149\":1}}],[\"新增\",{\"0\":{\"166\":1,\"433\":1,\"439\":1,\"444\":1},\"1\":{\"149\":1}}],[\"新增测试数据\",{\"0\":{\"106\":1}}],[\"新增数据插入到对应数据库的对应表\",{\"1\":{\"433\":1}}],[\"新增数据库对象\",{\"0\":{\"282\":1}}],[\"新增数据\",{\"0\":{\"93\":1}}],[\"简单分页\",{\"0\":{\"361\":1}}],[\"简单查询\",{\"0\":{\"317\":1}}],[\"简单\",{\"1\":{\"132\":1}}],[\"甚至只支持单字段的逻辑删除\",{\"1\":{\"130\":1}}],[\"甚至0\",{\"1\":{\"13\":1}}],[\"枚举转换器\",{\"1\":{\"299\":1}}],[\"枚举接口\",{\"1\":{\"299\":1}}],[\"枚举值\",{\"0\":{\"298\":1}}],[\"枚举\",{\"1\":{\"128\":1}}],[\"除了框架默认提供的框架也支持用户自定义逻辑删除\",{\"1\":{\"126\":1}}],[\"其余信息不需要定义\",{\"1\":{\"382\":3}}],[\"其实不需要添加下面的包也可以运行\",{\"1\":{\"237\":1,\"243\":1}}],[\"其中第一个参数boolean\",{\"1\":{\"423\":1}}],[\"其中mappingclass表示中间表\",{\"1\":{\"374\":1}}],[\"其中\",{\"1\":{\"354\":1}}],[\"其中对应的参数是一个lambda表达式入参为现有表名\",{\"1\":{\"334\":1}}],[\"其中框架默认提供多种实现\",{\"1\":{\"316\":1}}],[\"其中代理模式的使用上面更加符合人性化\",{\"1\":{\"190\":1}}],[\"其中strategy表示为逻辑删除字段的枚举\",{\"1\":{\"126\":1}}],[\"其他数据库自行查询相关的说明也可能不需要\",{\"1\":{\"70\":1}}],[\"然后我们会添加对应的自动添加处理\",{\"1\":{\"447\":1}}],[\"然后limit+tolist查询结果并且封装成pageresult返回\",{\"1\":{\"310\":1}}],[\"然后再本次查询完成后归还到datasource连接池中\",{\"1\":{\"246\":1}}],[\"然后默认将enable改成false需要时自行添加条件通过useinteceptor\",{\"1\":{\"123\":1}}],[\"然后进行aes进行解密\",{\"1\":{\"90\":1}}],[\"然后进行base64编码\",{\"1\":{\"90\":1}}],[\"按需快速join返回列\",{\"0\":{\"399\":1}}],[\"按需返回vo对象\",{\"0\":{\"398\":1}}],[\"按需拦截\",{\"0\":{\"123\":1}}],[\"按条件删除\",{\"1\":{\"127\":1}}],[\"按列更新\",{\"0\":{\"96\":1}}],[\"所有的超级功能的案例源码都在easy\",{\"1\":{\"428\":1}}],[\"所有的依赖是\",{\"1\":{\"272\":1}}],[\"所有的增删改都会添加对应的条件表达式值\",{\"1\":{\"122\":1}}],[\"所有列都插入\",{\"1\":{\"159\":1,\"171\":1}}],[\"所以clonequeryable生效\",{\"1\":{\"383\":1}}],[\"所以easy\",{\"1\":{\"367\":1}}],[\"所以我们可以通过\",{\"1\":{\"292\":1}}],[\"所以很轻松可以替换掉\",{\"1\":{\"290\":1}}],[\"所以这边先用枚举来做一个测试\",{\"1\":{\"298\":1}}],[\"所以这边需要添加一个特殊的注解来标识主键\",{\"1\":{\"273\":1}}],[\"所以这边采用更新忽略\",{\"1\":{\"216\":1}}],[\"所以本次查询会将13张同数据库下的表进行分组以没5张为一组分成3组最后一组为3张表\",{\"1\":{\"246\":1}}],[\"所以一般会和下面的配置参数maxshardingquerylimit配合作为限制\",{\"1\":{\"246\":1}}],[\"所以如歌设置为true\",{\"1\":{\"245\":1}}],[\"所以如果不支持对应的sql那么你可以自行扩展或者提交相应的issue\",{\"1\":{\"7\":1}}],[\"所以提供了额外的追踪方法\",{\"1\":{\"206\":1}}],[\"所以框架无法追踪对象变更无法有效生成差异更新\",{\"1\":{\"206\":1}}],[\"所以不生成sql不使用更新\",{\"1\":{\"108\":1}}],[\"所以原则上支持所有数据库\",{\"1\":{\"7\":1}}],[\"把原先拦截器里面的自动填充租户id移动到租户拦截器里面\",{\"1\":{\"122\":1}}],[\"表列原子更新\",{\"0\":{\"205\":1}}],[\"表列自更新\",{\"0\":{\"204\":1}}],[\"表达式内部的参数不可以提取出来\",{\"1\":{\"447\":1}}],[\"表达式内部直接用表变量\",{\"1\":{\"194\":1}}],[\"表达式like第一个参数为false所以不会添加phone的like条件到sql中\",{\"1\":{\"423\":1}}],[\"表达式复用\",{\"0\":{\"383\":1}}],[\"表达式入参为现有表名返回设置的表名\",{\"1\":{\"310\":1}}],[\"表达式主键删除\",{\"1\":{\"163\":1}}],[\"表达式删除必须要添加withversion否则将不会使用行版本删除\",{\"1\":{\"144\":1}}],[\"表达式删除必须要添加withversion否则将不会使用行版本更新\",{\"1\":{\"141\":1}}],[\"表达式删除\",{\"0\":{\"144\":1,\"163\":1},\"1\":{\"122\":1,\"163\":1}}],[\"表达式更新set参数添加\",{\"1\":{\"447\":1}}],[\"表达式更新的时候也可以对修改时间和修改人进行自动处理\",{\"1\":{\"447\":1}}],[\"表达式更新只需要添加withversion那么就可以针对当前version进行版本控制\",{\"1\":{\"141\":1}}],[\"表达式更新\",{\"0\":{\"141\":1},\"1\":{\"122\":1}}],[\"表达式\",{\"1\":{\"121\":2}}],[\"表示当前对象和目标对象的关系relationtypeenum枚举\",{\"1\":{\"373\":1}}],[\"表示当前字段对应到数据库是逻辑删除表示\",{\"1\":{\"217\":1}}],[\"表示是否是主键\",{\"1\":{\"213\":1}}],[\"表示返回默认值\",{\"1\":{\"196\":1}}],[\"表示报错\",{\"1\":{\"196\":1}}],[\"表示不允许删除数据\",{\"1\":{\"161\":1}}],[\"表示为自动生成的\",{\"1\":{\"111\":1}}],[\"表示命令为处理成功\",{\"1\":{\"73\":1}}],[\"表示命令已成功处理\",{\"1\":{\"73\":1}}],[\"设置properties\",{\"1\":{\"432\":1,\"438\":1}}],[\"设置最近表名名称\",{\"1\":{\"334\":2}}],[\"设置非null字符串非空\",{\"1\":{\"323\":1}}],[\"设置值后将使用有界队列线程池\",{\"1\":{\"246\":1}}],[\"设置当前事务的执行行为\",{\"1\":{\"199\":1}}],[\"设置当前租户和当前用户\",{\"1\":{\"117\":1}}],[\"设置方言语法等为mysql的\",{\"1\":{\"194\":1,\"248\":1,\"293\":1}}],[\"设置以log\",{\"1\":{\"194\":1,\"248\":1,\"293\":1}}],[\"设置不允许物理删除\",{\"1\":{\"194\":1,\"248\":1,\"293\":1}}],[\"设置不查询\",{\"1\":{\"158\":1}}],[\"设置日志打印为控制台\",{\"1\":{\"194\":1}}],[\"设置主键为自增\",{\"1\":{\"170\":1}}],[\"设置98\",{\"1\":{\"69\":1}}],[\"租户模式实现\",{\"0\":{\"122\":1}}],[\"租户拦截器\",{\"1\":{\"117\":1}}],[\"租户id\",{\"1\":{\"113\":1}}],[\"拦截器\",{\"1\":{\"117\":1,\"263\":1}}],[\"拦截器名称需要自己实现\",{\"1\":{\"114\":1}}],[\"模拟当前用户租户对象\",{\"1\":{\"117\":1}}],[\"模式\",{\"1\":{\"80\":1,\"320\":1}}],[\"创建表\",{\"0\":{\"442\":1}}],[\"创建数据库\",{\"0\":{\"430\":1,\"436\":1}}],[\"创建一个匿名表的表达式\",{\"1\":{\"343\":1}}],[\"创建一个mysql的属性方法包装\",{\"1\":{\"88\":1}}],[\"创建对象\",{\"0\":{\"275\":1}}],[\"创建代理模式api查询\",{\"1\":{\"194\":1}}],[\"创建三个不同的数据库\",{\"1\":{\"183\":1}}],[\"创建easyquery配置项的时候可以通过构造函数开启允许删除\",{\"1\":{\"162\":1}}],[\"创建人\",{\"1\":{\"117\":1,\"216\":1,\"397\":2,\"447\":2}}],[\"创建时间和创建人和修改时间修改人已经添加的情况下我们还需要对删除时间删除人进行处理\",{\"1\":{\"447\":1}}],[\"创建时间字段不需要update时更新\",{\"1\":{\"216\":1,\"217\":1}}],[\"创建时间\",{\"1\":{\"117\":1,\"162\":1,\"166\":1,\"201\":1,\"397\":2,\"416\":1,\"447\":2}}],[\"配置动态排序\",{\"1\":{\"327\":1}}],[\"配置bean\",{\"0\":{\"273\":1}}],[\"配置和springboot的配置一样\",{\"1\":{\"269\":1}}],[\"配置额外插件\",{\"1\":{\"263\":1}}],[\"配置了print\",{\"1\":{\"260\":1}}],[\"配置自定义日志\",{\"1\":{\"260\":1}}],[\"配置自动插入时的值\",{\"1\":{\"117\":1}}],[\"配置文件\",{\"0\":{\"431\":1,\"437\":1,\"443\":1},\"1\":{\"242\":1,\"266\":1}}],[\"配置参数选项\",{\"0\":{\"244\":1},\"1\":{\"210\":1}}],[\"配置kotlin\",{\"1\":{\"210\":1}}],[\"配置java\",{\"1\":{\"210\":1}}],[\"配置项delete\",{\"1\":{\"165\":1}}],[\"配置\",{\"0\":{\"157\":1,\"454\":1}}],[\"配置表达式where条件\",{\"1\":{\"121\":1}}],[\"配置表达式更新set列自动填充\",{\"1\":{\"119\":1}}],[\"配置更新是需要修改的值\",{\"1\":{\"117\":1}}],[\"配置名称\",{\"1\":{\"71\":1,\"245\":1,\"246\":1}}],[\"越小越先执行\",{\"1\":{\"114\":1}}],[\"删除自动填充删除信息\",{\"1\":{\"447\":1}}],[\"删除时间\",{\"1\":{\"447\":1}}],[\"删除人\",{\"1\":{\"447\":1}}],[\"删除核心过滤方法就是wherepredicate和sqlpredicate两种是同一种东西\",{\"1\":{\"421\":1}}],[\"删除演示\",{\"1\":{\"149\":1}}],[\"删除添加租户id\",{\"1\":{\"122\":1}}],[\"删除\",{\"0\":{\"162\":1,\"446\":1},\"1\":{\"121\":1,\"129\":1,\"149\":1}}],[\"删除的时候可以通过条件拦截来动态构建添加条件如\",{\"1\":{\"113\":1}}],[\"删除条件拦截器\",{\"1\":{\"59\":1}}],[\"名称不希望查询出额外信息\",{\"1\":{\"382\":1}}],[\"名称\",{\"1\":{\"113\":1}}],[\"类型\",{\"1\":{\"274\":1,\"315\":1,\"325\":1,\"372\":1}}],[\"类\",{\"1\":{\"113\":1}}],[\"自行判断key和value是否为null\",{\"1\":{\"332\":1}}],[\"自行定义版本号策略\",{\"1\":{\"218\":1}}],[\"自增主键回填\",{\"0\":{\"170\":1}}],[\"自动填充修改时间等\",{\"1\":{\"113\":1}}],[\"自动填充修改人\",{\"1\":{\"113\":1}}],[\"自动填充创建时间\",{\"1\":{\"113\":1}}],[\"自动填充创建人\",{\"1\":{\"113\":1}}],[\"自动填充id\",{\"1\":{\"113\":1}}],[\"自定义它们\",{\"1\":{\"481\":1}}],[\"自定义对齐\",{\"0\":{\"461\":1}}],[\"自定义标题\",{\"1\":{\"458\":5}}],[\"自定义容器\",{\"0\":{\"458\":1}}],[\"自定义函数包裹column\",{\"1\":{\"422\":1}}],[\"自定义函数创建数据库自动生成列\",{\"0\":{\"111\":1}}],[\"自定义\",{\"1\":{\"422\":1}}],[\"自定义结果集\",{\"0\":{\"419\":1}}],[\"自定义列输出\",{\"0\":{\"384\":1}}],[\"自定义pager\",{\"0\":{\"370\":1}}],[\"自定义分页返回结果\",{\"0\":{\"364\":1}}],[\"自定义分库分表\",{\"1\":{\"59\":1}}],[\"自定义填充数据\",{\"1\":{\"337\":2}}],[\"自定义nameconversion\",{\"0\":{\"291\":1}}],[\"自定义逻辑删除数据\",{\"0\":{\"131\":1}}],[\"自定义逻辑删除\",{\"0\":{\"130\":1}}],[\"自定义插入列函数\",{\"1\":{\"111\":1}}],[\"自定义数据库片段\",{\"1\":{\"88\":1}}],[\"自定义数据库函数\",{\"0\":{\"85\":1}}],[\"自定义更新\",{\"1\":{\"59\":1}}],[\"自定义软删除\",{\"1\":{\"59\":1}}],[\"作者设置为\",{\"1\":{\"479\":1}}],[\"作者有着多年的分库分表经验\",{\"1\":{\"426\":1}}],[\"作为局部变量来使用\",{\"1\":{\"194\":1}}],[\"作为插入函数\",{\"1\":{\"111\":1}}],[\"作用域\",{\"1\":{\"91\":1}}],[\"函数来实现插入时生成对应的id列\",{\"1\":{\"110\":1}}],[\"请使用绝对链接\",{\"1\":{\"480\":1}}],[\"请阅读\",{\"1\":{\"456\":1}}],[\"请先阅读\",{\"1\":{\"453\":1}}],[\"请求对象中有一个集合\",{\"1\":{\"330\":1}}],[\"请确认是否已经开启trackmanager\",{\"1\":{\"109\":3}}],[\"请看\",{\"1\":{\"88\":1}}],[\"警告容器\",{\"1\":{\"458\":1}}],[\"警告\",{\"1\":{\"109\":1,\"416\":1}}],[\"全字段查询自动以resultclass为主映射columnname相同列\",{\"1\":{\"388\":1}}],[\"全字段查询\",{\"0\":{\"388\":1}}],[\"全字段更新\",{\"1\":{\"109\":1}}],[\"全量更新\",{\"1\":{\"209\":1}}],[\"全参数个数为主表+join表个数\",{\"1\":{\"152\":1,\"154\":2}}],[\"全参数时为一一对应的表\",{\"1\":{\"150\":1}}],[\"全局拦截器\",{\"0\":{\"113\":1},\"1\":{\"65\":1}}],[\"全局自定义拦截器\",{\"1\":{\"59\":1}}],[\"全局默认\",{\"1\":{\"59\":1}}],[\"只会查询映射到vo上的列\",{\"1\":{\"398\":1}}],[\"只更新非null列到数据库\",{\"1\":{\"208\":1}}],[\"只更新null列到数据库\",{\"1\":{\"208\":1}}],[\"只更新了phone字段并未对所有的字段进行更新\",{\"1\":{\"107\":1}}],[\"只插入null列\",{\"1\":{\"159\":1,\"171\":1}}],[\"只需要自定义实现对应数据库的增删改查接口即可\",{\"1\":{\"7\":1}}],[\"差异更新可以自动监听被追踪的对象\",{\"1\":{\"206\":1}}],[\"差异更新\",{\"0\":{\"206\":1},\"1\":{\"107\":1}}],[\"差异更新实体\",{\"1\":{\"59\":1}}],[\"将订单状态为2的数据改为3\",{\"1\":{\"445\":1}}],[\"将订单表按5取模进行分表分为t\",{\"1\":{\"442\":1}}],[\"将订单表按5取模进行分库分为ds0\",{\"1\":{\"436\":1}}],[\"将学生表信息查询额外查询出班级表\",{\"1\":{\"382\":1}}],[\"将以普通字符串拼接的形式拼接上去\",{\"1\":{\"356\":2}}],[\"将以参数形式\",{\"1\":{\"356\":1}}],[\"将上述查询的columnas替换为column\",{\"1\":{\"338\":1}}],[\"将当前表达式最近的一张表的表名修改成tablenameas返回的表名\",{\"1\":{\"334\":1}}],[\"将当前表达式最近的一张表的表名修改成tablename\",{\"1\":{\"334\":1}}],[\"将实体对象转成数据库值\",{\"1\":{\"295\":1}}],[\"将数据库的值转成对象值\",{\"1\":{\"295\":1}}],[\"将数据库和对象值进行互相转换的接口\",{\"1\":{\"295\":1}}],[\"将数据进行base64解码\",{\"1\":{\"90\":1}}],[\"将数据进行aes加密\",{\"1\":{\"90\":1}}],[\"将下面的代码插入到plugins下的plugin下的executions\",{\"1\":{\"281\":1}}],[\"将不会生成sql因为只有一个主键没有其他任何需要update的列\",{\"1\":{\"160\":1}}],[\"将第三张表的id字段映射到vo的field2字段上\",{\"1\":{\"154\":2}}],[\"将第二张表的title字段映射到vo的field1字段上\",{\"1\":{\"154\":2}}],[\"将第一张表的所有属性的列映射到vo的列名上\",{\"1\":{\"154\":2}}],[\"将会报错\",{\"1\":{\"141\":1,\"142\":1}}],[\"将now值获取后那么这个now就是个固定值而不是动态值\",{\"1\":{\"132\":1,\"262\":1}}],[\"将抛出错误\",{\"1\":{\"104\":1}}],[\"当使用join操作后\",{\"1\":{\"340\":1}}],[\"当使用系统默认的按时间分片时设置这个配置为true那么框架会在内存中添加对应的系统表\",{\"1\":{\"246\":1}}],[\"当关联结果为null是否也会调用produce\",{\"1\":{\"337\":1}}],[\"当query\",{\"1\":{\"322\":6}}],[\"当查询没有匹配到路由是否选择报错\",{\"1\":{\"246\":1}}],[\"当查询没有路由匹配的时候查询是否报错\",{\"1\":{\"196\":1}}],[\"当对象存在版本号并且是表达式更新的那么如果不添加版本号withversion将会报错\",{\"1\":{\"245\":1}}],[\"当逻辑删除为自定义逻辑删除时\",{\"1\":{\"217\":1}}],[\"当且仅当对象是分片对象是用来初始化分片对象\",{\"1\":{\"212\":1}}],[\"当且仅当executormaximumpoolsize>0生效\",{\"1\":{\"196\":2}}],[\"当获取链接时间大于multiconnwaittimeoutmillis\",{\"1\":{\"196\":1}}],[\"当小于maxshardingquerylimit后启动会抛出警告\",{\"1\":{\"196\":1}}],[\"当出现条件分片大于多少时报错默认128\",{\"1\":{\"196\":1,\"246\":1}}],[\"当出现跨分片聚合也就是通过表达式无法精确到具体路由或筛选后路由大于1那么会开启最多多少个线程为一组进行查询聚合\",{\"1\":{\"196\":1}}],[\"当值为0时分片聚合采用无界队列executors\",{\"1\":{\"196\":1}}],[\"当当前方法或者配置不允许删除命令的时候程序将会抛出对应的异常easyqueryinvalidoperationexception\",{\"1\":{\"164\":1}}],[\"当前对象的selfproperty属性对应中间表的哪个属性\",{\"1\":{\"373\":1}}],[\"当前对象的selfproperty属性关联目标的哪个属性\",{\"1\":{\"373\":1}}],[\"当前对象的哪个属性关联目标对象\",{\"1\":{\"373\":1}}],[\"当前对象如果支持软删除那么在生成对应命令的时候会生成update语句来实现软删除\",{\"1\":{\"164\":1}}],[\"当前主表的属性\",{\"1\":{\"337\":1}}],[\"当前属性和数据库对象属性以哪种表达式构建条件\",{\"1\":{\"324\":1}}],[\"当前属性映射到数据库对象的属性名称\",{\"1\":{\"324\":1}}],[\"当前条件用于查询哪张表\",{\"1\":{\"324\":1}}],[\"当前查询会一次性获取5个链接这5个链接会通过defaultdatasourcemergepoolsize参数进行限制\",{\"1\":{\"246\":1}}],[\"当前查询条件不使用追踪查询\",{\"1\":{\"103\":1}}],[\"当前查询条件使用追踪需开启trackmanager\",{\"1\":{\"103\":1}}],[\"当前环境线程数且最小为\",{\"1\":{\"196\":1}}],[\"当前性能比较代码来自mybatis\",{\"1\":{\"182\":1}}],[\"当前方法不生效因为其实压根也没有映射上去\",{\"1\":{\"154\":1}}],[\"当前版本信息和对应的属性和对象信息\",{\"1\":{\"138\":1}}],[\"当前线程是否开启了追踪\",{\"1\":{\"102\":1}}],[\"当前上下文开启追踪\",{\"1\":{\"102\":2}}],[\"当然另外50个非分片会和分片进行竞争\",{\"1\":{\"431\":1,\"437\":1}}],[\"当然链接模式用户也可以自行指定\",{\"1\":{\"246\":1}}],[\"当然也可以在执行时手动更改执行策略为sqlexecutestrategyenum\",{\"1\":{\"245\":1}}],[\"当然全局设置了后面也可以在\",{\"1\":{\"245\":1}}],[\"当然您也可以选择更新策略为非null更新\",{\"1\":{\"216\":1}}],[\"当然您还可以随意扩展\",{\"1\":{\"88\":1}}],[\"当然可以使用batch或者到了插入批处理阈值也是可以的\",{\"1\":{\"168\":1}}],[\"当然可以设置忽略更新\",{\"1\":{\"156\":1}}],[\"当然因为easy\",{\"1\":{\"158\":1}}],[\"当然你也可以单独创建一个拦截器\",{\"1\":{\"118\":1}}],[\"当然目前算法不一定是最优的空间也不一定是最有效的\",{\"1\":{\"84\":1}}],[\"手动指定\",{\"1\":{\"209\":1}}],[\"手动将查询出来的对象进行easyquery\",{\"1\":{\"206\":1}}],[\"手动事务\",{\"0\":{\"198\":1}}],[\"手动添加到当前上下文\",{\"1\":{\"99\":1}}],[\"手机号列\",{\"1\":{\"90\":1,\"91\":1}}],[\"手机号值\",{\"1\":{\"90\":1}}],[\"如何设计api完全可以看用户自行实现\",{\"1\":{\"354\":1}}],[\"如何填充\",{\"1\":{\"337\":1}}],[\"如何自定义配置日志接口信息\",{\"1\":{\"210\":1}}],[\"如何配置使用kotlin\",{\"1\":{\"210\":1}}],[\"如何配置java\",{\"1\":{\"210\":1}}],[\"如何开启\",{\"0\":{\"200\":1}}],[\"如何开启数据追踪\",{\"1\":{\"99\":1}}],[\"如果提取出来那么就确定了\",{\"1\":{\"447\":1}}],[\"如果提前select相当于是进行了一次匿名表\",{\"1\":{\"150\":1}}],[\"如果子查询in\",{\"1\":{\"406\":1}}],[\"如果本次采用tostreamresult那么将不会支持include和fillmany和fillone的api\",{\"1\":{\"401\":1}}],[\"如果出现多表属性映射\",{\"1\":{\"398\":1}}],[\"如果出现错误类文件具有错误的版本\",{\"1\":{\"285\":1}}],[\"如果select第二个参数过后没有任何select\",{\"1\":{\"398\":1}}],[\"如果返回结果属性类型不包容原属性类型\",{\"1\":{\"396\":2}}],[\"如果表达式调用了select那么这个sql就是确定了的如果再次调用where那么前面的表达式将被视为别名表\",{\"1\":{\"395\":1}}],[\"如果表tableindex不在当前上下文中也报错\",{\"1\":{\"324\":1}}],[\"如果映射属性是集合\",{\"1\":{\"382\":1}}],[\"如果映射属性是对象\",{\"1\":{\"382\":1}}],[\"如果第一个原生sql片段存在变量比如表列或者参数值\",{\"1\":{\"356\":1}}],[\"如果第三个参数为null那么和topageresult行为一致\",{\"1\":{\"310\":1}}],[\"如果临时使用建议使用\",{\"1\":{\"355\":1}}],[\"如果采用\",{\"1\":{\"331\":1}}],[\"如果采用加密对进行处理那么默认是不支持like函数的\",{\"1\":{\"96\":1}}],[\"如果严格模式\",{\"1\":{\"328\":1}}],[\"如果调用一次后\",{\"1\":{\"328\":1}}],[\"如果查询学生有20个以上假如21个那么会先用20个id进行in查询\",{\"1\":{\"372\":1}}],[\"如果查询属性与数据库对象属性不一致可以通过propname改写\",{\"1\":{\"324\":1}}],[\"如果查询数据量有几万或者几十万那么性能肯定会有影响\",{\"1\":{\"206\":1}}],[\"如果允许表示空也会加入到表达式内而不是忽略\",{\"1\":{\"324\":1}}],[\"如果属性对应的columnname不一致需要as处理\",{\"1\":{\"399\":1}}],[\"如果属性没有映射到对象上报错\",{\"1\":{\"324\":1}}],[\"如果属性updatesetintrackdiff\",{\"1\":{\"216\":1}}],[\"如果有多个where部分where需要自定义那么可以采用conditionconfigure\",{\"1\":{\"323\":1}}],[\"如果最近的表是匿名表则设置表别名alias\",{\"1\":{\"310\":2}}],[\"如果没有这个封装的必要可以用sqlnativesegment\",{\"1\":{\"355\":1}}],[\"如果没有结果则返回空集合\",{\"1\":{\"310\":1}}],[\"如果没命中就返回null\",{\"1\":{\"310\":1}}],[\"如果无法提示有对应的topicproxy那么请刷新下maven\",{\"1\":{\"284\":1}}],[\"如果你是一个新手\",{\"1\":{\"453\":1}}],[\"如果你不了解它\",{\"1\":{\"454\":1}}],[\"如果你不想为每个查询定义专门的排序类可以添加通用自行实现\",{\"1\":{\"332\":1}}],[\"如果你不需要分库那么可以不用去设置该值\",{\"1\":{\"246\":1}}],[\"如果你希望数据库对象和数据库类型一致\",{\"1\":{\"294\":1}}],[\"如果你的所有表中有分片表那么一定要设置这个值\",{\"1\":{\"246\":1}}],[\"如果超过这个时间还是无法获取前两个还未查询完成\",{\"1\":{\"246\":1}}],[\"如果超出将会分为两个语句执行\",{\"1\":{\"245\":1}}],[\"如果连接池100当前值设置为10\",{\"1\":{\"246\":1}}],[\"如果为true那么只需要开启当前上下文追踪\",{\"1\":{\"245\":1}}],[\"如果为0那么采用无界线程池executors\",{\"1\":{\"196\":1}}],[\"如果name列不是null\",{\"1\":{\"245\":1}}],[\"如果一张表存在id和name那么当name为null列时生成的sql将不会指定name列比如insert\",{\"1\":{\"245\":1}}],[\"如果true那么就会在入参参数中对其进行分段加密\",{\"1\":{\"225\":1}}],[\"如果整个查询采用\",{\"1\":{\"206\":1}}],[\"如果附加实体的时候发现当前上下文已经有被追踪的实体\",{\"1\":{\"206\":1}}],[\"如果希望默认是追踪的可以设置启动配置defaulttrack为true那么只需要开始上下文环境即可\",{\"1\":{\"206\":1}}],[\"如果事务未提交则自动调用回滚\",{\"1\":{\"199\":1}}],[\"如果程序不涉及同datasource分配聚合那么那么就不需要设置该值\",{\"1\":{\"196\":1}}],[\"如果自定义必须大于maxshardingquerylimit\",{\"1\":{\"196\":1}}],[\"如果integer那么select要integer\",{\"1\":{\"406\":1}}],[\"如果insertable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率\",{\"1\":{\"156\":1}}],[\"如果insertable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率\",{\"1\":{\"71\":1,\"245\":1}}],[\"如果idea无法智能提示那么就刷新一下maven\",{\"1\":{\"193\":1}}],[\"如果您需要差异更新并且没有配置默认启动追踪查询那么需要独立进行astracking\",{\"1\":{\"372\":1}}],[\"如果您只需要返回基本类型那么不需要额外定义复杂的对象\",{\"1\":{\"311\":1}}],[\"如果您有自定义日志接口可以通过自行实现\",{\"1\":{\"287\":1}}],[\"如果您没有设置log那么一样看不到对应的执行sql\",{\"1\":{\"245\":1}}],[\"如果您是\",{\"1\":{\"233\":2}}],[\"如果您是c\",{\"1\":{\"190\":1}}],[\"如果您对枚举转成数据库对象或者json转成数据库对象的自定义列处理可以通过值对象转换来实现\",{\"1\":{\"210\":1}}],[\"如果您觉得这个框架有用可以请作者喝杯咖啡\",{\"1\":{\"12\":1}}],[\"如果存在一样的key或者唯一约束那么insert就变成update\",{\"1\":{\"174\":1}}],[\"如果存在复杂对象通过valueconverter转换的需要实现重写hashcode和equals\",{\"1\":{\"98\":1}}],[\"如果当前最近的表是匿名表比如嵌套queryable的表那么将alias改成对应的表名\",{\"1\":{\"334\":2}}],[\"如果当前最近的表是正常的数据库表名\",{\"1\":{\"334\":2}}],[\"如果当前字段标记update\",{\"1\":{\"216\":1}}],[\"如果当前操作不在事务内执行那么会自动开启事务\",{\"1\":{\"203\":1}}],[\"如果当前数据表为自增id那么会回填对应的数据到id主键里面\",{\"1\":{\"167\":1}}],[\"如果当前对象不是数据库对象\",{\"1\":{\"104\":1}}],[\"如果设置为false则需要手动指定对应列\",{\"1\":{\"158\":1}}],[\"如果updatable一次性添加对象集合大于等于512个那么会对其进行相同sql进行合并提高执行效率\",{\"1\":{\"156\":1}}],[\"如果updatable一次性添加对象集合大于等于1024个那么会对其进行相同sql进行合并提高执行效率\",{\"1\":{\"71\":1,\"245\":1}}],[\"如果后续可以通过ignore方法来取消掉之前的映射关系\",{\"1\":{\"154\":2}}],[\"如果不进行忽略两个id都查询\",{\"1\":{\"399\":1,\"400\":1}}],[\"如果不填写默认columnall\",{\"1\":{\"382\":2}}],[\"如果不查询建议设置为updateignore防止update\",{\"1\":{\"260\":1}}],[\"如果不希望报错可以通过noversionignore来忽略\",{\"1\":{\"245\":1}}],[\"如果不引用也可以使用只是无法使用lambda表达式来表示属性只能用字符串\",{\"1\":{\"237\":1,\"243\":1}}],[\"如果不添加那么不会追踪数据\",{\"1\":{\"206\":1}}],[\"如果不添加generatedsqlcolumngenerator那么将会视为自增列一样\",{\"1\":{\"111\":1}}],[\"如果不允许物理删除那么设置允许\",{\"1\":{\"165\":1}}],[\"如果不想用链式的then来切换也可以通过lambda\",{\"1\":{\"152\":1,\"154\":2}}],[\"如果禁用逻辑删\",{\"1\":{\"142\":1}}],[\"如果单独创建那么可以单独对其进行选择性启用或者禁用\",{\"1\":{\"118\":1}}],[\"如果数据量过多建议采用非tracking查询\",{\"1\":{\"109\":3}}],[\"如果数据未被差异更新\",{\"1\":{\"109\":3}}],[\"如果开启了追踪并且对象属性没有进行修改那么本次更新将不会生成sql执行数据库\",{\"1\":{\"108\":1}}],[\"如果对象已被追踪且追踪对象并不是同一个对象也将抛错\",{\"1\":{\"104\":1}}],[\"如果这边也是用变量就会导致join下不是别名而是带具体表的列比如\",{\"1\":{\"92\":1}}],[\"如果是query表达式那么可以实现子查询类似的功能\",{\"1\":{\"356\":1}}],[\"如果是表对象属性那么无需管理表别名\",{\"1\":{\"356\":1}}],[\"如果是表达式更新那么还是按表达式更新来处理\",{\"1\":{\"66\":1}}],[\"如果是忽略模式那么就是忽略该属性\",{\"1\":{\"327\":1}}],[\"如果是可以通过默认配置或者运行时指定是否需要查询出该列\",{\"1\":{\"213\":1}}],[\"如果是true\",{\"1\":{\"213\":2}}],[\"如果是那么在update对象delete对象将会以这个字段为id\",{\"1\":{\"213\":1}}],[\"如果是大于0采用长度为executorqueuesize的有界队列\",{\"1\":{\"196\":1}}],[\"如果是自定义strategy必须是logicdeletestrategyenum\",{\"1\":{\"132\":1}}],[\"如果是非spring项目直接添加到easqueryconfiguration\",{\"1\":{\"119\":1}}],[\"如果是非spring项目直接添加到queryconfiguration\",{\"1\":{\"117\":1}}],[\"如果是springboot的小伙伴只需要在更新方法外部加上aop注解即可\",{\"1\":{\"206\":1}}],[\"如果是springboot的话\",{\"1\":{\"92\":1}}],[\"如果是spring\",{\"1\":{\"132\":1}}],[\"如果是spring项目添加\",{\"1\":{\"117\":1,\"119\":1}}],[\"如果需要额外字段返回可以使用columninclude\",{\"1\":{\"372\":1}}],[\"如果需要设置或者自定义请设置为最小maxshardingquerylimit\",{\"1\":{\"246\":1}}],[\"如果需要不查询建议在设置为large的前提下将对应列设置为\",{\"1\":{\"245\":1}}],[\"如果需要可以用表达式忽略\",{\"1\":{\"216\":1}}],[\"如果需要更新的列一个都没有\",{\"1\":{\"206\":1}}],[\"如果需要聚合的情况下并且存在外部orm或者getconnection那么可能导致无法正确反应超时可以适当将该值降低\",{\"1\":{\"196\":1}}],[\"如果需要会对当前表达式的主表进行select\",{\"1\":{\"150\":1}}],[\"如果需要支持差异更新需要实现重写hashcode和equalsenum除外\",{\"1\":{\"294\":1}}],[\"如果需要支持解密可以采用上一篇文章的加密方式\",{\"1\":{\"96\":1}}],[\"如果需要支持多个数据库字段\",{\"1\":{\"88\":1}}],[\"如果需要搜索默认需要至少4个非中文字符或者2个中文字符如下\",{\"1\":{\"80\":1}}],[\"如果需要手动调用或者手动限制不调用可以通过调用batch方法\",{\"1\":{\"70\":1}}],[\"如果驱动程序继续处理\",{\"1\":{\"73\":1}}],[\"如果批量更新中的命令之一无法正确执行\",{\"1\":{\"73\":1}}],[\"如果使用batch那么自行处理返回结果\",{\"1\":{\"72\":1}}],[\"如果新值比旧值大update\",{\"1\":{\"68\":2}}],[\"如果旧值比新值大生成update\",{\"1\":{\"68\":2}}],[\"保证对象更新时的差异更新而不是全量更新\",{\"1\":{\"98\":1}}],[\"对\",{\"1\":{\"456\":1}}],[\"对springboot进行的封装可以通过jwt获取对应的当前操作人用户\",{\"1\":{\"447\":1}}],[\"对其limit\",{\"1\":{\"383\":1}}],[\"对其添加select常量\",{\"1\":{\"383\":1}}],[\"对结果进行先count\",{\"1\":{\"310\":1}}],[\"对查询结果进行去重\",{\"1\":{\"310\":1}}],[\"对当前表达式进行查询结果进行排序\",{\"1\":{\"310\":1}}],[\"对当前表达式进行查询结果返回和偏移进行限制\",{\"1\":{\"310\":1}}],[\"对当前表达式进行条件追加\",{\"1\":{\"310\":1}}],[\"对应的vo或者bo等对象上采用枚举也是可以的\",{\"1\":{\"300\":1}}],[\"对应数据库表的列名\",{\"1\":{\"213\":1}}],[\"对easyqueryclient的增强通过apt代理模式实现强类型\",{\"1\":{\"242\":1,\"266\":1}}],[\"对easyqueryclient的增强通过lambda方式实现查询\",{\"1\":{\"242\":1,\"266\":1}}],[\"对比\",{\"1\":{\"182\":1}}],[\"对于\",{\"1\":{\"480\":1}}],[\"对于大部分业务场景过于复杂\",{\"1\":{\"320\":1}}],[\"对于是否允许删除命令将不会生效\",{\"1\":{\"164\":1}}],[\"对于对象更新方法提供了数据追踪\",{\"1\":{\"98\":1}}],[\"对象修改时可以进行修改人和修改时间的自动赋值\",{\"1\":{\"447\":1}}],[\"对象设计\",{\"0\":{\"447\":1}}],[\"对象更新可以通过id直接路由到对应的库保证用户无感更新\",{\"1\":{\"440\":1}}],[\"对象更新精确命中对应的库和对应的表\",{\"1\":{\"434\":1}}],[\"对象属性\",{\"1\":{\"356\":1}}],[\"对象属性类型\",{\"1\":{\"295\":1}}],[\"对象查询\",{\"1\":{\"320\":1}}],[\"对象数据库值转换\",{\"0\":{\"294\":1}}],[\"对象值转换\",{\"1\":{\"210\":1}}],[\"对象主键更新\",{\"0\":{\"202\":1}}],[\"对象删除\",{\"1\":{\"122\":1}}],[\"对象拦截器\",{\"1\":{\"113\":1}}],[\"对象\",{\"1\":{\"75\":2,\"121\":2}}],[\"对象插入\",{\"1\":{\"59\":1}}],[\"添加更新对象参数\",{\"1\":{\"447\":1}}],[\"添加默认的数据\",{\"1\":{\"447\":1}}],[\"添加额外数据源\",{\"0\":{\"432\":1,\"438\":1}}],[\"添加自己的分页返回结果接口\",{\"0\":{\"369\":1}}],[\"添加in条件\",{\"1\":{\"322\":2}}],[\"添加查询动态排序\",{\"1\":{\"310\":1}}],[\"添加对象查询条件\",{\"1\":{\"310\":1}}],[\"添加单主键条件\",{\"1\":{\"310\":1}}],[\"添加kapt设置\",{\"0\":{\"281\":1}}],[\"添加依赖\",{\"0\":{\"280\":1}}],[\"添加翻译缓存服务\",{\"0\":{\"276\":1}}],[\"添加驱动\",{\"1\":{\"273\":1}}],[\"添加easy\",{\"1\":{\"272\":1}}],[\"添加entity到当前追踪上下文\",{\"1\":{\"104\":1}}],[\"添加分表或者分库的路由\",{\"1\":{\"263\":1}}],[\"添加配置文件\",{\"1\":{\"258\":1,\"260\":1,\"273\":1}}],[\"添加项目依赖\",{\"0\":{\"255\":1}}],[\"添加这个注解的属性将不会再更新时被更新除非手动指定\",{\"1\":{\"216\":1}}],[\"添加这个注解的属性将不会再插入时被赋值\",{\"1\":{\"215\":1}}],[\"添加这个注解的属性将会被直接忽略映射到数据库\",{\"1\":{\"214\":1}}],[\"添加这个列为加密列\",{\"1\":{\"92\":1}}],[\"添加其他方面的测试\",{\"1\":{\"189\":1}}],[\"添加测试数据\",{\"1\":{\"139\":1}}],[\"添加租户id\",{\"1\":{\"122\":1}}],[\"添加追踪主要用于对当前对象进行对象属性赋值前后的变更进行记录\",{\"1\":{\"104\":1}}],[\"添加注解\",{\"1\":{\"99\":1}}],[\"添加方言了的\",{\"1\":{\"88\":1}}],[\"案例源码\",{\"0\":{\"428\":1}}],[\"案例来自\",{\"1\":{\"357\":1}}],[\"案例二\",{\"0\":{\"357\":1}}],[\"案例场景\",{\"0\":{\"112\":1}}],[\"案例\",{\"0\":{\"92\":1,\"335\":1,\"359\":1,\"402\":1}}],[\"用法\",{\"1\":{\"316\":1}}],[\"用在数据库对象和返回结果上面用于处理一对一\",{\"1\":{\"226\":1}}],[\"用户可以自行实现分页\",{\"1\":{\"368\":1}}],[\"用户可以自行定义分页结果\",{\"1\":{\"364\":1}}],[\"用户可以自定义\",{\"1\":{\"323\":1}}],[\"用户可以替换掉框架内部的所有接口\",{\"1\":{\"289\":1}}],[\"用户也可以自定义实现接口\",{\"1\":{\"323\":1}}],[\"用户也可以自行构建其他数据库或者其他数据源的easy\",{\"1\":{\"269\":1}}],[\"用户表\",{\"1\":{\"274\":1}}],[\"用户类型\",{\"1\":{\"274\":1}}],[\"用户还是一样使用deletable方法来调用执行\",{\"1\":{\"245\":1}}],[\"用户需要返回16位的向量和秘钥\",{\"1\":{\"224\":1}}],[\"用户自定义\",{\"1\":{\"217\":1}}],[\"用户自定义实现logicdeletestrategy或者\",{\"1\":{\"128\":1}}],[\"用户在更新update表达式的时候可以通过当前拦截器自动追加set列操作\",{\"1\":{\"113\":1}}],[\"用户在查询\",{\"1\":{\"113\":1}}],[\"用于按需查询\",{\"1\":{\"396\":1}}],[\"用于设置列别名一般用户查询较多\",{\"1\":{\"356\":1}}],[\"用于关联\",{\"1\":{\"337\":2}}],[\"用于分片聚合查询时一次性获取多个数据库connection但是因为连接池有限所以多个聚合线程间会等待防止死锁\",{\"1\":{\"196\":1}}],[\"用于防止获取链接死锁程序假死\",{\"1\":{\"196\":1}}],[\"用于对lambda列进行长度查询\",{\"1\":{\"310\":1}}],[\"用于对lambda列进行平均值值查询\",{\"1\":{\"310\":1}}],[\"用于对lambda列进行最小值查询\",{\"1\":{\"310\":1}}],[\"用于对lambda列进行最大值查询\",{\"1\":{\"310\":1}}],[\"用于对lambda列进行求和\",{\"1\":{\"310\":2}}],[\"用于对拦截器进行顺序排序执行\",{\"1\":{\"114\":1}}],[\"用于对象插入前和修改前进行对象拦截\",{\"1\":{\"113\":1}}],[\"用于做java对象字段到数据库列的函数处理比如\",{\"1\":{\"91\":1}}],[\"用于做数据库列到java对象字段的函数处理比如\",{\"1\":{\"91\":1}}],[\"用来实现vo查询需要实现的列处理\",{\"1\":{\"382\":2}}],[\"用来标识当前对象的数据库分表额外键是哪个\",{\"1\":{\"230\":1}}],[\"用来标识当前对象的数据库分表键是哪个\",{\"1\":{\"229\":1}}],[\"用来标识当前对象的数据库分库键是哪个\",{\"1\":{\"227\":1}}],[\"用来标识当前对象是数据库分库额外分库键是哪个\",{\"1\":{\"228\":1}}],[\"用来表示是否需要支持like搜索\",{\"1\":{\"225\":1}}],[\"用来处理如何加密解密数据策略\",{\"1\":{\"224\":1}}],[\"用来描述当前列是否是大列\",{\"1\":{\"213\":1}}],[\"用来包装数据库片段\",{\"1\":{\"88\":1}}],[\"用来获取针对那个属性进行方法处理\",{\"1\":{\"87\":1}}],[\"用来获取具体的列方法\",{\"1\":{\"87\":1}}],[\"秘钥\",{\"1\":{\"90\":2,\"91\":2}}],[\"列不包含值\",{\"1\":{\"422\":1}}],[\"列包含值\",{\"1\":{\"422\":1}}],[\"列右匹配\",{\"1\":{\"422\":1}}],[\"列左匹配\",{\"1\":{\"422\":1}}],[\"列\",{\"1\":{\"422\":12}}],[\"列选择器返回对象\",{\"1\":{\"396\":2}}],[\"列选择器\",{\"1\":{\"396\":2}}],[\"列类型\",{\"1\":{\"310\":5}}],[\"列加密\",{\"1\":{\"223\":1}}],[\"列名需要对应\",{\"1\":{\"419\":1}}],[\"列名\",{\"1\":{\"88\":1}}],[\"列值原子更新\",{\"0\":{\"66\":1}}],[\"那么可能会出现转换失败\",{\"1\":{\"396\":2}}],[\"那么可以通过使用当前方法返回对应的结果集\",{\"1\":{\"401\":1}}],[\"那么可以通过vo的形式来返回自定义列的关联查询\",{\"1\":{\"382\":1}}],[\"那么可以通过第二个参数lambda选择expression或者value或format\",{\"1\":{\"356\":1}}],[\"那么可以采用integer属性\",{\"1\":{\"300\":1}}],[\"那么可以直接用mysql的语法和方言\",{\"1\":{\"245\":1}}],[\"那么直接将表名改写\",{\"1\":{\"334\":2}}],[\"那么直接放弃当前查询出来的结果\",{\"1\":{\"206\":1}}],[\"那么后续所有的属性必须在allowed里面\",{\"1\":{\"328\":1}}],[\"那么我们可以替换掉哪一些呢\",{\"1\":{\"290\":1}}],[\"那么我们应该如何实现\",{\"1\":{\"85\":1}}],[\"那么框架将会打印获取链接是繁忙的\",{\"1\":{\"246\":1}}],[\"那么将会抛错\",{\"1\":{\"246\":1}}],[\"那么意味着所有线程只有10个连接池内的链接可以被用来进行分片聚合查询\",{\"1\":{\"246\":1}}],[\"那么这个值可以设置60\",{\"1\":{\"246\":1}}],[\"那么针对单个库如果查询所有表每个表都需要一个connection所以可能会单次查询耗尽链接池的链接甚至不够\",{\"1\":{\"246\":1}}],[\"那么执行的sql和执行的结果将会以log\",{\"1\":{\"245\":1}}],[\"那么生成的sql将是insert\",{\"1\":{\"245\":1}}],[\"那么在insertable\",{\"1\":{\"213\":2}}],[\"那么在更新的时候如果是对象更新那么将会生成原子sql\",{\"1\":{\"66\":1}}],[\"那么性能会相对低下\",{\"1\":{\"206\":1}}],[\"那么easy\",{\"1\":{\"206\":1}}],[\"那么会让所有的结果集全部被追踪\",{\"1\":{\"206\":1}}],[\"那么需要对查询采用astracking来让返回结果被追踪\",{\"1\":{\"206\":1}}],[\"那么a线程想要获取下一个就必须等待b线程释放\",{\"1\":{\"196\":1}}],[\"那么就会导致死锁要分别等到其他线程超时\",{\"1\":{\"196\":1}}],[\"那么如果有3个线程都需要5个分片聚合那么肯定有一个线程无法获取到那么就会等到默认5秒\",{\"1\":{\"246\":1}}],[\"那么如果有3个线程a\",{\"1\":{\"196\":1}}],[\"那么如果线程a\",{\"1\":{\"196\":1}}],[\"那么行版本的追加只会纯在与where条件的追加\",{\"1\":{\"142\":1}}],[\"那么predicatefilterinterceptor可以帮你满足这个条件\",{\"1\":{\"119\":1}}],[\"加入我的where条件大部分都符合极个别不符合可以通过提前返回不符的来保证剩余的都可以进行\",{\"1\":{\"323\":1}}],[\"加入我们要实现这么一个数据库语句\",{\"1\":{\"85\":1}}],[\"加密展示\",{\"1\":{\"449\":1,\"472\":1}}],[\"加密策略\",{\"1\":{\"263\":1}}],[\"加密策略实现类\",{\"1\":{\"76\":1}}],[\"加密长度\",{\"1\":{\"80\":1}}],[\"加密方式\",{\"0\":{\"80\":1}}],[\"加密实现类支持模糊搜索高性能\",{\"0\":{\"79\":1}}],[\"加密值\",{\"1\":{\"75\":1}}],[\"仅查询单个列那么只返回单个列\",{\"1\":{\"398\":1}}],[\"仅where条件生效\",{\"1\":{\"323\":1}}],[\"仅executormaximumpoolsize>0时生效\",{\"1\":{\"246\":2}}],[\"仅entity对象更新有效\",{\"1\":{\"66\":1}}],[\"仅新增时调用\",{\"1\":{\"112\":1}}],[\"仅作用到insert\",{\"1\":{\"91\":1}}],[\"仅作用到select投影上面\",{\"1\":{\"91\":1}}],[\"仅提供了count\",{\"1\":{\"85\":1}}],[\"目标对象的targetproperty属性对应中间表的哪个属性\",{\"1\":{\"373\":1}}],[\"目标表就是fill返回的表的属性\",{\"1\":{\"337\":1}}],[\"目前有两种解决方案\",{\"1\":{\"319\":1}}],[\"目前有两个选择当然用户也可以自行实现接口nameconversion\",{\"1\":{\"245\":1}}],[\"目前可选default\",{\"1\":{\"245\":1}}],[\"目前easy\",{\"1\":{\"235\":1}}],[\"目前各项指标easy\",{\"1\":{\"182\":1}}],[\"目前框架未提供相应的数据库函数\",{\"1\":{\"85\":1}}],[\"目录\",{\"0\":{\"65\":1,\"427\":1,\"449\":1},\"1\":{\"149\":1,\"210\":1}}],[\"绍\",{\"1\":{\"84\":1}}],[\"绍兴\",{\"1\":{\"84\":1}}],[\"浙江省绍兴市越城区城市广场\",{\"1\":{\"106\":1,\"139\":2,\"140\":1,\"143\":2,\"144\":2}}],[\"浙江省绍兴市越城区城市广场旁边2\",{\"1\":{\"78\":1,\"84\":1}}],[\"浙江省绍兴市\",{\"1\":{\"84\":1}}],[\"745936\",{\"1\":{\"445\":1}}],[\"7<\",{\"1\":{\"272\":4}}],[\"703659\",{\"1\":{\"440\":1}}],[\"703\",{\"1\":{\"299\":1}}],[\"70\",{\"1\":{\"246\":1}}],[\"7759\",{\"1\":{\"186\":1}}],[\"7751\",{\"1\":{\"186\":1}}],[\"7755\",{\"1\":{\"186\":1}}],[\"7762\",{\"1\":{\"186\":1}}],[\"7745\",{\"1\":{\"186\":1}}],[\"7771\",{\"1\":{\"186\":1}}],[\"7776\",{\"1\":{\"186\":1}}],[\"7772\",{\"1\":{\"186\":1}}],[\"7784\",{\"1\":{\"186\":1}}],[\"7780\",{\"1\":{\"186\":2}}],[\"7790\",{\"1\":{\"186\":1}}],[\"7798\",{\"1\":{\"186\":1}}],[\"7794\",{\"1\":{\"186\":1}}],[\"773\",{\"1\":{\"122\":1}}],[\"7856\",{\"1\":{\"186\":1}}],[\"7851\",{\"1\":{\"186\":1}}],[\"7805\",{\"1\":{\"186\":1}}],[\"7803\",{\"1\":{\"186\":1}}],[\"7807\",{\"1\":{\"186\":1}}],[\"7821\",{\"1\":{\"186\":1}}],[\"7\",{\"0\":{\"175\":1},\"1\":{\"168\":1,\"206\":6,\"382\":1,\"433\":2,\"434\":1,\"439\":2,\"444\":2}}],[\"756\",{\"1\":{\"122\":1}}],[\"7oh9gtlq8hk4vflsizrrkg==rsw+jktki+3iiq0xm3vssw==\",{\"1\":{\"84\":1}}],[\"7vntymw==r+bfxclbpmfdtvtgnpb2kg==2bm0wnppthxlttf3epf8ow==\",{\"1\":{\"84\":2}}],[\"79\",{\"1\":{\"10\":1,\"268\":1}}],[\"测试添加控制器\",{\"0\":{\"277\":1}}],[\"测试列表\",{\"0\":{\"185\":1,\"186\":1}}],[\"测试结论\",{\"1\":{\"184\":1,\"185\":1,\"186\":1,\"187\":1,\"188\":1}}],[\"测试单条数据查询\",{\"0\":{\"184\":1}}],[\"测试的结果会有所不同\",{\"1\":{\"183\":1}}],[\"测试说明\",{\"1\":{\"183\":1}}],[\"测试源码\",{\"1\":{\"183\":1}}],[\"测试方法\",{\"0\":{\"183\":1}}],[\"测试数据\",{\"0\":{\"139\":1}}],[\"测试当前人员\",{\"1\":{\"133\":1}}],[\"测试代码\",{\"0\":{\"371\":1},\"1\":{\"117\":1}}],[\"测试\",{\"0\":{\"84\":1,\"133\":1},\"1\":{\"119\":1,\"122\":1}}],[\"遇到错误是否抛出\",{\"1\":{\"83\":1}}],[\"一些列方法都有对应的重载\",{\"1\":{\"423\":1}}],[\"一对一自定义sql\",{\"1\":{\"382\":1}}],[\"一对一自定义列\",{\"1\":{\"382\":1}}],[\"一对一查询启用追踪并且对子查询逻辑删除禁用\",{\"1\":{\"372\":2,\"382\":1}}],[\"一对一\",{\"1\":{\"372\":1,\"382\":1}}],[\"一对多无论是否存在多的一方最终都会填充集合\",{\"1\":{\"376\":1}}],[\"一对多\",{\"1\":{\"226\":1,\"372\":1,\"374\":1,\"382\":1}}],[\"一个拥有\",{\"1\":{\"462\":1}}],[\"一个班级多个学生\",{\"1\":{\"374\":1}}],[\"一个是自己手动进行select的column一个是加入返回对象\",{\"1\":{\"384\":1}}],[\"一个是通过object对象来实现动态查询\",{\"1\":{\"319\":1}}],[\"一个是动态条件来构建where\",{\"1\":{\"319\":1}}],[\"一个中文占用长度\",{\"1\":{\"83\":1}}],[\"一般用于范围比如时间\",{\"1\":{\"422\":4}}],[\"一般用于查询时可以少写很多判断\",{\"1\":{\"323\":1}}],[\"一般用于继承父类需要忽略父类的属性\",{\"1\":{\"212\":1}}],[\"一般用户无需设置\",{\"1\":{\"246\":1}}],[\"一般设置为最少最少\",{\"1\":{\"196\":1}}],[\"一款高性能\",{\"1\":{\"58\":1}}],[\"最好是封装自行实现\",{\"1\":{\"355\":1}}],[\"最后的终结方法收集器比如tolist\",{\"1\":{\"150\":1}}],[\"最后一个版本号没有破坏性变动\",{\"1\":{\"13\":1}}],[\"最小加密长度\",{\"1\":{\"83\":1}}],[\"比如id\",{\"1\":{\"447\":1}}],[\"比如string\",{\"1\":{\"396\":2}}],[\"比如满足的条件是优先满足eq\",{\"1\":{\"323\":1}}],[\"比如自定义逻辑删除\",{\"1\":{\"263\":1}}],[\"比如tolist那么就是空集合\",{\"1\":{\"246\":1}}],[\"比如上述100个连接池分片设置为10个\",{\"1\":{\"246\":1}}],[\"比如delete\",{\"1\":{\"245\":1}}],[\"比如创建时间\",{\"1\":{\"216\":1}}],[\"比如连接池2个链接\",{\"1\":{\"196\":1}}],[\"比如入参为o那么对应的表就是o\",{\"1\":{\"194\":1}}],[\"比如我们现在有这么一个需求因为部分接口需要针对测试数据进行移除\",{\"1\":{\"123\":1}}],[\"比如\",{\"1\":{\"113\":1}}],[\"比如通过自定义nextid\",{\"1\":{\"110\":1}}],[\"比如数据库函数加密\",{\"1\":{\"89\":1}}],[\"比如中文数字英文特殊符号等\",{\"1\":{\"81\":1}}],[\"比如update\",{\"1\":{\"66\":1}}],[\"您也可以自定义对象来返回对应的结果集\",{\"1\":{\"416\":1}}],[\"您如果发现有不一样的也可以提交pr来帮我们修复文档\",{\"1\":{\"290\":1}}],[\"您可以选择不报错返回默认值\",{\"1\":{\"246\":1}}],[\"您可能需要重新调整defaultdatasourcemergepoolsize这个值和调整连接池大小\",{\"1\":{\"246\":1}}],[\"您好\",{\"1\":{\"194\":3}}],[\"您只需要将秘钥和偏移量进行填入即可abstractunsupportemojiaesbase64encryptionstrategy或abstractsupportemojiaesbase64encryptionstrategy\",{\"1\":{\"81\":1}}],[\"您的支持是我坚持的动力\",{\"1\":{\"11\":1}}],[\"本页面就是一个示例\",{\"1\":{\"450\":1}}],[\"本章节就提供了一个解决方案\",{\"1\":{\"271\":1}}],[\"本章节我们提供easy\",{\"1\":{\"149\":1,\"210\":1}}],[\"本次查询使用追踪\",{\"1\":{\"310\":1}}],[\"本次查询使用拦截器\",{\"1\":{\"310\":1}}],[\"本次查询不使用追踪\",{\"1\":{\"310\":1}}],[\"本次查询不使用拦截器\",{\"1\":{\"310\":1}}],[\"本次查询不启用逻辑删除\",{\"1\":{\"310\":1}}],[\"本次查询启用逻辑删除\",{\"1\":{\"310\":1}}],[\"本次查询需要2个链接聚合有两个线程\",{\"1\":{\"196\":1}}],[\"本次查询10000条的情况下可以看到easy\",{\"1\":{\"186\":1}}],[\"本次查询10条的情况下可以看到easy\",{\"1\":{\"185\":1}}],[\"本次结果可以得出mybatis\",{\"1\":{\"186\":1}}],[\"本次采用\",{\"1\":{\"80\":1}}],[\"本文只阐述了\",{\"1\":{\"182\":1}}],[\"本文为csdn博主\",{\"1\":{\"73\":1}}],[\"不同于sharding\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"不同表union\",{\"0\":{\"420\":1}}],[\"不存在\",{\"1\":{\"422\":1}}],[\"不在集合内部\",{\"1\":{\"422\":1}}],[\"不匹配右侧\",{\"1\":{\"422\":1}}],[\"不匹配左侧\",{\"1\":{\"422\":1}}],[\"不等于\",{\"1\":{\"422\":1}}],[\"不允许排序的属性\",{\"1\":{\"328\":1}}],[\"不允许排序属性\",{\"1\":{\"328\":1}}],[\"不为null\",{\"1\":{\"325\":6,\"422\":1}}],[\"不为null且不为空\",{\"1\":{\"325\":3}}],[\"不为null添加左闭区间\",{\"1\":{\"322\":2}}],[\"不生效\",{\"1\":{\"322\":1}}],[\"不一致需要手动映射为一致\",{\"1\":{\"320\":1}}],[\"不使用指定name的拦截器\",{\"1\":{\"310\":1}}],[\"不包括手写sql的情况\",{\"1\":{\"260\":1}}],[\"不会判断是否为null\",{\"1\":{\"245\":1}}],[\"不可以在\",{\"1\":{\"200\":1}}],[\"不然还是单条执行\",{\"1\":{\"168\":1}}],[\"不然有可能导致更新策略为allcolumn的时候把这个字段更新为null\",{\"1\":{\"158\":1}}],[\"不建议在实体对象上使用因为会导致update的时候有可能null会被更新掉\",{\"1\":{\"156\":1}}],[\"不推荐\",{\"1\":{\"138\":1,\"219\":1}}],[\"不希望统计到程序里面所以可以针对部分情况进行按需拦截\",{\"1\":{\"123\":1}}],[\"不添加可以通过threadlocal动态设置\",{\"1\":{\"114\":1}}],[\"不加入insert语句由数据库生成\",{\"1\":{\"111\":1}}],[\"不追踪更新\",{\"0\":{\"109\":1}}],[\"不支持循环依赖\",{\"1\":{\"289\":1}}],[\"不支持emoji\",{\"1\":{\"82\":1}}],[\"不支持\",{\"1\":{\"80\":3}}],[\"不满\",{\"1\":{\"80\":1}}],[\"不处理\",{\"1\":{\"68\":1}}],[\"字典表\",{\"1\":{\"274\":1}}],[\"字符串属性\",{\"1\":{\"235\":1}}],[\"字节加密后长度\",{\"1\":{\"80\":1}}],[\"字节加密后数据长度\",{\"1\":{\"80\":1}}],[\"字段加密等企业级功能\",{\"1\":{\"60\":1}}],[\"填充数据转成cityvo\",{\"1\":{\"337\":1}}],[\"填充数据如何查询\",{\"1\":{\"337\":1}}],[\"填充\",{\"1\":{\"80\":1}}],[\"算法\",{\"1\":{\"80\":1}}],[\"非常轻量且仅支持构造函数注入\",{\"1\":{\"289\":1}}],[\"非强类型api\",{\"1\":{\"237\":1,\"243\":1}}],[\"非数据库对象不需要\",{\"1\":{\"212\":1}}],[\"非springboot环境\",{\"0\":{\"293\":1}}],[\"非springboot或者多数据源之类的可以通过获取对应的queryconfiguration进行添加\",{\"1\":{\"92\":1}}],[\"非spring\",{\"0\":{\"100\":1,\"237\":1,\"243\":1,\"248\":1}}],[\"非中文单个字符占一个长度\",{\"1\":{\"80\":1}}],[\"非null的int更新\",{\"1\":{\"68\":2}}],[\"来解析\",{\"1\":{\"455\":1}}],[\"来进行切换\",{\"1\":{\"340\":1}}],[\"来恢复到所有参数都接受\",{\"1\":{\"323\":1}}],[\"来显示使用\",{\"1\":{\"114\":1}}],[\"来实现并发更新控制\",{\"1\":{\"203\":1}}],[\"来实现\",{\"1\":{\"109\":3}}],[\"来实现本次功能\",{\"1\":{\"79\":1}}],[\"来自网上的说法\",{\"1\":{\"73\":1}}],[\"阿里巴巴密文字段检索方案\",{\"1\":{\"79\":1}}],[\">integer\",{\"1\":{\"396\":2}}],[\">s\",{\"1\":{\"382\":1}}],[\">y\",{\"1\":{\"381\":1}}],[\">x\",{\"1\":{\"381\":1,\"392\":1,\"393\":1}}],[\">a\",{\"1\":{\"309\":1,\"343\":1,\"344\":1}}],[\">t1\",{\"1\":{\"363\":1,\"399\":2,\"418\":1,\"419\":1}}],[\">t\",{\"1\":{\"174\":2,\"177\":1,\"318\":1,\"331\":1,\"357\":1,\"399\":2,\"418\":1,\"419\":1}}],[\">o\",{\"1\":{\"132\":3,\"133\":1,\"141\":2,\"150\":1,\"163\":1,\"165\":2,\"184\":1,\"185\":1,\"186\":1,\"188\":1,\"207\":2,\"259\":1,\"262\":3,\"329\":1,\"330\":1,\"331\":1,\"338\":4,\"344\":2,\"382\":5,\"388\":1,\"389\":1,\"390\":1,\"398\":4,\"418\":2,\"419\":2,\"420\":3,\"434\":3,\"440\":3,\"445\":3,\"446\":1}}],[\">>>>>>>testplusupdate\",{\"1\":{\"188\":10}}],[\">>>>>>>testpluspaginate\",{\"1\":{\"187\":10}}],[\">>>>>>>testplusselecttop10000\",{\"1\":{\"186\":10}}],[\">>>>>>>testplusselecttop10000withlambda\",{\"1\":{\"186\":10}}],[\">>>>>>>testplusselecttop10\",{\"1\":{\"185\":10}}],[\">>>>>>>testplusselecttop10withlambda\",{\"1\":{\"185\":10}}],[\">>>>>>>testplusselectone\",{\"1\":{\"184\":10}}],[\">>>>>>>testplusselectonewithlambda\",{\"1\":{\"184\":10}}],[\">>>>>>>testeasyupdate\",{\"1\":{\"188\":10}}],[\">>>>>>>testeasypaginate\",{\"1\":{\"187\":10}}],[\">>>>>>>testeasyselecttop10000\",{\"1\":{\"186\":10}}],[\">>>>>>>testeasyselecttop10\",{\"1\":{\"185\":10}}],[\">>>>>>>testeasyselectone\",{\"1\":{\"184\":10}}],[\">>>>>>>testflexupdate\",{\"1\":{\"188\":10}}],[\">>>>>>>testflexpaginate\",{\"1\":{\"187\":10}}],[\">>>>>>>testflexselecttop10000\",{\"1\":{\"186\":10}}],[\">>>>>>>testflexselecttop10\",{\"1\":{\"185\":10}}],[\">>>>>>>testflexselectone\",{\"1\":{\"184\":10}}],[\">>\",{\"1\":{\"132\":2,\"262\":2,\"299\":1,\"447\":2}}],[\">\",{\"1\":{\"78\":2,\"84\":8,\"88\":1,\"92\":2,\"96\":3,\"117\":7,\"119\":4,\"122\":4,\"152\":5,\"154\":12,\"187\":1,\"192\":6,\"194\":11,\"203\":2,\"204\":1,\"205\":4,\"206\":3,\"209\":3,\"237\":4,\"243\":4,\"248\":1,\"258\":1,\"267\":1,\"269\":1,\"272\":2,\"273\":2,\"276\":1,\"280\":1,\"286\":3,\"293\":1,\"299\":3,\"309\":2,\"316\":8,\"317\":12,\"318\":4,\"322\":2,\"323\":7,\"335\":8,\"337\":12,\"338\":2,\"341\":2,\"342\":3,\"343\":2,\"344\":2,\"357\":14,\"359\":8,\"361\":1,\"362\":3,\"363\":3,\"372\":2,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":2,\"381\":4,\"382\":6,\"383\":5,\"386\":1,\"392\":4,\"393\":4,\"398\":5,\"399\":2,\"400\":3,\"402\":2,\"404\":3,\"405\":3,\"406\":3,\"407\":3,\"417\":1,\"418\":1,\"419\":1,\"420\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":2,\"447\":6}}],[\">=\",{\"1\":{\"69\":2,\"196\":1,\"259\":1,\"318\":1,\"322\":2,\"325\":1,\"418\":1,\"419\":1,\"420\":1,\"422\":1}}],[\"无感支持分库分表插入\",{\"1\":{\"433\":1}}],[\"无依赖使用自己的pageresult\",{\"0\":{\"367\":1}}],[\"无需编写复杂封装代码\",{\"1\":{\"356\":1}}],[\"无需用户指定\",{\"1\":{\"246\":1}}],[\"无参数\",{\"0\":{\"353\":1}}],[\"无参数map返回\",{\"0\":{\"350\":1,\"413\":1}}],[\"无参数强类型返回\",{\"0\":{\"347\":1,\"410\":1}}],[\"无论\",{\"1\":{\"323\":1}}],[\"无论是否设置都会用\",{\"1\":{\"111\":1}}],[\"无法匹配任意一条在返回false\",{\"1\":{\"310\":1}}],[\"无法获取数据库表名\",{\"1\":{\"104\":1}}],[\"无法单独使用\",{\"1\":{\"66\":1}}],[\"无\",{\"1\":{\"76\":1,\"83\":2,\"102\":4,\"103\":2,\"114\":1,\"117\":2,\"119\":1,\"121\":1}}],[\"解码等数据库函数对\",{\"1\":{\"89\":1}}],[\"解密\",{\"1\":{\"89\":1}}],[\"解密值\",{\"1\":{\"75\":1}}],[\"解决办法添加对应的依赖\",{\"1\":{\"10\":1,\"268\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"450\":1}}],[\"在集合内部\",{\"1\":{\"422\":1}}],[\"在easy\",{\"1\":{\"395\":1}}],[\"在分片聚合的时候因为需要单次获取多个链接\",{\"1\":{\"246\":1}}],[\"在使用逻辑删除后会变成update\",{\"1\":{\"245\":1}}],[\"在使用前希望用户可以首先查看一遍可选择配置项\",{\"1\":{\"244\":1}}],[\"在对原先的进行操作发现select和limit并没有赋值上去\",{\"1\":{\"383\":1}}],[\"在对象更新的情况下可以选择对应的列进行set或者进行where\",{\"1\":{\"207\":1}}],[\"在对应的数据库实体上面添加注解\",{\"1\":{\"126\":1}}],[\"在代理模式下面查询相关方法入参都只有一个\",{\"1\":{\"194\":1}}],[\"在以下的所有测试中\",{\"1\":{\"183\":1}}],[\"在初始化的时候分别为easy\",{\"1\":{\"183\":1}}],[\"在所有orm中偏中上并不是天花板\",{\"1\":{\"179\":1}}],[\"在查询的时候会被解密\",{\"1\":{\"75\":1}}],[\"在插入修改查询的时候会被调用\",{\"1\":{\"75\":1}}],[\"在这里希望您可以免费给我点个star\",{\"1\":{\"11\":1}}],[\"值转换\",{\"1\":{\"263\":1}}],[\"值转换器\",{\"1\":{\"213\":1}}],[\"值\",{\"1\":{\"75\":2,\"422\":6}}],[\"属性默认是支持like\",{\"1\":{\"324\":1}}],[\"属性名\",{\"1\":{\"213\":1}}],[\"属性名用来动态创建lambda\",{\"1\":{\"119\":2}}],[\"属性\",{\"1\":{\"75\":2,\"76\":1,\"212\":1,\"213\":1,\"217\":1,\"218\":1,\"324\":1,\"373\":1}}],[\"这是脚注内容\",{\"1\":{\"477\":1}}],[\"这样我们就完成了新增自动填充创建信息和修改信息\",{\"1\":{\"447\":1}}],[\"这样我们就实现了对应的值类型转换和枚举的转换\",{\"1\":{\"301\":1}}],[\"这个方法属性为id的比较是啥结果都会添加到条件里面\",{\"1\":{\"323\":1}}],[\"这个参数不可以设置的比datasource的pool\",{\"1\":{\"246\":1}}],[\"这个和log不一样\",{\"1\":{\"245\":1}}],[\"这个所有orm都是一样的\",{\"1\":{\"178\":1}}],[\"这个时候我们的updatesetinterceptor拦截就起作用了\",{\"1\":{\"117\":1}}],[\"这次我们采用抽象来实现\",{\"1\":{\"132\":1}}],[\"这种情况下updateby和updatetime并不会自动添加到生成的sql里面\",{\"1\":{\"117\":1}}],[\"这边限制vo对象返回topic的id其他都是blog的属性\",{\"1\":{\"399\":1}}],[\"这边提供两种解决方案\",{\"1\":{\"294\":1}}],[\"这边以nameconversion作为例子来演示我们如何替换掉默认的框架行为\",{\"1\":{\"291\":1}}],[\"这边以mysql为例\",{\"1\":{\"237\":1,\"243\":1}}],[\"这边使用的是version=2也可以使用version+1但是其实是一样的因为where后面限定了version=1\",{\"1\":{\"220\":1,\"221\":1}}],[\"这边采用不存在的id\",{\"1\":{\"133\":1}}],[\"这边采用阿里巴巴密文字段检索方案\",{\"1\":{\"79\":1}}],[\"这边我们新建一个租户拦截器\",{\"1\":{\"122\":1}}],[\"这边easy\",{\"1\":{\"74\":1,\"206\":1}}],[\"这里主要汇总了一些常见的问题\",{\"1\":{\"9\":1}}],[\"转载请附上原文出处链接及本声明\",{\"1\":{\"73\":1}}],[\"遵循cc\",{\"1\":{\"73\":1}}],[\"的phone还是null所以会报错空指针异常\",{\"1\":{\"424\":1}}],[\"的非代理对象方法调用事务\",{\"1\":{\"200\":1}}],[\"的2\",{\"1\":{\"186\":1}}],[\"的\",{\"1\":{\"184\":1,\"185\":1,\"187\":1,\"188\":1,\"462\":1,\"479\":1}}],[\"的查询单条数据的速度相当\",{\"1\":{\"184\":1}}],[\"的代码如下\",{\"1\":{\"184\":3,\"185\":3,\"186\":3,\"187\":3,\"188\":3}}],[\"的字段\",{\"1\":{\"158\":1}}],[\"的column\",{\"1\":{\"87\":1}}],[\"的原创文章\",{\"1\":{\"73\":1}}],[\"的值\",{\"1\":{\"73\":1}}],[\"版权声明\",{\"1\":{\"73\":1}}],[\"版本升级指南\",{\"0\":{\"13\":1}}],[\"但是你需要使用相对链接\",{\"1\":{\"480\":1}}],[\"但是默认会把后面的覆盖掉前面的\",{\"1\":{\"399\":1,\"400\":1}}],[\"但是因为第二个参数是直接获取值会导致phone\",{\"1\":{\"424\":1}}],[\"但是因为blogentitytest2\",{\"1\":{\"387\":1}}],[\"但是因为拦截器得原因easy\",{\"1\":{\"119\":1}}],[\"但是必须存在于返回结果中\",{\"1\":{\"382\":1}}],[\"但是需要满足返回对象必须包含navigate映射的属性\",{\"1\":{\"382\":1}}],[\"但是我查询学生的时候只希望联级查询班级的id\",{\"1\":{\"382\":1}}],[\"但是返回结果必须是数据库对象实例\",{\"1\":{\"372\":1}}],[\"但是后续会将这一部分全部简化掉让用户无感\",{\"1\":{\"333\":1}}],[\"但是还希望用枚举转换的或者其他属性转换的\",{\"1\":{\"294\":1}}],[\"但是提供了非常完善的替换框架内部行为的方式\",{\"1\":{\"289\":1}}],[\"但是有些功能可以通过其他框架来实现\",{\"1\":{\"271\":1}}],[\"但是不可以比连接池大\",{\"1\":{\"246\":1}}],[\"但是追踪更新只会涉及到1\",{\"1\":{\"206\":1}}],[\"但是在jdbc到bean对象的转换是相对低效的\",{\"1\":{\"186\":1}}],[\"但是完全一样的数据结构\",{\"1\":{\"183\":1}}],[\"但是如果你是有租户的或者你是需要对当前请求查询条件进行额外条件过滤添加的\",{\"1\":{\"119\":1}}],[\"但是如果是表达式更新那么还是原先的操作并不会更新\",{\"1\":{\"117\":1}}],[\"但是这边也是提供了默认的希望大家可以pr相关思路算法等\",{\"1\":{\"84\":1}}],[\"但是driver的行为是与特定的dbms绑定的\",{\"1\":{\"73\":1}}],[\"但是会导致返回结果不正确\",{\"1\":{\"72\":1}}],[\"但受影响的行数为未知\",{\"1\":{\"73\":1}}],[\"给出了\",{\"1\":{\"73\":1}}],[\"数组各值可能是以下之一\",{\"1\":{\"73\":1}}],[\"数据源是你要的即可\",{\"1\":{\"269\":1}}],[\"数据更新速度easy\",{\"1\":{\"188\":1}}],[\"数据更新\",{\"0\":{\"188\":1}}],[\"数据内容和数据量\",{\"1\":{\"183\":1}}],[\"数据追踪\",{\"0\":{\"98\":1}}],[\"数据加密秘钥\",{\"1\":{\"92\":1}}],[\"数据的无价\",{\"1\":{\"65\":1}}],[\"数据查询\",{\"0\":{\"185\":1,\"186\":1},\"1\":{\"61\":1}}],[\"数据删除\",{\"1\":{\"61\":1}}],[\"数据修改\",{\"1\":{\"61\":1}}],[\"数据新增\",{\"1\":{\"61\":1}}],[\"数据库表进行分表处理\",{\"1\":{\"427\":1}}],[\"数据库表名为空表示\",{\"1\":{\"212\":1}}],[\"数据库插入对象\",{\"1\":{\"299\":1}}],[\"数据库枚举\",{\"1\":{\"299\":1}}],[\"数据库对应的java类型\",{\"1\":{\"295\":1}}],[\"数据库对象分库处理\",{\"1\":{\"427\":1}}],[\"数据库对象属性integer值\",{\"0\":{\"300\":1}}],[\"数据库对象属性枚举值\",{\"0\":{\"299\":1}}],[\"数据库对象属性本身就是枚举或者对象的\",{\"1\":{\"294\":1}}],[\"数据库对象很多时候我们可能希望将枚举值设计为java枚举对象而不是integer\",{\"1\":{\"298\":1}}],[\"数据库对象\",{\"1\":{\"111\":1}}],[\"数据库脚本\",{\"0\":{\"274\":1}}],[\"数据库schema\",{\"1\":{\"212\":1}}],[\"数据库\",{\"1\":{\"183\":1}}],[\"数据库建表脚本\",{\"1\":{\"162\":1,\"166\":1,\"201\":1,\"416\":1}}],[\"数据库函数列\",{\"0\":{\"110\":1}}],[\"数据库函数列值转换\",{\"0\":{\"89\":1}}],[\"数据库列加密解密脱敏\",{\"1\":{\"97\":1}}],[\"数据库列加密\",{\"0\":{\"74\":1},\"1\":{\"90\":1}}],[\"数据库中受命令影响的行数执行\",{\"1\":{\"73\":1}}],[\"数据库名称\",{\"1\":{\"8\":1}}],[\"数据库支持\",{\"0\":{\"7\":1}}],[\"原生sql\",{\"0\":{\"345\":1}}],[\"原子追踪更新\",{\"1\":{\"263\":1}}],[\"原子更新\",{\"1\":{\"213\":1}}],[\"原子更新接口\",{\"1\":{\"67\":1}}],[\"原理就是开启一个定时任务线程去执行\",{\"1\":{\"246\":1}}],[\"原因是正确的写法在开启追踪后查询使用了\",{\"1\":{\"206\":1}}],[\"原因可能\",{\"0\":{\"73\":1}}],[\"原本是mybatis\",{\"1\":{\"182\":1}}],[\"原始数据长度\",{\"1\":{\"80\":2}}],[\"原文链接\",{\"1\":{\"73\":1}}],[\"60\",{\"1\":{\"432\":1,\"438\":1}}],[\"60000\",{\"1\":{\"246\":1}}],[\"698\",{\"1\":{\"301\":1}}],[\"6正式支持solon适配国产框架的orm部分\",{\"1\":{\"250\":1}}],[\"670\",{\"1\":{\"117\":1}}],[\"643\",{\"1\":{\"117\":2}}],[\"6\",{\"0\":{\"172\":1,\"209\":1},\"1\":{\"72\":1,\"108\":1,\"109\":3,\"168\":1,\"286\":1,\"402\":1,\"419\":1,\"433\":2,\"439\":2,\"440\":1,\"444\":2,\"446\":1}}],[\"46\",{\"1\":{\"433\":10}}],[\"43\",{\"1\":{\"359\":1}}],[\"4d71\",{\"1\":{\"354\":1}}],[\"45\",{\"1\":{\"300\":1}}],[\"456\",{\"1\":{\"152\":2,\"154\":4,\"301\":2,\"316\":4,\"317\":6,\"318\":2}}],[\"4834048418175625051l\",{\"1\":{\"397\":1}}],[\"48b1\",{\"1\":{\"353\":1}}],[\"48\",{\"1\":{\"207\":1,\"434\":1,\"440\":1}}],[\"40\",{\"1\":{\"185\":2,\"301\":2,\"398\":5,\"399\":2}}],[\"400\",{\"1\":{\"72\":5}}],[\"44\",{\"1\":{\"184\":1}}],[\"41\",{\"1\":{\"184\":1,\"187\":1,\"434\":1}}],[\"419\",{\"1\":{\"10\":1,\"268\":1}}],[\"47\",{\"1\":{\"184\":1,\"325\":3,\"440\":1}}],[\"42\",{\"1\":{\"169\":2}}],[\"426\",{\"1\":{\"119\":1}}],[\"49\",{\"1\":{\"106\":1,\"139\":1,\"140\":1}}],[\"4\",{\"0\":{\"170\":1,\"207\":1},\"1\":{\"73\":1,\"83\":1,\"94\":1,\"117\":1,\"119\":1,\"143\":2,\"168\":1,\"196\":1,\"246\":1,\"255\":1,\"272\":1,\"274\":2,\"277\":1,\"280\":3,\"281\":1,\"286\":7,\"299\":1,\"323\":1,\"325\":1,\"359\":1,\"367\":1,\"381\":1,\"392\":1,\"407\":1,\"433\":2,\"439\":8,\"440\":6,\"444\":32}}],[\"使用分片键删除可以精确到对应的分片表\",{\"1\":{\"446\":1}}],[\"使用子查询queryable\",{\"1\":{\"422\":2}}],[\"使用第二张表的avatar\",{\"1\":{\"357\":1}}],[\"使用指定name的拦截器\",{\"1\":{\"310\":1}}],[\"使用指南\",{\"0\":{\"56\":1},\"1\":{\"479\":2}}],[\"使用示例\",{\"0\":{\"236\":1}}],[\"使用时需要开启当前追踪环境并且对查询出来的结果进行追踪后续即可监听到变更列实现差异化update语句\",{\"1\":{\"206\":1}}],[\"使用\",{\"1\":{\"183\":1}}],[\"使用物理删除\",{\"1\":{\"165\":1}}],[\"使用更加人性化\",{\"1\":{\"149\":1}}],[\"使用代理模式的话非springboot环境必须要安装sql\",{\"1\":{\"237\":1,\"243\":1}}],[\"使用代理模式api更加人性化编写orm\",{\"1\":{\"149\":1}}],[\"使用代理模式\",{\"0\":{\"190\":1},\"1\":{\"149\":1}}],[\"使用具体那个加密策略来实现当前列的加密\",{\"1\":{\"76\":1}}],[\"使用batch可以有效的提高插入或者更新的性能\",{\"1\":{\"72\":1}}],[\"86f1\",{\"1\":{\"353\":1}}],[\"865\",{\"1\":{\"325\":2}}],[\"880\",{\"1\":{\"325\":1}}],[\"8<\",{\"1\":{\"286\":1}}],[\"8081\",{\"1\":{\"431\":1,\"434\":6,\"437\":1,\"440\":12,\"443\":1,\"444\":30,\"445\":12,\"446\":6}}],[\"8080\",{\"1\":{\"258\":1}}],[\"80甚至100\",{\"1\":{\"246\":1}}],[\"8并且没有超时那么会log\",{\"1\":{\"196\":1}}],[\"8\",{\"1\":{\"71\":1,\"156\":1,\"168\":1,\"194\":1,\"258\":1,\"260\":1,\"284\":1,\"286\":5,\"363\":1,\"382\":3,\"431\":1,\"432\":1,\"433\":2,\"434\":1,\"437\":1,\"438\":1,\"439\":2,\"443\":1,\"444\":2}}],[\"jimmer\",{\"1\":{\"357\":1}}],[\"json对象\",{\"0\":{\"301\":1}}],[\"jsonconverter\",{\"1\":{\"267\":1,\"297\":1,\"301\":1}}],[\"jupiter\",{\"1\":{\"286\":1}}],[\"jupiter<\",{\"1\":{\"286\":1}}],[\"junit\",{\"1\":{\"286\":1}}],[\"junit5<\",{\"1\":{\"286\":1}}],[\"jetbrains\",{\"1\":{\"286\":3}}],[\"jvmtarget>\",{\"1\":{\"286\":1}}],[\"jvmtarget>11<\",{\"1\":{\"286\":1}}],[\"job\",{\"1\":{\"260\":1}}],[\"join分页\",{\"0\":{\"362\":1}}],[\"join多表下的sql\",{\"1\":{\"357\":1}}],[\"join匿名表\",{\"1\":{\"343\":1}}],[\"join动态排序\",{\"0\":{\"331\":1}}],[\"join一张表就有两张表\",{\"1\":{\"328\":1}}],[\"join需要的表进行参数提取\",{\"1\":{\"194\":1}}],[\"join写法\",{\"1\":{\"194\":2}}],[\"join\",{\"0\":{\"344\":1},\"1\":{\"96\":1,\"194\":1,\"309\":1,\"318\":1,\"323\":4,\"331\":1,\"335\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"357\":1,\"362\":2,\"363\":2,\"383\":3,\"399\":2,\"418\":2,\"419\":1}}],[\"jdk20\",{\"1\":{\"251\":1}}],[\"jdk17\",{\"1\":{\"251\":1}}],[\"jdk11\",{\"1\":{\"251\":1}}],[\"jdk8<\",{\"1\":{\"286\":1}}],[\"jdk8\",{\"1\":{\"251\":1}}],[\"jdbc的sql的antlr解析采用自带的表达式解析性能高效\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"jdbcstreamresult<blogentity>\",{\"1\":{\"402\":1}}],[\"jdbctypehandlermanager\",{\"1\":{\"290\":1}}],[\"jdbcurl\",{\"1\":{\"258\":1,\"260\":1,\"284\":1}}],[\"jdbc\",{\"1\":{\"71\":1,\"73\":1,\"178\":1,\"194\":2,\"258\":2,\"260\":2,\"284\":2,\"431\":2,\"432\":2,\"437\":2,\"438\":2,\"443\":2}}],[\"january\",{\"1\":{\"46\":1}}],[\"jar\",{\"1\":{\"10\":6,\"268\":6}}],[\"java并发更新\",{\"1\":{\"434\":1,\"440\":1}}],[\"javalanguageshardingcomparer\",{\"1\":{\"290\":1}}],[\"javaencryptionstrategy\",{\"1\":{\"267\":1}}],[\"java类\",{\"1\":{\"193\":1}}],[\"java<\",{\"1\":{\"192\":1,\"255\":1,\"272\":1,\"280\":1,\"286\":1}}],[\"java实体对象\",{\"1\":{\"162\":1,\"166\":1,\"201\":1,\"416\":1}}],[\"java对象\",{\"0\":{\"385\":1},\"1\":{\"92\":1}}],[\"java\",{\"1\":{\"10\":7,\"268\":7,\"284\":1,\"315\":2}}],[\"例如\",{\"0\":{\"71\":1}}],[\"例子\",{\"0\":{\"69\":1,\"127\":1}}],[\"`ds\",{\"1\":{\"439\":10,\"440\":4}}],[\"`deleted\",{\"1\":{\"133\":11}}],[\"`deleted`\",{\"1\":{\"72\":1,\"85\":1,\"88\":1,\"127\":8,\"129\":1,\"143\":3,\"144\":5,\"165\":2,\"173\":1,\"174\":5,\"288\":2,\"309\":1,\"318\":1,\"322\":4,\"323\":3,\"325\":4,\"329\":1,\"330\":1,\"331\":1,\"332\":2,\"335\":6,\"341\":1,\"342\":2,\"343\":2,\"344\":2,\"359\":4,\"362\":1,\"383\":3,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"402\":2,\"404\":2,\"405\":2,\"406\":2,\"407\":2,\"418\":1,\"419\":1,\"420\":1}}],[\"`order\",{\"1\":{\"433\":10,\"434\":4,\"439\":10,\"440\":2,\"444\":20,\"445\":6,\"446\":3}}],[\"`order`\",{\"1\":{\"72\":1,\"173\":1,\"174\":5,\"288\":1,\"309\":1,\"322\":3,\"325\":3,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"398\":5,\"399\":2,\"402\":1}}],[\"`easy\",{\"1\":{\"423\":1,\"425\":1}}],[\"`blog\",{\"1\":{\"392\":1,\"393\":1}}],[\"`my\",{\"1\":{\"386\":1,\"389\":1,\"390\":1}}],[\"`province\",{\"1\":{\"381\":6}}],[\"`publish\",{\"1\":{\"288\":1,\"309\":1,\"322\":6,\"325\":5,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"399\":2,\"402\":1}}],[\"`phone`\",{\"1\":{\"92\":1,\"93\":1,\"94\":2,\"95\":1,\"96\":4,\"106\":1,\"107\":2,\"108\":1,\"109\":3,\"139\":2,\"140\":1,\"141\":3,\"143\":1,\"144\":1,\"423\":1,\"425\":1}}],[\"`phone\",{\"1\":{\"78\":10,\"84\":23}}],[\"`no`\",{\"1\":{\"194\":1}}],[\"`name`\",{\"1\":{\"78\":4,\"84\":10,\"111\":1,\"158\":2,\"159\":2,\"160\":2,\"171\":2,\"194\":2,\"375\":1,\"376\":2,\"377\":2,\"378\":2,\"379\":3,\"381\":6,\"382\":8}}],[\"`query\",{\"1\":{\"158\":2,\"159\":3,\"160\":3,\"161\":1,\"171\":3}}],[\"`version`\",{\"1\":{\"139\":2,\"140\":2,\"141\":2,\"143\":3,\"144\":3}}],[\"`address`\",{\"1\":{\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":3,\"111\":1,\"139\":2,\"140\":1,\"143\":1,\"144\":1,\"375\":1,\"382\":1,\"423\":1,\"425\":1}}],[\"`address\",{\"1\":{\"78\":8,\"84\":25}}],[\"`idcount`\",{\"1\":{\"338\":2,\"344\":1}}],[\"`id\",{\"1\":{\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":3,\"139\":2,\"140\":1,\"143\":1,\"144\":1,\"423\":1,\"425\":1}}],[\"`id`\",{\"1\":{\"69\":2,\"72\":1,\"78\":5,\"84\":12,\"93\":1,\"94\":2,\"95\":1,\"96\":4,\"106\":1,\"107\":3,\"108\":2,\"109\":5,\"111\":1,\"117\":5,\"119\":1,\"122\":6,\"127\":5,\"129\":3,\"133\":5,\"139\":3,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"158\":2,\"159\":2,\"160\":3,\"161\":1,\"163\":1,\"164\":1,\"165\":2,\"167\":2,\"168\":1,\"169\":1,\"171\":2,\"173\":1,\"174\":3,\"194\":7,\"203\":1,\"204\":1,\"205\":4,\"206\":3,\"207\":2,\"208\":2,\"259\":1,\"284\":4,\"288\":2,\"299\":3,\"300\":2,\"301\":3,\"309\":9,\"317\":3,\"318\":3,\"322\":2,\"323\":7,\"325\":2,\"329\":1,\"330\":1,\"331\":3,\"332\":2,\"335\":8,\"338\":9,\"341\":4,\"342\":4,\"343\":7,\"344\":10,\"359\":8,\"361\":3,\"362\":6,\"363\":8,\"375\":2,\"376\":2,\"377\":3,\"378\":3,\"379\":4,\"382\":13,\"383\":14,\"392\":5,\"393\":3,\"398\":5,\"399\":9,\"402\":1,\"404\":5,\"405\":5,\"406\":6,\"407\":6,\"417\":5,\"418\":8,\"419\":8,\"420\":6,\"423\":2,\"425\":2,\"433\":10,\"434\":10,\"439\":10,\"440\":6,\"444\":10,\"445\":6,\"446\":3}}],[\"`is\",{\"1\":{\"72\":1,\"173\":1,\"174\":5,\"288\":1,\"309\":1,\"322\":2,\"325\":2,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"398\":4,\"399\":2,\"402\":1}}],[\"`student\",{\"1\":{\"375\":2,\"382\":2}}],[\"`status`\",{\"1\":{\"72\":1,\"173\":1,\"174\":5,\"288\":1,\"309\":1,\"322\":4,\"325\":4,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"398\":4,\"399\":2,\"402\":1,\"433\":10,\"434\":6,\"439\":10,\"440\":4,\"444\":10,\"445\":4,\"446\":1}}],[\"`stars6`\",{\"1\":{\"284\":2}}],[\"`stars4`\",{\"1\":{\"284\":2}}],[\"`stars3`\",{\"1\":{\"284\":4}}],[\"`stars2`\",{\"1\":{\"284\":2}}],[\"`stars`+\",{\"1\":{\"205\":2}}],[\"`stars`\",{\"1\":{\"69\":6,\"117\":3,\"122\":2,\"127\":2,\"129\":1,\"133\":3,\"167\":2,\"168\":1,\"169\":1,\"170\":1,\"203\":1,\"204\":1,\"205\":6,\"206\":1,\"207\":2,\"208\":1,\"259\":2,\"284\":2,\"299\":2,\"300\":1,\"301\":2,\"309\":2,\"323\":1,\"341\":1,\"343\":1,\"359\":3,\"361\":1,\"392\":1,\"393\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"417\":4,\"418\":5,\"419\":5,\"420\":3}}],[\"`star`\",{\"1\":{\"72\":1,\"173\":1,\"174\":9,\"288\":1,\"309\":1,\"318\":2,\"322\":2,\"325\":2,\"330\":1,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"393\":2,\"399\":2,\"402\":2,\"420\":1}}],[\"`school\",{\"1\":{\"375\":2,\"376\":2,\"377\":2,\"378\":3,\"379\":4,\"382\":11}}],[\"`score`\",{\"1\":{\"72\":1,\"173\":1,\"174\":5,\"288\":1,\"309\":1,\"322\":2,\"325\":2,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"363\":4,\"383\":6,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"398\":4,\"399\":2,\"402\":1}}],[\"`uid`\",{\"1\":{\"433\":10,\"434\":4,\"439\":10,\"440\":2,\"444\":10,\"445\":2,\"446\":1}}],[\"`username`\",{\"1\":{\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":3,\"139\":2,\"140\":1,\"143\":1,\"144\":1,\"423\":1,\"425\":1}}],[\"`url`\",{\"1\":{\"72\":1,\"85\":2,\"88\":2,\"173\":1,\"174\":5,\"288\":1,\"309\":1,\"322\":2,\"325\":2,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"386\":1,\"389\":1,\"390\":1,\"399\":2,\"402\":1}}],[\"`update\",{\"1\":{\"72\":2,\"117\":6,\"119\":2,\"122\":6,\"173\":2,\"174\":10,\"288\":2,\"309\":2,\"322\":4,\"325\":4,\"332\":2,\"335\":6,\"342\":2,\"343\":2,\"344\":2,\"359\":4,\"362\":2,\"402\":2}}],[\"`city\",{\"1\":{\"381\":4}}],[\"`code`\",{\"1\":{\"381\":8}}],[\"`content`\",{\"1\":{\"72\":1,\"158\":1,\"159\":2,\"160\":2,\"171\":2,\"173\":1,\"174\":9,\"288\":1,\"309\":1,\"322\":4,\"325\":4,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"399\":2,\"402\":1,\"418\":1,\"419\":1,\"420\":1}}],[\"`class\",{\"1\":{\"375\":1,\"376\":2,\"377\":1,\"378\":2,\"379\":4,\"382\":7}}],[\"`custom\",{\"1\":{\"111\":1}}],[\"`create\",{\"1\":{\"72\":2,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":3,\"117\":4,\"122\":2,\"127\":2,\"129\":1,\"133\":3,\"139\":2,\"140\":1,\"143\":1,\"144\":1,\"167\":2,\"168\":1,\"169\":1,\"170\":1,\"173\":2,\"174\":10,\"194\":2,\"206\":1,\"207\":2,\"208\":1,\"259\":1,\"288\":2,\"299\":2,\"300\":1,\"301\":2,\"309\":4,\"322\":4,\"323\":1,\"325\":4,\"331\":1,\"332\":2,\"335\":6,\"341\":1,\"342\":2,\"343\":3,\"344\":2,\"359\":12,\"361\":1,\"362\":2,\"392\":1,\"393\":1,\"402\":3,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"417\":4,\"418\":5,\"419\":1,\"420\":1,\"423\":1,\"425\":1,\"433\":10,\"434\":6,\"439\":10,\"440\":4,\"444\":10,\"445\":4,\"446\":1}}],[\"`teacher\",{\"1\":{\"378\":1,\"379\":1,\"382\":1}}],[\"`tenant\",{\"1\":{\"117\":2,\"122\":6}}],[\"`topic\",{\"1\":{\"299\":2,\"300\":1,\"301\":2}}],[\"`top`\",{\"1\":{\"72\":1,\"173\":1,\"174\":5,\"288\":1,\"309\":1,\"322\":2,\"325\":2,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"398\":4,\"399\":2,\"402\":1}}],[\"`title`\",{\"1\":{\"72\":1,\"117\":4,\"119\":1,\"122\":3,\"127\":2,\"129\":2,\"133\":3,\"163\":1,\"167\":2,\"168\":1,\"169\":1,\"170\":1,\"173\":1,\"174\":5,\"194\":3,\"204\":1,\"206\":3,\"207\":1,\"208\":1,\"259\":1,\"288\":1,\"299\":2,\"300\":1,\"301\":2,\"309\":3,\"317\":12,\"318\":4,\"322\":2,\"323\":1,\"325\":2,\"329\":2,\"330\":2,\"331\":2,\"332\":2,\"335\":4,\"341\":1,\"342\":2,\"343\":2,\"344\":1,\"359\":15,\"361\":1,\"362\":3,\"363\":2,\"383\":3,\"387\":1,\"388\":1,\"389\":1,\"392\":2,\"393\":2,\"399\":2,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"417\":4,\"418\":4,\"419\":4,\"420\":3}}],[\"`t\",{\"1\":{\"69\":2,\"72\":1,\"85\":1,\"88\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":3,\"133\":1,\"165\":2,\"170\":1,\"173\":1,\"174\":3,\"194\":3,\"207\":2,\"259\":1,\"284\":2,\"288\":1,\"299\":2,\"300\":1,\"301\":2,\"317\":3,\"318\":2,\"322\":2,\"323\":4,\"325\":2,\"329\":1,\"330\":1,\"331\":2,\"332\":1,\"359\":5,\"381\":6,\"383\":6,\"392\":2,\"393\":2,\"398\":5,\"399\":4,\"402\":1,\"404\":3,\"405\":3,\"406\":3,\"407\":3,\"417\":3,\"418\":4,\"419\":4,\"420\":2,\"423\":1,\"425\":1,\"433\":10,\"434\":6}}],[\"前后变更\",{\"1\":{\"69\":1}}],[\"直接先对第二张表进行全字段获取然后忽略掉id在对第二张表进行id获取\",{\"1\":{\"399\":1}}],[\"直接查询映射字段即可\",{\"1\":{\"390\":1}}],[\"直接插入对象实体\",{\"1\":{\"301\":1}}],[\"直接放结论\",{\"1\":{\"182\":1}}],[\"直接使用被追踪的数据作为当前对象\",{\"1\":{\"206\":1}}],[\"直接使用\",{\"1\":{\"69\":1}}],[\"直接升级修改版本号即可1\",{\"1\":{\"13\":1}}],[\"❌\",{\"1\":{\"68\":2,\"80\":14,\"128\":4}}],[\"✅\",{\"1\":{\"68\":1,\"80\":1,\"128\":1,\"315\":18}}],[\"描述属性对应的列名\",{\"1\":{\"213\":1}}],[\"描述对象对应数据库表名\",{\"1\":{\"212\":1}}],[\"描述easy\",{\"1\":{\"210\":1}}],[\"描述\",{\"1\":{\"68\":1,\"71\":1,\"75\":1,\"76\":1,\"83\":1,\"102\":1,\"103\":1,\"104\":1,\"113\":1,\"114\":1,\"117\":1,\"119\":1,\"121\":1,\"128\":1,\"138\":1,\"156\":1,\"196\":1,\"199\":1,\"212\":1,\"213\":1,\"217\":1,\"218\":1,\"245\":1,\"246\":1,\"310\":1,\"316\":1,\"324\":1,\"334\":1,\"337\":1,\"356\":1,\"365\":1,\"372\":1,\"373\":1,\"382\":1,\"396\":1,\"422\":1}}],[\"默认我们都会通过新建一个基类类满足公用的对象\",{\"1\":{\"447\":1}}],[\"默认按订单id进行分库\",{\"1\":{\"430\":1}}],[\"默认条件和条件之间用and进行链接\",{\"1\":{\"358\":1}}],[\"默认表是0开始\",{\"1\":{\"328\":1}}],[\"默认表示无原子更新\",{\"1\":{\"213\":1}}],[\"默认表示不转换\",{\"1\":{\"213\":1}}],[\"默认key忽略大小写\",{\"1\":{\"314\":1,\"408\":1,\"415\":1}}],[\"默认springboot下的数据源name为ds0所以我们还需要额外添加4个数据源\",{\"1\":{\"432\":1,\"438\":1}}],[\"默认springboot\",{\"1\":{\"292\":1}}],[\"默认仅支持单个数据源的处理\",{\"1\":{\"269\":1}}],[\"默认记录器配置\",{\"1\":{\"258\":1,\"260\":1}}],[\"默认为0将使用executors\",{\"1\":{\"246\":1}}],[\"默认为true\",{\"1\":{\"161\":1}}],[\"默认针对分片链接获取大于1的操作进行defaultdatasourcemergepoolsize总数的扣减\",{\"1\":{\"246\":1}}],[\"默认框架将链接分片的链接模式改为自动\",{\"1\":{\"246\":1}}],[\"默认框架会在配置参数阈值到达后自动合并sql调用executebatch合并\",{\"1\":{\"70\":1}}],[\"默认是如果不选择保存则返回默认值\",{\"1\":{\"246\":1}}],[\"默认是否使用追踪模式\",{\"1\":{\"245\":1}}],[\"默认是5\",{\"1\":{\"196\":1}}],[\"默认依然查询被标记为\",{\"1\":{\"245\":1}}],[\"默认这种情况下会将多个对象进行合并执行batch而不是单条执行\",{\"1\":{\"245\":1}}],[\"默认update命令生成的语句将是对整个对象的所有列进行更新\",{\"1\":{\"245\":1}}],[\"默认使用mysql语法如果你的数据库默认支持mysql语法且easy\",{\"1\":{\"245\":1}}],[\"默认配置项\",{\"0\":{\"245\":1,\"320\":1}}],[\"默认的追踪上下文注解也可以自定义\",{\"1\":{\"232\":1}}],[\"默认的动态条件对象查询条件\",{\"1\":{\"231\":1}}],[\"默认乐观锁版本号策略\",{\"0\":{\"219\":1}}],[\"默认更新策略就是全字段\",{\"1\":{\"216\":1}}],[\"默认更新所有列\",{\"1\":{\"160\":1}}],[\"默认更新所有列包括null和非null\",{\"1\":{\"156\":1}}],[\"默认空为nameconversion\",{\"1\":{\"213\":1}}],[\"默认jdbc连接串的database\",{\"1\":{\"212\":1}}],[\"默认采用datasource的可以自定义\",{\"1\":{\"199\":1}}],[\"默认采用and链接\",{\"1\":{\"152\":1,\"154\":2}}],[\"默认5秒分表聚合多链接获取分表插入更新删除同理多个线程间等待获取时间单位毫秒\",{\"1\":{\"196\":1}}],[\"默认datasource\",{\"1\":{\"196\":1}}],[\"默认数据源的数据源连接池大小分表有效\",{\"1\":{\"196\":1}}],[\"默认分库数据源名称\",{\"1\":{\"196\":1,\"246\":1}}],[\"默认不允许调用删除功能\",{\"1\":{\"162\":1}}],[\"默认不支持和springboot的嵌套事务\",{\"1\":{\"200\":1}}],[\"默认不支持\",{\"1\":{\"76\":1}}],[\"默认easyquery不支持delete命令\",{\"1\":{\"162\":1}}],[\"默认not\",{\"1\":{\"159\":1,\"171\":1}}],[\"默认会被查询\",{\"1\":{\"158\":1}}],[\"默认执行物理删除会报错\",{\"1\":{\"156\":1}}],[\"默认生成语句不包含null列\",{\"1\":{\"156\":1}}],[\"默认查询返回\",{\"1\":{\"156\":1}}],[\"默认行为\",{\"0\":{\"156\":1,\"196\":1}}],[\"默认行为配置\",{\"0\":{\"155\":1}}],[\"默认true表示删除\",{\"1\":{\"217\":1}}],[\"默认true表示查询\",{\"1\":{\"158\":1}}],[\"默认true\",{\"1\":{\"141\":1,\"142\":1}}],[\"默认用户可以选择抽象\",{\"1\":{\"132\":1}}],[\"默认可以才用是否为某个接口的实现interface\",{\"1\":{\"114\":1}}],[\"默认可以使用类名\",{\"1\":{\"114\":1}}],[\"默认添加\",{\"1\":{\"114\":1}}],[\"默认就是不使用追踪\",{\"1\":{\"310\":1}}],[\"默认就是不使用\",{\"1\":{\"103\":1}}],[\"默认需要自行开启\",{\"1\":{\"98\":1}}],[\"默认非中文4个长度为一组\",{\"1\":{\"80\":1}}],[\"默认支持等于匹配\",{\"1\":{\"76\":1}}],[\"默认值\",{\"1\":{\"71\":1,\"76\":1,\"83\":1,\"90\":1,\"114\":1,\"156\":1,\"196\":1,\"199\":1,\"212\":1,\"213\":1,\"217\":1,\"218\":1,\"245\":1,\"246\":1,\"310\":6,\"324\":1,\"327\":1,\"373\":1}}],[\"默认\",{\"1\":{\"68\":1,\"128\":1}}],[\"默认实现有一个aes+base64的abstractaesbase64encryptionstrategy抽象类\",{\"1\":{\"224\":1}}],[\"默认实现系统提供\",{\"1\":{\"138\":1}}],[\"默认实现\",{\"0\":{\"366\":1},\"1\":{\"68\":1,\"117\":1,\"119\":1,\"121\":1}}],[\"需要支持对象插入的时候可以进行创建人和创建时间的自动赋值\",{\"1\":{\"447\":1}}],[\"需要配合java8的try\",{\"1\":{\"401\":1}}],[\"需要配合track更新\",{\"1\":{\"66\":1}}],[\"需要排序的字段\",{\"1\":{\"330\":1}}],[\"需要排序的属性集合\",{\"1\":{\"330\":1}}],[\"需要排序的属性\",{\"1\":{\"329\":1}}],[\"需要开启追踪后才有效\",{\"1\":{\"310\":1}}],[\"需要开启允许或者使用delete语句的时候允许\",{\"1\":{\"162\":1}}],[\"需要忽略的属性\",{\"1\":{\"212\":1}}],[\"需要更新前手动调用easyquery\",{\"1\":{\"109\":3}}],[\"需要和begin\",{\"1\":{\"102\":1}}],[\"需要和release\",{\"1\":{\"102\":1}}],[\"需要加密算法支持模糊查询\",{\"1\":{\"76\":1}}],[\"需要自行实现\",{\"1\":{\"67\":1}}],[\"说明\",{\"1\":{\"66\":1,\"72\":1,\"81\":1,\"87\":1,\"88\":2,\"91\":2,\"96\":1,\"193\":1,\"194\":1,\"206\":1,\"216\":1,\"237\":1,\"243\":1,\"290\":1,\"324\":1,\"327\":1,\"328\":1,\"336\":1,\"356\":1,\"372\":2,\"376\":1,\"378\":1,\"382\":2,\"396\":1,\"422\":1}}],[\"让用户无需关心底层通过修改delete语句为update来实现自动无感逻辑删除\",{\"1\":{\"65\":1}}],[\"软删除可以给程序带来后悔药\",{\"1\":{\"65\":1}}],[\"逻辑删除策略\",{\"1\":{\"217\":1}}],[\"逻辑删除字段不需要update时更新\",{\"1\":{\"216\":1,\"217\":1}}],[\"逻辑删除字段\",{\"1\":{\"216\":1}}],[\"逻辑删除情况下删除数据将会对数据列进行行版本追加\",{\"1\":{\"142\":1}}],[\"逻辑删除加版本号\",{\"0\":{\"142\":1}}],[\"逻辑删除\",{\"0\":{\"124\":1,\"262\":1},\"1\":{\"65\":1,\"143\":1,\"165\":1,\"217\":1,\"372\":1}}],[\"实际的文章内容\",{\"1\":{\"451\":1}}],[\"实际项目中可以通过接口来限制\",{\"1\":{\"117\":1}}],[\"实体删除\",{\"0\":{\"164\":1}}],[\"实体对象删除\",{\"0\":{\"143\":1},\"1\":{\"127\":1}}],[\"实体对象更新\",{\"1\":{\"122\":1}}],[\"实体更新\",{\"0\":{\"140\":1},\"1\":{\"59\":1}}],[\"实现sql\",{\"1\":{\"391\":1,\"416\":1}}],[\"实现动态排序配置器\",{\"1\":{\"328\":1}}],[\"实现动态排序接口\",{\"1\":{\"327\":1}}],[\"实现了支持单表多表\",{\"1\":{\"306\":1}}],[\"实现一个启动配置\",{\"1\":{\"292\":1}}],[\"实现自定义逻辑删除策略\",{\"0\":{\"132\":1}}],[\"实现\",{\"1\":{\"114\":1,\"369\":1}}],[\"实现智能差异更新\",{\"1\":{\"104\":1}}],[\"实现加密策略\",{\"0\":{\"81\":1}}],[\"实现手机地址的加密存储且高性能模糊搜索\",{\"1\":{\"79\":1}}],[\"实现方式具体请看阿里巴巴密文字段检索方案\",{\"1\":{\"74\":1}}],[\"实战\",{\"0\":{\"62\":1}}],[\"读写分离\",{\"1\":{\"59\":1,\"60\":1}}],[\"企业级数据库列加密\",{\"1\":{\"59\":1}}],[\"修改演示\",{\"1\":{\"149\":1}}],[\"修改我们的实体对象\",{\"1\":{\"132\":1}}],[\"修改人\",{\"1\":{\"117\":1,\"397\":2,\"447\":2}}],[\"修改时间\",{\"1\":{\"117\":1,\"397\":2,\"447\":2}}],[\"修改原始的对象\",{\"1\":{\"83\":1}}],[\"修改set字段拦截器\",{\"1\":{\"59\":1}}],[\"修改拦截器\",{\"1\":{\"59\":1}}],[\"修改\",{\"0\":{\"201\":1,\"434\":1,\"440\":1,\"445\":1},\"1\":{\"59\":1,\"113\":1,\"121\":1,\"129\":1,\"149\":1,\"421\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"466\":1}}],[\"支持最后一个参数为表达式\",{\"1\":{\"382\":2}}],[\"支持vo对象返回支持include追加追踪\",{\"1\":{\"372\":1}}],[\"支持多级关联查询\",{\"1\":{\"372\":1}}],[\"支持多次set\",{\"1\":{\"203\":1}}],[\"支持关联查询\",{\"1\":{\"372\":1}}],[\"支持属性和参数化\",{\"1\":{\"355\":1}}],[\"支持easyproxyquery表达式api\",{\"1\":{\"316\":1}}],[\"支持easyktquery表达式api\",{\"1\":{\"316\":1}}],[\"支持easyquery表达式api\",{\"1\":{\"316\":1}}],[\"支持easyqueryclient表达式api\",{\"1\":{\"316\":1}}],[\"支持entity对象的插入\",{\"1\":{\"65\":1}}],[\"支持的类型\",{\"0\":{\"315\":1}}],[\"支持的数据库\",{\"0\":{\"8\":1}}],[\"支持高性能分片下的分页查询\",{\"1\":{\"310\":1}}],[\"支持spring事务\",{\"1\":{\"269\":2}}],[\"支持select\",{\"1\":{\"65\":1}}],[\"支持underlined\",{\"1\":{\"260\":1}}],[\"支持mysql\",{\"1\":{\"260\":1}}],[\"支持自定义数据加密存储\",{\"1\":{\"223\":1}}],[\"支持指定约束列\",{\"1\":{\"177\":1}}],[\"支持指定set列\",{\"1\":{\"174\":1}}],[\"支持单个参数或者全参数\",{\"1\":{\"152\":1,\"154\":2}}],[\"支持单参数时为主表\",{\"1\":{\"150\":1}}],[\"支持项目在工程化的时候可以批量拦截sql表达式\",{\"1\":{\"113\":1}}],[\"支持join和下多表的自动识别表别名而无需自行处理别名\",{\"1\":{\"91\":1}}],[\"支持like搜索\",{\"1\":{\"59\":1}}],[\"支持查询\",{\"1\":{\"59\":1}}],[\"特性\",{\"0\":{\"59\":1}}],[\"或者其他表的对象属性或者表达式query\",{\"1\":{\"356\":1}}],[\"或者springboot下使用\",{\"1\":{\"245\":1}}],[\"或者调用easyquery\",{\"1\":{\"206\":1}}],[\"或者调用useinterceptor\",{\"1\":{\"114\":1}}],[\"或者接口logicdeletestrategy\",{\"1\":{\"132\":1}}],[\"或者可以通过判断当前是否是某个api接口比如startwith\",{\"1\":{\"123\":1}}],[\"或者使用easyquery\",{\"1\":{\"99\":1}}],[\"或者\",{\"1\":{\"58\":1}}],[\"问题反馈请前往\",{\"1\":{\"58\":1}}],[\"q3\",{\"1\":{\"417\":2,\"418\":2,\"419\":2}}],[\"q2\",{\"1\":{\"417\":2,\"418\":2,\"419\":2,\"420\":2}}],[\"q1\",{\"1\":{\"417\":2,\"418\":2,\"419\":2,\"420\":2}}],[\"q\",{\"1\":{\"404\":2,\"405\":2}}],[\"queue\",{\"1\":{\"260\":1}}],[\"query采用客户端分片保证分片下的高性能查询结果返回\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"query采用的是对表达式条件值进行加密匹配而不是数据库列解密匹配\",{\"1\":{\"96\":1}}],[\"query可以实现连表统计\",{\"1\":{\"391\":1}}],[\"query可以自定义实现case\",{\"1\":{\"316\":1}}],[\"query提供的dsl中\",{\"1\":{\"395\":1}}],[\"query提供的clonequeryable方法来克隆一个一模一样的\",{\"1\":{\"383\":1}}],[\"query提供了高效\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"query提供了高级抽象可以让用户自行实现逻辑删除\",{\"1\":{\"130\":1}}],[\"query提供了大数据流式返回\",{\"1\":{\"401\":1}}],[\"query提供了自定义分页返回结果\",{\"1\":{\"364\":1}}],[\"query提供了自动版本号功能\",{\"1\":{\"134\":1}}],[\"query提供了非常简易的分页查询功能\",{\"1\":{\"360\":1}}],[\"query提供了丰富的多表链接查询\",{\"1\":{\"339\":1}}],[\"query提供了方便的分组查询功能的支持\",{\"1\":{\"338\":1}}],[\"query提供了注解配置以外的自定义填充数据\",{\"1\":{\"336\":1}}],[\"query提供了针对基本类型的查询功能\",{\"1\":{\"311\":1}}],[\"query提供了很多丰富的功能\",{\"1\":{\"271\":1}}],[\"query提供了多种api接口方便用户调用\",{\"1\":{\"190\":1}}],[\"query提供了数据追踪功能\",{\"1\":{\"98\":1}}],[\"query提供了数据库函数列值转换\",{\"1\":{\"89\":1}}],[\"query提供了建议的数据列加密功能\",{\"1\":{\"74\":1}}],[\"query提供了原子列更新\",{\"1\":{\"66\":1}}],[\"query这是一个非常不好的事情\",{\"1\":{\"367\":1}}],[\"query针对查询结果支持将结果动态返回以map<string\",{\"1\":{\"408\":1}}],[\"query针对分表对象目前已经支持了动态表名的处理\",{\"1\":{\"333\":1}}],[\"query针对api请求支持对象的动态排序功能\",{\"1\":{\"326\":1}}],[\"query在1\",{\"1\":{\"367\":1}}],[\"query在java的静态语言特性下\",{\"1\":{\"306\":1}}],[\"query在^1\",{\"1\":{\"250\":1}}],[\"query+easy\",{\"1\":{\"271\":1}}],[\"query默认内部提供了一个简易的依赖注入容器\",{\"1\":{\"289\":1}}],[\"query默认适配slf4j日志接口\",{\"1\":{\"287\":1}}],[\"query默认仅支持单数据源如果需要支持多数据源可以通过手动构建easyquery的bean实例\",{\"1\":{\"267\":1}}],[\"query默认提供手动开启事务的功能\",{\"1\":{\"198\":1}}],[\"query默认提供了数据库自定义sql片段\",{\"1\":{\"354\":1}}],[\"query默认提供了数据库值对象转换功能\",{\"1\":{\"294\":1}}],[\"query默认提供了自带事务处理机制\",{\"1\":{\"149\":1}}],[\"query默认提供了一个接口和一个抽象来实现逻辑删除\",{\"1\":{\"132\":1}}],[\"query个性化\",{\"0\":{\"260\":1}}],[\"querytopic\",{\"1\":{\"259\":2}}],[\"query查询\",{\"0\":{\"259\":1}}],[\"query为了针对数据安全进行了默认的不允许物理删除\",{\"1\":{\"245\":1}}],[\"query暂未提供对应数据库的语法方言\",{\"1\":{\"245\":1}}],[\"query获取最新安装包\",{\"1\":{\"234\":1,\"239\":1,\"241\":1,\"252\":1,\"265\":1}}],[\"query架构依赖关系方便确认使用哪些包\",{\"1\":{\"210\":1}}],[\"query将不会生成update的sql语句并且返回0行\",{\"1\":{\"206\":1}}],[\"query<tentity>\",{\"1\":{\"370\":1}}],[\"query<\",{\"1\":{\"192\":3,\"237\":4,\"240\":1,\"242\":1,\"243\":4,\"255\":1,\"266\":1,\"272\":1,\"280\":3,\"281\":1,\"286\":4}}],[\"query快于mybatis\",{\"1\":{\"187\":1,\"188\":1}}],[\"query已经给大家针对spring\",{\"1\":{\"206\":1}}],[\"query已经完全快于mybatis\",{\"1\":{\"186\":1}}],[\"query已经略微快于mybatis\",{\"1\":{\"185\":1}}],[\"querywrapper\",{\"1\":{\"184\":13,\"185\":13,\"186\":13,\"187\":8,\"188\":4}}],[\"query和\",{\"1\":{\"183\":1}}],[\"query和mybatis\",{\"1\":{\"182\":1,\"184\":1}}],[\"query本身没有benchmark的测试\",{\"1\":{\"178\":1}}],[\"query也提供了该功能\",{\"1\":{\"170\":1}}],[\"query防止数据被删除的默认设置\",{\"1\":{\"161\":1}}],[\"query支持union\",{\"1\":{\"416\":1}}],[\"query支持三种api接口方式\",{\"1\":{\"235\":1}}],[\"query支持vo查询所以只需要查询结果中没有这个字段或者\",{\"1\":{\"158\":1}}],[\"query支持以数据库函数生成列值\",{\"1\":{\"110\":1}}],[\"querylargecolumntestentity\",{\"1\":{\"158\":3,\"159\":15,\"160\":29,\"161\":10,\"171\":15}}],[\"querylargecolumn表示是否查询出对应的表示为\",{\"1\":{\"158\":1}}],[\"querylargecolumn\",{\"1\":{\"156\":1,\"158\":1,\"245\":1}}],[\"queryvo\",{\"1\":{\"154\":7}}],[\"queryconfiguration\",{\"1\":{\"92\":1,\"262\":1,\"263\":1,\"267\":2,\"290\":1,\"297\":1}}],[\"queryruntimecontext\",{\"1\":{\"91\":2,\"92\":3,\"111\":1,\"263\":1,\"290\":1,\"297\":1}}],[\"query目前可以做到高性能无感的列加密存储处理\",{\"1\":{\"84\":1}}],[\"query目前已经抽象了表达式\",{\"1\":{\"7\":1}}],[\"query很贴心的给各位提供了默认的加密策略抽象\",{\"1\":{\"81\":1}}],[\"query给出了一个默认的实现\",{\"1\":{\"74\":1}}],[\"query如果需要使用batch功能首先需要在链接字符串添加rewritebatchedstatements=true启用参数\",{\"1\":{\"70\":1}}],[\"queryable默认行为conditionallaccepter\",{\"1\":{\"323\":1}}],[\"queryable<string>\",{\"1\":{\"406\":1,\"407\":1}}],[\"queryable<blogentity>\",{\"1\":{\"383\":2,\"392\":1,\"393\":1,\"404\":1,\"405\":1}}],[\"queryable<blogentitytest>\",{\"1\":{\"88\":1}}],[\"queryable<topicunion>\",{\"1\":{\"419\":3,\"420\":2}}],[\"queryable<topicgrouptestdto>\",{\"1\":{\"344\":1}}],[\"queryable<topic>\",{\"1\":{\"309\":1,\"343\":1,\"417\":3,\"418\":3}}],[\"queryable<trentity>>\",{\"1\":{\"337\":2}}],[\"queryable<t1>\",{\"1\":{\"337\":2}}],[\"queryable\",{\"0\":{\"103\":1},\"1\":{\"69\":1,\"78\":3,\"84\":8,\"88\":3,\"94\":1,\"95\":1,\"96\":1,\"107\":2,\"108\":1,\"109\":2,\"117\":1,\"122\":1,\"127\":2,\"129\":1,\"133\":2,\"139\":1,\"152\":1,\"154\":2,\"158\":2,\"164\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":1,\"194\":3,\"202\":1,\"206\":4,\"207\":1,\"208\":2,\"259\":1,\"273\":4,\"276\":1,\"277\":1,\"284\":1,\"299\":1,\"300\":1,\"301\":1,\"309\":2,\"310\":2,\"317\":3,\"318\":1,\"322\":2,\"323\":2,\"325\":4,\"329\":1,\"330\":1,\"331\":1,\"332\":2,\"335\":3,\"337\":3,\"338\":2,\"341\":1,\"342\":1,\"343\":2,\"344\":2,\"357\":5,\"359\":5,\"361\":1,\"362\":1,\"363\":1,\"371\":1,\"372\":2,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"381\":2,\"382\":6,\"383\":1,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":4,\"393\":4,\"398\":5,\"399\":2,\"400\":1,\"402\":1,\"404\":2,\"405\":2,\"406\":2,\"407\":2,\"417\":3,\"418\":3,\"419\":3,\"420\":2,\"423\":1,\"424\":1,\"425\":1,\"434\":2,\"440\":2,\"445\":2,\"446\":1}}],[\"query的超级功能主要是分表分库和读写分离\",{\"1\":{\"426\":1}}],[\"query的查询\",{\"1\":{\"421\":1}}],[\"query的select是用来终结当前表达式生成新的表达式的方式\",{\"1\":{\"394\":1}}],[\"query的select目前支持两种方式返回自定义列\",{\"1\":{\"384\":1}}],[\"query的不但支持表达式的强类型sql\",{\"1\":{\"345\":1}}],[\"query的代理模式通过apt生成动态代码执行数据库操作\",{\"1\":{\"278\":1}}],[\"query的基础配置信息\",{\"1\":{\"210\":1}}],[\"query的基本使用信息\",{\"1\":{\"149\":1}}],[\"query的事务\",{\"1\":{\"200\":1}}],[\"query的tobean性能在orm中算是比较出色优秀的\",{\"1\":{\"179\":1}}],[\"query的tosql性能中规中矩\",{\"1\":{\"179\":1}}],[\"query的逻辑删除可以帮助用户在select的时候过滤逻辑删除字段\",{\"1\":{\"124\":1}}],[\"query的column\",{\"1\":{\"85\":1}}],[\"query的高级功能来自于作者多年的开发经验总结\",{\"1\":{\"64\":1}}],[\"query的实战环境会尽可能的给大家带来实际开发过程中我们采用的设计类型\",{\"1\":{\"62\":1,\"447\":1}}],[\"query🚀\",{\"1\":{\"58\":1}}],[\"query\",{\"1\":{\"1\":1,\"2\":1,\"50\":1,\"51\":1,\"58\":2,\"71\":1,\"72\":3,\"107\":1,\"108\":1,\"109\":2,\"133\":2,\"139\":1,\"158\":1,\"173\":2,\"174\":4,\"183\":1,\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"192\":1,\"237\":6,\"240\":3,\"242\":4,\"243\":6,\"245\":1,\"247\":1,\"258\":1,\"260\":4,\"266\":4,\"269\":1,\"277\":2,\"284\":6,\"288\":1,\"322\":35,\"325\":12,\"362\":2,\"363\":2,\"370\":2,\"372\":1,\"399\":2,\"402\":1,\"423\":1,\"425\":1,\"428\":1,\"431\":1,\"437\":1,\"443\":1}}],[\"qps\",{\"1\":{\"251\":1}}],[\"qeury提供支持子查询包括exists\",{\"1\":{\"403\":1}}],[\"qeury帮我们自动的进行了处理\",{\"1\":{\"119\":1}}],[\"qeury默认提供了拦截器\",{\"1\":{\"113\":1}}],[\"qeury\",{\"1\":{\"87\":1}}],[\"qgmprczslddg==tncrpikuqnopex\",{\"1\":{\"84\":1}}],[\"qgmprczslddg==rsw+jktki+3iiq0xm3vssw==\",{\"1\":{\"84\":1}}],[\"q==rfk4efic8tpwrlw8eyoe7q==xygfo1hqhvszb3aqqjer0w==taspthz7faxkglu8wir4xg==3k4xeon1qksj0l068srxlg==\",{\"1\":{\"84\":1}}],[\"q==rfk4efic8tpwrlw8eyoe7q==xygfo1hqhvszb3aqqjer0w==taspthz7faxkglu8wir4xg==3k4xeon1qksj0l068srxlg==kgzit8zvaq0mr4mgc0o8ew==o\",{\"1\":{\"84\":2}}],[\"qq群\",{\"1\":{\"58\":1}}],[\"轻量级\",{\"1\":{\"58\":1}}],[\"🔔qq\",{\"0\":{\"54\":1}}],[\"🔔交流qq群\",{\"0\":{\"5\":1}}],[\"↩︎\",{\"1\":{\"44\":1,\"477\":1}}],[\"−1\",{\"1\":{\"38\":1,\"471\":1}}],[\"ωyω​\",{\"1\":{\"38\":2,\"471\":2}}],[\"∂ωr∂r​\",{\"1\":{\"38\":1,\"471\":1}}],[\"=new\",{\"1\":{\"447\":1}}],[\"=null\",{\"1\":{\"117\":1,\"122\":1,\"282\":6,\"329\":1,\"424\":1,\"425\":1}}],[\"=>\",{\"1\":{\"193\":1}}],[\"==\",{\"1\":{\"117\":5,\"119\":4,\"122\":1,\"402\":3,\"447\":6}}],[\"==>\",{\"1\":{\"72\":4,\"78\":8,\"84\":22,\"93\":2,\"94\":2,\"95\":2,\"96\":4,\"106\":2,\"107\":4,\"108\":2,\"109\":6,\"117\":8,\"119\":2,\"122\":10,\"127\":8,\"129\":5,\"133\":7,\"139\":4,\"140\":2,\"141\":6,\"143\":4,\"144\":6,\"159\":6,\"160\":6,\"161\":2,\"163\":4,\"164\":2,\"165\":4,\"167\":2,\"168\":11,\"169\":3,\"170\":2,\"171\":6,\"173\":2,\"174\":6,\"194\":4,\"203\":2,\"204\":2,\"205\":8,\"206\":6,\"207\":4,\"208\":4,\"259\":2,\"284\":2,\"288\":2,\"299\":4,\"300\":2,\"301\":4,\"309\":2,\"317\":6,\"318\":2,\"322\":4,\"325\":4,\"335\":6,\"338\":4,\"341\":2,\"342\":2,\"343\":2,\"344\":2,\"347\":1,\"348\":2,\"350\":1,\"351\":2,\"353\":1,\"354\":2,\"359\":10,\"361\":2,\"362\":4,\"363\":2,\"375\":3,\"376\":3,\"377\":3,\"378\":5,\"379\":7,\"381\":10,\"382\":17,\"386\":2,\"387\":2,\"388\":2,\"389\":2,\"390\":2,\"392\":2,\"393\":2,\"398\":10,\"399\":4,\"402\":2,\"404\":2,\"405\":2,\"406\":2,\"407\":2,\"410\":1,\"411\":2,\"413\":1,\"414\":2,\"417\":2,\"418\":2,\"419\":2,\"420\":2,\"423\":2,\"425\":2,\"433\":20,\"434\":12,\"439\":20,\"440\":8,\"444\":20,\"445\":8,\"446\":4}}],[\"=\",{\"1\":{\"24\":1,\"38\":1,\"69\":9,\"78\":7,\"83\":7,\"84\":22,\"85\":1,\"88\":9,\"92\":5,\"93\":2,\"94\":2,\"95\":8,\"96\":6,\"100\":1,\"106\":2,\"107\":8,\"108\":5,\"109\":12,\"111\":3,\"117\":16,\"119\":10,\"122\":23,\"127\":13,\"129\":6,\"132\":4,\"133\":13,\"139\":4,\"140\":9,\"141\":11,\"143\":8,\"144\":12,\"152\":1,\"154\":2,\"158\":3,\"159\":6,\"160\":17,\"161\":5,\"162\":1,\"163\":4,\"164\":4,\"165\":6,\"166\":4,\"167\":1,\"168\":1,\"169\":1,\"170\":4,\"171\":6,\"173\":2,\"174\":20,\"176\":1,\"177\":3,\"184\":2,\"185\":2,\"186\":2,\"187\":3,\"188\":4,\"193\":1,\"194\":13,\"200\":3,\"201\":1,\"202\":1,\"203\":3,\"204\":3,\"205\":12,\"206\":20,\"207\":5,\"208\":9,\"213\":1,\"216\":3,\"217\":2,\"237\":3,\"243\":3,\"245\":1,\"248\":1,\"256\":1,\"257\":2,\"259\":5,\"262\":2,\"263\":4,\"267\":2,\"269\":1,\"273\":6,\"275\":8,\"276\":3,\"277\":2,\"282\":1,\"284\":14,\"288\":2,\"293\":1,\"297\":2,\"299\":8,\"300\":5,\"301\":7,\"309\":6,\"317\":9,\"318\":5,\"322\":15,\"323\":12,\"324\":13,\"325\":7,\"329\":3,\"330\":5,\"331\":7,\"332\":6,\"335\":10,\"337\":4,\"338\":4,\"341\":4,\"342\":4,\"343\":6,\"344\":6,\"347\":1,\"348\":1,\"350\":1,\"351\":1,\"353\":1,\"354\":1,\"357\":7,\"359\":15,\"361\":1,\"362\":5,\"363\":3,\"366\":5,\"369\":2,\"370\":4,\"371\":1,\"372\":2,\"374\":34,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"381\":11,\"382\":7,\"383\":11,\"386\":2,\"387\":2,\"388\":2,\"389\":2,\"390\":2,\"392\":4,\"393\":4,\"397\":6,\"398\":16,\"399\":9,\"400\":1,\"402\":5,\"404\":7,\"405\":7,\"406\":6,\"407\":6,\"410\":1,\"411\":1,\"413\":1,\"414\":1,\"416\":1,\"417\":5,\"418\":8,\"419\":8,\"420\":6,\"422\":5,\"423\":2,\"424\":1,\"425\":2,\"432\":6,\"433\":8,\"434\":12,\"438\":6,\"439\":8,\"440\":10,\"444\":8,\"445\":10,\"446\":3,\"447\":14,\"458\":1,\"471\":1}}],[\"v|ph\",{\"1\":{\"357\":2}}],[\"v\",{\"1\":{\"323\":2}}],[\"vm\",{\"1\":{\"284\":1}}],[\"vo转换\",{\"1\":{\"337\":1}}],[\"vo对象使用只需要定义关联关系\",{\"1\":{\"382\":3}}],[\"vo对象\",{\"1\":{\"300\":1}}],[\"vo对象不需要\",{\"1\":{\"212\":1}}],[\"vo==null\",{\"1\":{\"273\":2}}],[\"vo\",{\"1\":{\"273\":8,\"336\":1}}],[\"vo>\",{\"1\":{\"273\":6}}],[\"void\",{\"1\":{\"91\":2,\"92\":2,\"111\":1,\"117\":7,\"119\":3,\"122\":3,\"132\":1,\"194\":1,\"200\":2,\"258\":1,\"262\":1,\"263\":2,\"273\":1,\"276\":1,\"288\":5,\"290\":1,\"292\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"432\":1,\"438\":1,\"447\":3}}],[\"version<\",{\"1\":{\"237\":1,\"240\":1,\"242\":1,\"243\":1,\"255\":1,\"266\":1}}],[\"version=\",{\"1\":{\"286\":1}}],[\"version=xxxxasdasd\",{\"1\":{\"222\":1}}],[\"version=xxxxxxasd\",{\"1\":{\"222\":1}}],[\"version=1\",{\"1\":{\"220\":1,\"221\":1}}],[\"version=2\",{\"1\":{\"220\":1,\"221\":1}}],[\"versionuuidstrategy\",{\"0\":{\"222\":1},\"1\":{\"219\":1}}],[\"versionuuidstrategy列对象为string\",{\"1\":{\"138\":1}}],[\"versiontimestampstrategy\",{\"1\":{\"219\":1}}],[\"versiontimestampstrategy列对象为long\",{\"1\":{\"138\":1}}],[\"versionlongstrategy\",{\"0\":{\"221\":1},\"1\":{\"219\":1}}],[\"versionlongstrategy列对象为long\",{\"1\":{\"138\":1}}],[\"versionintstrategy\",{\"0\":{\"220\":1},\"1\":{\"219\":1}}],[\"versionintstrategy列对象为int\",{\"1\":{\"138\":1}}],[\"version>latest\",{\"1\":{\"237\":1,\"240\":1,\"242\":1,\"243\":1,\"266\":1}}],[\"version>\",{\"1\":{\"192\":6,\"237\":5,\"240\":2,\"242\":2,\"243\":5,\"255\":5,\"266\":2,\"272\":8,\"280\":5,\"281\":1,\"286\":14,\"301\":1}}],[\"version\",{\"0\":{\"218\":1},\"1\":{\"139\":2,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"192\":1,\"237\":4,\"240\":1,\"242\":1,\"243\":4,\"260\":1,\"266\":1}}],[\"version为当system\",{\"1\":{\"138\":1}}],[\"version为当uuid\",{\"1\":{\"138\":1}}],[\"version为当前version+1\",{\"1\":{\"138\":2}}],[\"vzwyp6h+ybpq==biv0eblaxjvau53mcrcjkq==3t589p9ntva5g7yy6tw1za==cbmpqpgcbpxq9znkj6efog==7tbmww5dxwjhmnuxffo2bq==87ezckwnyfik+labulm\",{\"1\":{\"84\":2}}],[\"var\",{\"1\":{\"282\":6,\"284\":5}}],[\"varchar\",{\"1\":{\"162\":2,\"166\":2,\"201\":2,\"274\":6,\"416\":2}}],[\"variable\",{\"1\":{\"24\":1,\"458\":1}}],[\"value传递常量值会议参数形式体现在片段上\",{\"1\":{\"356\":1}}],[\"valueof\",{\"1\":{\"166\":1,\"173\":1,\"174\":1,\"299\":3,\"322\":1,\"325\":1,\"402\":2,\"433\":1,\"439\":1,\"444\":1}}],[\"valueconverter<ienum<\",{\"1\":{\"299\":1}}],[\"valueconverter\",{\"1\":{\"295\":1}}],[\"valueconvert\",{\"1\":{\"91\":2,\"92\":1}}],[\"value==null\",{\"1\":{\"88\":1,\"323\":1}}],[\"valuestring\",{\"1\":{\"88\":3}}],[\"values\",{\"1\":{\"72\":1,\"78\":1,\"84\":1,\"93\":1,\"106\":1,\"111\":1,\"117\":1,\"139\":1,\"143\":1,\"144\":1,\"159\":3,\"167\":2,\"168\":1,\"169\":1,\"170\":1,\"171\":3,\"173\":1,\"174\":21,\"176\":1,\"177\":1,\"245\":2,\"274\":6,\"299\":1,\"301\":1,\"433\":10,\"439\":10,\"444\":10}}],[\"value\",{\"1\":{\"69\":3,\"88\":10,\"92\":3,\"212\":1,\"213\":1,\"217\":1,\"218\":1,\"257\":1,\"259\":2,\"299\":1,\"300\":1,\"323\":6,\"356\":1,\"357\":2,\"373\":1,\"374\":8,\"381\":2,\"382\":1,\"398\":1}}],[\"valueupdateatomictrack\",{\"0\":{\"67\":1},\"1\":{\"69\":1,\"213\":1}}],[\"vue\",{\"0\":{\"43\":1,\"476\":1}}],[\"vuepress\",{\"0\":{\"22\":1,\"456\":1},\"1\":{\"4\":1,\"18\":2,\"20\":2,\"21\":1,\"22\":2,\"23\":1,\"47\":1,\"53\":1,\"452\":2,\"454\":2,\"455\":1,\"456\":2,\"457\":1,\"480\":1}}],[\"view\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1}}],[\"via\",{\"1\":{\"21\":1}}],[\"w3\",{\"1\":{\"286\":1}}],[\"www\",{\"1\":{\"284\":1,\"286\":1}}],[\"wait\",{\"1\":{\"260\":1}}],[\"warn\",{\"1\":{\"258\":1,\"260\":1,\"288\":1}}],[\"warn打印警告信息\",{\"1\":{\"196\":1}}],[\"warningbusy\",{\"1\":{\"196\":1,\"246\":1}}],[\"warning\",{\"1\":{\"24\":1,\"260\":1}}],[\"world\",{\"1\":{\"257\":1,\"258\":1,\"259\":1,\"284\":2}}],[\"words\",{\"1\":{\"31\":1}}],[\"word\",{\"1\":{\"29\":1,\"422\":6}}],[\"webconfiguration\",{\"1\":{\"256\":1}}],[\"web<\",{\"1\":{\"255\":1,\"272\":1}}],[\"we\",{\"1\":{\"146\":1,\"303\":1}}],[\"wmhrmy6r4m7ir0km\",{\"1\":{\"106\":1}}],[\"when的实现就是扩展实现\",{\"1\":{\"355\":1}}],[\"when需要实现多个条件而不是单一条件\",{\"1\":{\"318\":1}}],[\"when\",{\"1\":{\"316\":1,\"317\":6,\"318\":2,\"355\":1}}],[\"where与where之间采用and链接\",{\"1\":{\"425\":1}}],[\"where过滤\",{\"1\":{\"372\":1}}],[\"where默认提供了and和or关键字并且提供了泛型版本所以用户可以通过and和or来进行组合对应的条件\",{\"1\":{\"358\":1}}],[\"where存在两种重载\",{\"1\":{\"340\":1}}],[\"whereobject\",{\"1\":{\"310\":1,\"325\":2}}],[\"wherecolumns\",{\"1\":{\"207\":1,\"434\":1,\"440\":1,\"445\":1}}],[\"where路由到过多的表就会报错\",{\"1\":{\"196\":1,\"246\":1}}],[\"where表达式更新\",{\"1\":{\"141\":1}}],[\"whereid\",{\"1\":{\"117\":2,\"119\":1,\"122\":2,\"127\":1,\"129\":1,\"164\":1,\"208\":2}}],[\"wherepredicate\",{\"1\":{\"117\":2}}],[\"wherepredicate<object>\",{\"1\":{\"117\":1,\"122\":1}}],[\"where条件值\",{\"1\":{\"91\":1}}],[\"wherebyids\",{\"1\":{\"273\":2}}],[\"wherebyid主键更新\",{\"1\":{\"141\":1}}],[\"wherebyid\",{\"1\":{\"69\":1,\"78\":1,\"84\":1,\"94\":1,\"95\":1,\"96\":1,\"107\":2,\"108\":1,\"109\":2,\"122\":1,\"127\":1,\"129\":1,\"139\":1,\"141\":1,\"144\":2,\"163\":1,\"164\":1,\"202\":1,\"207\":1,\"273\":2,\"299\":1,\"300\":1,\"301\":1,\"310\":1,\"371\":1}}],[\"where\",{\"1\":{\"66\":1,\"68\":4,\"69\":2,\"78\":5,\"84\":18,\"85\":1,\"88\":1,\"91\":1,\"94\":1,\"95\":1,\"96\":3,\"107\":2,\"108\":1,\"109\":3,\"117\":3,\"119\":1,\"122\":5,\"127\":4,\"129\":2,\"133\":5,\"139\":1,\"140\":1,\"141\":5,\"143\":1,\"144\":2,\"152\":3,\"154\":6,\"160\":3,\"161\":1,\"163\":3,\"164\":1,\"165\":4,\"184\":2,\"185\":2,\"186\":2,\"187\":2,\"188\":2,\"194\":5,\"196\":2,\"203\":3,\"204\":2,\"205\":8,\"206\":6,\"207\":2,\"208\":2,\"220\":1,\"221\":1,\"222\":1,\"245\":2,\"246\":2,\"259\":2,\"284\":3,\"288\":1,\"299\":1,\"300\":1,\"301\":1,\"309\":5,\"310\":1,\"317\":6,\"318\":2,\"322\":4,\"323\":3,\"325\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"335\":6,\"337\":2,\"338\":4,\"341\":2,\"342\":2,\"343\":4,\"344\":4,\"348\":2,\"351\":2,\"353\":2,\"354\":2,\"357\":4,\"359\":10,\"361\":3,\"362\":3,\"363\":3,\"375\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":3,\"381\":6,\"382\":6,\"383\":4,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":4,\"393\":4,\"398\":10,\"399\":4,\"400\":1,\"402\":2,\"404\":6,\"405\":6,\"406\":5,\"407\":5,\"411\":2,\"414\":2,\"416\":1,\"417\":2,\"418\":10,\"419\":8,\"420\":6,\"423\":2,\"424\":1,\"425\":3,\"434\":8,\"440\":6,\"445\":6,\"446\":3}}],[\"which\",{\"1\":{\"21\":1}}],[\"withversion\",{\"1\":{\"141\":1,\"144\":1}}],[\"with\",{\"1\":{\"24\":1,\"47\":2,\"337\":3,\"447\":2}}],[\"will\",{\"1\":{\"21\":1}}],[\"writing\",{\"1\":{\"22\":1,\"23\":1,\"46\":1}}],[\"write\",{\"1\":{\"18\":1,\"19\":1,\"47\":1}}],[\"run\",{\"1\":{\"276\":1,\"432\":1,\"438\":1}}],[\"runtime\",{\"1\":{\"246\":1,\"273\":1}}],[\"runtimeexception\",{\"1\":{\"200\":1,\"402\":1,\"434\":1,\"440\":1,\"445\":1}}],[\"runtimecontext\",{\"1\":{\"91\":2,\"92\":5,\"111\":1,\"263\":5,\"297\":2}}],[\"routedescriptorfactory\",{\"1\":{\"290\":1}}],[\"routecontextfactory\",{\"1\":{\"290\":1}}],[\"route\",{\"1\":{\"260\":2}}],[\"rollback\",{\"1\":{\"199\":1}}],[\"root\",{\"1\":{\"194\":2,\"258\":3,\"260\":3,\"284\":2,\"431\":2,\"432\":2,\"437\":2,\"438\":2,\"443\":2}}],[\"rows=easyquery\",{\"1\":{\"206\":1}}],[\"rows4\",{\"1\":{\"205\":1,\"207\":2}}],[\"rows3\",{\"1\":{\"205\":1}}],[\"rows2\",{\"1\":{\"205\":1}}],[\"rows1\",{\"1\":{\"205\":1}}],[\"rows为1\",{\"1\":{\"203\":1,\"204\":1}}],[\"rows\",{\"1\":{\"167\":1,\"168\":1,\"169\":1,\"202\":1,\"203\":1,\"204\":1,\"310\":1}}],[\"row\",{\"1\":{\"8\":2,\"260\":1}}],[\"rownumber\",{\"1\":{\"8\":1}}],[\"rank2\",{\"1\":{\"357\":6}}],[\"rank1\",{\"1\":{\"357\":6}}],[\"rank\",{\"1\":{\"357\":12}}],[\"rangeopen\",{\"1\":{\"422\":1}}],[\"rangeopenclosed\",{\"1\":{\"422\":1}}],[\"range\",{\"1\":{\"324\":2}}],[\"rangeclosedopen\",{\"1\":{\"422\":1}}],[\"rangeclosed\",{\"1\":{\"322\":2,\"422\":1}}],[\"random\",{\"1\":{\"206\":3}}],[\"randomuuid\",{\"1\":{\"138\":1,\"353\":1,\"354\":1}}],[\"ray\",{\"0\":{\"305\":1,\"493\":1},\"1\":{\"304\":1,\"485\":1,\"492\":1}}],[\"ravjwp3bdch88opbixhna==ytwmfv6jykhytlkcp3xxvw==\",{\"1\":{\"84\":4}}],[\"r>\",{\"1\":{\"88\":4}}],[\"rybvyx8k\",{\"1\":{\"84\":2}}],[\"r\",{\"1\":{\"72\":1}}],[\"rewritecontextfactory\",{\"1\":{\"290\":1}}],[\"rewritebatchedstatements=true开启后性能将会大幅提升\",{\"1\":{\"168\":1}}],[\"rewritebatchedstatements=true\",{\"1\":{\"71\":1,\"194\":1,\"258\":1,\"260\":1,\"284\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"requiredargsconstructor\",{\"1\":{\"277\":1,\"433\":1,\"439\":1,\"444\":1,\"447\":1}}],[\"requestmapping\",{\"1\":{\"277\":1,\"433\":1,\"439\":1,\"444\":1}}],[\"resource或者try\",{\"1\":{\"401\":1}}],[\"restcontroller\",{\"1\":{\"277\":1,\"433\":1,\"439\":1,\"444\":1}}],[\"resultclass\",{\"1\":{\"396\":2}}],[\"result\",{\"1\":{\"273\":2,\"322\":2}}],[\"refreshcache\",{\"1\":{\"276\":1}}],[\"ref\",{\"1\":{\"275\":2}}],[\"reflectutils\",{\"1\":{\"273\":1}}],[\"retentionpolicy\",{\"1\":{\"273\":1}}],[\"retention\",{\"1\":{\"273\":1}}],[\"return\",{\"1\":{\"83\":2,\"88\":8,\"117\":6,\"119\":2,\"122\":2,\"132\":6,\"206\":1,\"256\":1,\"257\":1,\"259\":2,\"262\":6,\"263\":1,\"267\":1,\"269\":1,\"273\":5,\"277\":1,\"288\":2,\"292\":2,\"293\":1,\"299\":7,\"323\":6,\"335\":2,\"366\":7,\"369\":4,\"370\":1,\"392\":1,\"393\":1,\"432\":2,\"433\":1,\"434\":2,\"438\":2,\"439\":1,\"440\":2,\"444\":1,\"445\":2,\"446\":1,\"447\":6}}],[\"regexp\",{\"1\":{\"357\":6}}],[\"registerlistener\",{\"1\":{\"199\":1}}],[\"regarded\",{\"1\":{\"45\":1}}],[\"repositories>\",{\"1\":{\"286\":1}}],[\"repository>\",{\"1\":{\"286\":1}}],[\"repository\",{\"0\":{\"50\":1,\"51\":1}}],[\"repo1\",{\"1\":{\"286\":1}}],[\"repeatable\",{\"1\":{\"199\":1}}],[\"replaceservice\",{\"1\":{\"194\":1,\"248\":1,\"267\":3,\"269\":3,\"290\":39,\"293\":1}}],[\"replaceall\",{\"1\":{\"138\":1}}],[\"receiver\",{\"1\":{\"90\":1}}],[\"relationtypeenum\",{\"1\":{\"374\":8,\"381\":2,\"382\":5}}],[\"relation\",{\"1\":{\"260\":1}}],[\"relationgroupsize\",{\"1\":{\"245\":1}}],[\"relative\",{\"1\":{\"47\":1}}],[\"release\",{\"1\":{\"69\":1,\"100\":1,\"102\":1,\"107\":1,\"108\":1,\"109\":1,\"206\":3}}],[\"read\",{\"1\":{\"19\":1,\"20\":1,\"22\":1,\"199\":3}}],[\"r−i​\",{\"1\":{\"38\":1,\"471\":1}}],[\"r−i+1\",{\"1\":{\"38\":1,\"471\":1}}],[\"r+i=1∑r​ωi\",{\"1\":{\"38\":1,\"471\":1}}],[\"rightjoin\",{\"1\":{\"310\":1}}],[\"right\",{\"1\":{\"28\":1,\"324\":1,\"422\":8}}],[\"richer\",{\"1\":{\"23\":1}}],[\"kotlin<\",{\"1\":{\"286\":5}}],[\"kotlin\",{\"1\":{\"286\":2}}],[\"kotlin代理模式\",{\"0\":{\"278\":1}}],[\"kt\",{\"1\":{\"240\":1,\"242\":1}}],[\"key\",{\"1\":{\"162\":1,\"166\":1,\"174\":3,\"201\":1,\"263\":1,\"274\":2,\"275\":2,\"400\":1,\"416\":1}}],[\"kcrrvsd1fa++a==6s2nnhbfy4vm0knpmmexhw==a000vaxsbiodisuudxv7ow==d8z7fptvpiymvhixtvujba==xchjvvd0uvw7a435+66hcq==yqcxesywhm+0knr39su2oa==skfe84ttzzfqhwzfbfadkw==ieailfgcyjbsmscn7hvnvw==v7c\",{\"1\":{\"106\":1,\"109\":1}}],[\"kgx28zi\",{\"1\":{\"84\":2}}],[\"know\",{\"1\":{\"19\":1,\"20\":1}}],[\"kingbase\",{\"1\":{\"8\":3,\"260\":1}}],[\"url=http\",{\"1\":{\"399\":2}}],[\"url列上所以无法自动映射\",{\"1\":{\"387\":1}}],[\"url映射到my\",{\"1\":{\"387\":1}}],[\"url在bean层面拥有一样的属性名称一样的属性类型\",{\"1\":{\"387\":1}}],[\"url和blogentitytest2\",{\"1\":{\"387\":1}}],[\"url`\",{\"1\":{\"386\":1,\"389\":1,\"390\":1}}],[\"url\",{\"1\":{\"385\":2,\"397\":1,\"399\":1,\"431\":1,\"432\":3,\"437\":1,\"438\":3,\"443\":1}}],[\"url>\",{\"1\":{\"286\":1}}],[\"uuid\",{\"1\":{\"353\":1,\"354\":1}}],[\"uid\",{\"1\":{\"433\":2,\"439\":2,\"444\":2}}],[\"uid模2进行分表\",{\"1\":{\"430\":1}}],[\"uid=1使用逻辑删除框架默认实现该功能\",{\"1\":{\"245\":1}}],[\"uid=1\",{\"1\":{\"245\":1}}],[\"uisort\",{\"0\":{\"332\":1},\"1\":{\"332\":4}}],[\"util\",{\"1\":{\"315\":1}}],[\"utf\",{\"1\":{\"286\":1}}],[\"utf8mb4\",{\"1\":{\"274\":1}}],[\"upper\",{\"1\":{\"245\":2,\"260\":2}}],[\"updatable\",{\"1\":{\"69\":1,\"84\":2,\"95\":1,\"96\":1,\"107\":1,\"108\":1,\"109\":1,\"117\":2,\"119\":1,\"122\":2,\"129\":1,\"133\":1,\"140\":1,\"141\":3,\"160\":5,\"188\":1,\"202\":1,\"203\":2,\"204\":1,\"205\":4,\"206\":3,\"207\":1,\"208\":2,\"434\":2,\"440\":2,\"445\":2}}],[\"update也会过滤\",{\"1\":{\"217\":1}}],[\"updatewrapper\",{\"1\":{\"188\":5}}],[\"update命令默认采用sqlexecutestrategyenum\",{\"1\":{\"160\":1}}],[\"updatestrategy\",{\"1\":{\"245\":1}}],[\"updatestrategyenum\",{\"1\":{\"208\":2}}],[\"updatestrategy表示sql的执行策略\",{\"1\":{\"160\":1}}],[\"updatesetinterceptor\",{\"0\":{\"118\":1},\"1\":{\"113\":1,\"119\":1,\"447\":1}}],[\"updateignore并且updatesetintrackdiff\",{\"1\":{\"245\":1}}],[\"updateignore\",{\"0\":{\"216\":1},\"1\":{\"193\":1,\"216\":3,\"217\":3,\"447\":5}}],[\"updateignore如果你需要不返回的话\",{\"1\":{\"158\":1}}],[\"updateignore除非手动指定更新也是可以的\",{\"1\":{\"156\":1}}],[\"update的时候也可以\",{\"1\":{\"124\":1}}],[\"update的set自定义\",{\"1\":{\"65\":1}}],[\"updatetime\",{\"1\":{\"119\":4,\"397\":1,\"447\":6}}],[\"updatebyquery\",{\"1\":{\"188\":1}}],[\"updateby\",{\"1\":{\"119\":4,\"397\":1,\"447\":6}}],[\"updatebatchthreshold\",{\"1\":{\"71\":1,\"156\":1,\"245\":1}}],[\"update\",{\"0\":{\"160\":1},\"1\":{\"16\":1,\"48\":1,\"65\":2,\"69\":2,\"84\":2,\"91\":2,\"95\":1,\"96\":1,\"107\":1,\"109\":1,\"117\":2,\"119\":1,\"122\":2,\"127\":2,\"129\":1,\"133\":2,\"140\":1,\"141\":3,\"143\":1,\"144\":2,\"156\":1,\"160\":3,\"165\":1,\"174\":3,\"177\":1,\"188\":1,\"196\":1,\"203\":1,\"204\":1,\"205\":4,\"206\":3,\"207\":1,\"208\":2,\"220\":1,\"221\":1,\"222\":1,\"246\":1,\"260\":2,\"353\":2,\"354\":2,\"434\":2,\"440\":2,\"445\":2}}],[\"udpate\",{\"1\":{\"91\":1}}],[\"union或者union\",{\"1\":{\"416\":1}}],[\"unionall\",{\"1\":{\"310\":1,\"420\":1}}],[\"union\",{\"0\":{\"416\":1},\"1\":{\"310\":3,\"416\":2,\"417\":3,\"418\":3,\"419\":3,\"420\":1}}],[\"uniquefield\",{\"1\":{\"273\":4}}],[\"unsupportedoperationexception\",{\"1\":{\"299\":1}}],[\"unshardinginitializer\",{\"1\":{\"212\":1}}],[\"underlined表示采用下划线userage将对应数据库user\",{\"1\":{\"245\":1}}],[\"underlined\",{\"1\":{\"242\":1,\"245\":3,\"247\":1,\"260\":2,\"266\":1,\"431\":1,\"437\":1,\"443\":1}}],[\"underlinednameconversion\",{\"1\":{\"194\":1,\"248\":1,\"267\":1,\"269\":1,\"290\":1}}],[\"uncommitted\",{\"1\":{\"199\":1}}],[\"unknown\",{\"1\":{\"88\":1,\"284\":1}}],[\"unable\",{\"1\":{\"10\":1,\"268\":1}}],[\"uxufduophc3qv7yzgkayhg==\",{\"1\":{\"84\":1}}],[\"u011624157\",{\"1\":{\"73\":1}}],[\"using\",{\"1\":{\"20\":1,\"23\":1,\"284\":1}}],[\"useinterceptor\",{\"1\":{\"310\":2}}],[\"usedatabaseconfigure\",{\"1\":{\"194\":1,\"237\":1,\"243\":1,\"248\":1,\"267\":1,\"269\":1,\"284\":1,\"293\":1}}],[\"usestrictmode\",{\"1\":{\"327\":1}}],[\"usestdoutlogging\",{\"1\":{\"194\":1,\"245\":1,\"284\":1}}],[\"usessl=false\",{\"1\":{\"71\":1,\"194\":1,\"258\":1,\"260\":1,\"284\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"users\",{\"1\":{\"433\":2,\"439\":2,\"444\":2}}],[\"user`\",{\"1\":{\"133\":4,\"423\":1,\"425\":1}}],[\"userid=userid\",{\"1\":{\"117\":1,\"132\":1}}],[\"userid\",{\"1\":{\"117\":3,\"119\":2,\"132\":3,\"447\":8}}],[\"username=null\",{\"1\":{\"323\":1}}],[\"username=username\",{\"1\":{\"94\":1}}],[\"username5\",{\"1\":{\"144\":1}}],[\"username4\",{\"1\":{\"143\":1}}],[\"username1\",{\"1\":{\"106\":2,\"109\":1,\"139\":1,\"140\":1}}],[\"username\",{\"1\":{\"92\":1,\"93\":2,\"95\":1,\"139\":1,\"143\":1,\"144\":1,\"258\":1,\"260\":1,\"284\":1,\"323\":1,\"431\":1,\"432\":3,\"437\":1,\"438\":3,\"443\":1}}],[\"user\",{\"1\":{\"78\":4,\"83\":1,\"84\":11,\"92\":1,\"93\":9,\"94\":1,\"95\":1,\"96\":2,\"106\":1,\"107\":2,\"108\":1,\"109\":3,\"139\":2,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"150\":1,\"184\":2,\"185\":2,\"186\":2,\"188\":1,\"245\":4,\"274\":3,\"275\":1,\"323\":1,\"447\":2}}],[\"use\",{\"1\":{\"18\":1,\"24\":1,\"47\":2,\"107\":1,\"108\":1,\"109\":2,\"139\":1,\"274\":1,\"362\":2,\"363\":2}}],[\"nio\",{\"1\":{\"434\":6,\"440\":12,\"444\":30,\"445\":12,\"446\":6}}],[\"nickname=\",{\"1\":{\"323\":1}}],[\"nickname\",{\"1\":{\"188\":1,\"323\":3}}],[\"n+1ivzajsilsqenjfa==hs33w1ujdlk1efb0nyhorw==bidnryo+cm5gy0r913ftoa==2rp6ha8xqx2oihtro4ni2g==i6gg2qdr60qx1eq186lagq==9g+7mmp9u30kpofb+xcz+a==\",{\"1\":{\"106\":1,\"109\":1}}],[\"null列\",{\"1\":{\"160\":1}}],[\"null列插入所以只会生成一列\",{\"1\":{\"159\":1,\"171\":1}}],[\"null表示被删除\",{\"1\":{\"128\":2}}],[\"null表示未被删除\",{\"1\":{\"128\":2,\"217\":2}}],[\"null\",{\"0\":{\"424\":1},\"1\":{\"78\":4,\"84\":8,\"88\":1,\"117\":5,\"119\":4,\"122\":1,\"133\":6,\"156\":1,\"159\":10,\"160\":10,\"162\":4,\"166\":4,\"171\":10,\"199\":1,\"201\":4,\"208\":4,\"245\":1,\"260\":5,\"274\":7,\"309\":1,\"322\":6,\"335\":1,\"342\":1,\"343\":1,\"344\":1,\"361\":2,\"362\":2,\"363\":2,\"383\":3,\"392\":1,\"393\":1,\"416\":4,\"418\":2,\"419\":2,\"422\":2,\"447\":6}}],[\"number\",{\"1\":{\"8\":2,\"260\":1,\"323\":1}}],[\"native\",{\"1\":{\"251\":1,\"357\":2}}],[\"navigate\",{\"0\":{\"226\":1,\"373\":1},\"1\":{\"374\":8,\"381\":2,\"382\":5}}],[\"navbar\",{\"1\":{\"16\":1,\"48\":1}}],[\"name=越城区\",{\"1\":{\"381\":1}}],[\"name=绍兴市\",{\"1\":{\"381\":1}}],[\"name=浙江省\",{\"1\":{\"381\":1}}],[\"name=江苏省\",{\"1\":{\"381\":1}}],[\"name=老师2\",{\"1\":{\"378\":2}}],[\"name=老师1\",{\"1\":{\"378\":1}}],[\"name=班级3\",{\"1\":{\"376\":1,\"378\":1}}],[\"name=班级2\",{\"1\":{\"376\":1,\"377\":1,\"378\":1}}],[\"name=班级1\",{\"1\":{\"376\":1,\"377\":2,\"378\":1}}],[\"name=学生3\",{\"1\":{\"375\":1,\"376\":1,\"377\":1}}],[\"name=学生2\",{\"1\":{\"375\":1,\"376\":1,\"377\":1}}],[\"name=学生1\",{\"1\":{\"375\":1,\"376\":1,\"377\":1}}],[\"name=123\",{\"1\":{\"301\":1}}],[\"name>\",{\"1\":{\"286\":1}}],[\"nameconversion\",{\"1\":{\"194\":1,\"212\":1,\"245\":1,\"248\":1,\"267\":1,\"269\":1,\"290\":1,\"292\":2,\"293\":2}}],[\"name2\",{\"1\":{\"84\":3}}],[\"name\",{\"1\":{\"83\":1,\"111\":2,\"114\":2,\"117\":2,\"119\":1,\"122\":1,\"123\":1,\"150\":1,\"158\":1,\"184\":2,\"185\":2,\"186\":2,\"188\":1,\"193\":1,\"194\":4,\"242\":1,\"245\":1,\"247\":1,\"256\":1,\"258\":1,\"260\":3,\"262\":1,\"263\":1,\"266\":1,\"274\":2,\"275\":2,\"277\":2,\"292\":1,\"293\":1,\"301\":2,\"310\":2,\"323\":1,\"357\":6,\"374\":3,\"381\":3,\"382\":3,\"431\":2,\"432\":1,\"433\":30,\"434\":18,\"437\":2,\"438\":1,\"439\":31,\"440\":12,\"443\":2,\"444\":30,\"445\":12,\"446\":6,\"447\":1}}],[\"name1\",{\"1\":{\"78\":2}}],[\"no`\",{\"1\":{\"433\":10,\"434\":4,\"439\":10,\"440\":2,\"444\":10,\"445\":2,\"446\":1}}],[\"nointerceptor\",{\"1\":{\"310\":2}}],[\"nop\",{\"1\":{\"284\":1}}],[\"nopadding\",{\"1\":{\"80\":5}}],[\"noear<\",{\"1\":{\"255\":1}}],[\"noversionerror\",{\"1\":{\"245\":1}}],[\"noversionerror默认为true当对象有version字段并且更新修改不存在version字段将会报错\",{\"1\":{\"135\":1}}],[\"noversionignore\",{\"1\":{\"141\":2,\"144\":1}}],[\"now\",{\"1\":{\"93\":1,\"106\":1,\"117\":3,\"119\":4,\"132\":4,\"139\":1,\"143\":1,\"144\":1,\"152\":2,\"154\":4,\"166\":1,\"170\":1,\"176\":1,\"177\":1,\"262\":4,\"299\":1,\"301\":1,\"322\":4,\"325\":3,\"359\":5,\"433\":1,\"434\":2,\"439\":1,\"440\":2,\"444\":1,\"445\":2,\"446\":1,\"447\":5}}],[\"notlike\",{\"1\":{\"422\":1}}],[\"notlikematchright\",{\"1\":{\"422\":1}}],[\"notlikematchleft\",{\"1\":{\"422\":1}}],[\"notin\",{\"1\":{\"407\":1,\"422\":1}}],[\"notexists\",{\"1\":{\"405\":1,\"422\":1}}],[\"notallowed\",{\"1\":{\"328\":1}}],[\"nothing\",{\"1\":{\"176\":1}}],[\"not\",{\"0\":{\"405\":1,\"407\":1},\"1\":{\"78\":10,\"84\":20,\"128\":2,\"156\":1,\"159\":1,\"160\":2,\"162\":3,\"166\":4,\"171\":1,\"201\":3,\"208\":1,\"245\":1,\"260\":4,\"274\":8,\"309\":1,\"324\":2,\"332\":1,\"335\":1,\"342\":1,\"343\":1,\"344\":1,\"361\":2,\"362\":2,\"363\":2,\"383\":3,\"392\":1,\"393\":1,\"403\":2,\"405\":1,\"407\":1,\"416\":3,\"418\":2,\"419\":2,\"422\":5}}],[\"no\",{\"1\":{\"73\":1,\"193\":1,\"194\":2,\"260\":1,\"284\":1}}],[\"ne\",{\"1\":{\"422\":1}}],[\"net\",{\"1\":{\"73\":1}}],[\"need\",{\"1\":{\"20\":1}}],[\"newcontent\",{\"1\":{\"354\":1}}],[\"newcontent=\",{\"1\":{\"353\":1,\"354\":1}}],[\"newcachedthreadpool线程池\",{\"1\":{\"246\":1}}],[\"newcachedthreadpool\",{\"1\":{\"196\":2}}],[\"newtitle\",{\"1\":{\"206\":6}}],[\"new\",{\"1\":{\"19\":1,\"78\":1,\"84\":1,\"88\":5,\"92\":1,\"93\":1,\"106\":1,\"117\":1,\"139\":1,\"143\":1,\"144\":1,\"159\":3,\"160\":5,\"161\":2,\"166\":2,\"170\":1,\"171\":3,\"173\":3,\"174\":3,\"176\":1,\"177\":1,\"184\":2,\"185\":2,\"186\":2,\"187\":2,\"188\":3,\"194\":3,\"200\":3,\"206\":3,\"237\":3,\"243\":3,\"248\":1,\"262\":1,\"263\":1,\"267\":21,\"269\":2,\"273\":1,\"276\":1,\"292\":1,\"293\":1,\"297\":1,\"299\":3,\"301\":2,\"322\":2,\"325\":2,\"329\":1,\"330\":3,\"331\":3,\"332\":4,\"337\":1,\"366\":2,\"370\":1,\"371\":1,\"402\":3,\"432\":3,\"433\":2,\"434\":1,\"438\":3,\"439\":2,\"440\":1,\"444\":2,\"445\":1}}],[\"nextid\",{\"1\":{\"447\":1}}],[\"nextint\",{\"1\":{\"184\":3,\"185\":3,\"186\":3,\"206\":3}}],[\"nextversion\",{\"1\":{\"138\":1}}],[\"next\",{\"1\":{\"16\":1,\"138\":4}}],[\"bc51\",{\"1\":{\"353\":1}}],[\"biconsumer<t1\",{\"1\":{\"337\":2}}],[\"bigdecimal\",{\"1\":{\"72\":6,\"173\":5,\"174\":9,\"310\":1,\"315\":1,\"321\":2,\"322\":3,\"324\":2,\"325\":3,\"385\":2,\"397\":2,\"398\":2,\"399\":2,\"402\":3}}],[\"bb\",{\"1\":{\"335\":4}}],[\"bbb\",{\"1\":{\"323\":1}}],[\"b线程想要获取下一个也需要a线程释放或者等到datasource\",{\"1\":{\"196\":1}}],[\"b线程也获取一个\",{\"1\":{\"196\":1}}],[\"busy\",{\"1\":{\"260\":1}}],[\"build>\",{\"1\":{\"286\":1}}],[\"build\",{\"1\":{\"193\":1,\"194\":1,\"237\":1,\"243\":1,\"248\":1,\"267\":1,\"269\":1,\"284\":1,\"286\":2,\"293\":1}}],[\"builder\",{\"1\":{\"132\":2,\"262\":2,\"267\":23,\"269\":23,\"329\":2,\"330\":2,\"331\":2,\"332\":2,\"447\":2}}],[\"but\",{\"1\":{\"47\":1}}],[\"button\",{\"1\":{\"16\":1,\"48\":1}}],[\"book\",{\"1\":{\"357\":6}}],[\"boolean>\",{\"1\":{\"332\":7}}],[\"boolean类型的属性true表示删除\",{\"1\":{\"128\":1}}],[\"boolean\",{\"1\":{\"72\":9,\"107\":1,\"108\":1,\"117\":2,\"119\":1,\"122\":1,\"127\":6,\"128\":2,\"143\":3,\"144\":5,\"158\":1,\"165\":2,\"173\":3,\"174\":9,\"216\":2,\"217\":4,\"288\":3,\"310\":2,\"315\":1,\"318\":1,\"321\":1,\"322\":2,\"323\":4,\"324\":1,\"325\":2,\"329\":1,\"330\":1,\"331\":1,\"335\":3,\"337\":4,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"385\":2,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"397\":4,\"398\":7,\"399\":4,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"418\":1,\"419\":1,\"420\":1,\"447\":4}}],[\"bootstrapper\",{\"1\":{\"284\":1}}],[\"boot可以自行实现或者使用控制台日志logfactory\",{\"1\":{\"245\":1}}],[\"boot下默认是com\",{\"1\":{\"245\":1}}],[\"boot下用\",{\"1\":{\"206\":1}}],[\"boot工程\",{\"0\":{\"240\":1,\"266\":1}}],[\"boot初始化\",{\"0\":{\"237\":1,\"242\":1,\"243\":1}}],[\"boot的项目进行了aop的封装\",{\"1\":{\"206\":1}}],[\"boot环境下直接使用\",{\"1\":{\"109\":3}}],[\"boot环境\",{\"0\":{\"100\":1}}],[\"boot\",{\"0\":{\"99\":1,\"247\":1,\"248\":1},\"1\":{\"10\":1,\"233\":1,\"268\":1,\"272\":7}}],[\"boot<\",{\"1\":{\"10\":1,\"268\":1,\"272\":4}}],[\"blue\",{\"1\":{\"47\":1}}],[\"blogcount\",{\"1\":{\"392\":1}}],[\"blog1\",{\"1\":{\"359\":1}}],[\"blogs\",{\"1\":{\"350\":1,\"351\":1,\"413\":1,\"414\":1}}],[\"blogsortjoinrequest\",{\"1\":{\"331\":7}}],[\"blogsortmultirequest\",{\"1\":{\"330\":7}}],[\"blogsortrequest\",{\"1\":{\"329\":7,\"330\":4,\"331\":4}}],[\"blogentities\",{\"1\":{\"335\":2,\"342\":1,\"347\":1,\"348\":1,\"410\":1,\"411\":1}}],[\"blogentityvo2\",{\"1\":{\"399\":8,\"400\":1}}],[\"blogentityvo1\",{\"1\":{\"398\":22,\"399\":2}}],[\"blogentityqueryable\",{\"1\":{\"383\":2}}],[\"blogentitytest2s\",{\"1\":{\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1}}],[\"blogentitytest2\",{\"1\":{\"385\":1,\"386\":2,\"387\":1,\"388\":1,\"389\":2,\"390\":2}}],[\"blogentitytest\",{\"1\":{\"88\":2}}],[\"blogentity\",{\"1\":{\"88\":2,\"152\":6,\"154\":14,\"165\":4,\"173\":2,\"174\":6,\"309\":4,\"318\":4,\"322\":10,\"323\":6,\"325\":2,\"329\":4,\"330\":4,\"331\":5,\"332\":3,\"335\":8,\"341\":2,\"342\":4,\"343\":4,\"344\":4,\"347\":1,\"348\":1,\"359\":11,\"362\":5,\"363\":7,\"383\":8,\"386\":2,\"387\":2,\"388\":1,\"389\":2,\"390\":3,\"392\":3,\"393\":3,\"397\":1,\"398\":14,\"399\":5,\"400\":2,\"402\":4,\"404\":3,\"405\":3,\"406\":3,\"407\":3,\"410\":1,\"411\":1,\"418\":3,\"419\":3,\"420\":5}}],[\"blogquery2request\",{\"1\":{\"324\":1,\"325\":4}}],[\"blogquery1request\",{\"1\":{\"321\":1,\"322\":4}}],[\"blog`\",{\"1\":{\"72\":1,\"85\":1,\"88\":1,\"165\":2,\"173\":1,\"174\":3,\"288\":1,\"318\":1,\"322\":2,\"323\":3,\"325\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"359\":2,\"383\":3,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"402\":1,\"404\":2,\"405\":2,\"406\":2,\"407\":2,\"418\":1,\"419\":1,\"420\":1}}],[\"blog\",{\"1\":{\"18\":1,\"72\":3,\"73\":1,\"173\":19,\"174\":24,\"309\":1,\"335\":4,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"347\":2,\"348\":2,\"350\":2,\"351\":2,\"353\":2,\"354\":2,\"359\":1,\"362\":2,\"363\":2,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"397\":1,\"399\":2,\"402\":17,\"410\":2,\"411\":2,\"413\":2,\"414\":2}}],[\"b\",{\"1\":{\"32\":1,\"107\":2,\"108\":2,\"196\":2,\"309\":2,\"343\":2,\"344\":2,\"391\":2,\"416\":1}}],[\"beetlsql\",{\"1\":{\"306\":1}}],[\"bean\",{\"1\":{\"256\":1,\"262\":2,\"263\":3,\"267\":1,\"269\":1,\"273\":1,\"292\":1}}],[\"benchmark\",{\"1\":{\"183\":1,\"189\":1}}],[\"begintransaction\",{\"1\":{\"199\":1,\"200\":1}}],[\"begin\",{\"1\":{\"69\":1,\"100\":2,\"102\":1,\"103\":1,\"107\":1,\"108\":1,\"109\":4,\"173\":2,\"174\":2,\"206\":3,\"402\":3}}],[\"besides\",{\"1\":{\"47\":1}}],[\"before\",{\"1\":{\"45\":1}}],[\"be\",{\"1\":{\"21\":1}}],[\"baz\",{\"0\":{\"148\":1,\"489\":1},\"1\":{\"147\":1,\"484\":1,\"488\":1}}],[\"bar\",{\"0\":{\"145\":1,\"484\":1,\"486\":1},\"1\":{\"146\":1,\"487\":1}}],[\"baseentity\",{\"1\":{\"152\":2,\"154\":4,\"397\":2,\"447\":22}}],[\"base64\",{\"1\":{\"89\":1,\"90\":3,\"91\":2,\"92\":2,\"93\":1,\"94\":1,\"95\":1,\"96\":3}}],[\"base64encryptionstrategy\",{\"1\":{\"83\":2,\"267\":1}}],[\"basically\",{\"1\":{\"18\":1}}],[\"batch\",{\"1\":{\"72\":1,\"260\":2}}],[\"batch批处理\",{\"0\":{\"70\":1}}],[\"badge\",{\"1\":{\"47\":3}}],[\"back\",{\"1\":{\"16\":1,\"48\":1}}],[\"breadcrumb\",{\"1\":{\"16\":1,\"48\":1}}],[\"byte\",{\"1\":{\"83\":1,\"315\":2}}],[\"by`\",{\"1\":{\"72\":2,\"117\":5,\"119\":1,\"122\":4,\"173\":2,\"174\":10,\"288\":2,\"309\":2,\"322\":4,\"325\":4,\"332\":2,\"335\":6,\"342\":2,\"343\":2,\"344\":2,\"359\":4,\"362\":2,\"402\":2}}],[\"by\",{\"1\":{\"16\":1,\"21\":1,\"23\":1,\"73\":1,\"194\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"338\":2,\"344\":1,\"357\":20,\"363\":2,\"383\":3,\"402\":1}}],[\"o1\",{\"1\":{\"357\":2}}],[\"out\",{\"1\":{\"288\":13,\"299\":1,\"301\":1,\"432\":1,\"438\":1}}],[\"operation\",{\"1\":{\"284\":1}}],[\"opensource<\",{\"1\":{\"272\":4}}],[\"op\",{\"1\":{\"194\":3,\"248\":3,\"293\":3}}],[\"optionconfigure\",{\"1\":{\"194\":1,\"248\":1,\"267\":1,\"269\":1,\"293\":1}}],[\"options\",{\"1\":{\"48\":1,\"323\":1}}],[\"odaul359snxsbyzqma05xa==496uk1pkxubdvpq0a7q0uq==pvhc30osr7k27xkn36fp4g==+ta\",{\"1\":{\"106\":1,\"109\":1}}],[\"objects\",{\"1\":{\"331\":1,\"434\":1,\"440\":1,\"445\":1}}],[\"objectsortbuilder\",{\"0\":{\"328\":1},\"1\":{\"329\":1,\"330\":1,\"331\":1,\"332\":1}}],[\"objectsort\",{\"0\":{\"327\":1},\"1\":{\"329\":1,\"330\":1,\"331\":1,\"332\":1}}],[\"object>格式返回\",{\"1\":{\"408\":1}}],[\"object>>\",{\"1\":{\"350\":1,\"351\":1,\"413\":1,\"414\":1}}],[\"object>\",{\"1\":{\"314\":1,\"400\":1,\"415\":1}}],[\"object\",{\"1\":{\"88\":3,\"117\":4,\"119\":2,\"122\":2,\"206\":2,\"259\":1,\"277\":1,\"310\":2,\"323\":3,\"373\":1,\"433\":1,\"434\":2,\"439\":1,\"440\":2,\"444\":1,\"445\":2,\"446\":1,\"447\":2}}],[\"o\",{\"1\":{\"78\":4,\"84\":16,\"88\":2,\"132\":3,\"133\":1,\"141\":2,\"150\":1,\"152\":2,\"154\":4,\"163\":1,\"165\":2,\"184\":1,\"185\":1,\"186\":1,\"187\":2,\"188\":1,\"194\":29,\"203\":4,\"204\":2,\"205\":8,\"206\":6,\"207\":2,\"259\":1,\"262\":3,\"273\":6,\"276\":2,\"309\":4,\"316\":1,\"322\":4,\"323\":2,\"329\":1,\"330\":1,\"331\":1,\"335\":5,\"338\":8,\"341\":2,\"343\":4,\"344\":6,\"357\":14,\"359\":10,\"361\":2,\"372\":4,\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"379\":4,\"381\":4,\"382\":17,\"383\":2,\"386\":2,\"388\":1,\"389\":1,\"390\":1,\"392\":3,\"393\":3,\"398\":14,\"399\":4,\"400\":2,\"402\":4,\"404\":5,\"405\":5,\"406\":6,\"407\":6,\"417\":2,\"418\":4,\"419\":4,\"420\":5,\"423\":2,\"424\":2,\"425\":4,\"434\":3,\"440\":3,\"445\":3,\"446\":1,\"447\":4}}],[\"override\",{\"1\":{\"83\":2,\"88\":4,\"92\":2,\"111\":1,\"117\":9,\"119\":5,\"122\":5,\"132\":4,\"262\":4,\"273\":5,\"276\":1,\"288\":7,\"292\":2,\"293\":1,\"299\":4,\"323\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"366\":3,\"369\":2,\"370\":1,\"432\":1,\"438\":1,\"447\":9}}],[\"over\",{\"1\":{\"57\":1,\"357\":13}}],[\"offset表示跳过多少条\",{\"1\":{\"310\":1}}],[\"offset\",{\"1\":{\"310\":1,\"323\":1,\"383\":1}}],[\"ofb\",{\"1\":{\"80\":3}}],[\"of\",{\"1\":{\"16\":1,\"41\":1,\"47\":1,\"48\":1,\"187\":1,\"402\":1,\"418\":1,\"419\":1,\"420\":1}}],[\"one\",{\"1\":{\"372\":2,\"375\":1,\"377\":1,\"382\":4}}],[\"onetomany\",{\"0\":{\"376\":1},\"1\":{\"372\":1,\"374\":2,\"381\":2,\"382\":1}}],[\"onetoone\",{\"0\":{\"375\":1},\"1\":{\"372\":1,\"374\":1,\"382\":1}}],[\"onconstructor\",{\"1\":{\"277\":1,\"433\":1,\"439\":1,\"444\":1,\"447\":2}}],[\"onconflictdoupdate\",{\"0\":{\"177\":1},\"1\":{\"177\":1}}],[\"onconflictdonothing\",{\"0\":{\"176\":1},\"1\":{\"176\":1}}],[\"onduplicatekeyupdate\",{\"0\":{\"174\":1},\"1\":{\"174\":3}}],[\"onduplicatekeyignore\",{\"0\":{\"173\":1},\"1\":{\"173\":1}}],[\"only\",{\"1\":{\"156\":1,\"159\":2,\"160\":4,\"171\":2,\"208\":2,\"245\":1,\"260\":5}}],[\"on\",{\"1\":{\"16\":1,\"96\":1,\"174\":3,\"176\":1,\"177\":1,\"194\":1,\"309\":1,\"318\":1,\"323\":4,\"331\":1,\"335\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"357\":1,\"362\":2,\"363\":2,\"383\":3,\"399\":2,\"418\":1,\"419\":1}}],[\"or条件\",{\"0\":{\"358\":1}}],[\"orm\",{\"1\":{\"306\":2}}],[\"orm的性能主要有3部分组成\",{\"1\":{\"178\":1}}],[\"order`\",{\"1\":{\"439\":10,\"440\":4}}],[\"orderentity\",{\"1\":{\"433\":7,\"434\":10,\"439\":7,\"440\":10,\"444\":9,\"445\":17,\"446\":7}}],[\"orderentities\",{\"1\":{\"433\":3,\"439\":3,\"444\":3}}],[\"order=null\",{\"1\":{\"398\":1}}],[\"order=2\",{\"1\":{\"398\":4,\"399\":2}}],[\"ordershardingtablecontroller\",{\"1\":{\"444\":1}}],[\"ordershardingtable\",{\"1\":{\"444\":1}}],[\"ordershardingdatasourcecontroller\",{\"1\":{\"439\":1}}],[\"ordershardingdatasource\",{\"1\":{\"439\":1}}],[\"ordershardingdatasourceandtablecontroller\",{\"1\":{\"433\":1}}],[\"ordershardingdatasourceandtable\",{\"1\":{\"433\":1}}],[\"orders\",{\"1\":{\"330\":1,\"331\":1}}],[\"orders=new\",{\"1\":{\"330\":1,\"331\":1}}],[\"orderbyobject\",{\"1\":{\"329\":1,\"330\":1,\"331\":1,\"332\":2}}],[\"orderbydynamic\",{\"1\":{\"310\":1}}],[\"orderbyasc\",{\"1\":{\"194\":3,\"402\":1}}],[\"orderby\",{\"1\":{\"150\":1,\"310\":1,\"328\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"395\":1}}],[\"order\",{\"1\":{\"114\":1,\"194\":2,\"321\":1,\"324\":1,\"329\":1,\"330\":4,\"331\":5,\"332\":1,\"357\":13,\"372\":1,\"383\":1,\"385\":1,\"397\":1,\"398\":1,\"399\":1,\"402\":1,\"433\":10,\"434\":6,\"442\":3}}],[\"or\",{\"1\":{\"18\":1,\"184\":3,\"185\":3,\"186\":3,\"194\":2,\"359\":20}}],[\"org\",{\"1\":{\"10\":6,\"268\":6,\"284\":2,\"286\":5}}],[\"oracledatabaseconfiguration\",{\"1\":{\"269\":1}}],[\"oracle\",{\"1\":{\"8\":4}}],[\"f1\",{\"1\":{\"318\":4}}],[\"f\",{\"1\":{\"316\":16,\"317\":12,\"318\":4}}],[\"further\",{\"1\":{\"284\":1}}],[\"fun\",{\"1\":{\"284\":1}}],[\"func接口\",{\"1\":{\"87\":1}}],[\"func能力实现单列的数据库函数\",{\"1\":{\"85\":1}}],[\"function<string\",{\"1\":{\"334\":4}}],[\"functions\",{\"1\":{\"23\":1}}],[\"function\",{\"1\":{\"15\":1,\"16\":1,\"39\":1}}],[\"fhs\",{\"1\":{\"272\":4}}],[\"float\",{\"1\":{\"315\":1,\"325\":1}}],[\"flowchart\",{\"0\":{\"36\":1}}],[\"flexaccount\",{\"1\":{\"188\":6}}],[\"flex的优点是快速生成sql\",{\"1\":{\"186\":1}}],[\"flex的性能比较模板增加额外10000次获取来判断反序列化性能\",{\"1\":{\"149\":1}}],[\"flex大概是其3倍\",{\"1\":{\"186\":1}}],[\"flex相近甚至更快\",{\"1\":{\"182\":1}}],[\"flex和mybaits\",{\"1\":{\"182\":1}}],[\"flex\",{\"1\":{\"182\":1,\"183\":1,\"184\":4,\"185\":4,\"186\":3,\"187\":3,\"188\":6}}],[\"feature\",{\"0\":{\"145\":1,\"302\":1},\"1\":{\"146\":1,\"148\":1,\"303\":1,\"305\":1}}],[\"features\",{\"0\":{\"14\":1,\"16\":1},\"1\":{\"16\":1}}],[\"failsafe\",{\"1\":{\"286\":1}}],[\"failed\",{\"1\":{\"73\":1,\"284\":1}}],[\"false多对多必填\",{\"1\":{\"373\":2}}],[\"false表示不删除\",{\"1\":{\"217\":1}}],[\"false表示未被删除\",{\"1\":{\"128\":1,\"217\":1}}],[\"false\",{\"1\":{\"72\":9,\"76\":1,\"114\":1,\"127\":4,\"143\":3,\"144\":4,\"156\":1,\"158\":1,\"164\":1,\"165\":1,\"173\":6,\"174\":12,\"187\":1,\"196\":1,\"213\":4,\"245\":1,\"246\":1,\"318\":1,\"322\":2,\"323\":2,\"324\":1,\"325\":2,\"330\":1,\"331\":1,\"332\":2,\"335\":3,\"337\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"373\":3,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"402\":2,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"418\":1,\"419\":1,\"420\":1,\"423\":1,\"447\":2}}],[\"fillsetterexpression\",{\"1\":{\"337\":3}}],[\"fillone\",{\"1\":{\"337\":2}}],[\"fillmany\",{\"1\":{\"336\":1,\"337\":3}}],[\"fill\",{\"0\":{\"336\":1}}],[\"filter\",{\"1\":{\"317\":2}}],[\"file\",{\"1\":{\"18\":1}}],[\"files\",{\"0\":{\"39\":1},\"1\":{\"18\":2,\"47\":1}}],[\"findbyid\",{\"1\":{\"273\":2}}],[\"findbyids\",{\"1\":{\"273\":2}}],[\"final\",{\"1\":{\"88\":4,\"92\":1,\"132\":1,\"262\":1,\"277\":1,\"299\":1,\"323\":2,\"332\":1,\"366\":5,\"369\":2,\"370\":3,\"397\":1,\"433\":1,\"439\":1,\"444\":1,\"447\":4}}],[\"finally\",{\"1\":{\"69\":1,\"100\":1,\"107\":1,\"108\":1,\"109\":1,\"206\":3,\"401\":1}}],[\"fixshardinginitializer\",{\"1\":{\"267\":1}}],[\"first\",{\"1\":{\"337\":3}}],[\"firstnotnull\",{\"1\":{\"164\":1,\"206\":3,\"434\":2,\"440\":2,\"445\":2,\"446\":1}}],[\"firstornull\",{\"1\":{\"69\":1,\"78\":3,\"84\":8,\"94\":1,\"95\":1,\"96\":1,\"107\":2,\"108\":1,\"109\":2,\"117\":1,\"122\":1,\"127\":1,\"133\":1,\"139\":1,\"150\":1,\"184\":1,\"202\":1,\"206\":1,\"207\":1,\"208\":2,\"273\":2,\"299\":1,\"300\":1,\"301\":1,\"310\":1,\"341\":1,\"359\":4,\"398\":5,\"399\":2,\"423\":1,\"424\":1,\"425\":1}}],[\"field\",{\"1\":{\"273\":1,\"284\":1}}],[\"field2\",{\"1\":{\"154\":1}}],[\"field1\",{\"1\":{\"154\":1}}],[\"freesql\",{\"1\":{\"306\":1}}],[\"free\",{\"1\":{\"47\":1}}],[\"from\",{\"1\":{\"18\":1,\"78\":3,\"84\":8,\"85\":1,\"88\":1,\"90\":2,\"91\":2,\"92\":1,\"94\":2,\"96\":2,\"107\":1,\"108\":1,\"109\":2,\"117\":1,\"122\":3,\"127\":2,\"129\":2,\"133\":2,\"139\":1,\"150\":2,\"158\":2,\"161\":1,\"163\":2,\"164\":1,\"165\":1,\"194\":2,\"207\":1,\"245\":1,\"259\":1,\"284\":2,\"288\":1,\"299\":1,\"300\":1,\"301\":1,\"309\":3,\"317\":3,\"318\":1,\"322\":2,\"323\":2,\"325\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"335\":3,\"338\":2,\"341\":1,\"342\":1,\"343\":2,\"344\":2,\"347\":2,\"348\":2,\"350\":2,\"351\":2,\"357\":5,\"359\":5,\"361\":2,\"362\":2,\"363\":3,\"375\":2,\"376\":2,\"377\":2,\"378\":3,\"379\":4,\"381\":6,\"382\":11,\"383\":5,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"391\":2,\"392\":2,\"393\":2,\"398\":5,\"399\":2,\"402\":1,\"404\":3,\"405\":3,\"406\":3,\"407\":3,\"410\":2,\"411\":2,\"413\":2,\"414\":2,\"416\":3,\"417\":4,\"418\":4,\"419\":4,\"420\":3,\"423\":1,\"425\":1,\"434\":4,\"440\":2,\"445\":2,\"446\":2}}],[\"frontmatter\",{\"1\":{\"16\":1,\"20\":3,\"46\":1,\"48\":1,\"450\":1,\"454\":3,\"479\":1,\"481\":1}}],[\"found\",{\"1\":{\"332\":1,\"400\":1}}],[\"foo\",{\"0\":{\"302\":1,\"485\":1,\"490\":1},\"1\":{\"303\":1,\"491\":1}}],[\"footnote\",{\"0\":{\"30\":1},\"1\":{\"30\":1,\"44\":1}}],[\"footer\",{\"1\":{\"16\":1,\"48\":1}}],[\"format会拼接到字符串上\",{\"1\":{\"356\":1}}],[\"format\",{\"1\":{\"88\":3,\"356\":1}}],[\"for\",{\"1\":{\"20\":1,\"22\":1,\"47\":3,\"166\":1,\"273\":2,\"276\":2,\"284\":1,\"299\":1,\"330\":1,\"331\":1,\"332\":1,\"402\":1,\"432\":2,\"433\":1,\"438\":2,\"439\":1,\"444\":1}}],[\"following\",{\"1\":{\"16\":1}}],[\"xiaolan\",{\"1\":{\"433\":4,\"439\":4,\"444\":4}}],[\"xiaohong\",{\"1\":{\"433\":4,\"439\":4,\"444\":4}}],[\"xiaoming1\",{\"1\":{\"117\":2,\"119\":1,\"122\":3}}],[\"xiaoming\",{\"1\":{\"117\":3,\"433\":5,\"439\":5,\"444\":5}}],[\"xx\",{\"1\":{\"391\":1}}],[\"xxx\",{\"1\":{\"174\":2,\"200\":2,\"335\":1}}],[\"xxxxxxx\",{\"1\":{\"93\":2,\"95\":1}}],[\"xjm<\",{\"1\":{\"286\":1}}],[\"xsd\",{\"1\":{\"286\":2}}],[\"xsi\",{\"1\":{\"286\":1}}],[\"xsi=\",{\"1\":{\"286\":1}}],[\"xmlschema\",{\"1\":{\"286\":1}}],[\"xmlns=\",{\"1\":{\"286\":1}}],[\"xmlns\",{\"1\":{\"286\":1}}],[\"xml\",{\"1\":{\"286\":1}}],[\"xuejiaming\",{\"1\":{\"117\":1,\"119\":1}}],[\"xuejm\",{\"1\":{\"58\":1}}],[\"xuejmnet\",{\"1\":{\"58\":1,\"183\":1,\"189\":1}}],[\"x版本都可以直接升级上来\",{\"1\":{\"13\":1}}],[\"x\",{\"1\":{\"13\":1,\"68\":2,\"122\":1,\"335\":3,\"337\":12,\"357\":20,\"359\":6,\"381\":5,\"392\":3,\"393\":3,\"404\":1,\"405\":1,\"422\":12}}],[\"爱心\",{\"0\":{\"12\":1}}],[\"服务支持\",{\"0\":{\"11\":1}}],[\"<>\",{\"1\":{\"422\":1}}],[\"<=\",{\"1\":{\"318\":1,\"322\":6,\"325\":2,\"359\":5,\"402\":1,\"422\":9}}],[\"<==\",{\"1\":{\"72\":1,\"78\":4,\"84\":11,\"93\":1,\"94\":2,\"95\":1,\"96\":3,\"106\":1,\"107\":2,\"108\":1,\"109\":3,\"117\":4,\"119\":1,\"122\":5,\"127\":4,\"129\":3,\"133\":5,\"139\":2,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"163\":2,\"164\":1,\"165\":2,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"173\":1,\"174\":3,\"194\":4,\"203\":1,\"204\":1,\"205\":4,\"206\":3,\"207\":3,\"208\":2,\"259\":2,\"288\":2,\"299\":3,\"300\":2,\"301\":3,\"309\":1,\"317\":6,\"318\":2,\"322\":4,\"325\":4,\"335\":3,\"338\":2,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"347\":1,\"348\":1,\"350\":1,\"351\":1,\"353\":1,\"354\":1,\"359\":10,\"361\":2,\"362\":2,\"363\":2,\"375\":4,\"376\":4,\"377\":4,\"378\":6,\"379\":8,\"381\":12,\"382\":22,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":2,\"393\":2,\"398\":10,\"399\":4,\"402\":1,\"404\":2,\"405\":2,\"406\":2,\"407\":2,\"410\":1,\"411\":1,\"413\":1,\"414\":1,\"417\":2,\"418\":2,\"419\":2,\"420\":2,\"423\":2,\"425\":2,\"433\":10,\"434\":8,\"439\":10,\"440\":6,\"444\":10,\"445\":6,\"446\":3}}],[\"<mainclass>mainkt<\",{\"1\":{\"286\":1}}],[\"<modelversion>4\",{\"1\":{\"286\":1}}],[\"<sourcedirectory>src\",{\"1\":{\"286\":1}}],[\"<scope>test<\",{\"1\":{\"272\":1,\"286\":2}}],[\"<scope>compile<\",{\"1\":{\"192\":3,\"255\":1}}],[\"<build>\",{\"1\":{\"286\":1}}],[\"<url>https\",{\"1\":{\"286\":1}}],[\"<id>test\",{\"1\":{\"286\":1}}],[\"<id>compile<\",{\"1\":{\"286\":1}}],[\"<id>mavencentral<\",{\"1\":{\"286\":1}}],[\"<id>kapt<\",{\"1\":{\"281\":1,\"286\":1}}],[\"<repository>\",{\"1\":{\"286\":1}}],[\"<repositories>\",{\"1\":{\"286\":1}}],[\"<kotlin\",{\"1\":{\"286\":2}}],[\"<name>consoleapp<\",{\"1\":{\"286\":1}}],[\"<phase>test\",{\"1\":{\"286\":1}}],[\"<phase>compile<\",{\"1\":{\"286\":1}}],[\"<plugin>\",{\"1\":{\"286\":4}}],[\"<plugins>\",{\"1\":{\"286\":1}}],[\"<packaging>jar<\",{\"1\":{\"286\":1}}],[\"<path>\",{\"1\":{\"281\":1,\"286\":1}}],[\"<project\",{\"1\":{\"286\":2}}],[\"<properties>\",{\"1\":{\"237\":1,\"240\":1,\"242\":1,\"243\":1,\"266\":1,\"286\":1}}],[\"<annotationprocessorpaths>\",{\"1\":{\"281\":1,\"286\":1}}],[\"<artifactid>fastjson<\",{\"1\":{\"301\":1}}],[\"<artifactid>junit\",{\"1\":{\"286\":1}}],[\"<artifactid>exec\",{\"1\":{\"286\":1}}],[\"<artifactid>easy\",{\"1\":{\"272\":4}}],[\"<artifactid>maven\",{\"1\":{\"286\":2}}],[\"<artifactid>mysql\",{\"1\":{\"192\":1,\"255\":1,\"272\":1,\"280\":1,\"286\":1}}],[\"<artifactid>kotlin\",{\"1\":{\"286\":3}}],[\"<artifactid>untitled2<\",{\"1\":{\"286\":1}}],[\"<artifactid>druid\",{\"1\":{\"272\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"192\":1,\"255\":1,\"272\":1}}],[\"<artifactid>hikaricp<\",{\"1\":{\"192\":1,\"255\":1,\"280\":1,\"286\":1}}],[\"<artifactid>solon\",{\"1\":{\"255\":1}}],[\"<artifactid>sql\",{\"1\":{\"192\":3,\"237\":4,\"240\":1,\"242\":1,\"243\":4,\"255\":1,\"266\":1,\"272\":1,\"280\":3,\"281\":1,\"286\":4}}],[\"<artifactid>spring\",{\"1\":{\"10\":1,\"268\":1,\"272\":4}}],[\"<configuration>\",{\"1\":{\"281\":1,\"286\":2}}],[\"<goal>test\",{\"1\":{\"286\":1}}],[\"<goal>compile<\",{\"1\":{\"286\":1}}],[\"<goal>kapt<\",{\"1\":{\"281\":1,\"286\":1}}],[\"<goals>\",{\"1\":{\"281\":1,\"286\":3}}],[\"<groupid>mysql<\",{\"1\":{\"192\":1,\"255\":1,\"272\":1,\"280\":1,\"286\":1}}],[\"<groupid>com\",{\"1\":{\"192\":4,\"237\":4,\"240\":1,\"242\":1,\"243\":4,\"255\":2,\"266\":1,\"272\":6,\"280\":4,\"281\":1,\"286\":6,\"301\":1}}],[\"<groupid>org\",{\"1\":{\"10\":1,\"192\":1,\"255\":2,\"268\":1,\"272\":5,\"286\":5}}],[\"<executions>\",{\"1\":{\"286\":1}}],[\"<execution>\",{\"1\":{\"281\":1,\"286\":3}}],[\"<easy\",{\"1\":{\"237\":1,\"240\":1,\"242\":1,\"243\":1,\"266\":1}}],[\"<dependencies>\",{\"1\":{\"272\":1,\"286\":1}}],[\"<dependency>\",{\"1\":{\"10\":1,\"192\":6,\"237\":4,\"240\":1,\"242\":1,\"243\":4,\"255\":5,\"266\":1,\"268\":1,\"272\":12,\"280\":5,\"286\":8,\"301\":1}}],[\"<version>5\",{\"1\":{\"286\":1}}],[\"<version>2\",{\"1\":{\"255\":1,\"272\":4,\"286\":2,\"301\":1}}],[\"<version>latest\",{\"1\":{\"255\":1}}],[\"<version>3\",{\"1\":{\"192\":1,\"255\":1,\"280\":1,\"286\":1}}],[\"<version>8\",{\"1\":{\"192\":1,\"255\":1,\"272\":1,\"280\":1,\"286\":1}}],[\"<version>1\",{\"1\":{\"192\":3,\"255\":1,\"272\":3,\"280\":3,\"281\":1,\"286\":9}}],[\"<version>$\",{\"1\":{\"192\":1,\"237\":4,\"240\":1,\"242\":1,\"243\":4,\"266\":1}}],[\"<t>\",{\"1\":{\"366\":2}}],[\"<trentity>\",{\"1\":{\"337\":2}}],[\"<tprovider>\",{\"1\":{\"295\":1}}],[\"<tproperty>\",{\"1\":{\"295\":1}}],[\"<testsourcedirectory>src\",{\"1\":{\"286\":1}}],[\"<t\",{\"1\":{\"88\":2,\"299\":1}}],[\"<\",{\"1\":{\"10\":1,\"166\":1,\"192\":13,\"237\":13,\"240\":3,\"242\":3,\"243\":13,\"255\":5,\"266\":3,\"268\":1,\"272\":15,\"280\":6,\"281\":5,\"286\":33,\"301\":1,\"422\":9,\"432\":1,\"433\":1,\"438\":1,\"439\":1,\"444\":1}}],[\"1+\",{\"1\":{\"372\":1}}],[\"14\",{\"1\":{\"393\":1}}],[\"14t22\",{\"1\":{\"322\":4,\"325\":3}}],[\"14+有效\",{\"1\":{\"156\":1}}],[\"1就是help\",{\"1\":{\"275\":1}}],[\"1<\",{\"1\":{\"192\":1,\"255\":1,\"280\":1,\"286\":1}}],[\"189373\",{\"1\":{\"440\":1}}],[\"18<\",{\"1\":{\"255\":1,\"272\":1}}],[\"180\",{\"1\":{\"188\":2}}],[\"187\",{\"1\":{\"188\":2}}],[\"183\",{\"1\":{\"188\":2}}],[\"18\",{\"1\":{\"187\":6,\"192\":1,\"255\":1,\"272\":1,\"301\":1}}],[\"18t21\",{\"1\":{\"168\":1}}],[\"1l\",{\"1\":{\"139\":1,\"141\":1,\"143\":1,\"144\":2,\"447\":1}}],[\"15<\",{\"1\":{\"272\":1}}],[\"15\",{\"1\":{\"133\":1,\"207\":2,\"444\":10}}],[\"17<\",{\"1\":{\"192\":1}}],[\"177\",{\"1\":{\"188\":1}}],[\"179\",{\"1\":{\"188\":1}}],[\"176\",{\"1\":{\"188\":1}}],[\"17t21\",{\"1\":{\"168\":1,\"169\":1}}],[\"17\",{\"1\":{\"95\":1,\"194\":1,\"259\":1,\"359\":1}}],[\"170029046\",{\"0\":{\"6\":1,\"55\":1},\"1\":{\"58\":1}}],[\"110\",{\"1\":{\"208\":1}}],[\"110734184\",{\"1\":{\"73\":1}}],[\"115\",{\"1\":{\"207\":1}}],[\"114\",{\"1\":{\"168\":10}}],[\"11xx\",{\"1\":{\"133\":2}}],[\"111\",{\"1\":{\"194\":2,\"316\":4,\"317\":6,\"318\":2}}],[\"111xx\",{\"1\":{\"129\":2}}],[\"1111234\",{\"1\":{\"96\":4}}],[\"111123456\",{\"1\":{\"95\":2}}],[\"11\",{\"1\":{\"127\":5,\"144\":1}}],[\"10倍\",{\"1\":{\"184\":1}}],[\"10+\",{\"1\":{\"184\":1,\"185\":1}}],[\"108\",{\"1\":{\"168\":1}}],[\"107\",{\"1\":{\"168\":1,\"206\":1}}],[\"106\",{\"1\":{\"168\":1}}],[\"105\",{\"1\":{\"168\":1}}],[\"104\",{\"1\":{\"168\":1}}],[\"103\",{\"1\":{\"168\":1}}],[\"101\",{\"1\":{\"133\":1,\"168\":1,\"169\":1,\"259\":1}}],[\"10000\",{\"1\":{\"184\":3,\"185\":3,\"186\":7}}],[\"100\",{\"1\":{\"114\":1,\"127\":1,\"129\":1,\"133\":1,\"167\":1,\"168\":1,\"169\":1,\"184\":3,\"185\":3,\"186\":3,\"187\":3,\"206\":3,\"318\":2,\"347\":1,\"350\":1,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"402\":2,\"405\":1,\"407\":1,\"410\":1,\"413\":1,\"431\":1,\"432\":1,\"433\":1,\"437\":1,\"438\":1,\"439\":1,\"443\":1,\"444\":1}}],[\"10\",{\"1\":{\"94\":1,\"139\":1,\"140\":1,\"166\":1,\"168\":1,\"183\":1,\"184\":1,\"185\":5,\"186\":1,\"187\":1,\"188\":1,\"208\":2,\"251\":2,\"318\":1,\"337\":1,\"418\":1,\"431\":1,\"432\":1,\"433\":1,\"437\":1,\"438\":1,\"439\":1,\"443\":1,\"444\":1}}],[\"109\",{\"1\":{\"93\":1,\"168\":1}}],[\"10t14\",{\"1\":{\"93\":1,\"94\":1,\"95\":1}}],[\"102\",{\"1\":{\"78\":1,\"84\":3,\"168\":1}}],[\"1024\",{\"1\":{\"71\":2,\"196\":1,\"245\":2,\"246\":1}}],[\"192705\",{\"1\":{\"433\":1}}],[\"192703\",{\"1\":{\"433\":1}}],[\"192701\",{\"1\":{\"433\":1}}],[\"192698\",{\"1\":{\"433\":1}}],[\"192696\",{\"1\":{\"433\":1}}],[\"192691\",{\"1\":{\"433\":1}}],[\"192693\",{\"1\":{\"433\":1}}],[\"192664\",{\"1\":{\"433\":1}}],[\"192688\",{\"1\":{\"433\":1}}],[\"192684\",{\"1\":{\"433\":1}}],[\"197\",{\"1\":{\"381\":1}}],[\"196\",{\"1\":{\"188\":1}}],[\"19\",{\"1\":{\"187\":1,\"188\":1,\"301\":1,\"417\":1,\"440\":1}}],[\"19t21\",{\"1\":{\"168\":1}}],[\"19th\",{\"1\":{\"27\":1,\"460\":1}}],[\"19876543210\",{\"1\":{\"84\":1}}],[\"133\",{\"1\":{\"423\":1}}],[\"13\",{\"1\":{\"117\":1,\"119\":1,\"133\":1,\"167\":1,\"299\":1,\"382\":1,\"445\":1}}],[\"13232323232\",{\"1\":{\"106\":1,\"139\":2,\"140\":1,\"143\":2,\"144\":2}}],[\"13232323321\",{\"1\":{\"84\":1}}],[\"13232456789\",{\"1\":{\"93\":2}}],[\"134\",{\"1\":{\"10\":1,\"268\":1}}],[\"16t21\",{\"1\":{\"167\":1,\"168\":1,\"169\":1}}],[\"16位秘钥\",{\"1\":{\"83\":1}}],[\"16位向量\",{\"1\":{\"83\":1}}],[\"16\",{\"1\":{\"80\":17,\"83\":1,\"300\":1}}],[\"12<\",{\"1\":{\"192\":2}}],[\"12662\",{\"1\":{\"186\":1}}],[\"12969\",{\"1\":{\"186\":1}}],[\"128\",{\"1\":{\"196\":1,\"246\":1}}],[\"12806\",{\"1\":{\"186\":1}}],[\"12812\",{\"1\":{\"186\":1}}],[\"12\",{\"1\":{\"95\":1,\"169\":2,\"203\":3,\"208\":1,\"288\":1,\"299\":2}}],[\"12728\",{\"1\":{\"186\":1}}],[\"12721\",{\"1\":{\"186\":1}}],[\"12731\",{\"1\":{\"186\":1}}],[\"12743\",{\"1\":{\"186\":1}}],[\"12779\",{\"1\":{\"186\":1}}],[\"12759\",{\"1\":{\"186\":1}}],[\"127\",{\"1\":{\"71\":1,\"194\":1,\"258\":1,\"260\":1,\"284\":2,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"123xxx\",{\"1\":{\"423\":2,\"424\":1,\"425\":2}}],[\"123321\",{\"1\":{\"417\":2,\"418\":2,\"419\":2,\"420\":2}}],[\"123321123321xxx1\",{\"1\":{\"200\":1}}],[\"123321123321xxx\",{\"1\":{\"200\":1}}],[\"1231\",{\"1\":{\"301\":4}}],[\"12345678\",{\"1\":{\"93\":2,\"95\":1}}],[\"123456789000\",{\"1\":{\"106\":1}}],[\"1234567890abcdef\",{\"1\":{\"83\":1}}],[\"1234567890123456\",{\"1\":{\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":3}}],[\"12345678901\",{\"1\":{\"78\":4,\"84\":2}}],[\"12345\",{\"1\":{\"93\":2,\"94\":2,\"95\":2,\"96\":2,\"122\":9}}],[\"123\",{\"1\":{\"69\":2,\"117\":13,\"119\":2,\"141\":6,\"152\":3,\"154\":6,\"159\":5,\"160\":13,\"161\":3,\"171\":5,\"194\":5,\"288\":1,\"299\":6,\"300\":2,\"301\":4,\"316\":4,\"317\":6,\"318\":2,\"335\":6,\"406\":2,\"418\":2,\"419\":2,\"420\":2}}],[\"1\",{\"0\":{\"163\":1,\"167\":1,\"203\":1},\"1\":{\"13\":1,\"17\":12,\"24\":1,\"30\":1,\"46\":1,\"69\":3,\"71\":1,\"72\":9,\"78\":11,\"84\":21,\"92\":2,\"93\":1,\"94\":2,\"95\":1,\"96\":3,\"106\":3,\"107\":8,\"108\":2,\"109\":6,\"117\":5,\"119\":1,\"122\":5,\"127\":4,\"129\":1,\"133\":6,\"139\":7,\"140\":4,\"141\":7,\"143\":6,\"144\":9,\"163\":2,\"164\":1,\"167\":1,\"168\":1,\"169\":2,\"170\":2,\"173\":11,\"174\":21,\"184\":1,\"192\":2,\"194\":1,\"200\":2,\"203\":2,\"204\":1,\"205\":6,\"206\":3,\"207\":4,\"208\":2,\"246\":1,\"251\":4,\"258\":1,\"260\":1,\"274\":5,\"275\":1,\"277\":2,\"284\":6,\"286\":1,\"288\":1,\"299\":5,\"300\":2,\"301\":3,\"309\":1,\"310\":1,\"322\":7,\"323\":3,\"325\":6,\"331\":1,\"337\":1,\"338\":2,\"341\":2,\"342\":1,\"343\":1,\"344\":1,\"348\":3,\"351\":3,\"353\":3,\"354\":3,\"357\":6,\"359\":14,\"361\":3,\"362\":5,\"363\":3,\"370\":1,\"371\":4,\"372\":1,\"375\":1,\"378\":1,\"379\":1,\"381\":3,\"382\":2,\"383\":2,\"398\":10,\"399\":4,\"402\":8,\"404\":4,\"405\":3,\"407\":2,\"411\":3,\"414\":3,\"416\":1,\"418\":4,\"419\":4,\"420\":4,\"423\":1,\"425\":1,\"431\":1,\"432\":2,\"433\":27,\"434\":25,\"437\":1,\"438\":2,\"439\":21,\"440\":16,\"443\":1,\"444\":15,\"445\":22,\"446\":3,\"451\":12,\"458\":1,\"463\":1,\"465\":1,\"479\":2}}],[\"gt\",{\"1\":{\"422\":1}}],[\"gt等的第一个boolean条件\",{\"1\":{\"323\":1}}],[\"goals>\",{\"1\":{\"281\":1,\"286\":3}}],[\"goal>\",{\"1\":{\"281\":1,\"286\":3}}],[\"greater\",{\"1\":{\"324\":2}}],[\"graalvm\",{\"1\":{\"251\":1}}],[\"group分页\",{\"0\":{\"363\":1}}],[\"groupingby\",{\"1\":{\"276\":1}}],[\"groupid>\",{\"1\":{\"10\":1,\"192\":6,\"237\":4,\"240\":1,\"242\":1,\"243\":4,\"255\":5,\"266\":1,\"268\":1,\"272\":12,\"280\":5,\"281\":1,\"286\":12,\"301\":1}}],[\"groupby\",{\"1\":{\"150\":1,\"310\":1,\"338\":2,\"340\":1,\"344\":1,\"363\":1,\"383\":1,\"395\":1}}],[\"group\",{\"0\":{\"54\":1,\"344\":1},\"1\":{\"260\":1,\"338\":2,\"344\":1,\"363\":2,\"383\":3}}],[\"gmail\",{\"1\":{\"187\":1}}],[\"gjcgjgw==uh8putsdsuitj+rlvsnjoa==2epplfmm+o7bmtpj7xh7ca==\",{\"1\":{\"84\":1}}],[\"guide\",{\"1\":{\"46\":2}}],[\"ge\",{\"1\":{\"184\":3,\"185\":3,\"186\":3,\"187\":3,\"188\":3,\"259\":1,\"318\":1,\"323\":1,\"418\":1,\"419\":1,\"420\":1,\"422\":1,\"423\":1}}],[\"generatedsqlcolumngenerator\",{\"1\":{\"111\":1}}],[\"generatedkey\",{\"1\":{\"111\":1,\"170\":1,\"213\":1}}],[\"generate\",{\"1\":{\"18\":2}}],[\"getblogcount\",{\"1\":{\"392\":1,\"393\":1}}],[\"getlist\",{\"1\":{\"369\":2,\"371\":1}}],[\"getorders\",{\"1\":{\"330\":2,\"331\":2}}],[\"getorder\",{\"1\":{\"322\":6,\"398\":1,\"402\":1}}],[\"getorder不为null是添加查询条件\",{\"1\":{\"322\":2}}],[\"getvalue\",{\"1\":{\"276\":1,\"332\":1,\"432\":1,\"438\":1}}],[\"getrelationgroupsize\",{\"1\":{\"267\":1,\"269\":1}}],[\"getruntime\",{\"1\":{\"246\":1}}],[\"getruntimecontext\",{\"1\":{\"69\":1,\"92\":1,\"100\":1,\"107\":1,\"108\":1,\"109\":1,\"206\":3,\"267\":1,\"297\":1,\"432\":1,\"438\":1}}],[\"getmobile\",{\"1\":{\"357\":1}}],[\"getmessage\",{\"1\":{\"332\":1}}],[\"getmulticonnwaittimeoutmillis\",{\"1\":{\"267\":1,\"269\":1}}],[\"getmaxshardingroutecount\",{\"1\":{\"267\":1,\"269\":1}}],[\"getmaxshardingquerylimit\",{\"1\":{\"267\":1,\"269\":1}}],[\"getmapping\",{\"1\":{\"206\":1,\"277\":1,\"433\":1,\"434\":2,\"439\":1,\"440\":2,\"444\":1,\"445\":2,\"446\":1}}],[\"getenable\",{\"1\":{\"323\":1}}],[\"getenumconstants\",{\"1\":{\"299\":1}}],[\"getexecutorqueuesize\",{\"1\":{\"267\":1,\"269\":1}}],[\"getexecutorcorepoolsize\",{\"1\":{\"267\":1,\"269\":1}}],[\"getexecutormaximumpoolsize\",{\"1\":{\"267\":1,\"269\":1}}],[\"getemail\",{\"1\":{\"187\":1}}],[\"getnickname\",{\"1\":{\"188\":3,\"323\":1}}],[\"getname\",{\"1\":{\"92\":1,\"276\":1,\"337\":1}}],[\"getfield2\",{\"1\":{\"154\":2}}],[\"getfield1\",{\"1\":{\"154\":2}}],[\"getfunccolumn\",{\"1\":{\"88\":2}}],[\"getschoolteachers\",{\"1\":{\"378\":1,\"379\":1,\"382\":3}}],[\"getschoolclass\",{\"1\":{\"377\":1,\"382\":6}}],[\"getschoolstudents\",{\"1\":{\"376\":1,\"379\":1,\"382\":3}}],[\"getschoolstudentaddress\",{\"1\":{\"372\":2,\"375\":1,\"382\":4}}],[\"getscore\",{\"1\":{\"363\":1,\"383\":1,\"398\":2,\"402\":1}}],[\"getselector\",{\"1\":{\"273\":2}}],[\"getsetcolumns\",{\"1\":{\"119\":2,\"447\":2}}],[\"getshardingexecutetimeoutmillis\",{\"1\":{\"267\":1,\"269\":1}}],[\"getsimplename\",{\"1\":{\"212\":1}}],[\"getstreamiterable\",{\"1\":{\"402\":1}}],[\"getstrategy\",{\"1\":{\"132\":1,\"262\":1,\"447\":1}}],[\"getstoreid\",{\"1\":{\"357\":3}}],[\"getstatus\",{\"1\":{\"322\":2,\"402\":1,\"434\":2,\"440\":2,\"445\":2}}],[\"getstatuslist\",{\"1\":{\"322\":4}}],[\"getstars\",{\"1\":{\"177\":1,\"203\":2,\"204\":1,\"205\":4,\"207\":1,\"259\":1,\"418\":1,\"419\":1,\"420\":1}}],[\"getstar\",{\"1\":{\"174\":2,\"318\":2,\"393\":1,\"402\":2,\"420\":1}}],[\"getdata\",{\"1\":{\"366\":2,\"370\":1}}],[\"getdatasourcemanager\",{\"1\":{\"263\":1,\"432\":1,\"438\":1}}],[\"getdatasourceroutemanager\",{\"1\":{\"263\":1}}],[\"getdefid\",{\"1\":{\"323\":1}}],[\"getdefaultdatasourcemergepoolsize\",{\"1\":{\"267\":1,\"269\":1}}],[\"getdefaultdatasourcename\",{\"1\":{\"267\":1,\"269\":1}}],[\"getdeleted\",{\"1\":{\"402\":1,\"447\":1}}],[\"getdeletedsqlexpression\",{\"1\":{\"132\":1,\"262\":1,\"447\":1}}],[\"getdeletethrow\",{\"1\":{\"267\":1,\"269\":1}}],[\"getdialect\",{\"1\":{\"92\":1}}],[\"gettop\",{\"1\":{\"402\":1}}],[\"gettotalcount\",{\"1\":{\"369\":2,\"371\":1}}],[\"gettotallines\",{\"1\":{\"366\":3}}],[\"gettotal\",{\"1\":{\"366\":2,\"370\":1}}],[\"gettype\",{\"1\":{\"276\":1}}],[\"gettable\",{\"1\":{\"273\":2}}],[\"gettableroutemanager\",{\"1\":{\"263\":1}}],[\"gettitle\",{\"1\":{\"117\":2,\"119\":2,\"122\":2,\"129\":2,\"152\":2,\"154\":7,\"163\":1,\"177\":1,\"204\":1,\"316\":2,\"317\":4,\"318\":4,\"329\":1,\"330\":1,\"331\":1,\"335\":1,\"342\":1,\"359\":10,\"362\":1,\"363\":1,\"383\":1,\"390\":1,\"392\":1,\"393\":1,\"402\":1}}],[\"gettenantid\",{\"1\":{\"117\":4,\"122\":3}}],[\"gettrackmanager\",{\"1\":{\"69\":1,\"100\":1,\"107\":1,\"108\":1,\"109\":1,\"206\":3}}],[\"getusername\",{\"1\":{\"184\":1,\"185\":1,\"186\":1,\"188\":3,\"323\":1}}],[\"getuserid\",{\"1\":{\"117\":5,\"119\":4,\"122\":1,\"132\":2,\"447\":5}}],[\"getupdatebatchthreshold\",{\"1\":{\"267\":1,\"269\":1}}],[\"getupdateby\",{\"1\":{\"117\":1,\"119\":1,\"402\":1,\"447\":1}}],[\"getupdatestrategy\",{\"1\":{\"267\":1,\"269\":1}}],[\"getupdatetime\",{\"1\":{\"117\":1,\"119\":1,\"402\":1,\"447\":1}}],[\"geturl\",{\"1\":{\"88\":2,\"386\":2,\"389\":2,\"390\":2,\"402\":1}}],[\"getcities\",{\"1\":{\"381\":2}}],[\"getcode\",{\"1\":{\"276\":1,\"299\":3,\"301\":1,\"337\":5,\"381\":2}}],[\"getcontext\",{\"1\":{\"322\":4}}],[\"getcontext不为空是添加查询条件\",{\"1\":{\"322\":2}}],[\"getcontent\",{\"1\":{\"174\":2,\"322\":6,\"329\":1,\"330\":1,\"331\":1,\"402\":1,\"418\":1,\"419\":1,\"420\":1}}],[\"getconnection\",{\"1\":{\"196\":1}}],[\"getconnection没有设置超时时间所以需要自己定义\",{\"1\":{\"196\":1}}],[\"getcolumnfunction\",{\"1\":{\"87\":1,\"88\":1}}],[\"getcreateby\",{\"1\":{\"117\":1,\"119\":1,\"402\":1,\"447\":1}}],[\"getcreatetime\",{\"1\":{\"117\":1,\"119\":1,\"152\":2,\"154\":4,\"177\":1,\"207\":1,\"359\":5,\"402\":2,\"418\":1,\"419\":1,\"420\":1,\"447\":1}}],[\"getcurrenttrackcontext\",{\"1\":{\"102\":1}}],[\"getqueryconfiguration\",{\"1\":{\"92\":2,\"267\":1,\"297\":1}}],[\"getabc\",{\"1\":{\"420\":1}}],[\"getareas\",{\"1\":{\"381\":2}}],[\"getavatar\",{\"1\":{\"357\":1}}],[\"getasc\",{\"1\":{\"330\":1,\"331\":1}}],[\"getaggregationtype\",{\"1\":{\"88\":2}}],[\"getaddresssupportlike\",{\"1\":{\"84\":7}}],[\"getaddressnotsupportlike\",{\"1\":{\"78\":2}}],[\"getpublishtimeend\",{\"1\":{\"322\":4}}],[\"getpublishtime\",{\"1\":{\"322\":2}}],[\"getpublishtimebegin\",{\"1\":{\"322\":6}}],[\"getprice\",{\"1\":{\"357\":9}}],[\"getprovincecode\",{\"1\":{\"337\":3}}],[\"getproperty\",{\"1\":{\"330\":1,\"331\":2}}],[\"getpropertyname\",{\"1\":{\"87\":1,\"88\":3,\"92\":1,\"332\":1}}],[\"getpredicatefilterexpression\",{\"1\":{\"132\":1,\"262\":1,\"447\":1}}],[\"getphone\",{\"1\":{\"96\":2,\"107\":1,\"109\":1,\"141\":3,\"423\":1,\"424\":1,\"425\":1}}],[\"getphonesupportlike\",{\"1\":{\"84\":5}}],[\"getphonenotsupportlike\",{\"1\":{\"78\":4}}],[\"getkey\",{\"1\":{\"83\":2,\"276\":1,\"332\":1,\"432\":1,\"438\":1}}],[\"getistop\",{\"1\":{\"402\":1}}],[\"getinsertbatchthreshold\",{\"1\":{\"267\":1,\"269\":1}}],[\"getinsertstrategy\",{\"1\":{\"267\":1,\"269\":1}}],[\"getiv\",{\"1\":{\"83\":2}}],[\"getidcount\",{\"1\":{\"338\":3,\"344\":1}}],[\"getid\",{\"1\":{\"78\":4,\"84\":5,\"96\":2,\"117\":1,\"119\":1,\"122\":2,\"129\":1,\"133\":1,\"141\":2,\"152\":7,\"154\":17,\"165\":2,\"170\":2,\"177\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":2,\"188\":4,\"203\":2,\"204\":1,\"205\":4,\"206\":3,\"309\":5,\"317\":1,\"318\":3,\"323\":10,\"329\":1,\"330\":1,\"331\":3,\"335\":5,\"338\":9,\"341\":3,\"342\":3,\"343\":5,\"344\":9,\"359\":3,\"361\":1,\"362\":4,\"363\":4,\"371\":1,\"382\":1,\"383\":5,\"392\":3,\"393\":2,\"398\":7,\"399\":11,\"400\":4,\"402\":1,\"404\":3,\"405\":3,\"406\":3,\"407\":3,\"417\":1,\"418\":4,\"419\":4,\"420\":4,\"423\":1,\"424\":1,\"425\":1,\"434\":2,\"440\":2,\"445\":2,\"446\":1,\"447\":1}}],[\"get\",{\"1\":{\"10\":2,\"167\":1,\"169\":2,\"257\":1,\"259\":2,\"268\":2,\"371\":1,\"424\":2,\"425\":1,\"433\":1,\"439\":1,\"444\":1}}],[\"gitee\",{\"0\":{\"51\":1},\"1\":{\"11\":1,\"58\":1}}],[\"gitee仓库\",{\"0\":{\"2\":1}}],[\"github\",{\"0\":{\"50\":1},\"1\":{\"11\":1,\"58\":1,\"183\":1,\"189\":1,\"426\":1}}],[\"github仓库\",{\"0\":{\"1\":1}}],[\"3af23d78\",{\"1\":{\"353\":1}}],[\"30t23\",{\"1\":{\"208\":1}}],[\"30\",{\"1\":{\"184\":1,\"188\":1,\"359\":1}}],[\"302\",{\"1\":{\"184\":1}}],[\"30000\",{\"1\":{\"196\":1}}],[\"300\",{\"1\":{\"72\":5}}],[\"37\",{\"1\":{\"184\":1,\"185\":2,\"325\":3}}],[\"358198\",{\"1\":{\"434\":1}}],[\"356\",{\"1\":{\"359\":1}}],[\"35\",{\"1\":{\"185\":1,\"187\":1,\"359\":1}}],[\"354\",{\"1\":{\"184\":1}}],[\"351\",{\"1\":{\"184\":1}}],[\"36\",{\"1\":{\"170\":1,\"185\":1}}],[\"38\",{\"1\":{\"168\":10,\"185\":1,\"188\":1}}],[\"310\",{\"1\":{\"359\":1}}],[\"31<\",{\"1\":{\"255\":1,\"272\":1}}],[\"31\",{\"1\":{\"184\":1,\"187\":3,\"439\":10}}],[\"31t16\",{\"1\":{\"170\":1}}],[\"315\",{\"1\":{\"143\":1}}],[\"319\",{\"1\":{\"10\":1,\"268\":1}}],[\"391516\",{\"1\":{\"444\":1}}],[\"391504\",{\"1\":{\"444\":1}}],[\"391492\",{\"1\":{\"444\":1}}],[\"391481\",{\"1\":{\"444\":1}}],[\"391469\",{\"1\":{\"444\":1}}],[\"391457\",{\"1\":{\"444\":1}}],[\"391445\",{\"1\":{\"444\":1}}],[\"391433\",{\"1\":{\"444\":1}}],[\"391420\",{\"1\":{\"444\":1}}],[\"391349\",{\"1\":{\"444\":1}}],[\"3953\",{\"1\":{\"186\":1}}],[\"3975\",{\"1\":{\"186\":1}}],[\"3974\",{\"1\":{\"186\":1}}],[\"3977\",{\"1\":{\"186\":1}}],[\"3985\",{\"1\":{\"186\":1}}],[\"3984\",{\"1\":{\"186\":1}}],[\"3981\",{\"1\":{\"186\":1}}],[\"3969\",{\"1\":{\"186\":1}}],[\"3964\",{\"1\":{\"186\":1}}],[\"3965\",{\"1\":{\"186\":1}}],[\"39\",{\"1\":{\"119\":1,\"184\":2,\"185\":3,\"187\":1}}],[\"3308\",{\"1\":{\"381\":1}}],[\"3309\",{\"1\":{\"381\":1}}],[\"3301\",{\"1\":{\"381\":1}}],[\"3302\",{\"1\":{\"381\":1}}],[\"3303\",{\"1\":{\"381\":1}}],[\"3304\",{\"1\":{\"381\":1}}],[\"3305\",{\"1\":{\"381\":1}}],[\"3307\",{\"1\":{\"381\":1}}],[\"330602\",{\"1\":{\"381\":2}}],[\"3306\",{\"1\":{\"71\":1,\"194\":1,\"258\":1,\"260\":1,\"284\":1,\"337\":2,\"381\":4,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"3311\",{\"1\":{\"381\":1}}],[\"3310\",{\"1\":{\"381\":1}}],[\"331\",{\"1\":{\"184\":1}}],[\"33\",{\"1\":{\"94\":1,\"184\":2,\"185\":1,\"187\":1,\"359\":1,\"381\":2}}],[\"3209\",{\"1\":{\"381\":1}}],[\"3201\",{\"1\":{\"381\":1}}],[\"3202\",{\"1\":{\"381\":1}}],[\"3203\",{\"1\":{\"381\":1}}],[\"3204\",{\"1\":{\"381\":1}}],[\"3205\",{\"1\":{\"381\":1}}],[\"3206\",{\"1\":{\"381\":1}}],[\"3207\",{\"1\":{\"381\":1}}],[\"3208\",{\"1\":{\"381\":1}}],[\"3212\",{\"1\":{\"381\":1}}],[\"3213\",{\"1\":{\"381\":1}}],[\"3210\",{\"1\":{\"381\":1}}],[\"3211\",{\"1\":{\"381\":1}}],[\"321\",{\"1\":{\"184\":1}}],[\"323\",{\"1\":{\"184\":2}}],[\"32\",{\"1\":{\"80\":10,\"93\":1,\"117\":3,\"162\":1,\"166\":1,\"184\":1,\"185\":2,\"187\":3,\"201\":1,\"274\":2,\"299\":1,\"359\":1,\"381\":2,\"416\":1}}],[\"34567\",{\"1\":{\"84\":1}}],[\"34\",{\"1\":{\"10\":1,\"167\":1,\"184\":3,\"185\":2,\"268\":1,\"359\":1}}],[\"3\",{\"0\":{\"165\":1,\"169\":1,\"205\":1,\"206\":1},\"1\":{\"10\":12,\"73\":1,\"96\":1,\"107\":1,\"117\":1,\"119\":1,\"139\":1,\"168\":1,\"192\":1,\"207\":1,\"251\":2,\"255\":1,\"268\":12,\"274\":2,\"277\":1,\"280\":1,\"286\":1,\"299\":2,\"300\":1,\"309\":4,\"317\":2,\"335\":2,\"338\":4,\"341\":2,\"342\":2,\"343\":4,\"344\":4,\"359\":3,\"362\":4,\"375\":3,\"376\":3,\"377\":1,\"378\":3,\"379\":3,\"381\":2,\"382\":11,\"402\":1,\"404\":1,\"405\":1,\"423\":1,\"432\":1,\"433\":12,\"434\":2,\"439\":9,\"440\":2,\"444\":3,\"445\":2,\"446\":9}}],[\"51\",{\"1\":{\"445\":1}}],[\"512\",{\"1\":{\"156\":2,\"245\":1}}],[\"54\",{\"1\":{\"440\":1}}],[\"542\",{\"1\":{\"169\":2}}],[\"55\",{\"1\":{\"285\":1}}],[\"552\",{\"1\":{\"170\":1}}],[\"52\",{\"1\":{\"194\":1,\"285\":1,\"433\":10}}],[\"5~10+\",{\"1\":{\"188\":1}}],[\"5~10\",{\"1\":{\"187\":1}}],[\"509650\",{\"1\":{\"439\":1}}],[\"509652\",{\"1\":{\"439\":1}}],[\"509642\",{\"1\":{\"439\":1}}],[\"509645\",{\"1\":{\"439\":1}}],[\"509647\",{\"1\":{\"439\":1}}],[\"509640\",{\"1\":{\"439\":1}}],[\"509637\",{\"1\":{\"439\":1}}],[\"509631\",{\"1\":{\"439\":1}}],[\"509635\",{\"1\":{\"439\":1}}],[\"509610\",{\"1\":{\"439\":1}}],[\"50\",{\"1\":{\"162\":1,\"166\":1,\"201\":1,\"274\":4,\"416\":1,\"431\":1,\"434\":2,\"437\":1,\"443\":1}}],[\"5000\",{\"1\":{\"196\":1,\"246\":1}}],[\"500\",{\"1\":{\"72\":5}}],[\"58d24823a88b\",{\"1\":{\"354\":1}}],[\"58734\",{\"1\":{\"284\":1}}],[\"58\",{\"1\":{\"143\":1}}],[\"56\",{\"1\":{\"119\":1}}],[\"57\",{\"1\":{\"109\":1}}],[\"572\",{\"1\":{\"10\":1,\"268\":1,\"359\":1}}],[\"5mvi8ru5ku2geoquhucr7a==mxfvdfza1ydm7qws03g1ew==82zyfpam7r2nhh8qgev2pa==irtc1xc89axhlz6g2emwtw==u+t8i0lmize62zlylqpchw==z21aullv0tzo5swm8e15sg==o601inwnlolfrspiuivkla==wlisxtg+ajuzry1sf31+eg==\",{\"1\":{\"84\":1}}],[\"5jxqmae3vle3as62ds8z\",{\"1\":{\"84\":3}}],[\"5zy65peb6l65mi0xmdi=\",{\"1\":{\"78\":1}}],[\"5rwz5rgf55yb57un5yw05bic6lak5z+o5yy65z+o5bic5bm\",{\"1\":{\"78\":1}}],[\"5\",{\"0\":{\"171\":1,\"208\":1},\"1\":{\"10\":12,\"108\":1,\"144\":3,\"168\":1,\"184\":1,\"185\":1,\"196\":1,\"246\":1,\"251\":1,\"268\":12,\"322\":2,\"420\":1,\"433\":2,\"438\":1,\"439\":8,\"444\":2,\"445\":1}}],[\"~\",{\"1\":{\"10\":6,\"184\":1,\"185\":1,\"251\":2,\"268\":6}}],[\"c\",{\"1\":{\"391\":1,\"416\":1}}],[\"cities=\",{\"1\":{\"381\":2}}],[\"cities\",{\"1\":{\"381\":1}}],[\"city`\",{\"1\":{\"381\":2}}],[\"citycode=3306\",{\"1\":{\"381\":1}}],[\"citycode\",{\"1\":{\"381\":2}}],[\"cityvo\",{\"1\":{\"337\":3}}],[\"city\",{\"1\":{\"337\":7,\"381\":6}}],[\"ce0e0f63113d\",{\"1\":{\"353\":1}}],[\"central\",{\"1\":{\"234\":1,\"239\":1,\"241\":1,\"252\":1,\"265\":1}}],[\"center\",{\"1\":{\"28\":1}}],[\"cc1\",{\"1\":{\"335\":2}}],[\"cc\",{\"1\":{\"335\":2}}],[\"cfg\",{\"1\":{\"258\":1}}],[\"cfb\",{\"1\":{\"80\":3}}],[\"cloneable\",{\"1\":{\"447\":1}}],[\"clonequeryable\",{\"1\":{\"383\":2}}],[\"close来关闭资源\",{\"1\":{\"401\":1}}],[\"closed\",{\"1\":{\"324\":2}}],[\"close\",{\"1\":{\"199\":1}}],[\"clazz\",{\"1\":{\"288\":2}}],[\"class1\",{\"1\":{\"376\":1,\"377\":1,\"378\":1,\"379\":2,\"382\":4}}],[\"class2\",{\"1\":{\"376\":1,\"377\":1,\"378\":1,\"379\":2,\"382\":4}}],[\"class3\",{\"1\":{\"376\":1,\"378\":1,\"379\":2,\"382\":2}}],[\"class`\",{\"1\":{\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"382\":4}}],[\"classes\",{\"1\":{\"376\":1,\"378\":1,\"379\":1}}],[\"classer\",{\"1\":{\"299\":3,\"301\":1}}],[\"classid=class2\",{\"1\":{\"375\":1,\"376\":1,\"377\":1}}],[\"classid=class1\",{\"1\":{\"375\":2,\"376\":2,\"377\":2}}],[\"classid\",{\"1\":{\"374\":8,\"382\":1}}],[\"class<tr>\",{\"1\":{\"396\":2}}],[\"class<t>\",{\"1\":{\"299\":1}}],[\"class<ienum<\",{\"1\":{\"299\":1}}],[\"class<\",{\"1\":{\"117\":7,\"119\":4,\"122\":4,\"273\":4,\"447\":4}}],[\"class\",{\"1\":{\"69\":3,\"78\":3,\"83\":6,\"84\":9,\"88\":5,\"92\":3,\"94\":1,\"95\":1,\"96\":4,\"107\":2,\"108\":1,\"109\":2,\"111\":3,\"114\":1,\"117\":7,\"119\":3,\"122\":5,\"127\":3,\"128\":2,\"129\":3,\"132\":4,\"133\":2,\"139\":1,\"141\":3,\"144\":2,\"152\":3,\"154\":9,\"158\":3,\"162\":1,\"163\":2,\"164\":2,\"165\":2,\"166\":1,\"170\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"193\":1,\"194\":3,\"201\":1,\"202\":1,\"203\":2,\"204\":1,\"205\":4,\"206\":4,\"207\":1,\"208\":2,\"212\":3,\"213\":3,\"216\":1,\"217\":1,\"248\":2,\"256\":1,\"257\":1,\"258\":3,\"259\":3,\"260\":2,\"262\":3,\"263\":1,\"267\":5,\"269\":7,\"273\":3,\"275\":2,\"276\":2,\"277\":2,\"282\":2,\"284\":2,\"288\":1,\"290\":77,\"292\":5,\"293\":3,\"299\":5,\"300\":5,\"301\":4,\"309\":2,\"317\":4,\"318\":3,\"321\":1,\"322\":2,\"323\":8,\"324\":1,\"325\":2,\"329\":2,\"330\":3,\"331\":4,\"332\":4,\"335\":5,\"337\":7,\"338\":4,\"341\":2,\"342\":3,\"343\":2,\"344\":3,\"347\":1,\"348\":1,\"357\":7,\"359\":5,\"361\":1,\"362\":3,\"363\":3,\"366\":3,\"369\":1,\"370\":1,\"371\":1,\"372\":2,\"373\":1,\"374\":10,\"375\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":2,\"381\":5,\"382\":16,\"383\":4,\"385\":1,\"386\":2,\"387\":2,\"388\":2,\"389\":2,\"390\":2,\"392\":5,\"393\":4,\"397\":3,\"398\":11,\"399\":7,\"400\":3,\"402\":1,\"404\":2,\"405\":2,\"406\":3,\"407\":3,\"410\":1,\"411\":1,\"416\":1,\"417\":3,\"418\":4,\"419\":8,\"420\":4,\"423\":1,\"424\":1,\"425\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":2,\"437\":1,\"438\":1,\"439\":1,\"440\":2,\"443\":1,\"444\":1,\"445\":2,\"446\":1,\"447\":6}}],[\"client\",{\"1\":{\"284\":1}}],[\"c都拿到1个线程的情况下想要拿到下一个链接需要其中一个释放\",{\"1\":{\"196\":1}}],[\"c分别需要聚合2个分片\",{\"1\":{\"196\":1}}],[\"cj\",{\"1\":{\"194\":1,\"258\":1,\"260\":1,\"284\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"chain\",{\"1\":{\"397\":1}}],[\"character\",{\"1\":{\"274\":1}}],[\"characterencoding=utf\",{\"1\":{\"71\":1,\"194\":1,\"258\":1,\"260\":1,\"284\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"chart\",{\"0\":{\"34\":1}}],[\"chinesecharoccupancylength\",{\"1\":{\"83\":1}}],[\"cbc\",{\"1\":{\"80\":4}}],[\"csdn\",{\"1\":{\"73\":1}}],[\"currentuser\",{\"1\":{\"447\":9}}],[\"currentuserhelper\",{\"1\":{\"117\":12,\"119\":4,\"122\":4,\"132\":3,\"133\":1}}],[\"current\",{\"1\":{\"184\":3,\"185\":3,\"186\":3}}],[\"currenttimemillis\",{\"1\":{\"138\":1}}],[\"currentthreadtracking\",{\"1\":{\"102\":1}}],[\"cup\",{\"1\":{\"41\":1}}],[\"custom`\",{\"1\":{\"133\":1}}],[\"customincrement=new\",{\"1\":{\"111\":1}}],[\"customincrement\",{\"1\":{\"111\":7}}],[\"customize\",{\"1\":{\"48\":1}}],[\"custom\",{\"0\":{\"24\":1},\"1\":{\"24\":10,\"47\":1,\"111\":1,\"128\":1,\"132\":3,\"133\":3,\"217\":1,\"447\":1}}],[\"count`\",{\"1\":{\"392\":1,\"393\":1}}],[\"count连表统计\",{\"0\":{\"392\":1}}],[\"countsql\",{\"1\":{\"383\":2}}],[\"count\",{\"0\":{\"391\":1},\"1\":{\"260\":1,\"310\":1,\"338\":2,\"344\":1,\"361\":1,\"362\":1,\"363\":1,\"383\":3,\"391\":1,\"392\":1}}],[\"count就是0等等\",{\"1\":{\"246\":1}}],[\"count等会自动判断是否需要select\",{\"1\":{\"150\":1}}],[\"coulmns策略\",{\"1\":{\"168\":1}}],[\"collections\",{\"1\":{\"348\":1,\"351\":1,\"411\":1,\"414\":1}}],[\"collection<trentity>>\",{\"1\":{\"337\":1}}],[\"collect\",{\"1\":{\"276\":3}}],[\"columnkeys\",{\"1\":{\"434\":1,\"440\":1,\"445\":1}}],[\"column永远在左侧\",{\"1\":{\"421\":1}}],[\"columninclude表示单个关联属性的映射\",{\"1\":{\"382\":1}}],[\"columnincludemany\",{\"1\":{\"382\":3}}],[\"columnincludemany自定义返回\",{\"1\":{\"372\":1}}],[\"columninclude\",{\"1\":{\"382\":4}}],[\"columnignore\",{\"0\":{\"214\":1},\"1\":{\"154\":1,\"158\":1,\"275\":2,\"362\":1,\"390\":1,\"398\":3,\"399\":1}}],[\"columncount表示需要对id列进行count聚合并且映射到topicgrouptestdto\",{\"1\":{\"338\":1}}],[\"columncount\",{\"1\":{\"338\":2,\"344\":1,\"383\":1,\"392\":1}}],[\"columnconvert\",{\"1\":{\"91\":2,\"92\":1}}],[\"column下large的列\",{\"1\":{\"245\":1}}],[\"column上进行手动指定对应的列名\",{\"1\":{\"245\":1}}],[\"column添加updateignore是为了保证大字段被查询出来后如果进行entity全字段更新那么因为title没有被查询所以更新的时候就会把null更新掉\",{\"1\":{\"216\":1}}],[\"columnsubqueryas\",{\"1\":{\"392\":1,\"393\":1}}],[\"columnsum\",{\"1\":{\"363\":1,\"383\":1,\"393\":1}}],[\"columns那么将会进行executebatch\",{\"1\":{\"245\":1}}],[\"columns就是说默认生成的sql无论对象是否是null属性都会进行更新\",{\"1\":{\"160\":1}}],[\"columns就是说默认生成的sql如果对象属性为null就不生成insert列\",{\"1\":{\"159\":1,\"171\":1}}],[\"columns\",{\"1\":{\"156\":2,\"159\":2,\"160\":4,\"171\":2,\"194\":5,\"208\":2,\"245\":2,\"260\":8}}],[\"columnsetter\",{\"1\":{\"119\":3,\"447\":4}}],[\"columnsetter<object>\",{\"1\":{\"119\":1,\"447\":1}}],[\"columnas方法和column如果两者对象在数据库列上映射是一样的那么可以用column也是一样的\",{\"1\":{\"338\":1}}],[\"columnas\",{\"1\":{\"154\":4,\"338\":1,\"344\":1,\"386\":1,\"389\":1,\"390\":1,\"398\":1,\"399\":1,\"420\":3}}],[\"columnall\",{\"1\":{\"96\":1,\"150\":1,\"154\":1,\"335\":1,\"342\":1,\"357\":5,\"362\":1,\"382\":5,\"388\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"398\":2,\"399\":2,\"400\":1}}],[\"columnmetadata\",{\"1\":{\"91\":6,\"92\":6,\"111\":2}}],[\"columnvaluesqlconverter\",{\"0\":{\"91\":1},\"1\":{\"91\":1,\"92\":1}}],[\"columnfunc\",{\"1\":{\"422\":1}}],[\"columnfuncas\",{\"1\":{\"88\":1}}],[\"columnfunctionfactory\",{\"1\":{\"290\":1}}],[\"columnfunction的组合仅支持单个数据库列字段的处理\",{\"1\":{\"88\":1}}],[\"columnfunction\",{\"0\":{\"88\":1},\"1\":{\"88\":9}}],[\"columnpropertyfunction\",{\"0\":{\"87\":1},\"1\":{\"88\":4}}],[\"column\",{\"0\":{\"213\":1},\"1\":{\"69\":2,\"83\":1,\"88\":8,\"92\":2,\"111\":1,\"132\":1,\"154\":1,\"156\":1,\"158\":5,\"159\":3,\"160\":3,\"161\":1,\"162\":1,\"166\":1,\"170\":1,\"171\":3,\"174\":4,\"177\":2,\"193\":1,\"194\":2,\"201\":1,\"207\":2,\"213\":2,\"216\":3,\"217\":2,\"259\":1,\"260\":1,\"273\":2,\"275\":2,\"282\":1,\"284\":1,\"299\":2,\"300\":2,\"301\":2,\"317\":3,\"318\":1,\"329\":3,\"330\":3,\"331\":3,\"338\":3,\"344\":1,\"357\":1,\"363\":2,\"374\":5,\"381\":3,\"382\":1,\"383\":2,\"385\":1,\"397\":3,\"398\":1,\"399\":3,\"400\":1,\"402\":1,\"406\":1,\"407\":1,\"416\":1,\"419\":1,\"434\":1,\"440\":1,\"445\":1,\"447\":1}}],[\"column>=x\",{\"1\":{\"68\":2}}],[\"column>=xxx\",{\"1\":{\"66\":1}}],[\"column=column+x\",{\"1\":{\"68\":2}}],[\"column=column+1\",{\"1\":{\"66\":1}}],[\"column=column\",{\"1\":{\"68\":2}}],[\"color\",{\"1\":{\"33\":1}}],[\"compareto\",{\"1\":{\"402\":2}}],[\"compile<\",{\"1\":{\"286\":3}}],[\"compiler\",{\"1\":{\"286\":2}}],[\"component将对应的valueconverter注入即可\",{\"1\":{\"296\":1}}],[\"component\",{\"1\":{\"92\":1,\"117\":1,\"119\":1,\"132\":1,\"276\":1,\"432\":1,\"438\":1,\"447\":2}}],[\"commonconstant\",{\"1\":{\"447\":3}}],[\"commit\",{\"1\":{\"199\":1,\"200\":1}}],[\"committed\",{\"1\":{\"199\":1}}],[\"comments\",{\"1\":{\"48\":1}}],[\"comment\",{\"1\":{\"16\":1,\"45\":1,\"162\":5,\"166\":5,\"201\":5,\"274\":9,\"416\":5}}],[\"com\",{\"1\":{\"58\":2,\"72\":3,\"173\":2,\"174\":4,\"183\":1,\"187\":1,\"189\":1,\"194\":1,\"234\":1,\"239\":1,\"241\":1,\"252\":1,\"258\":2,\"260\":2,\"265\":1,\"284\":7,\"399\":2,\"402\":1,\"426\":1,\"431\":2,\"432\":1,\"437\":2,\"438\":1,\"443\":2}}],[\"coffee\",{\"1\":{\"41\":1}}],[\"code=330602\",{\"1\":{\"381\":1}}],[\"code=3306\",{\"1\":{\"381\":1}}],[\"code=33\",{\"1\":{\"381\":1}}],[\"code=32\",{\"1\":{\"381\":1}}],[\"code`\",{\"1\":{\"381\":10}}],[\"codehaus\",{\"1\":{\"286\":1}}],[\"codes\",{\"1\":{\"284\":1}}],[\"code的type=2\",{\"1\":{\"275\":1}}],[\"code的type=1\",{\"1\":{\"275\":1}}],[\"code\",{\"0\":{\"26\":1,\"40\":1},\"1\":{\"24\":1,\"274\":7,\"275\":2,\"286\":2,\"299\":5,\"381\":3}}],[\"concurrentedit\",{\"1\":{\"434\":2,\"440\":2,\"445\":2}}],[\"concept\",{\"1\":{\"20\":1}}],[\"condition表示是否追加对应的条件\",{\"1\":{\"423\":1}}],[\"condition\",{\"1\":{\"324\":9,\"337\":3}}],[\"conditionconfigure\",{\"1\":{\"323\":3}}],[\"conditiondefaultaccepter\",{\"1\":{\"323\":5}}],[\"conditionallaccepter\",{\"1\":{\"323\":4}}],[\"conditionaccepter\",{\"1\":{\"323\":5}}],[\"conn\",{\"1\":{\"260\":1}}],[\"connected\",{\"1\":{\"284\":1}}],[\"connectionmanager\",{\"1\":{\"267\":1,\"269\":1,\"290\":1}}],[\"connectionmodeenum\",{\"1\":{\"196\":1,\"246\":1}}],[\"connectionmode\",{\"1\":{\"196\":1,\"246\":1}}],[\"connection\",{\"1\":{\"199\":4,\"246\":1,\"260\":2}}],[\"connector\",{\"1\":{\"192\":1,\"255\":1,\"272\":1,\"280\":1,\"286\":1}}],[\"conversion\",{\"1\":{\"213\":1,\"242\":1,\"247\":1,\"260\":1,\"266\":1,\"299\":1,\"300\":1,\"301\":1,\"431\":1,\"437\":1,\"443\":1}}],[\"convert\",{\"1\":{\"18\":1,\"212\":1,\"213\":1,\"292\":1,\"293\":1}}],[\"consumenull\",{\"1\":{\"337\":3}}],[\"console\",{\"1\":{\"194\":1}}],[\"constvalue\",{\"1\":{\"356\":1}}],[\"const\",{\"1\":{\"24\":1,\"458\":1}}],[\"conflict\",{\"1\":{\"176\":1,\"177\":1}}],[\"configureupdate\",{\"1\":{\"117\":3,\"119\":1,\"122\":1,\"447\":1}}],[\"configureinsert\",{\"1\":{\"117\":3,\"119\":1,\"122\":1,\"447\":1}}],[\"configure\",{\"1\":{\"111\":1,\"117\":1,\"119\":2,\"121\":1,\"122\":1,\"292\":1,\"327\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"447\":1}}],[\"configuration>\",{\"1\":{\"281\":1,\"286\":2}}],[\"configuration\",{\"1\":{\"20\":1,\"92\":2,\"256\":1,\"262\":8,\"263\":9,\"267\":18,\"269\":1,\"273\":1,\"292\":1,\"297\":2}}],[\"config\",{\"0\":{\"20\":1,\"45\":1},\"1\":{\"15\":1,\"39\":1,\"46\":1,\"284\":1}}],[\"controller\",{\"1\":{\"257\":1,\"259\":1}}],[\"contributors\",{\"1\":{\"16\":1,\"48\":1}}],[\"context\",{\"1\":{\"92\":4}}],[\"content=content2\",{\"1\":{\"399\":2}}],[\"content=\",{\"1\":{\"353\":2,\"354\":2}}],[\"content200\",{\"1\":{\"173\":1,\"174\":2}}],[\"content400\",{\"1\":{\"72\":1}}],[\"content300\",{\"1\":{\"72\":1}}],[\"content500\",{\"1\":{\"72\":1}}],[\"contents\",{\"1\":{\"48\":1}}],[\"content\",{\"0\":{\"47\":1},\"1\":{\"17\":1,\"21\":1,\"44\":1,\"45\":1,\"158\":1,\"173\":1,\"174\":1,\"321\":1,\"322\":4,\"324\":1,\"385\":1,\"397\":1,\"399\":1,\"402\":1}}],[\"contain\",{\"1\":{\"48\":1}}],[\"containskey\",{\"1\":{\"424\":1,\"425\":1}}],[\"containsonce\",{\"1\":{\"119\":2,\"447\":2}}],[\"contains\",{\"1\":{\"47\":1}}],[\"container\",{\"0\":{\"24\":1},\"1\":{\"24\":5}}],[\"core\",{\"1\":{\"10\":10,\"260\":1,\"268\":10,\"284\":3,\"288\":1,\"426\":2}}],[\"casewhenbuilder\",{\"1\":{\"316\":4,\"317\":3,\"318\":1}}],[\"casewhen\",{\"0\":{\"316\":1},\"1\":{\"316\":8,\"317\":6,\"318\":2,\"354\":1}}],[\"case\",{\"1\":{\"245\":2,\"260\":2,\"299\":3,\"317\":3,\"318\":1,\"355\":1}}],[\"camel\",{\"1\":{\"245\":2,\"260\":2}}],[\"card`\",{\"1\":{\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":3,\"139\":2,\"140\":1,\"143\":1,\"144\":1,\"423\":1,\"425\":1}}],[\"catch\",{\"1\":{\"332\":1,\"402\":1,\"432\":1,\"438\":1}}],[\"category\",{\"1\":{\"46\":1}}],[\"catalog\",{\"0\":{\"15\":1}}],[\"can\",{\"1\":{\"16\":1,\"18\":2,\"31\":1,\"46\":1,\"47\":1,\"48\":1,\"161\":1}}],[\"cache\",{\"1\":{\"10\":1,\"268\":1}}],[\"createby\",{\"1\":{\"397\":1,\"447\":2}}],[\"createshardingpageresult\",{\"1\":{\"365\":1,\"366\":1}}],[\"createpageresult\",{\"1\":{\"365\":1,\"366\":1}}],[\"createdatasource\",{\"1\":{\"432\":3,\"438\":3}}],[\"createdatasources\",{\"1\":{\"432\":2,\"438\":2}}],[\"created\",{\"1\":{\"323\":1}}],[\"createtable\",{\"1\":{\"194\":4,\"284\":1}}],[\"createtime=2023\",{\"1\":{\"94\":1,\"299\":1,\"300\":1,\"301\":1}}],[\"createtime\",{\"1\":{\"69\":1,\"92\":1,\"132\":1,\"162\":1,\"166\":1,\"170\":1,\"193\":1,\"194\":3,\"201\":1,\"213\":1,\"216\":1,\"217\":1,\"259\":1,\"299\":1,\"300\":2,\"301\":1,\"331\":3,\"392\":1,\"397\":2,\"416\":1,\"447\":2}}],[\"createclass\",{\"1\":{\"10\":1,\"268\":1}}],[\"createhelper\",{\"1\":{\"10\":1,\"268\":1}}],[\"create\",{\"1\":{\"10\":1,\"18\":1,\"117\":1,\"119\":1,\"162\":2,\"166\":2,\"176\":1,\"177\":3,\"188\":1,\"201\":2,\"268\":1,\"274\":3,\"416\":2,\"418\":1}}],[\"createentry\",{\"1\":{\"10\":1,\"268\":1}}],[\"cglib\",{\"1\":{\"10\":6,\"268\":6}}],[\"a67b\",{\"1\":{\"354\":1}}],[\"aa\",{\"1\":{\"335\":4}}],[\"avatar\",{\"1\":{\"323\":1,\"357\":1}}],[\"availableprocessors\",{\"1\":{\"246\":1}}],[\"avgordefault\",{\"1\":{\"310\":1}}],[\"afterpropertiesset\",{\"1\":{\"273\":1}}],[\"age=456\",{\"1\":{\"301\":1}}],[\"age\",{\"1\":{\"301\":2}}],[\"age列\",{\"1\":{\"245\":1}}],[\"aggregationtype\",{\"1\":{\"88\":2}}],[\"a线程已经获取了一个connection\",{\"1\":{\"196\":1}}],[\"adapter\",{\"1\":{\"284\":1}}],[\"admin\",{\"1\":{\"184\":3,\"185\":3,\"186\":3,\"188\":6}}],[\"addservice\",{\"1\":{\"292\":1}}],[\"addservice如果不存在就添加存在就替换\",{\"1\":{\"292\":1}}],[\"adddatasource\",{\"1\":{\"263\":1,\"432\":1,\"438\":1}}],[\"addroute\",{\"1\":{\"263\":2}}],[\"address=地址3\",{\"1\":{\"375\":1}}],[\"address=地址2\",{\"1\":{\"375\":1}}],[\"address=地址1\",{\"1\":{\"375\":1}}],[\"address=xxxxxxx\",{\"1\":{\"94\":1}}],[\"address`\",{\"1\":{\"375\":1,\"382\":1}}],[\"address\",{\"1\":{\"92\":1,\"111\":2,\"284\":1,\"374\":2,\"382\":1}}],[\"addresssupportlike\",{\"1\":{\"83\":1}}],[\"addressnotsupportlike\",{\"1\":{\"83\":1}}],[\"add\",{\"1\":{\"166\":1,\"273\":1,\"330\":2,\"331\":2,\"433\":3,\"439\":3,\"444\":3}}],[\"addtracking来让需要更新的对象被追踪\",{\"1\":{\"206\":1}}],[\"addtracking\",{\"1\":{\"99\":1,\"104\":1,\"107\":1,\"108\":1,\"109\":3,\"206\":2}}],[\"addbatch\",{\"1\":{\"70\":1}}],[\"autowired\",{\"1\":{\"242\":3,\"266\":3,\"273\":1,\"276\":2,\"277\":1,\"432\":1,\"433\":1,\"438\":1,\"439\":1,\"444\":1,\"447\":2}}],[\"auto`\",{\"1\":{\"170\":1,\"194\":1}}],[\"auto\",{\"1\":{\"170\":1,\"176\":1,\"177\":1,\"196\":1,\"246\":1,\"260\":1}}],[\"author\",{\"1\":{\"46\":1,\"117\":1,\"119\":1}}],[\"alibaba\",{\"1\":{\"431\":1,\"437\":1,\"443\":1}}],[\"alibaba<\",{\"1\":{\"272\":1,\"301\":1}}],[\"align\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"allargsconstructor\",{\"1\":{\"447\":1}}],[\"all需要表达式queryable<t>都是相同的\",{\"1\":{\"416\":1}}],[\"all查询\",{\"1\":{\"310\":1}}],[\"allcolumn将其改为null\",{\"1\":{\"260\":1}}],[\"all\",{\"0\":{\"416\":1},\"1\":{\"156\":1,\"159\":1,\"160\":1,\"171\":1,\"245\":2,\"260\":3,\"310\":1,\"416\":1,\"420\":1}}],[\"allowed\",{\"1\":{\"328\":1}}],[\"allowedpropertytypes\",{\"1\":{\"132\":1,\"262\":1,\"447\":3}}],[\"allowemptystrings\",{\"1\":{\"324\":1}}],[\"allowmultiqueries=true\",{\"1\":{\"168\":1,\"194\":1,\"258\":1,\"260\":1,\"284\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"allowdeletestatement\",{\"1\":{\"156\":1,\"161\":1,\"164\":1,\"165\":1,\"446\":1}}],[\"allowtypes\",{\"1\":{\"132\":1,\"262\":1}}],[\"allowtypes=new\",{\"1\":{\"132\":1,\"262\":1}}],[\"abc=null\",{\"1\":{\"398\":1}}],[\"abc=1\",{\"1\":{\"398\":4}}],[\"abc\",{\"1\":{\"117\":2,\"122\":5,\"398\":1,\"419\":1}}],[\"abstract\",{\"1\":{\"447\":1}}],[\"abstractlogicdeletestrategy\",{\"1\":{\"128\":1,\"132\":2,\"262\":1,\"447\":1}}],[\"abstractsupportemojiaesbase64encryptionstrategy\",{\"0\":{\"83\":1},\"1\":{\"83\":1}}],[\"abstractsupportemojiaesbase64encryptionstrategy支持emoji的处理\",{\"1\":{\"81\":1}}],[\"abstractunsupportemojiaesbase64encryptionstrategy\",{\"0\":{\"82\":1}}],[\"abstractunsupportemojiaesbase64encryptionstrategy抽象类默认仅支持非emoji的列\",{\"1\":{\"81\":1}}],[\"abstractclassgenerator\",{\"1\":{\"10\":3,\"268\":3}}],[\"abstractclassgenerator$classloaderdata\",{\"1\":{\"10\":1,\"268\":1}}],[\"absolute\",{\"1\":{\"47\":1}}],[\"applicationarguments\",{\"1\":{\"276\":1,\"432\":1,\"438\":1}}],[\"applicationrunner\",{\"1\":{\"276\":1,\"432\":1,\"438\":1}}],[\"application\",{\"1\":{\"258\":1}}],[\"applygeneratedkeysqlcolumngenerator\",{\"1\":{\"267\":1}}],[\"applyvalueupdateatomictrack\",{\"1\":{\"262\":1,\"263\":1,\"267\":1}}],[\"applyvalueconverter\",{\"1\":{\"262\":1,\"263\":1,\"267\":2,\"297\":1}}],[\"applyshardinginitializer\",{\"1\":{\"262\":1,\"263\":1,\"267\":5}}],[\"applyencryptionstrategy\",{\"1\":{\"262\":1,\"263\":1,\"267\":4}}],[\"applylogicdeletestrategy\",{\"1\":{\"262\":1,\"263\":1,\"267\":1}}],[\"applyinterceptor\",{\"1\":{\"117\":1,\"119\":1,\"262\":1,\"263\":1,\"267\":3}}],[\"apply\",{\"1\":{\"114\":1,\"117\":2,\"119\":1,\"122\":1,\"447\":1}}],[\"applycolumnvaluesqlconverter\",{\"1\":{\"92\":1,\"267\":1}}],[\"app\",{\"1\":{\"258\":2}}],[\"apt生成代理类\",{\"1\":{\"192\":1}}],[\"api变化\",{\"0\":{\"340\":1}}],[\"api说明\",{\"0\":{\"337\":1}}],[\"api4kt<\",{\"1\":{\"243\":1}}],[\"api4j<\",{\"1\":{\"237\":1}}],[\"api接口选型\",{\"0\":{\"235\":1}}],[\"api使用\",{\"0\":{\"150\":1}}],[\"api\",{\"0\":{\"101\":1,\"114\":1,\"117\":1,\"119\":1,\"121\":1,\"137\":1,\"199\":1,\"295\":1,\"310\":1,\"334\":1,\"396\":1,\"422\":1},\"1\":{\"123\":1,\"192\":1,\"237\":2,\"243\":2,\"280\":1,\"284\":1,\"286\":1}}],[\"apache\",{\"1\":{\"3\":1,\"52\":1,\"286\":3}}],[\"aes\",{\"1\":{\"80\":16,\"90\":3,\"91\":2,\"92\":2,\"93\":1,\"94\":1,\"95\":1,\"96\":3}}],[\"asalias\",{\"1\":{\"357\":2}}],[\"astable\",{\"1\":{\"310\":2,\"334\":5,\"335\":4}}],[\"astracking\",{\"1\":{\"69\":1,\"103\":1,\"107\":1,\"108\":1,\"206\":4,\"310\":1,\"372\":1,\"382\":2,\"434\":2,\"440\":2,\"445\":2,\"446\":1}}],[\"asc\",{\"1\":{\"194\":3,\"329\":4,\"330\":2,\"331\":2,\"332\":1,\"402\":1}}],[\"aslist\",{\"1\":{\"132\":1,\"262\":1,\"322\":2,\"325\":2,\"354\":1,\"433\":1,\"439\":1,\"444\":1,\"447\":1}}],[\"asnotracking\",{\"1\":{\"103\":1,\"310\":1}}],[\"assertfalse\",{\"1\":{\"107\":1,\"108\":1}}],[\"assertnull\",{\"1\":{\"78\":1,\"84\":1,\"170\":1,\"177\":1}}],[\"assertnotnull\",{\"1\":{\"78\":2,\"84\":7,\"107\":1,\"109\":1,\"139\":1,\"170\":1,\"207\":1}}],[\"assertequals\",{\"1\":{\"78\":5,\"84\":7,\"107\":2,\"108\":1,\"109\":2,\"139\":1,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"170\":1,\"207\":1,\"332\":3,\"371\":2,\"383\":3,\"402\":15}}],[\"assert\",{\"1\":{\"78\":8,\"84\":15,\"107\":4,\"108\":2,\"109\":3,\"139\":2,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"170\":3,\"177\":1,\"207\":2,\"332\":3,\"371\":2,\"383\":3,\"402\":15}}],[\"assets\",{\"1\":{\"47\":1}}],[\"as\",{\"1\":{\"45\":1,\"85\":1,\"88\":1,\"94\":1,\"96\":1,\"317\":3,\"318\":1,\"338\":3,\"344\":2,\"357\":12,\"363\":2,\"383\":4,\"386\":1,\"389\":1,\"390\":1,\"391\":1,\"392\":2,\"393\":2,\"398\":1,\"420\":3}}],[\"am\",{\"1\":{\"28\":2}}],[\"a\",{\"1\":{\"19\":1,\"20\":1,\"24\":6,\"29\":1,\"32\":1,\"41\":1,\"47\":2,\"83\":1,\"309\":1,\"335\":3,\"343\":1,\"344\":1,\"391\":2,\"416\":1,\"458\":1}}],[\"arguments\",{\"1\":{\"284\":1}}],[\"args\",{\"1\":{\"194\":1,\"258\":2,\"276\":1,\"284\":1,\"432\":1,\"438\":1}}],[\"arraylist<orderentity>\",{\"1\":{\"444\":1}}],[\"arraylist<dsorderentity>\",{\"1\":{\"439\":1}}],[\"arraylist<tdsorderentity>\",{\"1\":{\"433\":1}}],[\"arraylist<>\",{\"1\":{\"166\":1,\"321\":2,\"324\":2,\"330\":1,\"331\":1,\"337\":1,\"433\":1,\"439\":1,\"444\":1}}],[\"array\",{\"1\":{\"325\":1}}],[\"array<string>\",{\"1\":{\"284\":1}}],[\"arrays\",{\"1\":{\"132\":1,\"262\":1,\"322\":2,\"325\":2,\"354\":1,\"433\":1,\"439\":1,\"444\":1,\"447\":1}}],[\"area`\",{\"1\":{\"381\":2}}],[\"area\",{\"1\":{\"381\":4}}],[\"areas=\",{\"1\":{\"381\":1}}],[\"areas\",{\"1\":{\"381\":1}}],[\"are\",{\"1\":{\"19\":1,\"46\":1,\"47\":1}}],[\"article\",{\"0\":{\"17\":1},\"1\":{\"17\":1,\"73\":1}}],[\"artifactid>\",{\"1\":{\"10\":1,\"192\":6,\"237\":4,\"240\":1,\"242\":1,\"243\":4,\"255\":5,\"266\":1,\"268\":1,\"272\":12,\"280\":5,\"281\":1,\"286\":14,\"301\":1}}],[\"accessors\",{\"1\":{\"397\":1}}],[\"accept\",{\"1\":{\"323\":4}}],[\"account\",{\"1\":{\"184\":2,\"185\":2,\"186\":2,\"187\":1,\"188\":4}}],[\"according\",{\"1\":{\"18\":1}}],[\"active\",{\"1\":{\"431\":1,\"437\":1,\"443\":1}}],[\"act0smpmvtnwd\",{\"1\":{\"84\":1}}],[\"actual\",{\"1\":{\"17\":1}}],[\"any\",{\"1\":{\"310\":1}}],[\"anenum\",{\"1\":{\"299\":2}}],[\"annotationprocessorpaths>\",{\"1\":{\"281\":1,\"286\":1}}],[\"anno\",{\"1\":{\"273\":1}}],[\"an\",{\"1\":{\"16\":1}}],[\"and内部使用or链接那么可以将and视为括号\",{\"1\":{\"359\":1}}],[\"and\",{\"0\":{\"16\":1,\"27\":1},\"1\":{\"16\":1,\"18\":1,\"19\":2,\"23\":1,\"33\":1,\"46\":1,\"48\":3,\"66\":1,\"68\":2,\"69\":2,\"122\":5,\"127\":3,\"133\":3,\"140\":1,\"141\":1,\"143\":2,\"144\":3,\"165\":1,\"188\":3,\"194\":1,\"220\":1,\"221\":1,\"222\":1,\"284\":2,\"288\":1,\"309\":1,\"318\":3,\"322\":9,\"323\":5,\"325\":8,\"335\":4,\"341\":1,\"342\":2,\"343\":2,\"344\":2,\"357\":2,\"359\":8,\"362\":2,\"381\":2,\"383\":3,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"402\":1,\"404\":3,\"405\":3,\"406\":2,\"407\":2,\"418\":2,\"419\":2,\"420\":1,\"434\":1,\"440\":1,\"445\":1}}],[\"aop\",{\"1\":{\"69\":1}}],[\"aop<\",{\"1\":{\"10\":1,\"268\":1,\"272\":1}}],[\"aop组件版本不对\",{\"1\":{\"10\":1,\"268\":1}}],[\"at`\",{\"1\":{\"133\":7}}],[\"atomic`\",{\"1\":{\"69\":2}}],[\"atomic\",{\"1\":{\"69\":1}}],[\"attrs\",{\"0\":{\"29\":1,\"462\":1}}],[\"at\",{\"1\":{\"10\":6,\"47\":1,\"268\":6}}],[\"i1\",{\"1\":{\"433\":3,\"439\":3,\"444\":3}}],[\"ienum<\",{\"1\":{\"299\":2}}],[\"ienum<topictypeenum>\",{\"1\":{\"299\":1}}],[\"ienum<t>>\",{\"1\":{\"299\":1}}],[\"ienum<tenum>>\",{\"1\":{\"299\":1}}],[\"ienum<tenum\",{\"1\":{\"299\":1}}],[\"ignore那么如果是非track更新那么将会直接忽略\",{\"1\":{\"216\":1}}],[\"ignoreproperties\",{\"1\":{\"212\":1}}],[\"ignore\",{\"1\":{\"173\":1}}],[\"i+100\",{\"1\":{\"166\":1}}],[\"i++\",{\"1\":{\"166\":1,\"402\":1,\"432\":1,\"433\":1,\"438\":1,\"439\":1,\"444\":1}}],[\"illegalargumentexception\",{\"1\":{\"88\":1,\"299\":1}}],[\"illegalstateexception\",{\"1\":{\"10\":1,\"268\":1,\"400\":1}}],[\"ir⋯\",{\"1\":{\"38\":1,\"471\":1}}],[\"implementation\",{\"1\":{\"284\":1}}],[\"implements\",{\"1\":{\"88\":2,\"92\":1,\"111\":1,\"117\":2,\"119\":1,\"122\":1,\"273\":2,\"275\":1,\"276\":1,\"288\":1,\"292\":2,\"293\":1,\"299\":2,\"323\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":1,\"366\":3,\"369\":1,\"370\":1,\"397\":1,\"432\":1,\"438\":1,\"447\":2}}],[\"impl\",{\"1\":{\"284\":1}}],[\"import\",{\"1\":{\"284\":6}}],[\"important\",{\"1\":{\"20\":1,\"31\":1}}],[\"images\",{\"1\":{\"47\":2}}],[\"image\",{\"0\":{\"33\":1},\"1\":{\"251\":1}}],[\"idhelper\",{\"1\":{\"447\":1}}],[\"idqueryable\",{\"1\":{\"406\":2,\"407\":2}}],[\"id1属性不在blogentity里面所以会进行报错\",{\"1\":{\"332\":1}}],[\"id1\",{\"1\":{\"332\":3}}],[\"id123456\",{\"1\":{\"165\":4}}],[\"id正序\",{\"1\":{\"332\":1}}],[\"id>\",{\"1\":{\"281\":1,\"286\":4}}],[\"ids\",{\"1\":{\"273\":4}}],[\"id4trans\",{\"1\":{\"273\":2,\"275\":2}}],[\"idea\",{\"1\":{\"193\":1}}],[\"id`\",{\"1\":{\"117\":2,\"122\":6,\"375\":3,\"376\":2,\"377\":1,\"378\":3,\"379\":5,\"382\":10}}],[\"idcard=12345678\",{\"1\":{\"94\":1}}],[\"idcard\",{\"1\":{\"92\":1}}],[\"id=teacher2\",{\"1\":{\"378\":2}}],[\"id=teacher1\",{\"1\":{\"378\":1}}],[\"id=class3\",{\"1\":{\"376\":1,\"378\":1}}],[\"id=class2\",{\"1\":{\"376\":1,\"377\":1,\"378\":1}}],[\"id=class1\",{\"1\":{\"376\":1,\"377\":2,\"378\":1}}],[\"id=3\",{\"1\":{\"375\":1,\"376\":1,\"377\":1}}],[\"id=address3\",{\"1\":{\"375\":1}}],[\"id=address2\",{\"1\":{\"375\":1}}],[\"id=address1\",{\"1\":{\"375\":1}}],[\"id=2\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"399\":2}}],[\"id=1\",{\"1\":{\"375\":1,\"376\":1,\"377\":1}}],[\"id=1231\",{\"1\":{\"301\":1}}],[\"id=12345\",{\"1\":{\"94\":1}}],[\"id=123\",{\"1\":{\"69\":1,\"299\":1,\"300\":1}}],[\"id=\",{\"1\":{\"323\":1,\"348\":2,\"351\":2,\"353\":2,\"354\":2,\"411\":2,\"414\":2,\"416\":1}}],[\"id=xx\",{\"1\":{\"68\":4}}],[\"id=xxx\",{\"1\":{\"66\":1,\"220\":1,\"221\":1,\"222\":1}}],[\"id\",{\"1\":{\"29\":1,\"69\":1,\"83\":1,\"92\":1,\"108\":1,\"109\":2,\"111\":1,\"132\":1,\"139\":2,\"141\":3,\"143\":1,\"144\":3,\"150\":1,\"154\":1,\"158\":1,\"162\":2,\"166\":2,\"170\":1,\"184\":2,\"185\":2,\"186\":2,\"187\":1,\"188\":2,\"193\":1,\"194\":10,\"201\":2,\"213\":1,\"216\":1,\"217\":1,\"245\":2,\"259\":1,\"273\":7,\"274\":2,\"275\":1,\"277\":2,\"282\":1,\"284\":1,\"299\":1,\"300\":2,\"301\":1,\"317\":2,\"323\":7,\"332\":5,\"357\":14,\"374\":11,\"382\":4,\"391\":1,\"392\":1,\"397\":2,\"399\":1,\"400\":1,\"416\":2,\"418\":1,\"419\":1,\"447\":1,\"462\":1}}],[\"i\",{\"1\":{\"28\":2,\"47\":2,\"166\":4,\"188\":6,\"402\":9,\"432\":4,\"433\":5,\"438\":4,\"439\":5,\"444\":5}}],[\"ifnullordefault\",{\"1\":{\"88\":1}}],[\"ifnull额外参数等\",{\"1\":{\"88\":1}}],[\"ifnullcolumnfunction\",{\"1\":{\"88\":5}}],[\"ifnull编写\",{\"0\":{\"86\":1}}],[\"ifnull\",{\"1\":{\"85\":1,\"88\":6}}],[\"if\",{\"1\":{\"19\":1,\"20\":1,\"88\":3,\"117\":6,\"119\":6,\"122\":2,\"200\":1,\"260\":1,\"273\":2,\"274\":1,\"299\":1,\"323\":3,\"329\":1,\"335\":1,\"337\":1,\"434\":1,\"440\":1,\"445\":1,\"447\":8}}],[\"it\",{\"1\":{\"18\":1,\"20\":1,\"21\":2,\"284\":1,\"357\":14,\"455\":2}}],[\"item\",{\"1\":{\"10\":1,\"268\":1}}],[\"initialsize\",{\"1\":{\"432\":1,\"438\":1}}],[\"initial\",{\"1\":{\"431\":1,\"437\":1,\"443\":1}}],[\"initialized\",{\"1\":{\"284\":1}}],[\"initializingbean\",{\"1\":{\"273\":1}}],[\"inner\",{\"1\":{\"318\":1,\"331\":1,\"335\":1,\"342\":1,\"362\":2,\"363\":2,\"383\":3}}],[\"innerjoin\",{\"0\":{\"342\":1},\"1\":{\"310\":1,\"318\":1,\"331\":1,\"335\":1,\"342\":1,\"362\":1,\"363\":1,\"383\":1}}],[\"invalid\",{\"1\":{\"299\":1}}],[\"inject\",{\"1\":{\"256\":1,\"262\":1,\"263\":1}}],[\"indexstr\",{\"1\":{\"173\":7,\"174\":7,\"402\":7}}],[\"increment`\",{\"1\":{\"111\":1}}],[\"incrementsqlcolumngenerator\",{\"1\":{\"111\":1}}],[\"increment\",{\"1\":{\"111\":1,\"213\":1}}],[\"including\",{\"1\":{\"48\":1}}],[\"include的后one或者many的第二个参数表示以多少关联属性为一组进行获取\",{\"1\":{\"372\":1}}],[\"include的关联查询单次查询最多支持的关联id\",{\"1\":{\"245\":1}}],[\"include方法内部\",{\"1\":{\"372\":1}}],[\"includeparserengine\",{\"1\":{\"290\":1}}],[\"includeprocessorfactory\",{\"1\":{\"290\":1}}],[\"include\",{\"0\":{\"39\":1,\"372\":1},\"1\":{\"372\":3,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":2,\"381\":4,\"382\":6}}],[\"instance\",{\"1\":{\"286\":1}}],[\"instanceof\",{\"1\":{\"88\":1,\"323\":1}}],[\"insert命名默认采用非null列插入\",{\"1\":{\"245\":1}}],[\"insert命令默认采用sqlexecutestrategyenum\",{\"1\":{\"159\":1,\"171\":1}}],[\"insertstrategy\",{\"1\":{\"245\":1}}],[\"insertstrategy表示sql的执行策略\",{\"1\":{\"159\":1,\"171\":1}}],[\"insertignore\",{\"0\":{\"215\":1}}],[\"insert\",{\"0\":{\"159\":1},\"1\":{\"72\":1,\"78\":1,\"84\":1,\"91\":1,\"93\":1,\"106\":1,\"111\":1,\"117\":1,\"139\":1,\"143\":1,\"144\":1,\"156\":1,\"159\":3,\"167\":2,\"168\":1,\"169\":2,\"170\":1,\"171\":3,\"173\":1,\"174\":3,\"176\":1,\"177\":1,\"196\":1,\"246\":1,\"260\":2,\"274\":6,\"299\":1,\"301\":1,\"433\":10,\"439\":10,\"444\":10}}],[\"insertable\",{\"1\":{\"72\":1,\"78\":1,\"84\":1,\"93\":1,\"106\":1,\"111\":1,\"117\":1,\"139\":1,\"143\":1,\"144\":1,\"159\":3,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":3,\"173\":1,\"174\":3,\"176\":1,\"177\":1,\"200\":2,\"299\":1,\"301\":1,\"433\":1,\"439\":1,\"444\":1}}],[\"insertbatchthreshold\",{\"1\":{\"71\":1,\"156\":1,\"245\":1}}],[\"info模式打印执行sql信息\",{\"1\":{\"194\":1,\"248\":1,\"293\":1}}],[\"info\",{\"1\":{\"73\":1,\"245\":1}}],[\"information\",{\"0\":{\"46\":1},\"1\":{\"16\":1,\"24\":1,\"46\":1,\"48\":2}}],[\"in\",{\"0\":{\"403\":1,\"406\":1,\"407\":1},\"1\":{\"20\":1,\"21\":1,\"22\":1,\"24\":1,\"46\":1,\"47\":1,\"48\":1,\"284\":1,\"322\":4,\"324\":2,\"325\":2,\"332\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":3,\"381\":4,\"382\":6,\"403\":2,\"406\":2,\"407\":1,\"422\":3}}],[\"int\",{\"1\":{\"73\":1,\"162\":1,\"166\":2,\"201\":1,\"274\":1,\"282\":5,\"331\":1,\"402\":3,\"416\":1,\"432\":1,\"433\":2,\"438\":1,\"439\":2,\"444\":2}}],[\"into\",{\"1\":{\"72\":1,\"78\":1,\"84\":1,\"93\":1,\"106\":1,\"111\":1,\"117\":1,\"139\":1,\"143\":1,\"144\":1,\"159\":3,\"167\":2,\"168\":1,\"169\":1,\"170\":1,\"171\":3,\"173\":1,\"174\":3,\"176\":1,\"177\":1,\"245\":2,\"274\":6,\"299\":1,\"301\":1,\"433\":10,\"439\":10,\"444\":10}}],[\"interceptor\",{\"0\":{\"114\":1},\"1\":{\"117\":4,\"119\":1,\"122\":5,\"447\":2}}],[\"interface\",{\"1\":{\"91\":1,\"273\":1,\"299\":1,\"323\":1,\"366\":1,\"369\":1}}],[\"internal\",{\"1\":{\"10\":2,\"268\":2}}],[\"integer>\",{\"1\":{\"299\":1}}],[\"integerlistentry\",{\"1\":{\"276\":3}}],[\"integer\",{\"0\":{\"311\":1,\"313\":1},\"1\":{\"69\":2,\"72\":6,\"117\":2,\"122\":1,\"132\":1,\"133\":1,\"162\":1,\"166\":1,\"167\":1,\"168\":10,\"169\":2,\"170\":3,\"173\":2,\"174\":6,\"193\":1,\"201\":1,\"203\":1,\"205\":4,\"206\":1,\"207\":1,\"208\":1,\"213\":1,\"216\":1,\"217\":1,\"259\":2,\"275\":1,\"284\":1,\"299\":18,\"300\":3,\"301\":5,\"315\":1,\"318\":2,\"321\":2,\"322\":4,\"324\":2,\"325\":5,\"385\":2,\"392\":1,\"397\":3,\"398\":1,\"399\":2,\"402\":1,\"416\":1,\"419\":1,\"433\":20,\"434\":2,\"439\":20,\"440\":2,\"444\":20,\"445\":2}}],[\"integernotvalueupdateatomictrack\",{\"1\":{\"68\":1,\"69\":1,\"267\":1}}],[\"introduce\",{\"1\":{\"20\":1}}],[\"introduction\",{\"0\":{\"19\":1,\"146\":1,\"303\":1},\"1\":{\"20\":1}}],[\"intro\",{\"1\":{\"19\":1}}],[\"istop=null\",{\"1\":{\"398\":1}}],[\"istop=true\",{\"1\":{\"398\":4,\"399\":2}}],[\"istop\",{\"1\":{\"321\":1,\"324\":1,\"385\":1,\"397\":1,\"398\":1,\"399\":1}}],[\"istraceenabled\",{\"1\":{\"288\":1}}],[\"isthrowifroutenotmatch\",{\"1\":{\"267\":1,\"269\":1}}],[\"isdebugenabled\",{\"1\":{\"288\":1}}],[\"isdefaulttrack\",{\"1\":{\"267\":1,\"269\":1}}],[\"isnotempty\",{\"1\":{\"322\":2,\"337\":1}}],[\"isnotblank\",{\"1\":{\"322\":2,\"323\":1,\"329\":1}}],[\"isnotnull\",{\"1\":{\"309\":1,\"335\":1,\"342\":1,\"343\":1,\"344\":1,\"361\":1,\"362\":1,\"363\":1,\"383\":1,\"392\":1,\"393\":1,\"418\":2,\"419\":2,\"422\":1,\"423\":1}}],[\"isnoversionerror\",{\"1\":{\"267\":1,\"269\":1}}],[\"isnull\",{\"1\":{\"132\":1,\"262\":1,\"422\":1,\"423\":1}}],[\"isstarttimejob\",{\"1\":{\"267\":1,\"269\":1}}],[\"issues\",{\"1\":{\"58\":2}}],[\"isprintsql\",{\"1\":{\"267\":1,\"269\":1}}],[\"iswarningbusy\",{\"1\":{\"267\":1,\"269\":1}}],[\"isquerylargecolumn\",{\"1\":{\"267\":1,\"269\":1}}],[\"isassignablefrom\",{\"1\":{\"114\":1,\"117\":2,\"119\":1,\"122\":1,\"447\":1}}],[\"isblank\",{\"1\":{\"88\":1}}],[\"iso10126padding\",{\"1\":{\"80\":5}}],[\"is\",{\"1\":{\"16\":1,\"20\":1,\"44\":1,\"45\":1,\"46\":3,\"88\":1,\"133\":4,\"309\":1,\"335\":1,\"342\":1,\"343\":1,\"344\":1,\"361\":2,\"362\":2,\"363\":2,\"383\":3,\"392\":1,\"393\":1,\"418\":2,\"419\":2,\"422\":2}}],[\"tdsorderentity\",{\"1\":{\"433\":2,\"434\":7}}],[\"tpageresult>\",{\"1\":{\"368\":1}}],[\"t3\",{\"1\":{\"323\":5}}],[\"type`\",{\"1\":{\"299\":4,\"300\":2,\"301\":4}}],[\"typecast\",{\"1\":{\"299\":1}}],[\"typename\",{\"1\":{\"275\":2,\"277\":2}}],[\"type\",{\"1\":{\"274\":2,\"275\":4,\"277\":2,\"299\":1,\"300\":2,\"301\":1,\"324\":10,\"431\":1,\"437\":1,\"443\":1}}],[\"typed=true\",{\"1\":{\"256\":1,\"262\":1,\"263\":1}}],[\"t9\",{\"1\":{\"194\":1}}],[\"t2\",{\"1\":{\"152\":5,\"154\":14,\"194\":1,\"323\":6,\"363\":1,\"383\":3,\"419\":5,\"420\":5}}],[\"tc5kw0qzxu0+uuslg==hbidjtimqweebbz5emyrhg==ji18lhiq\",{\"1\":{\"106\":1,\"109\":1}}],[\"t1\",{\"1\":{\"96\":6,\"152\":8,\"154\":20,\"194\":7,\"309\":2,\"318\":9,\"323\":14,\"331\":5,\"335\":26,\"341\":5,\"342\":26,\"343\":2,\"344\":2,\"357\":5,\"362\":27,\"363\":19,\"383\":29,\"391\":2,\"392\":4,\"393\":4,\"399\":33,\"400\":4,\"404\":7,\"405\":7,\"406\":8,\"407\":8,\"416\":1,\"417\":6,\"418\":13,\"419\":7}}],[\"teacher1\",{\"1\":{\"378\":1,\"379\":1,\"382\":1}}],[\"teacher2\",{\"1\":{\"378\":1,\"379\":1,\"382\":1}}],[\"teacher`\",{\"1\":{\"378\":2,\"379\":2,\"382\":2}}],[\"teacherid\",{\"1\":{\"374\":4}}],[\"teacher\",{\"1\":{\"299\":2,\"374\":2}}],[\"tentity\",{\"1\":{\"310\":1}}],[\"tenum\",{\"1\":{\"299\":1}}],[\"tenantid=tenantid\",{\"1\":{\"117\":1}}],[\"tenantid\",{\"1\":{\"117\":4,\"122\":1}}],[\"testsourcedirectory>\",{\"1\":{\"286\":1}}],[\"test<\",{\"1\":{\"272\":1}}],[\"testcontroller\",{\"1\":{\"257\":1,\"259\":1}}],[\"test12398\",{\"1\":{\"206\":1}}],[\"test1239\",{\"1\":{\"206\":1}}],[\"test12364\",{\"1\":{\"206\":1}}],[\"test123\",{\"1\":{\"206\":3}}],[\"test1\",{\"1\":{\"200\":2}}],[\"testusermysql\",{\"1\":{\"206\":2}}],[\"testusermysql1\",{\"1\":{\"200\":10}}],[\"testusermysql0\",{\"1\":{\"200\":4,\"206\":2}}],[\"testinsert\",{\"1\":{\"188\":6}}],[\"test`\",{\"1\":{\"158\":2,\"159\":3,\"160\":3,\"161\":1,\"171\":3,\"423\":1,\"425\":1}}],[\"test\",{\"1\":{\"71\":1,\"123\":1,\"158\":1,\"200\":1,\"257\":1,\"258\":2,\"259\":1,\"260\":1,\"284\":1,\"286\":2,\"357\":6}}],[\"tex\",{\"0\":{\"38\":1,\"471\":1}}],[\"text\",{\"1\":{\"17\":26,\"30\":1,\"47\":1}}],[\"trentity>\",{\"1\":{\"337\":1}}],[\"transport\",{\"1\":{\"284\":1}}],[\"transpojo\",{\"1\":{\"275\":1}}],[\"transmap\",{\"1\":{\"276\":3}}],[\"transtype\",{\"1\":{\"275\":2}}],[\"trans的限制\",{\"1\":{\"273\":1}}],[\"trans\",{\"1\":{\"272\":4,\"274\":2,\"275\":2}}],[\"trans依赖\",{\"1\":{\"272\":1}}],[\"trans来实现数据字典的自动获取\",{\"1\":{\"271\":1}}],[\"trans扩展\",{\"0\":{\"271\":1}}],[\"transactional内开启easy\",{\"1\":{\"200\":1}}],[\"transactional也会让事务失效\",{\"1\":{\"200\":1}}],[\"transactional注解\",{\"1\":{\"200\":1}}],[\"transactionbehavior\",{\"1\":{\"199\":1}}],[\"transactionlistener\",{\"1\":{\"199\":1}}],[\"transaction\",{\"1\":{\"199\":6,\"200\":3}}],[\"trace\",{\"1\":{\"258\":1,\"260\":1,\"288\":1}}],[\"track\",{\"1\":{\"106\":1,\"107\":2,\"108\":1,\"109\":3,\"260\":1}}],[\"trackmanager\",{\"0\":{\"102\":1},\"1\":{\"69\":4,\"100\":4,\"107\":4,\"108\":4,\"109\":4,\"206\":12,\"290\":1}}],[\"try\",{\"1\":{\"69\":1,\"100\":1,\"107\":1,\"108\":1,\"109\":1,\"200\":1,\"206\":3,\"332\":1,\"402\":1,\"432\":1,\"438\":1}}],[\"true防止在全列更新后导致未查询结果也被更新为null\",{\"1\":{\"245\":1}}],[\"true那么在track下更新那么还是有效的\",{\"1\":{\"216\":1}}],[\"true\",{\"1\":{\"69\":1,\"83\":4,\"92\":1,\"111\":2,\"114\":2,\"127\":2,\"132\":1,\"143\":1,\"144\":2,\"156\":1,\"158\":1,\"161\":1,\"162\":1,\"165\":2,\"166\":1,\"170\":3,\"193\":1,\"194\":2,\"196\":3,\"200\":1,\"201\":1,\"213\":3,\"216\":1,\"217\":1,\"242\":3,\"245\":4,\"246\":2,\"247\":1,\"248\":2,\"259\":1,\"260\":3,\"266\":3,\"275\":2,\"282\":1,\"288\":3,\"293\":2,\"299\":1,\"300\":1,\"301\":1,\"323\":2,\"324\":1,\"327\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":2,\"337\":1,\"357\":1,\"373\":1,\"374\":5,\"381\":3,\"397\":4,\"399\":1,\"416\":1,\"431\":1,\"437\":1,\"443\":1,\"446\":1,\"447\":2}}],[\"targetmappingproperty表示中间表的哪个字段和目标表的属性对应\",{\"1\":{\"374\":1}}],[\"targetmappingproperty\",{\"1\":{\"373\":1,\"374\":3}}],[\"targetproperty\",{\"1\":{\"337\":3,\"373\":1,\"374\":7,\"381\":2}}],[\"targetfield\",{\"1\":{\"273\":4}}],[\"targetfields\",{\"1\":{\"273\":4}}],[\"targetclass\",{\"1\":{\"273\":10}}],[\"target\",{\"1\":{\"273\":1,\"284\":1}}],[\"taspthz7faxkglu8wir4xg==\",{\"1\":{\"84\":1}}],[\"tasklist\",{\"0\":{\"32\":1}}],[\"tableindex不在上下文表中那么将会抛错\",{\"1\":{\"328\":1}}],[\"tableindex\",{\"1\":{\"324\":1,\"331\":2}}],[\"tablenameas\",{\"1\":{\"334\":3}}],[\"tablename\",{\"1\":{\"310\":1,\"334\":2}}],[\"tablerouteengine\",{\"1\":{\"290\":1}}],[\"tablerouter\",{\"1\":{\"290\":1}}],[\"tableroutemanager\",{\"1\":{\"263\":3,\"290\":1}}],[\"table1\",{\"1\":{\"194\":7}}],[\"tableavailable\",{\"1\":{\"91\":2,\"92\":2,\"111\":1,\"323\":3}}],[\"table\",{\"0\":{\"212\":1},\"1\":{\"48\":1,\"68\":4,\"69\":1,\"83\":1,\"91\":4,\"92\":3,\"111\":2,\"132\":1,\"158\":1,\"162\":2,\"166\":2,\"170\":1,\"193\":1,\"194\":13,\"201\":2,\"212\":1,\"213\":1,\"216\":1,\"217\":1,\"220\":1,\"221\":1,\"222\":1,\"259\":1,\"274\":2,\"275\":2,\"282\":1,\"299\":1,\"300\":1,\"301\":1,\"323\":5,\"357\":2,\"374\":5,\"381\":3,\"397\":2,\"416\":2}}],[\"tabs\",{\"0\":{\"25\":1,\"26\":1}}],[\"tags\",{\"1\":{\"46\":1}}],[\"tip\",{\"1\":{\"24\":1}}],[\"title字段的查询映射\",{\"1\":{\"390\":1}}],[\"title=title2\",{\"1\":{\"399\":2}}],[\"title=title123\",{\"1\":{\"299\":1,\"300\":1}}],[\"title=topictypejsonvalue\",{\"1\":{\"301\":1}}],[\"title123\",{\"1\":{\"299\":2}}],[\"title1\",{\"1\":{\"213\":1}}],[\"title200\",{\"1\":{\"173\":1,\"174\":3}}],[\"title999\",{\"1\":{\"170\":1}}],[\"title998\",{\"1\":{\"163\":2}}],[\"title400\",{\"1\":{\"72\":1}}],[\"title300\",{\"1\":{\"72\":1}}],[\"title500\",{\"1\":{\"72\":1}}],[\"title\",{\"1\":{\"24\":5,\"48\":1,\"69\":1,\"132\":1,\"162\":2,\"166\":2,\"170\":2,\"173\":1,\"174\":1,\"176\":2,\"177\":3,\"194\":3,\"201\":2,\"213\":1,\"216\":1,\"217\":1,\"259\":1,\"299\":1,\"300\":2,\"301\":1,\"316\":6,\"317\":8,\"321\":1,\"324\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":2,\"385\":1,\"392\":1,\"397\":2,\"399\":1,\"402\":1,\"416\":2,\"419\":1}}],[\"timeout\",{\"1\":{\"260\":2}}],[\"timestamp\",{\"1\":{\"128\":1,\"217\":1,\"315\":1}}],[\"time`\",{\"1\":{\"72\":2,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":3,\"117\":5,\"119\":1,\"122\":4,\"127\":2,\"129\":1,\"133\":3,\"139\":2,\"140\":1,\"143\":1,\"144\":1,\"167\":2,\"168\":1,\"169\":1,\"170\":1,\"173\":2,\"174\":10,\"194\":2,\"206\":1,\"207\":2,\"208\":1,\"259\":1,\"288\":3,\"299\":2,\"300\":1,\"301\":2,\"309\":5,\"322\":10,\"323\":1,\"325\":9,\"331\":1,\"332\":3,\"335\":9,\"341\":1,\"342\":3,\"343\":4,\"344\":3,\"359\":14,\"361\":1,\"362\":3,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"399\":2,\"402\":4,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"417\":4,\"418\":5,\"419\":1,\"420\":1,\"423\":1,\"425\":1,\"433\":10,\"434\":6,\"439\":10,\"440\":4,\"444\":10,\"445\":4,\"446\":1}}],[\"time\",{\"1\":{\"16\":1,\"48\":1,\"57\":1,\"94\":1,\"96\":1,\"117\":1,\"119\":1,\"128\":1,\"133\":1,\"162\":1,\"166\":1,\"176\":1,\"177\":3,\"194\":2,\"201\":1,\"207\":1,\"217\":1,\"259\":1,\"260\":1,\"288\":1,\"299\":1,\"300\":1,\"301\":1,\"315\":1,\"317\":3,\"318\":1,\"322\":2,\"325\":2,\"359\":5,\"375\":2,\"376\":2,\"377\":2,\"378\":3,\"379\":4,\"381\":6,\"382\":11,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"416\":1,\"417\":1,\"418\":2,\"419\":1,\"420\":1,\"423\":1,\"425\":1,\"434\":4,\"440\":2,\"445\":2,\"446\":1,\"447\":2}}],[\"t\",{\"1\":{\"19\":1,\"20\":1,\"69\":1,\"78\":28,\"83\":1,\"84\":75,\"85\":3,\"88\":3,\"92\":2,\"96\":15,\"106\":1,\"107\":10,\"108\":9,\"109\":19,\"117\":14,\"119\":1,\"122\":16,\"127\":19,\"129\":9,\"132\":1,\"133\":20,\"139\":11,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"150\":1,\"152\":8,\"154\":20,\"161\":1,\"162\":2,\"163\":2,\"164\":1,\"166\":2,\"167\":2,\"168\":1,\"169\":1,\"170\":1,\"174\":2,\"176\":1,\"177\":2,\"193\":1,\"194\":13,\"201\":2,\"203\":1,\"204\":1,\"205\":4,\"206\":3,\"207\":6,\"208\":2,\"212\":1,\"213\":1,\"216\":1,\"217\":1,\"245\":4,\"259\":1,\"282\":1,\"288\":19,\"299\":10,\"300\":8,\"301\":8,\"309\":35,\"316\":5,\"317\":31,\"318\":12,\"323\":37,\"331\":8,\"335\":52,\"338\":12,\"341\":11,\"342\":10,\"343\":29,\"344\":28,\"347\":4,\"348\":6,\"350\":4,\"351\":6,\"353\":2,\"354\":2,\"357\":16,\"361\":10,\"362\":15,\"363\":13,\"381\":3,\"382\":39,\"383\":11,\"386\":4,\"387\":12,\"388\":12,\"389\":13,\"390\":12,\"392\":9,\"393\":9,\"397\":2,\"398\":35,\"399\":14,\"400\":4,\"404\":6,\"405\":6,\"406\":6,\"407\":6,\"410\":4,\"411\":6,\"413\":4,\"414\":6,\"416\":5,\"417\":15,\"418\":22,\"419\":19,\"420\":11,\"442\":2}}],[\"than\",{\"1\":{\"324\":3}}],[\"that\",{\"1\":{\"16\":1,\"18\":1}}],[\"threshold\",{\"1\":{\"260\":2}}],[\"threadlocalrandom\",{\"1\":{\"184\":3,\"185\":3,\"186\":3}}],[\"throwable\",{\"1\":{\"288\":1}}],[\"throwifroutenotmatch\",{\"1\":{\"196\":1,\"246\":1}}],[\"throwifdecryptfail\",{\"1\":{\"83\":1}}],[\"throw\",{\"1\":{\"88\":1,\"165\":1,\"200\":1,\"242\":1,\"260\":2,\"266\":1,\"299\":2,\"402\":1,\"432\":1,\"434\":1,\"438\":1,\"440\":1,\"445\":1}}],[\"throws\",{\"1\":{\"73\":1,\"273\":1,\"276\":1,\"432\":1,\"438\":1}}],[\"this\",{\"1\":{\"16\":1,\"30\":1,\"44\":1,\"48\":1,\"88\":3,\"273\":1,\"299\":1,\"310\":24,\"332\":1,\"334\":2,\"366\":5,\"369\":2,\"370\":4,\"396\":3}}],[\"then\",{\"1\":{\"152\":2,\"154\":8,\"317\":6,\"318\":4,\"323\":1,\"335\":1,\"342\":1,\"362\":1,\"399\":2,\"400\":1,\"418\":1,\"419\":1}}],[\"these\",{\"1\":{\"22\":1}}],[\"them\",{\"1\":{\"18\":1,\"47\":2,\"48\":1}}],[\"theme\",{\"0\":{\"23\":1,\"53\":1},\"1\":{\"4\":1,\"23\":1,\"47\":1,\"48\":1,\"53\":1}}],[\"the\",{\"1\":{\"16\":4,\"17\":1,\"21\":1,\"23\":1,\"46\":2,\"47\":2,\"284\":1}}],[\"tomap\",{\"0\":{\"400\":1},\"1\":{\"400\":1}}],[\"toresult\",{\"1\":{\"370\":1}}],[\"tobean数据库表20列\",{\"0\":{\"181\":1}}],[\"tobean就是resultset到bean对象的过程消耗的时间\",{\"1\":{\"178\":1}}],[\"tolist2\",{\"1\":{\"284\":1}}],[\"tolist默认只查询主表数据\",{\"1\":{\"152\":1}}],[\"tolist\",{\"1\":{\"127\":1,\"129\":1,\"133\":1,\"152\":1,\"154\":2,\"185\":1,\"186\":1,\"194\":3,\"259\":1,\"273\":2,\"276\":1,\"277\":1,\"284\":1,\"309\":1,\"310\":1,\"317\":3,\"318\":1,\"322\":2,\"325\":2,\"335\":3,\"337\":2,\"338\":2,\"342\":1,\"343\":1,\"344\":1,\"359\":1,\"372\":2,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"381\":2,\"382\":6,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1}}],[\"todo\",{\"1\":{\"100\":1}}],[\"tostreamresult\",{\"1\":{\"402\":1}}],[\"tostring\",{\"1\":{\"69\":1,\"88\":2,\"92\":1,\"138\":1,\"276\":1,\"299\":1,\"300\":2,\"301\":1,\"353\":1,\"354\":1,\"374\":5,\"381\":3,\"382\":2,\"397\":1,\"398\":1,\"399\":1}}],[\"toshardingpageresult\",{\"1\":{\"310\":1}}],[\"tosql性能附带双列tobean\",{\"0\":{\"180\":1}}],[\"tosql就是表达式到字符串sql的过程消耗的时间\",{\"1\":{\"178\":1}}],[\"tosql\",{\"1\":{\"88\":1,\"158\":2,\"310\":1,\"323\":3,\"329\":1,\"330\":1,\"331\":1,\"332\":2,\"357\":5,\"383\":3}}],[\"total\",{\"1\":{\"72\":1,\"78\":4,\"84\":11,\"93\":1,\"94\":1,\"95\":1,\"96\":2,\"106\":1,\"107\":2,\"108\":1,\"109\":3,\"117\":4,\"119\":1,\"122\":5,\"127\":4,\"129\":3,\"133\":4,\"139\":2,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"163\":2,\"164\":1,\"165\":2,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"173\":1,\"174\":3,\"194\":2,\"203\":1,\"204\":1,\"205\":4,\"206\":3,\"207\":2,\"208\":2,\"259\":1,\"288\":1,\"299\":2,\"300\":1,\"301\":2,\"309\":1,\"317\":3,\"318\":1,\"322\":2,\"325\":2,\"335\":3,\"338\":2,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"347\":1,\"348\":1,\"350\":1,\"351\":1,\"353\":1,\"354\":1,\"359\":5,\"361\":2,\"362\":2,\"363\":2,\"365\":2,\"366\":14,\"369\":5,\"375\":2,\"376\":2,\"377\":2,\"378\":3,\"379\":4,\"381\":6,\"382\":11,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"410\":1,\"411\":1,\"413\":1,\"414\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1,\"423\":1,\"425\":1,\"433\":10,\"434\":4,\"439\":10,\"440\":4,\"444\":10,\"445\":4,\"446\":2}}],[\"toc\",{\"1\":{\"48\":1,\"481\":1}}],[\"top=null\",{\"1\":{\"398\":1}}],[\"top=true\",{\"1\":{\"398\":4,\"399\":2}}],[\"topageresult\",{\"1\":{\"187\":1,\"310\":1,\"337\":1,\"361\":1,\"362\":1,\"363\":1,\"370\":1,\"371\":1}}],[\"top`\",{\"1\":{\"72\":1,\"173\":1,\"174\":5,\"288\":1,\"309\":1,\"322\":2,\"325\":2,\"332\":1,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"359\":2,\"362\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"398\":4,\"399\":2,\"402\":1}}],[\"topicunion\",{\"1\":{\"419\":5,\"420\":6}}],[\"topicgenerickey\",{\"1\":{\"371\":1}}],[\"topicgrouptestdto是一个数据接受对象不具有具体表名\",{\"1\":{\"338\":1}}],[\"topicgrouptestdto\",{\"1\":{\"338\":5,\"344\":4}}],[\"topicgrouptestdtos\",{\"1\":{\"338\":2}}],[\"topicpageresult\",{\"1\":{\"361\":1}}],[\"topicproxy\",{\"1\":{\"194\":3,\"284\":2,\"317\":3}}],[\"topic3\",{\"1\":{\"359\":1}}],[\"topic2\",{\"1\":{\"359\":1}}],[\"topic1interceptor\",{\"1\":{\"267\":1}}],[\"topic=easyquery\",{\"1\":{\"202\":1}}],[\"topic=new\",{\"1\":{\"164\":1}}],[\"topictestproxy\",{\"1\":{\"194\":2}}],[\"topictype=9\",{\"1\":{\"301\":1}}],[\"topictype=classer\",{\"1\":{\"299\":1}}],[\"topictypejsonvalue\",{\"1\":{\"301\":8}}],[\"topictypejson\",{\"1\":{\"301\":6}}],[\"topictypevo\",{\"1\":{\"299\":2,\"300\":5,\"301\":2}}],[\"topictype1=teacher\",{\"1\":{\"300\":1}}],[\"topictype1\",{\"1\":{\"299\":7,\"300\":1,\"301\":7}}],[\"topictypetest1\",{\"1\":{\"299\":6}}],[\"topictypeenum\",{\"1\":{\"299\":8,\"300\":1,\"301\":1}}],[\"topictype\",{\"1\":{\"69\":1,\"299\":1,\"300\":3,\"301\":1}}],[\"topicautoproxy\",{\"1\":{\"194\":2}}],[\"topicauto\",{\"1\":{\"170\":10,\"176\":7,\"177\":11}}],[\"topicsubqueryblog\",{\"1\":{\"392\":3,\"393\":2}}],[\"topicshardingtimeshardinginitializer\",{\"1\":{\"267\":1}}],[\"topicshardingshardinginitializer\",{\"1\":{\"267\":1}}],[\"topics\",{\"1\":{\"166\":2,\"167\":1,\"168\":1,\"169\":2,\"194\":2,\"309\":1,\"343\":1,\"344\":1}}],[\"topicinterceptor2\",{\"1\":{\"117\":2,\"119\":2,\"122\":4}}],[\"topicinterceptor1\",{\"1\":{\"117\":2,\"122\":2}}],[\"topicinterceptor\",{\"1\":{\"117\":34,\"119\":19,\"122\":11}}],[\"topic`\",{\"1\":{\"96\":1,\"194\":2,\"207\":2,\"259\":1,\"284\":2,\"317\":3,\"318\":1,\"323\":1,\"331\":1,\"359\":3,\"383\":3,\"392\":1,\"393\":1,\"399\":2,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"417\":3,\"418\":3,\"419\":3,\"420\":1}}],[\"topicvalueupdateatomictrack\",{\"1\":{\"69\":6}}],[\"topic\",{\"1\":{\"69\":3,\"96\":2,\"117\":4,\"119\":1,\"122\":5,\"127\":4,\"129\":3,\"132\":1,\"133\":4,\"152\":6,\"154\":14,\"162\":3,\"163\":5,\"164\":9,\"166\":11,\"167\":2,\"168\":1,\"169\":1,\"170\":2,\"176\":1,\"177\":1,\"193\":2,\"194\":1,\"201\":3,\"202\":3,\"203\":7,\"204\":5,\"205\":16,\"206\":22,\"207\":7,\"208\":10,\"212\":2,\"213\":2,\"216\":2,\"217\":2,\"259\":4,\"282\":2,\"284\":4,\"299\":3,\"300\":3,\"301\":3,\"309\":5,\"316\":2,\"317\":9,\"318\":8,\"323\":5,\"331\":2,\"335\":5,\"338\":12,\"341\":6,\"342\":4,\"343\":4,\"344\":6,\"359\":17,\"361\":4,\"362\":5,\"363\":4,\"383\":2,\"392\":3,\"393\":3,\"397\":2,\"399\":9,\"400\":4,\"404\":2,\"405\":2,\"406\":2,\"407\":2,\"416\":3,\"417\":4,\"418\":8,\"419\":7,\"420\":2}}],[\"top\",{\"1\":{\"16\":1,\"48\":1,\"385\":1,\"397\":1,\"398\":1,\"399\":1}}],[\"to\",{\"1\":{\"10\":1,\"16\":1,\"18\":3,\"19\":1,\"20\":1,\"22\":1,\"47\":1,\"48\":1,\"90\":1,\"92\":1,\"93\":1,\"95\":1,\"96\":2,\"268\":1,\"284\":3}}],[\"lt\",{\"1\":{\"422\":1}}],[\"l4\",{\"1\":{\"122\":1,\"141\":2}}],[\"less\",{\"1\":{\"324\":1}}],[\"lenordefault\",{\"1\":{\"310\":1}}],[\"length>0\",{\"1\":{\"299\":1}}],[\"level\",{\"1\":{\"258\":2,\"260\":2}}],[\"le\",{\"1\":{\"188\":3,\"318\":1,\"359\":5,\"402\":1,\"422\":1}}],[\"left1\",{\"1\":{\"323\":1}}],[\"leftenable\",{\"1\":{\"323\":1}}],[\"leftenable=true\",{\"1\":{\"323\":1}}],[\"left\",{\"1\":{\"96\":1,\"194\":1,\"309\":1,\"323\":4,\"324\":1,\"341\":1,\"343\":1,\"344\":1,\"357\":1,\"399\":2,\"418\":1,\"419\":1,\"422\":8}}],[\"leftjoin\",{\"0\":{\"341\":1},\"1\":{\"96\":1,\"152\":2,\"154\":4,\"194\":1,\"309\":1,\"310\":1,\"323\":4,\"341\":1,\"343\":1,\"344\":1,\"357\":1,\"399\":2,\"400\":1,\"418\":1,\"419\":1}}],[\"learner\",{\"1\":{\"19\":1}}],[\"l3\",{\"1\":{\"84\":1,\"122\":1,\"141\":2}}],[\"l2\",{\"1\":{\"84\":3,\"95\":1,\"107\":2,\"108\":2,\"109\":2,\"117\":1,\"119\":1,\"122\":1,\"140\":2,\"141\":2,\"143\":2,\"144\":4}}],[\"l1\",{\"1\":{\"78\":2,\"84\":2,\"96\":1,\"106\":1,\"117\":1,\"122\":1,\"208\":2}}],[\"l\",{\"1\":{\"69\":1,\"93\":1,\"117\":1,\"127\":2,\"129\":2,\"133\":2,\"139\":2,\"143\":2,\"144\":2,\"159\":3,\"160\":5,\"161\":2,\"163\":2,\"164\":2,\"165\":2,\"170\":2,\"171\":3,\"206\":2,\"299\":1,\"301\":1,\"353\":1,\"354\":1,\"433\":1,\"439\":1,\"444\":1}}],[\"lower\",{\"1\":{\"245\":1,\"260\":1}}],[\"lombok\",{\"1\":{\"192\":1}}],[\"localtime\",{\"1\":{\"315\":1}}],[\"locale\",{\"1\":{\"314\":1,\"408\":1,\"415\":1}}],[\"localhost\",{\"1\":{\"258\":1}}],[\"localdate\",{\"1\":{\"128\":1,\"315\":1}}],[\"localdatetime\",{\"1\":{\"69\":1,\"72\":6,\"92\":1,\"93\":2,\"95\":1,\"106\":2,\"109\":1,\"117\":6,\"119\":5,\"122\":2,\"128\":1,\"132\":6,\"133\":2,\"139\":2,\"140\":1,\"143\":2,\"144\":2,\"152\":2,\"154\":4,\"162\":1,\"166\":2,\"167\":1,\"168\":10,\"169\":2,\"170\":3,\"173\":2,\"174\":6,\"176\":1,\"177\":1,\"193\":1,\"201\":1,\"206\":1,\"207\":1,\"208\":1,\"213\":1,\"216\":1,\"217\":1,\"259\":1,\"262\":4,\"299\":3,\"300\":2,\"301\":3,\"315\":1,\"321\":2,\"322\":8,\"324\":2,\"325\":7,\"359\":10,\"385\":1,\"392\":1,\"397\":4,\"399\":1,\"402\":2,\"416\":1,\"418\":2,\"419\":2,\"420\":2,\"433\":11,\"434\":4,\"439\":11,\"440\":4,\"444\":11,\"445\":4,\"446\":1,\"447\":8}}],[\"local\",{\"1\":{\"128\":2,\"217\":2}}],[\"log\",{\"1\":{\"260\":1,\"273\":2,\"288\":2}}],[\"logger\",{\"1\":{\"258\":1,\"260\":1,\"284\":1}}],[\"logging\",{\"1\":{\"245\":1,\"258\":1,\"260\":1,\"284\":3,\"288\":1}}],[\"logclass\",{\"1\":{\"245\":1}}],[\"logfactory\",{\"1\":{\"194\":1,\"284\":2}}],[\"logic\",{\"1\":{\"127\":4,\"129\":3,\"132\":1,\"133\":4}}],[\"logicdeltopiccustom\",{\"1\":{\"132\":1,\"133\":4}}],[\"logicdeltopic\",{\"1\":{\"127\":6,\"129\":6,\"133\":4}}],[\"logicdeltopics\",{\"1\":{\"127\":1,\"129\":1,\"133\":1}}],[\"logicdeletestrategyenum\",{\"1\":{\"132\":1,\"216\":1,\"217\":1,\"397\":1,\"447\":1}}],[\"logicdeletebuilder\",{\"1\":{\"132\":2,\"262\":2,\"447\":2}}],[\"logicdelete可以让整个实体以该字段作为逻辑删除字段\",{\"1\":{\"126\":1}}],[\"logicdelete\",{\"0\":{\"126\":1,\"217\":1},\"1\":{\"132\":1,\"216\":1,\"217\":1,\"397\":1,\"447\":1}}],[\"logy\",{\"1\":{\"38\":2,\"471\":2}}],[\"long类型的属性\",{\"1\":{\"128\":1}}],[\"long\",{\"1\":{\"69\":1,\"78\":1,\"84\":3,\"93\":1,\"95\":1,\"96\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"117\":3,\"119\":1,\"122\":4,\"127\":2,\"128\":2,\"129\":2,\"133\":2,\"139\":2,\"140\":3,\"141\":5,\"143\":5,\"144\":8,\"159\":3,\"160\":5,\"161\":2,\"163\":2,\"164\":2,\"165\":2,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":3,\"202\":1,\"203\":1,\"204\":1,\"205\":4,\"206\":3,\"207\":1,\"208\":2,\"217\":1,\"299\":1,\"301\":1,\"310\":5,\"315\":1,\"353\":1,\"354\":1,\"365\":6,\"366\":12,\"369\":4,\"370\":8,\"383\":1,\"392\":2,\"393\":1,\"397\":1,\"433\":1,\"439\":1,\"444\":1,\"447\":1}}],[\"longnotvalueupdateatomictrack\",{\"1\":{\"68\":1}}],[\"loadadd\",{\"1\":{\"258\":1}}],[\"loadingcache\",{\"1\":{\"10\":4,\"268\":4}}],[\"load\",{\"1\":{\"10\":1,\"268\":1,\"284\":1}}],[\"list2\",{\"1\":{\"382\":1}}],[\"list1\",{\"1\":{\"337\":1,\"372\":2,\"382\":5}}],[\"list1w\",{\"0\":{\"186\":1}}],[\"list\",{\"0\":{\"185\":1},\"1\":{\"152\":1,\"154\":2,\"194\":1,\"276\":2,\"277\":2,\"284\":1,\"317\":3,\"318\":1,\"325\":1,\"337\":1,\"369\":5,\"381\":1,\"392\":1,\"393\":1,\"406\":1,\"407\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1}}],[\"list<blogentitytest2>\",{\"1\":{\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1}}],[\"list<blogentity>\",{\"1\":{\"309\":1,\"322\":2,\"325\":2,\"335\":3,\"342\":1,\"343\":1,\"344\":1,\"347\":1,\"348\":1,\"410\":1,\"411\":1}}],[\"list<area>\",{\"1\":{\"381\":1}}],[\"list<long>\",{\"1\":{\"366\":2}}],[\"list<logicdeltopiccustom>\",{\"1\":{\"133\":1}}],[\"list<logicdeltopic>\",{\"1\":{\"127\":1,\"129\":1}}],[\"list<map<string\",{\"1\":{\"350\":1,\"351\":1,\"413\":1,\"414\":1}}],[\"list<city>\",{\"1\":{\"337\":1,\"381\":1}}],[\"list<province>\",{\"1\":{\"337\":1,\"381\":2}}],[\"list<string>\",{\"1\":{\"433\":1,\"439\":1,\"444\":1}}],[\"list<schoolclassvo>\",{\"1\":{\"382\":2}}],[\"list<schoolclass>\",{\"1\":{\"374\":1,\"376\":1,\"378\":1,\"379\":1}}],[\"list<schoolteachervo>\",{\"1\":{\"382\":1}}],[\"list<schoolteacher>\",{\"1\":{\"374\":1}}],[\"list<schoolstudentvo>\",{\"1\":{\"382\":4}}],[\"list<schoolstudent>\",{\"1\":{\"372\":2,\"374\":1,\"375\":1,\"377\":1,\"382\":1}}],[\"list<sortconfig>\",{\"1\":{\"330\":1,\"331\":1}}],[\"list<sysuser>\",{\"1\":{\"277\":1}}],[\"list<integer>\",{\"1\":{\"321\":2,\"324\":2}}],[\"list<t>\",{\"1\":{\"365\":2,\"366\":8,\"369\":1}}],[\"list<topicunion>\",{\"1\":{\"419\":1,\"420\":1}}],[\"list<topicsubqueryblog>\",{\"1\":{\"392\":1,\"393\":1}}],[\"list<topicgrouptestdto>\",{\"1\":{\"338\":2}}],[\"list<topic>\",{\"1\":{\"152\":1,\"166\":1,\"194\":3,\"317\":3,\"318\":1,\"359\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"417\":1,\"418\":1}}],[\"list<tentity>\",{\"1\":{\"310\":1,\"369\":3}}],[\"list<helpcode>>\",{\"1\":{\"276\":2}}],[\"list<helpcode>\",{\"1\":{\"276\":1}}],[\"list<\",{\"1\":{\"273\":4}}],[\"list<queryvo>\",{\"1\":{\"154\":2}}],[\"limitsql\",{\"1\":{\"383\":2}}],[\"limit等一系列处理\",{\"1\":{\"372\":1}}],[\"limit表示获取多少条\",{\"1\":{\"310\":1}}],[\"limit\",{\"1\":{\"78\":3,\"84\":8,\"94\":1,\"96\":1,\"107\":1,\"108\":1,\"109\":2,\"117\":1,\"122\":1,\"127\":1,\"133\":1,\"139\":1,\"184\":1,\"185\":3,\"186\":3,\"207\":1,\"260\":1,\"288\":1,\"299\":1,\"300\":1,\"301\":1,\"310\":1,\"323\":2,\"341\":1,\"359\":4,\"361\":1,\"362\":1,\"363\":1,\"383\":2,\"398\":5,\"399\":2,\"423\":1,\"425\":1,\"434\":4,\"440\":2,\"445\":2,\"446\":1}}],[\"likematchleft\",{\"1\":{\"84\":1,\"422\":1}}],[\"likematchright\",{\"1\":{\"84\":1,\"422\":1}}],[\"like`\",{\"1\":{\"78\":18,\"84\":48}}],[\"like\",{\"1\":{\"78\":2,\"84\":10,\"152\":2,\"154\":4,\"188\":6,\"194\":3,\"317\":6,\"318\":2,\"322\":6,\"324\":1,\"325\":2,\"357\":6,\"359\":10,\"422\":7,\"423\":1,\"424\":1,\"425\":1}}],[\"line\",{\"1\":{\"47\":1}}],[\"links\",{\"1\":{\"47\":2}}],[\"link\",{\"1\":{\"16\":2,\"24\":1}}],[\"license\",{\"0\":{\"52\":1},\"1\":{\"3\":1,\"52\":1,\"57\":1}}],[\"lambda强类型模式\",{\"1\":{\"317\":1}}],[\"lambda\",{\"1\":{\"310\":15}}],[\"lambda属性\",{\"1\":{\"235\":1}}],[\"lambdaupdatewrapper\",{\"1\":{\"188\":1}}],[\"lambdaupdatewrapper<>\",{\"1\":{\"188\":1}}],[\"lambdaupdatewrapper<plusaccount>\",{\"1\":{\"188\":1}}],[\"lambdaquerywrapper<>\",{\"1\":{\"187\":1}}],[\"lambdaquerywrapper<plusaccount>\",{\"1\":{\"187\":1}}],[\"lambdaentityexpressionbuilder\",{\"1\":{\"117\":2,\"122\":2}}],[\"last\",{\"1\":{\"184\":1,\"185\":1,\"186\":1}}],[\"large\",{\"1\":{\"158\":4,\"159\":3,\"160\":3,\"161\":1,\"171\":3,\"213\":1,\"216\":2,\"260\":1,\"397\":1,\"399\":1}}],[\"large=true\",{\"1\":{\"156\":1,\"158\":1,\"216\":1,\"217\":1}}],[\"layout\",{\"0\":{\"16\":1},\"1\":{\"16\":1}}],[\"lang\",{\"1\":{\"10\":1,\"268\":1}}],[\"❗️❗️❗️\",{\"0\":{\"9\":1,\"150\":1,\"244\":1}}],[\"重要的内容\",{\"1\":{\"464\":1}}],[\"重要\",{\"0\":{\"9\":1,\"244\":1}}],[\"efcore\",{\"1\":{\"306\":1}}],[\"err\",{\"1\":{\"288\":3}}],[\"error\",{\"1\":{\"260\":1,\"273\":2,\"288\":2}}],[\"else\",{\"1\":{\"317\":3,\"318\":1}}],[\"elseend\",{\"1\":{\"316\":4,\"317\":3,\"318\":1}}],[\"elementtype\",{\"1\":{\"273\":2}}],[\"elapsed\",{\"1\":{\"94\":1,\"96\":1,\"133\":1,\"194\":2,\"207\":1,\"259\":1,\"288\":1,\"299\":1,\"300\":1,\"301\":1,\"317\":3,\"318\":1,\"322\":2,\"325\":2,\"359\":5,\"375\":2,\"376\":2,\"377\":2,\"378\":3,\"379\":4,\"381\":6,\"382\":11,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1,\"423\":1,\"425\":1,\"434\":4,\"440\":2,\"445\":2,\"446\":1}}],[\"ekgy\",{\"1\":{\"106\":1,\"109\":1}}],[\"ecb\",{\"1\":{\"80\":3}}],[\"echarts\",{\"0\":{\"35\":1,\"468\":1}}],[\"equal\",{\"1\":{\"324\":4}}],[\"equals\",{\"1\":{\"323\":1,\"331\":1,\"335\":1,\"434\":1,\"440\":1,\"445\":1}}],[\"equalsandhashcode\",{\"1\":{\"301\":1}}],[\"eq\",{\"1\":{\"78\":1,\"84\":2,\"96\":2,\"117\":1,\"122\":1,\"133\":1,\"141\":2,\"152\":7,\"154\":14,\"163\":1,\"165\":2,\"184\":3,\"185\":3,\"186\":3,\"187\":1,\"194\":5,\"203\":2,\"204\":1,\"205\":4,\"206\":3,\"284\":2,\"309\":3,\"316\":8,\"317\":6,\"318\":3,\"322\":2,\"323\":10,\"331\":1,\"335\":4,\"337\":2,\"338\":2,\"341\":2,\"342\":2,\"343\":3,\"344\":3,\"357\":1,\"359\":8,\"362\":2,\"363\":1,\"381\":2,\"383\":1,\"392\":1,\"393\":1,\"398\":5,\"399\":4,\"400\":2,\"404\":2,\"405\":2,\"406\":1,\"407\":1,\"417\":1,\"418\":3,\"419\":3,\"420\":2,\"422\":1,\"423\":2,\"424\":1,\"425\":1,\"434\":2,\"440\":2,\"445\":2,\"446\":1,\"447\":1}}],[\"e\",{\"1\":{\"47\":2,\"288\":2,\"402\":2,\"432\":2,\"438\":2}}],[\"exec\",{\"1\":{\"434\":6,\"440\":12,\"444\":30,\"445\":12,\"446\":6}}],[\"executioncontextfactory\",{\"1\":{\"290\":1}}],[\"executions>\",{\"1\":{\"286\":1}}],[\"execution>\",{\"1\":{\"281\":1,\"286\":3}}],[\"executor\",{\"1\":{\"260\":3,\"433\":30,\"434\":12,\"439\":30}}],[\"executorqueuesize\",{\"1\":{\"196\":1,\"246\":1}}],[\"executorcorepoolsize\",{\"1\":{\"196\":1,\"246\":1}}],[\"executorcorepoolsize值大\",{\"1\":{\"196\":1}}],[\"executormaximumpoolsize\",{\"1\":{\"196\":1,\"246\":1}}],[\"execute\",{\"1\":{\"73\":1,\"161\":1,\"260\":1}}],[\"executebatch方法会返回一个int数组\",{\"1\":{\"73\":1}}],[\"executebatch\",{\"1\":{\"70\":1,\"73\":1}}],[\"executerows\",{\"1\":{\"69\":1,\"72\":1,\"78\":1,\"84\":3,\"93\":1,\"95\":1,\"96\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"111\":1,\"117\":3,\"119\":1,\"122\":4,\"127\":2,\"129\":2,\"133\":2,\"139\":1,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"159\":3,\"160\":5,\"161\":2,\"163\":2,\"164\":2,\"165\":2,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":3,\"173\":1,\"174\":3,\"176\":1,\"177\":1,\"188\":1,\"200\":2,\"202\":1,\"203\":2,\"204\":1,\"205\":4,\"206\":3,\"207\":1,\"208\":2,\"213\":2,\"299\":1,\"301\":1,\"433\":1,\"434\":2,\"439\":1,\"440\":2,\"444\":1,\"445\":2,\"446\":1}}],[\"expreesion传入当前表的属性表达式或者制定表的\",{\"1\":{\"356\":1}}],[\"expressionfactory\",{\"1\":{\"290\":1}}],[\"expressionbuilderfactory\",{\"1\":{\"290\":1}}],[\"expression\",{\"1\":{\"92\":1,\"356\":1,\"357\":12}}],[\"exists\",{\"0\":{\"403\":1,\"404\":1,\"405\":1},\"1\":{\"274\":1,\"403\":1,\"404\":2,\"405\":1,\"422\":1}}],[\"exception\",{\"1\":{\"273\":1,\"276\":1,\"332\":3,\"432\":2,\"438\":2}}],[\"excerpt\",{\"1\":{\"45\":1}}],[\"excluded\",{\"1\":{\"177\":2}}],[\"extends\",{\"1\":{\"23\":1,\"83\":1,\"132\":1,\"262\":1,\"273\":8,\"299\":2,\"366\":1,\"397\":1,\"447\":1}}],[\"extended\",{\"1\":{\"22\":1}}],[\"extensions\",{\"1\":{\"21\":1,\"22\":2}}],[\"extension\",{\"0\":{\"21\":1}}],[\"each\",{\"1\":{\"20\":1}}],[\"easily\",{\"1\":{\"18\":1}}],[\"easyshardingpageresult<t>\",{\"1\":{\"366\":2}}],[\"easystringutil\",{\"1\":{\"88\":1,\"322\":2,\"323\":1,\"329\":1}}],[\"easycollectionutil\",{\"1\":{\"322\":2,\"337\":2}}],[\"easyconnectionfactory\",{\"1\":{\"290\":1}}],[\"easydynamicorderbyconfiguration\",{\"1\":{\"310\":1}}],[\"easydatasourceconnectionfactory\",{\"1\":{\"290\":1}}],[\"easyobjectutil\",{\"1\":{\"299\":1}}],[\"easyincludeprocessorfactory\",{\"1\":{\"290\":1}}],[\"easytimejobmanager\",{\"1\":{\"290\":1}}],[\"easytransrunner\",{\"1\":{\"276\":1}}],[\"easytranseasyqueryconfig\",{\"1\":{\"273\":1}}],[\"easyjdbctypehandlermanager\",{\"1\":{\"290\":1}}],[\"easypageresult<tentity>\",{\"1\":{\"370\":1}}],[\"easypageresult<t>\",{\"1\":{\"366\":4}}],[\"easypageresult<topic>\",{\"1\":{\"361\":1}}],[\"easypageresult<blogentity>\",{\"1\":{\"362\":1,\"363\":1}}],[\"easypageresult<province>\",{\"1\":{\"337\":1}}],[\"easypageresultprovider\",{\"1\":{\"290\":1,\"365\":1,\"366\":1}}],[\"easyprepareparser\",{\"1\":{\"290\":1}}],[\"easyproxyuery\",{\"1\":{\"237\":1,\"243\":1}}],[\"easyproxyquery\",{\"1\":{\"194\":5,\"237\":1,\"242\":2,\"243\":1,\"266\":2,\"284\":2,\"317\":1}}],[\"easyktquery\",{\"1\":{\"242\":2,\"243\":2}}],[\"easywherecondition\",{\"0\":{\"231\":1},\"1\":{\"324\":21}}],[\"easyversionstrategy\",{\"0\":{\"138\":1}}],[\"easylambdautil\",{\"1\":{\"88\":2}}],[\"easyqueryexception\",{\"1\":{\"432\":1,\"438\":1}}],[\"easyqueryorderbyinvalidoperationexception\",{\"1\":{\"332\":1}}],[\"easyquerydatasource\",{\"1\":{\"290\":1}}],[\"easyquerytransdiver\",{\"1\":{\"273\":6}}],[\"easyquerytrack那么默认就会调用astracking\",{\"1\":{\"245\":1}}],[\"easyquerytrack注解即可开启\",{\"1\":{\"206\":1}}],[\"easyquerytrack注解\",{\"1\":{\"109\":3}}],[\"easyquerytrack注解的本质就是trackmanager\",{\"1\":{\"100\":1}}],[\"easyquerytrack\",{\"0\":{\"232\":1},\"1\":{\"69\":1,\"99\":1,\"206\":2,\"434\":2,\"440\":2,\"445\":2}}],[\"easyquery1\",{\"1\":{\"269\":1}}],[\"easyqueryproperties\",{\"1\":{\"267\":22,\"269\":22}}],[\"easyqueryconcurrentexception\",{\"1\":{\"203\":1}}],[\"easyqueryclient\",{\"1\":{\"194\":3,\"237\":4,\"242\":2,\"243\":4,\"248\":2,\"266\":2,\"267\":4,\"269\":3,\"273\":13,\"284\":2,\"290\":1,\"293\":2,\"317\":1}}],[\"easyquerybootstrapper\",{\"1\":{\"194\":1,\"237\":1,\"243\":1,\"248\":1,\"267\":1,\"269\":1,\"284\":2,\"293\":1}}],[\"easyqueryaccount\",{\"1\":{\"184\":3,\"185\":3,\"186\":3,\"187\":2,\"188\":7}}],[\"easyquery提供了单条修改\",{\"1\":{\"201\":1}}],[\"easyquery提供了单条插入和批量插入数据的方法\",{\"1\":{\"166\":1}}],[\"easyquery提供了内置物理删除和逻辑删除\",{\"1\":{\"162\":1}}],[\"easyquery目前除了基础的增删改查外未来还将支持分库分表\",{\"1\":{\"60\":1}}],[\"easyquery\",{\"0\":{\"58\":1,\"104\":1},\"1\":{\"61\":4,\"65\":2,\"69\":3,\"72\":1,\"78\":4,\"84\":11,\"88\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":2,\"96\":2,\"100\":1,\"106\":1,\"107\":5,\"108\":4,\"109\":4,\"111\":1,\"117\":4,\"119\":1,\"122\":5,\"127\":4,\"129\":3,\"133\":4,\"139\":2,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"152\":1,\"154\":2,\"158\":2,\"159\":3,\"160\":5,\"161\":2,\"163\":2,\"164\":3,\"165\":2,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":3,\"173\":1,\"174\":3,\"176\":1,\"177\":1,\"184\":2,\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"200\":3,\"202\":1,\"203\":2,\"204\":1,\"205\":4,\"206\":10,\"207\":2,\"208\":4,\"237\":2,\"259\":3,\"266\":2,\"267\":3,\"269\":1,\"276\":3,\"277\":3,\"297\":1,\"299\":2,\"300\":1,\"301\":2,\"309\":2,\"317\":1,\"318\":1,\"322\":2,\"323\":2,\"325\":2,\"329\":1,\"330\":1,\"331\":1,\"332\":2,\"335\":3,\"337\":3,\"338\":2,\"341\":1,\"342\":1,\"343\":2,\"344\":2,\"347\":1,\"348\":1,\"350\":1,\"351\":1,\"353\":1,\"354\":1,\"357\":5,\"359\":5,\"361\":1,\"362\":1,\"363\":1,\"371\":1,\"372\":2,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"381\":2,\"382\":6,\"383\":1,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":2,\"393\":2,\"398\":5,\"399\":2,\"400\":1,\"402\":1,\"404\":2,\"405\":2,\"406\":2,\"407\":2,\"410\":1,\"411\":1,\"413\":1,\"414\":1,\"417\":3,\"418\":3,\"419\":3,\"420\":2,\"423\":1,\"424\":1,\"425\":1,\"432\":3,\"433\":3,\"434\":4,\"438\":3,\"439\":3,\"440\":4,\"444\":3,\"445\":4,\"446\":2}}],[\"easyquery官方qq群\",{\"0\":{\"6\":1,\"55\":1}}],[\"easy\",{\"0\":{\"259\":1,\"271\":1},\"1\":{\"1\":1,\"2\":1,\"7\":1,\"50\":1,\"51\":1,\"58\":3,\"62\":1,\"64\":1,\"66\":1,\"70\":1,\"71\":1,\"72\":3,\"74\":1,\"81\":1,\"84\":1,\"87\":1,\"89\":1,\"98\":1,\"110\":1,\"113\":1,\"124\":1,\"130\":1,\"132\":1,\"133\":2,\"134\":1,\"149\":1,\"173\":2,\"174\":4,\"178\":1,\"179\":2,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":2,\"188\":1,\"189\":1,\"190\":1,\"192\":4,\"198\":1,\"234\":1,\"237\":9,\"239\":1,\"240\":3,\"241\":1,\"242\":4,\"243\":9,\"245\":2,\"247\":1,\"250\":1,\"252\":1,\"255\":1,\"258\":1,\"260\":2,\"265\":1,\"266\":4,\"271\":1,\"272\":1,\"274\":2,\"278\":1,\"280\":3,\"281\":1,\"284\":6,\"286\":4,\"287\":1,\"288\":1,\"289\":1,\"294\":1,\"306\":1,\"311\":1,\"316\":1,\"326\":1,\"333\":1,\"336\":1,\"338\":1,\"339\":1,\"345\":1,\"354\":1,\"360\":1,\"364\":1,\"372\":1,\"384\":1,\"391\":1,\"394\":1,\"399\":2,\"401\":1,\"402\":1,\"403\":1,\"408\":1,\"416\":1,\"421\":1,\"426\":1,\"429\":2,\"431\":2,\"432\":1,\"435\":2,\"437\":2,\"438\":1,\"441\":2,\"443\":2,\"447\":1}}],[\"edition\",{\"1\":{\"357\":6}}],[\"edit\",{\"1\":{\"16\":1,\"434\":2,\"440\":2,\"445\":2}}],[\"en$\",{\"1\":{\"357\":2}}],[\"english\",{\"1\":{\"314\":1,\"408\":1,\"415\":1}}],[\"engine<\",{\"1\":{\"286\":1}}],[\"enum\",{\"1\":{\"299\":2}}],[\"enumconstants\",{\"1\":{\"299\":3}}],[\"enumconverter\",{\"1\":{\"267\":1,\"299\":2,\"300\":1}}],[\"enumclass\",{\"1\":{\"299\":2}}],[\"enumdeserializer\",{\"1\":{\"299\":2}}],[\"enumvalue\",{\"1\":{\"299\":3}}],[\"encoding=\",{\"1\":{\"286\":1}}],[\"encryptwordminlength\",{\"1\":{\"83\":1}}],[\"encrypt\",{\"1\":{\"75\":1,\"90\":1,\"92\":1,\"93\":1,\"95\":1,\"96\":2}}],[\"encryption`\",{\"1\":{\"93\":1,\"94\":1,\"95\":1,\"96\":2}}],[\"encryptionstrategy\",{\"0\":{\"75\":1,\"224\":1}}],[\"encryption\",{\"0\":{\"17\":1,\"76\":1,\"223\":1},\"1\":{\"15\":1,\"39\":1,\"78\":4,\"83\":5,\"84\":11,\"92\":1}}],[\"entry<string\",{\"1\":{\"332\":1,\"432\":1,\"438\":1}}],[\"entry<integer\",{\"1\":{\"276\":1}}],[\"entryset\",{\"1\":{\"276\":1,\"332\":1,\"432\":1,\"438\":1}}],[\"entityexpressionexecutor\",{\"1\":{\"290\":1}}],[\"entitymetadatamanager\",{\"1\":{\"290\":1}}],[\"entity操作比如update对象\",{\"1\":{\"196\":1}}],[\"entityproxy\",{\"1\":{\"193\":1,\"282\":1}}],[\"entityupdateexpressionbuilder\",{\"1\":{\"117\":4,\"119\":6,\"122\":2,\"447\":8}}],[\"entityinsertexpressionbuilder\",{\"1\":{\"117\":4,\"119\":2,\"122\":2,\"447\":3}}],[\"entityinterceptor\",{\"0\":{\"116\":1},\"1\":{\"113\":1,\"117\":2,\"119\":1,\"122\":1,\"447\":1}}],[\"entityclass\",{\"1\":{\"114\":1,\"117\":9,\"119\":7,\"122\":5,\"447\":10}}],[\"entity\",{\"1\":{\"91\":1,\"104\":1,\"117\":7,\"119\":4,\"122\":3,\"206\":1,\"284\":1,\"332\":1,\"447\":6}}],[\"enablelogicdelete\",{\"1\":{\"310\":1}}],[\"enable\",{\"1\":{\"114\":1,\"242\":1,\"247\":1,\"266\":1,\"323\":2,\"431\":1,\"437\":1,\"443\":1}}],[\"end\",{\"1\":{\"47\":1,\"317\":3,\"318\":1}}],[\"enrich\",{\"1\":{\"22\":1}}],[\"enhancement\",{\"0\":{\"22\":1,\"23\":1,\"33\":1}}],[\"enhance\",{\"0\":{\"18\":1},\"1\":{\"15\":1,\"23\":1,\"39\":1,\"457\":1}}],[\"enhancer\",{\"1\":{\"10\":4,\"268\":4}}],[\"es等其余数据库在适配中\",{\"1\":{\"260\":1}}],[\"es\",{\"1\":{\"8\":3}}],[\"人大金仓kingbasees\",{\"1\":{\"8\":1}}],[\"d\",{\"1\":{\"416\":1}}],[\"dynamicmodeenum\",{\"1\":{\"327\":1}}],[\"dynamicmode\",{\"1\":{\"327\":1}}],[\"druiddatasourcefactory\",{\"1\":{\"432\":1,\"438\":1}}],[\"druiddatasource\",{\"1\":{\"431\":1,\"437\":1,\"443\":1}}],[\"druid\",{\"1\":{\"431\":2,\"437\":2,\"443\":2}}],[\"druid依赖\",{\"1\":{\"272\":1}}],[\"driverclassname\",{\"1\":{\"284\":1,\"432\":1,\"438\":1}}],[\"driver\",{\"1\":{\"194\":1,\"258\":2,\"260\":2,\"284\":1,\"431\":2,\"432\":1,\"437\":2,\"438\":1,\"443\":2}}],[\"driver可能会也可能不会继续处理剩余的命令\",{\"1\":{\"73\":1}}],[\"ds4分别对应分库插入的数据源\",{\"1\":{\"439\":1}}],[\"ds4\",{\"1\":{\"439\":6,\"440\":6}}],[\"ds4一共5个数据源\",{\"1\":{\"436\":1}}],[\"ds4一共4个数据源额外加一个默认数据源一共5个\",{\"1\":{\"432\":1,\"438\":1}}],[\"dsorderentity\",{\"1\":{\"439\":2,\"440\":7}}],[\"ds3\",{\"1\":{\"436\":1,\"439\":6}}],[\"ds1\",{\"1\":{\"433\":9,\"434\":9,\"436\":1,\"439\":6}}],[\"dsname\",{\"1\":{\"432\":2,\"438\":2}}],[\"ds\",{\"1\":{\"432\":2,\"433\":10,\"434\":6,\"438\":2}}],[\"ds2\",{\"1\":{\"267\":1,\"433\":9,\"434\":9,\"436\":1,\"439\":6}}],[\"ds0\",{\"1\":{\"196\":1,\"246\":1,\"433\":12,\"439\":7,\"440\":6,\"444\":30,\"445\":12,\"446\":6}}],[\"duplicate\",{\"1\":{\"174\":3,\"400\":1}}],[\"d4omq==kdiasgoxezjk9m+qem\",{\"1\":{\"106\":1}}],[\"databaseenum\",{\"1\":{\"245\":1}}],[\"database\",{\"1\":{\"242\":1,\"245\":1,\"247\":1,\"260\":1,\"266\":1,\"274\":1,\"431\":1,\"437\":1,\"443\":1}}],[\"datasources\",{\"1\":{\"432\":2,\"438\":2}}],[\"datasourceshardinginitializer\",{\"1\":{\"267\":1}}],[\"datasource>\",{\"1\":{\"432\":4,\"438\":4}}],[\"datasourcerouteengine\",{\"1\":{\"290\":1}}],[\"datasourcerouter\",{\"1\":{\"290\":1}}],[\"datasourceroutemanager\",{\"1\":{\"263\":3,\"290\":1}}],[\"datasourceandtableshardinginitializer\",{\"1\":{\"267\":1}}],[\"datasourceunitfactory\",{\"1\":{\"267\":1,\"269\":1,\"290\":1}}],[\"datasourcemanager\",{\"1\":{\"263\":3,\"290\":1,\"432\":3,\"438\":3}}],[\"datasource\",{\"1\":{\"194\":7,\"237\":1,\"243\":1,\"248\":1,\"256\":3,\"262\":3,\"263\":4,\"267\":3,\"269\":3,\"293\":1,\"431\":1,\"432\":4,\"437\":1,\"438\":4,\"443\":1}}],[\"data\",{\"1\":{\"69\":1,\"83\":1,\"92\":1,\"111\":1,\"132\":1,\"154\":1,\"158\":1,\"162\":1,\"166\":1,\"170\":1,\"193\":1,\"201\":1,\"212\":1,\"213\":1,\"216\":1,\"217\":1,\"259\":1,\"260\":2,\"275\":2,\"282\":1,\"299\":1,\"300\":2,\"301\":2,\"321\":1,\"324\":1,\"329\":1,\"330\":2,\"331\":2,\"357\":1,\"365\":2,\"366\":14,\"374\":5,\"381\":3,\"382\":4,\"385\":1,\"392\":1,\"397\":3,\"398\":1,\"399\":1,\"416\":1,\"419\":1,\"447\":1}}],[\"datetime\",{\"1\":{\"162\":1,\"166\":1,\"201\":1,\"416\":1}}],[\"date\",{\"1\":{\"46\":1,\"128\":2,\"217\":2,\"315\":2}}],[\"dark\",{\"1\":{\"47\":1}}],[\"danger\",{\"1\":{\"24\":1}}],[\"dameng\",{\"1\":{\"8\":3,\"260\":1}}],[\"dotnetcore\",{\"1\":{\"426\":1}}],[\"double\",{\"1\":{\"315\":1,\"325\":1}}],[\"doument\",{\"0\":{\"53\":1}}],[\"do\",{\"1\":{\"176\":1,\"177\":1}}],[\"document\",{\"1\":{\"22\":1}}],[\"documentation\",{\"1\":{\"18\":1}}],[\"donate\",{\"1\":{\"41\":1}}],[\"don\",{\"1\":{\"19\":1,\"20\":1}}],[\"distinct\",{\"1\":{\"310\":1}}],[\"disabling\",{\"0\":{\"16\":1}}],[\"disablelogicdelete\",{\"1\":{\"129\":3,\"165\":1,\"310\":1,\"372\":1,\"382\":2}}],[\"disables\",{\"1\":{\"16\":1}}],[\"disable\",{\"1\":{\"15\":1,\"16\":1,\"39\":1}}],[\"dictionarytransservice\",{\"1\":{\"276\":3}}],[\"dictionary\",{\"1\":{\"275\":2}}],[\"dialect\",{\"1\":{\"92\":2,\"290\":1}}],[\"directory\",{\"1\":{\"47\":1}}],[\"different\",{\"1\":{\"18\":1}}],[\"desc\",{\"1\":{\"330\":1,\"331\":1,\"332\":1,\"357\":12}}],[\"deserialize\",{\"1\":{\"295\":1,\"299\":3}}],[\"def\",{\"1\":{\"323\":3,\"357\":1}}],[\"deftableleft1\",{\"1\":{\"323\":3}}],[\"deftable\",{\"1\":{\"323\":6,\"357\":3}}],[\"defaultpageresult\",{\"1\":{\"366\":1}}],[\"defaultpageresult<t>\",{\"1\":{\"366\":1}}],[\"defaultpageresult<>\",{\"1\":{\"366\":1}}],[\"default=new\",{\"1\":{\"323\":2}}],[\"default当传入的条件参数值非null且字符串的情况下非空那么才会增加到条件里面\",{\"1\":{\"323\":1}}],[\"default所有的条件都接受\",{\"1\":{\"323\":1}}],[\"defaultincludeparserengine\",{\"1\":{\"290\":1}}],[\"defaulting\",{\"1\":{\"284\":1}}],[\"defaultcolumnfunctionfactory\",{\"1\":{\"290\":1}}],[\"defaultconnectionmanager\",{\"1\":{\"290\":1}}],[\"defaultconfiguration\",{\"1\":{\"290\":1}}],[\"defaultstring\",{\"1\":{\"447\":4}}],[\"defaultshardingpageresult\",{\"1\":{\"366\":1}}],[\"defaultshardingpageresult<t>\",{\"1\":{\"366\":1}}],[\"defaultshardingpageresult<>\",{\"1\":{\"366\":1}}],[\"defaultshardingquerycountmanager\",{\"1\":{\"290\":1}}],[\"defaultsqlsegmentfactory\",{\"1\":{\"290\":1}}],[\"defaultsqlclientapifactory\",{\"1\":{\"290\":1}}],[\"defaultsqlexpressioninvokefactory\",{\"1\":{\"290\":1}}],[\"defaultroutedescriptorfactor\",{\"1\":{\"290\":1}}],[\"defaultroutecontextfactory\",{\"1\":{\"290\":1}}],[\"defaultrewritecontextfactory\",{\"1\":{\"290\":1}}],[\"defaulttablerouteengine\",{\"1\":{\"290\":1}}],[\"defaulttableroutemanager\",{\"1\":{\"290\":1}}],[\"defaulttrackmanager\",{\"1\":{\"290\":1}}],[\"defaulttrack\",{\"1\":{\"245\":1}}],[\"defaultentityinterceptor\",{\"1\":{\"447\":1}}],[\"defaultentityexpressionexecutor\",{\"1\":{\"290\":1}}],[\"defaultentitymetadatamanager\",{\"1\":{\"290\":1}}],[\"defaultexecutioncontextfactory\",{\"1\":{\"290\":1}}],[\"defaulteasytimejobmanager\",{\"1\":{\"290\":1}}],[\"defaulteasyconnectionfactory\",{\"1\":{\"290\":1}}],[\"defaulteasydatasourceconnectionfactory\",{\"1\":{\"290\":1}}],[\"defaulteasyexpressionfactory\",{\"1\":{\"290\":1}}],[\"defaulteasyexpressionbuilderfactory\",{\"1\":{\"290\":1}}],[\"defaulteasyshardingexecutorservice\",{\"1\":{\"290\":1}}],[\"defaulteasyprepareparser\",{\"1\":{\"290\":1}}],[\"defaulteasyproxyquery\",{\"1\":{\"194\":1,\"237\":1,\"243\":1,\"284\":2}}],[\"defaulteasypageresultprovider\",{\"1\":{\"290\":1,\"366\":1}}],[\"defaulteasyktquery\",{\"1\":{\"243\":1}}],[\"defaulteasyqueryclient\",{\"1\":{\"290\":1}}],[\"defaulteasyqueryruntimecontext\",{\"1\":{\"290\":1}}],[\"defaulteasyquerydatasource\",{\"1\":{\"290\":1}}],[\"defaulteasyquery\",{\"1\":{\"237\":1,\"269\":1}}],[\"defaultdialect\",{\"1\":{\"290\":1}}],[\"defaultdatasourceunitfactory\",{\"1\":{\"290\":1}}],[\"defaultdatasourcemanager\",{\"1\":{\"290\":1}}],[\"defaultdatasourcemergepoolsize❗️\",{\"1\":{\"246\":1}}],[\"defaultdatasourcemergepoolsize\",{\"1\":{\"196\":1,\"431\":1,\"437\":1,\"443\":1}}],[\"defaultdatasourcerouteengine\",{\"1\":{\"290\":1}}],[\"defaultdatasourceroutemanager\",{\"1\":{\"290\":1}}],[\"defaultdatasourcename\",{\"1\":{\"196\":1,\"246\":1}}],[\"defaultaeseasyencryptionstrategy\",{\"1\":{\"267\":1}}],[\"default\",{\"1\":{\"260\":4,\"317\":2,\"323\":4,\"447\":1}}],[\"defaultvalueconverter\",{\"1\":{\"213\":1}}],[\"defaultvalueupdateatomictrack\",{\"1\":{\"68\":1,\"213\":1}}],[\"defaultbuilderconfiguration\",{\"1\":{\"194\":1,\"237\":1,\"243\":1,\"248\":1,\"267\":1,\"269\":1,\"284\":1,\"293\":1}}],[\"debug\",{\"1\":{\"288\":1}}],[\"dependencies>\",{\"1\":{\"272\":1,\"286\":1}}],[\"dependency>\",{\"1\":{\"10\":1,\"192\":6,\"237\":4,\"240\":1,\"242\":1,\"243\":4,\"255\":5,\"266\":1,\"268\":1,\"272\":12,\"280\":5,\"286\":8,\"301\":1}}],[\"del\",{\"1\":{\"127\":4,\"129\":3,\"132\":1,\"133\":4,\"143\":2,\"144\":3}}],[\"deletable\",{\"1\":{\"122\":2,\"127\":2,\"129\":1,\"133\":1,\"143\":1,\"144\":2,\"161\":2,\"163\":2,\"164\":2,\"165\":2,\"446\":1}}],[\"deletestrategy\",{\"1\":{\"447\":2}}],[\"deleteby\",{\"1\":{\"447\":3}}],[\"deletetime\",{\"1\":{\"447\":3}}],[\"deletethrow\",{\"1\":{\"245\":1}}],[\"deletethrowerror是easy\",{\"1\":{\"161\":1}}],[\"delete数据将会被改写为update\",{\"1\":{\"217\":1}}],[\"delete对象不会判断这个条件\",{\"1\":{\"196\":1,\"246\":1}}],[\"deleted=1\",{\"1\":{\"245\":1}}],[\"deleted\",{\"1\":{\"216\":1,\"217\":1,\"397\":1,\"447\":2}}],[\"deletedat\",{\"1\":{\"132\":1}}],[\"deleteduser\",{\"1\":{\"132\":2}}],[\"delete的时候也可以转换对应的update\",{\"1\":{\"124\":1}}],[\"delete的条件自定义\",{\"1\":{\"65\":1}}],[\"delete\",{\"0\":{\"161\":1},\"1\":{\"65\":1,\"122\":2,\"128\":1,\"129\":1,\"156\":1,\"161\":2,\"163\":2,\"164\":1,\"165\":1,\"196\":1,\"217\":1,\"242\":1,\"246\":1,\"260\":1,\"266\":1,\"446\":3,\"447\":2}}],[\"decrypt\",{\"1\":{\"75\":1,\"90\":2,\"91\":2,\"92\":1,\"94\":1,\"96\":1}}],[\"detail\",{\"1\":{\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1}}],[\"details\",{\"0\":{\"147\":1,\"304\":1},\"1\":{\"24\":1,\"73\":1,\"148\":1,\"284\":1,\"305\":1}}],[\"demo地址\",{\"1\":{\"271\":1}}],[\"democonfiguration\",{\"1\":{\"262\":1,\"263\":1}}],[\"demo数据\",{\"0\":{\"77\":1,\"105\":1,\"115\":1,\"125\":1,\"136\":1}}],[\"demo\",{\"0\":{\"14\":1,\"40\":1},\"1\":{\"15\":1,\"16\":1,\"19\":1,\"39\":1,\"194\":1,\"274\":2}}],[\"db1queryruntimecontext\",{\"1\":{\"263\":1}}],[\"db1queryconfiguration\",{\"1\":{\"262\":1,\"263\":1}}],[\"db1datasource\",{\"1\":{\"256\":1,\"262\":1,\"263\":1}}],[\"db1\",{\"1\":{\"256\":2,\"258\":1,\"259\":1,\"260\":2,\"262\":3,\"263\":4}}],[\"db\",{\"1\":{\"7\":1,\"259\":1,\"262\":1,\"263\":2}}],[\"达梦dameng\",{\"1\":{\"8\":1}}],[\"html\",{\"1\":{\"284\":1}}],[\"http\",{\"1\":{\"72\":3,\"173\":2,\"174\":4,\"258\":1,\"284\":1,\"286\":4,\"402\":1,\"434\":6,\"440\":12,\"444\":30,\"445\":12,\"446\":6}}],[\"https\",{\"1\":{\"58\":2,\"73\":1,\"183\":1,\"189\":1,\"234\":1,\"239\":1,\"241\":1,\"252\":1,\"265\":1,\"426\":1}}],[\"hikari\",{\"1\":{\"258\":1,\"260\":1,\"284\":1}}],[\"hikaridatasource\",{\"1\":{\"194\":2,\"256\":1,\"262\":1,\"263\":1,\"284\":9}}],[\"helpcode\",{\"1\":{\"275\":1,\"276\":5}}],[\"help\",{\"1\":{\"274\":5,\"275\":1}}],[\"hello\",{\"1\":{\"257\":3,\"258\":1,\"259\":3,\"284\":2}}],[\"here\",{\"1\":{\"47\":1,\"148\":1,\"305\":1}}],[\"having等之后\",{\"1\":{\"395\":1}}],[\"having都是相同原理\",{\"1\":{\"150\":1}}],[\"having\",{\"1\":{\"29\":1,\"310\":1}}],[\"hashmap<>\",{\"1\":{\"276\":1,\"432\":1,\"438\":1}}],[\"hashmap<string\",{\"1\":{\"276\":1,\"332\":4,\"432\":1,\"438\":1}}],[\"hashset<>\",{\"1\":{\"132\":1,\"262\":1,\"447\":1}}],[\"has\",{\"1\":{\"22\":1,\"30\":1}}],[\"hoq==\",{\"1\":{\"106\":1}}],[\"hoq==56qklsvta6ee9qpwjbysrq==kdiasgoxezjk9m+qem\",{\"1\":{\"106\":3}}],[\"how\",{\"1\":{\"19\":1}}],[\"hope\",{\"1\":{\"4\":1,\"41\":1,\"46\":1,\"53\":1,\"474\":1,\"479\":1}}],[\"h2booktest\",{\"1\":{\"357\":18}}],[\"h2o\",{\"1\":{\"27\":1,\"460\":1}}],[\"h2\",{\"1\":{\"8\":4,\"183\":1,\"260\":1}}],[\"multi\",{\"1\":{\"260\":1}}],[\"multiconnwaittimeoutmillis\",{\"1\":{\"196\":1,\"246\":1}}],[\"multiply\",{\"1\":{\"173\":1,\"174\":1,\"402\":1}}],[\"millis\",{\"1\":{\"260\":2}}],[\"michael\",{\"1\":{\"187\":1}}],[\"minordefault\",{\"1\":{\"310\":1}}],[\"min\",{\"1\":{\"85\":1,\"246\":1,\"393\":1}}],[\"mzcc2dqxidxgrye2rq==n1pxqra9c9lfh5xcy6xj6w==\",{\"1\":{\"106\":1,\"109\":1}}],[\"mojo<\",{\"1\":{\"286\":1}}],[\"modelversion>\",{\"1\":{\"286\":1}}],[\"mode\",{\"1\":{\"260\":1}}],[\"mobile\",{\"1\":{\"90\":1,\"323\":1,\"357\":1}}],[\"more\",{\"1\":{\"23\":1,\"45\":1,\"478\":1}}],[\"many\",{\"1\":{\"376\":1,\"378\":1,\"379\":2,\"381\":4,\"382\":2}}],[\"manytomany\",{\"1\":{\"372\":1,\"374\":3,\"382\":1}}],[\"manytoone\",{\"0\":{\"377\":1},\"1\":{\"372\":1,\"374\":2,\"382\":2}}],[\"maven2\",{\"1\":{\"286\":1}}],[\"maven\",{\"1\":{\"286\":7}}],[\"maven项目\",{\"0\":{\"254\":1}}],[\"map结果返回\",{\"0\":{\"408\":1}}],[\"map返回默认key忽略大小写\",{\"1\":{\"349\":1,\"412\":1}}],[\"map<string\",{\"1\":{\"332\":2,\"400\":1,\"424\":1,\"425\":1,\"432\":2,\"438\":2}}],[\"map<integer\",{\"1\":{\"276\":1}}],[\"map\",{\"0\":{\"314\":1,\"415\":1},\"1\":{\"276\":1,\"315\":1,\"332\":1,\"400\":1,\"432\":1,\"438\":1}}],[\"mappingclass\",{\"1\":{\"373\":1,\"374\":3}}],[\"mapping\",{\"1\":{\"257\":2,\"259\":3}}],[\"mapper\",{\"1\":{\"184\":2,\"185\":2,\"186\":2,\"187\":2,\"188\":2}}],[\"match\",{\"1\":{\"260\":1}}],[\"math\",{\"1\":{\"246\":1}}],[\"maxactive\",{\"1\":{\"432\":1,\"438\":1}}],[\"maxordefault\",{\"1\":{\"310\":1}}],[\"maximumpoolsize\",{\"1\":{\"284\":1}}],[\"maximum\",{\"1\":{\"260\":1}}],[\"max\",{\"1\":{\"260\":2,\"393\":1,\"431\":1,\"437\":1,\"443\":1}}],[\"maxshardingroutecount\",{\"1\":{\"196\":1,\"246\":1}}],[\"maxshardingquerylimit❗️\",{\"1\":{\"246\":1}}],[\"maxshardingquerylimit\",{\"1\":{\"196\":2}}],[\"max等\",{\"1\":{\"85\":1}}],[\"mainclass>\",{\"1\":{\"286\":1}}],[\"main\",{\"1\":{\"194\":2,\"258\":3,\"284\":1,\"286\":1}}],[\"mark\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"markdown\",{\"0\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"452\":1,\"453\":1,\"454\":1,\"455\":1},\"1\":{\"15\":1,\"18\":2,\"19\":3,\"20\":1,\"21\":3,\"22\":2,\"23\":1,\"24\":1,\"39\":1,\"46\":1,\"47\":2,\"449\":1,\"452\":2,\"453\":3,\"454\":1,\"455\":3,\"456\":2,\"457\":1,\"458\":1,\"472\":1,\"479\":1,\"480\":2}}],[\"mybooleanlogicdeletestrategy\",{\"1\":{\"447\":1}}],[\"mybatis\",{\"1\":{\"183\":2,\"184\":3,\"185\":3,\"186\":3,\"187\":4,\"188\":4,\"306\":1}}],[\"mypager<>\",{\"1\":{\"371\":1}}],[\"mypager<tentity>\",{\"1\":{\"370\":1}}],[\"mypager\",{\"1\":{\"370\":2}}],[\"mypageresult<>\",{\"1\":{\"370\":1}}],[\"mypageresult<tentity>\",{\"1\":{\"369\":1}}],[\"mypageresult\",{\"1\":{\"369\":1}}],[\"mynameconversion\",{\"1\":{\"292\":2,\"293\":2}}],[\"mystarterconfigurer\",{\"1\":{\"292\":3}}],[\"mysysoutlogimpl\",{\"1\":{\"288\":2}}],[\"mysqldatabaseconfiguration\",{\"1\":{\"194\":1,\"237\":1,\"243\":1,\"248\":1,\"267\":1,\"284\":2,\"293\":1}}],[\"mysql驱动\",{\"1\":{\"192\":1,\"272\":1,\"280\":1,\"286\":1}}],[\"mysql<\",{\"1\":{\"192\":1,\"237\":1,\"243\":1,\"280\":1,\"286\":1}}],[\"mysql语法\",{\"1\":{\"192\":1}}],[\"mysql方言\",{\"0\":{\"172\":1}}],[\"mysqlnextid\",{\"1\":{\"111\":3}}],[\"mysqlaesencryptcolumnvaluesqlconverter\",{\"1\":{\"92\":3,\"267\":1}}],[\"mysql加密解密\",{\"0\":{\"90\":1}}],[\"mysql需要链接字符串启用批处理参数rewritebatchedstatements=true\",{\"1\":{\"70\":1}}],[\"mysql\",{\"1\":{\"8\":4,\"70\":1,\"71\":1,\"194\":2,\"242\":1,\"245\":1,\"247\":1,\"258\":2,\"260\":3,\"266\":1,\"284\":3,\"431\":3,\"432\":2,\"437\":3,\"438\":2,\"443\":3}}],[\"my\",{\"1\":{\"277\":1,\"385\":1}}],[\"myeq\",{\"1\":{\"269\":1}}],[\"myentityinterceptor\",{\"1\":{\"117\":2,\"119\":2,\"267\":1}}],[\"myencryptionstrategy\",{\"1\":{\"83\":3,\"267\":1}}],[\"mycontroller\",{\"1\":{\"277\":1}}],[\"myconfiguration\",{\"1\":{\"269\":1,\"292\":1}}],[\"mycolumnpropertyfunction\",{\"1\":{\"88\":4}}],[\"mylogicdelstrategy\",{\"1\":{\"132\":3,\"262\":3,\"263\":1,\"267\":1}}],[\"mytenantinterceptor\",{\"1\":{\"117\":2,\"122\":2,\"267\":1}}],[\"mydatabaseincrementsqlcolumngenerator\",{\"1\":{\"111\":2,\"267\":1}}],[\"mtizndu2nzg5mde=\",{\"1\":{\"78\":2}}],[\"merge\",{\"1\":{\"260\":1}}],[\"mermaid\",{\"0\":{\"37\":1,\"470\":1}}],[\"memory\",{\"1\":{\"246\":1,\"260\":1}}],[\"methodtype\",{\"1\":{\"257\":1,\"259\":2}}],[\"method\",{\"1\":{\"200\":2,\"257\":1,\"259\":2,\"273\":1}}],[\"meta\",{\"1\":{\"48\":1}}],[\"ms\",{\"1\":{\"46\":1,\"94\":1,\"96\":1,\"107\":1,\"108\":1,\"109\":2,\"133\":1,\"139\":1,\"194\":2,\"196\":3,\"207\":1,\"246\":1,\"259\":1,\"288\":1,\"299\":1,\"300\":1,\"301\":1,\"317\":3,\"318\":1,\"322\":2,\"325\":2,\"359\":5,\"362\":2,\"363\":2,\"375\":2,\"376\":2,\"377\":2,\"378\":3,\"379\":4,\"381\":6,\"382\":11,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1,\"423\":1,\"425\":1,\"434\":4,\"440\":2,\"445\":2,\"446\":1,\"479\":1}}],[\"mssql\",{\"1\":{\"8\":6,\"260\":2}}],[\"mr\",{\"1\":{\"41\":1,\"474\":1}}],[\"md\",{\"1\":{\"23\":1,\"457\":1}}],[\"phase>\",{\"1\":{\"286\":2}}],[\"phone=null\",{\"1\":{\"424\":1,\"425\":1}}],[\"phone=13232456789\",{\"1\":{\"94\":1}}],[\"phone\",{\"1\":{\"91\":1,\"92\":1,\"424\":6,\"425\":5}}],[\"phonesupportlike\",{\"1\":{\"83\":1}}],[\"phonenotsupportlike\",{\"1\":{\"83\":1}}],[\"publishtime=null\",{\"1\":{\"399\":2}}],[\"publishtime\",{\"1\":{\"322\":2,\"324\":2,\"385\":1,\"397\":1,\"399\":1}}],[\"publishtimeend\",{\"1\":{\"321\":1,\"322\":2,\"324\":1}}],[\"publishtimebegin\",{\"1\":{\"321\":1,\"322\":2,\"324\":1}}],[\"public\",{\"1\":{\"47\":1,\"69\":1,\"83\":4,\"88\":11,\"91\":1,\"92\":4,\"111\":3,\"117\":16,\"119\":6,\"122\":6,\"132\":7,\"154\":1,\"158\":1,\"162\":1,\"166\":1,\"170\":1,\"193\":1,\"194\":2,\"200\":2,\"201\":1,\"206\":1,\"212\":1,\"213\":1,\"216\":1,\"217\":1,\"256\":2,\"257\":2,\"258\":2,\"259\":4,\"262\":6,\"263\":4,\"267\":1,\"269\":2,\"273\":10,\"275\":2,\"276\":2,\"277\":2,\"288\":9,\"292\":6,\"293\":2,\"299\":10,\"300\":2,\"301\":2,\"321\":1,\"323\":7,\"324\":1,\"329\":2,\"330\":3,\"331\":3,\"332\":3,\"357\":1,\"366\":13,\"369\":5,\"370\":4,\"374\":5,\"381\":3,\"382\":4,\"385\":1,\"392\":1,\"397\":3,\"398\":1,\"399\":1,\"416\":1,\"419\":1,\"432\":2,\"433\":2,\"434\":2,\"438\":2,\"439\":2,\"440\":2,\"444\":2,\"445\":2,\"446\":1,\"447\":10,\"480\":1}}],[\"put\",{\"1\":{\"276\":1,\"332\":4,\"432\":1,\"438\":1}}],[\"port\",{\"1\":{\"431\":1,\"437\":1,\"443\":1}}],[\"pointer\",{\"0\":{\"424\":1}}],[\"pom\",{\"1\":{\"286\":2}}],[\"poolsize\",{\"1\":{\"263\":1}}],[\"pool\",{\"1\":{\"260\":3,\"431\":1,\"437\":1,\"443\":1}}],[\"postgressql\",{\"1\":{\"8\":1}}],[\"psvm下\",{\"0\":{\"191\":1}}],[\"p\",{\"1\":{\"187\":2,\"323\":3}}],[\"p2\",{\"1\":{\"84\":2}}],[\"pbnjuykleazzorrnmuupja==igrqqipsftsbjal4l1uvia==act0smpmvtnwd\",{\"1\":{\"84\":2}}],[\"pcbc\",{\"1\":{\"80\":3}}],[\"pkcs5padding\",{\"1\":{\"80\":6}}],[\"plusaccount\",{\"1\":{\"187\":2,\"188\":10}}],[\"plus\",{\"1\":{\"183\":1,\"184\":2,\"185\":2,\"186\":2,\"187\":3,\"188\":3,\"306\":1}}],[\"plus的\",{\"1\":{\"182\":1}}],[\"plusdays\",{\"1\":{\"166\":1,\"170\":1,\"173\":2,\"174\":2,\"176\":1,\"177\":1,\"402\":2}}],[\"plugin>\",{\"1\":{\"286\":4}}],[\"plugin<\",{\"1\":{\"255\":1,\"286\":4}}],[\"plugin\",{\"1\":{\"23\":1,\"457\":1}}],[\"plugins>\",{\"1\":{\"286\":1}}],[\"plugins\",{\"1\":{\"21\":1}}],[\"place\",{\"1\":{\"47\":1}}],[\"playground\",{\"0\":{\"42\":1,\"43\":1}}],[\"plan\",{\"1\":{\"32\":2}}],[\"please\",{\"1\":{\"19\":1,\"22\":1,\"47\":1}}],[\"packaging>\",{\"1\":{\"286\":1}}],[\"path>\",{\"1\":{\"281\":1,\"286\":1}}],[\"password\",{\"1\":{\"258\":1,\"260\":1,\"284\":1,\"431\":1,\"432\":3,\"437\":1,\"438\":3,\"443\":1}}],[\"paginate\",{\"1\":{\"187\":1}}],[\"pagetotal\",{\"1\":{\"370\":5}}],[\"pager<tentity\",{\"1\":{\"368\":1,\"370\":1}}],[\"pageresult<topicgenerickey>\",{\"1\":{\"371\":1}}],[\"pageresult<tentity>>\",{\"1\":{\"370\":1}}],[\"pageresult<tentity>\",{\"1\":{\"369\":1,\"370\":1}}],[\"pageresult<t>\",{\"1\":{\"369\":1}}],[\"pageresult1\",{\"1\":{\"337\":1}}],[\"pageresult\",{\"1\":{\"310\":2,\"370\":3,\"371\":3}}],[\"pageindex\",{\"1\":{\"365\":2,\"366\":2,\"370\":7}}],[\"page<plusaccount>\",{\"1\":{\"187\":1}}],[\"pagesize\",{\"1\":{\"187\":3,\"365\":2,\"366\":2,\"370\":7}}],[\"pages\",{\"1\":{\"18\":2}}],[\"page\",{\"0\":{\"45\":1,\"46\":1,\"47\":1,\"48\":1},\"1\":{\"15\":1,\"16\":4,\"20\":1,\"39\":1,\"45\":1,\"46\":2,\"48\":2,\"187\":4,\"362\":1,\"363\":1}}],[\"partition\",{\"1\":{\"357\":7}}],[\"param\",{\"1\":{\"91\":7,\"263\":2,\"288\":1,\"447\":9}}],[\"parameters\",{\"1\":{\"72\":3,\"78\":4,\"84\":11,\"93\":1,\"94\":1,\"95\":1,\"96\":2,\"106\":1,\"107\":2,\"108\":1,\"109\":3,\"117\":4,\"119\":1,\"122\":5,\"127\":4,\"129\":2,\"133\":3,\"139\":2,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"159\":3,\"160\":3,\"161\":1,\"163\":2,\"164\":1,\"165\":2,\"167\":1,\"168\":10,\"169\":2,\"170\":1,\"171\":3,\"173\":1,\"174\":3,\"194\":2,\"203\":1,\"204\":1,\"205\":4,\"206\":3,\"207\":2,\"208\":2,\"259\":1,\"284\":1,\"288\":1,\"299\":2,\"300\":1,\"301\":2,\"309\":1,\"317\":3,\"318\":1,\"322\":2,\"325\":2,\"335\":3,\"338\":2,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"348\":1,\"351\":1,\"354\":1,\"359\":5,\"362\":2,\"375\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":3,\"381\":4,\"382\":6,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"411\":1,\"414\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1,\"423\":1,\"425\":1,\"433\":10,\"434\":6,\"439\":10,\"440\":4,\"444\":10,\"445\":4,\"446\":2}}],[\"paragraph\",{\"1\":{\"17\":26}}],[\"parsed\",{\"1\":{\"21\":1}}],[\"price\",{\"1\":{\"357\":15}}],[\"printstacktrace\",{\"1\":{\"288\":1}}],[\"printsql\",{\"1\":{\"245\":1}}],[\"println\",{\"1\":{\"284\":1,\"288\":15,\"299\":1,\"301\":1,\"432\":1,\"438\":1}}],[\"print\",{\"1\":{\"242\":1,\"260\":1,\"266\":1}}],[\"primary来实现替换\",{\"1\":{\"292\":1}}],[\"primary\",{\"1\":{\"162\":1,\"166\":1,\"201\":1,\"274\":2,\"292\":1,\"416\":1}}],[\"primarykey\",{\"1\":{\"69\":1,\"83\":1,\"92\":1,\"111\":1,\"132\":1,\"162\":1,\"166\":1,\"170\":1,\"193\":1,\"201\":1,\"213\":2,\"216\":1,\"217\":1,\"259\":1,\"275\":2,\"282\":1,\"299\":1,\"300\":1,\"301\":1,\"357\":1,\"374\":5,\"381\":3,\"397\":2,\"416\":1,\"447\":1}}],[\"private\",{\"1\":{\"69\":5,\"83\":6,\"88\":3,\"92\":7,\"111\":3,\"117\":2,\"132\":8,\"154\":3,\"158\":3,\"162\":4,\"166\":4,\"170\":4,\"193\":4,\"201\":4,\"213\":4,\"216\":5,\"217\":5,\"242\":3,\"259\":5,\"262\":1,\"266\":3,\"273\":2,\"275\":9,\"276\":2,\"277\":1,\"290\":1,\"299\":6,\"300\":10,\"301\":7,\"321\":11,\"323\":1,\"324\":11,\"329\":2,\"330\":3,\"331\":3,\"332\":1,\"357\":5,\"366\":5,\"369\":2,\"370\":3,\"374\":18,\"381\":11,\"382\":15,\"385\":10,\"392\":5,\"397\":21,\"398\":5,\"399\":11,\"416\":4,\"419\":3,\"432\":3,\"433\":1,\"438\":3,\"439\":1,\"444\":1,\"447\":12}}],[\"predicatefilterinterceptor\",{\"0\":{\"120\":1},\"1\":{\"113\":1,\"117\":1,\"122\":1}}],[\"preparing\",{\"1\":{\"72\":1,\"78\":4,\"84\":11,\"93\":1,\"94\":1,\"95\":1,\"96\":2,\"106\":1,\"107\":2,\"108\":1,\"109\":3,\"117\":4,\"119\":1,\"122\":5,\"127\":4,\"129\":3,\"133\":4,\"139\":2,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"159\":3,\"160\":3,\"161\":1,\"163\":2,\"164\":1,\"165\":2,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":3,\"173\":1,\"174\":3,\"194\":2,\"203\":1,\"204\":1,\"205\":4,\"206\":3,\"207\":2,\"208\":2,\"259\":1,\"284\":1,\"288\":1,\"299\":2,\"300\":1,\"301\":2,\"309\":1,\"317\":3,\"318\":1,\"322\":2,\"325\":2,\"335\":3,\"338\":2,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"347\":1,\"348\":1,\"350\":1,\"351\":1,\"353\":1,\"354\":1,\"359\":5,\"361\":2,\"362\":2,\"363\":2,\"375\":2,\"376\":2,\"377\":2,\"378\":3,\"379\":4,\"381\":6,\"382\":11,\"386\":1,\"387\":1,\"388\":1,\"389\":1,\"390\":1,\"392\":1,\"393\":1,\"398\":5,\"399\":2,\"402\":1,\"404\":1,\"405\":1,\"406\":1,\"407\":1,\"410\":1,\"411\":1,\"413\":1,\"414\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1,\"423\":1,\"425\":1,\"433\":10,\"434\":6,\"439\":10,\"440\":4,\"444\":10,\"445\":4,\"446\":2}}],[\"presentation\",{\"0\":{\"44\":1}}],[\"prev\",{\"1\":{\"16\":1}}],[\"provinces\",{\"1\":{\"381\":1}}],[\"province`\",{\"1\":{\"381\":2}}],[\"provincecode=33\",{\"1\":{\"381\":2}}],[\"provincecode\",{\"1\":{\"381\":3}}],[\"province\",{\"1\":{\"337\":6,\"381\":8}}],[\"provides\",{\"1\":{\"23\":1}}],[\"produce\",{\"1\":{\"337\":3}}],[\"propname\",{\"1\":{\"324\":5}}],[\"properties\",{\"1\":{\"432\":11,\"438\":11}}],[\"properties>\",{\"1\":{\"237\":1,\"240\":1,\"242\":1,\"243\":1,\"266\":1,\"286\":1}}],[\"property忽略表示对应的主键\",{\"1\":{\"374\":1}}],[\"property\",{\"1\":{\"323\":4,\"330\":1,\"331\":1}}],[\"property属性模式\",{\"1\":{\"317\":1}}],[\"propertyclass\",{\"1\":{\"299\":2}}],[\"property<t1\",{\"1\":{\"337\":2}}],[\"property<trentity\",{\"1\":{\"337\":2}}],[\"property<t\",{\"1\":{\"88\":2}}],[\"propertyname\",{\"1\":{\"88\":9,\"132\":5,\"262\":5,\"447\":4}}],[\"program\",{\"1\":{\"284\":1}}],[\"processor\",{\"1\":{\"237\":1,\"243\":1}}],[\"processor<\",{\"1\":{\"192\":1,\"237\":1,\"243\":1,\"280\":1,\"281\":1,\"286\":2}}],[\"projects那么会自动调用columnall防止出现select\",{\"1\":{\"398\":1}}],[\"project>\",{\"1\":{\"286\":1}}],[\"project进行生成\",{\"1\":{\"193\":1}}],[\"projectlombok<\",{\"1\":{\"192\":1,\"255\":1,\"272\":1}}],[\"project\",{\"1\":{\"192\":1,\"286\":1}}],[\"protected\",{\"1\":{\"132\":2,\"262\":2,\"447\":2}}],[\"proxy的代理模式\",{\"1\":{\"429\":1,\"435\":1,\"441\":1}}],[\"proxy代理模式\",{\"1\":{\"317\":1}}],[\"proxy和sql\",{\"1\":{\"237\":1,\"243\":1}}],[\"proxy<\",{\"1\":{\"192\":1,\"237\":1,\"243\":1,\"280\":1,\"286\":1}}],[\"proxy\",{\"1\":{\"10\":2,\"268\":2,\"284\":2}}],[\"pgsql方言\",{\"0\":{\"175\":1}}],[\"pgsql的geo数据新增或者自定义数据库函数生成列时\",{\"1\":{\"112\":1}}],[\"pgsql\",{\"1\":{\"8\":3,\"260\":1}}],[\"switch\",{\"1\":{\"299\":1}}],[\"snapshot<\",{\"1\":{\"286\":1}}],[\"slf4j\",{\"1\":{\"273\":2,\"284\":5}}],[\"slf4jimpl实现如果你是非spring\",{\"1\":{\"245\":1}}],[\"short\",{\"1\":{\"315\":1,\"325\":1}}],[\"should\",{\"1\":{\"18\":1,\"47\":1,\"48\":1}}],[\"shardinginitrunner\",{\"1\":{\"432\":1,\"438\":1}}],[\"shardinginitializer\",{\"1\":{\"212\":1}}],[\"shardingquerycountmanager\",{\"1\":{\"290\":1}}],[\"shardingcomparer\",{\"1\":{\"290\":1}}],[\"shardingtablerouter\",{\"1\":{\"290\":1}}],[\"shardingtablekey\",{\"0\":{\"229\":1}}],[\"shardingdatasourcerouter\",{\"1\":{\"290\":1}}],[\"shardingdatasourcekey\",{\"0\":{\"227\":1}}],[\"sharding\",{\"1\":{\"260\":3,\"426\":2,\"433\":30,\"434\":12,\"439\":30}}],[\"shardingexecutorservice\",{\"1\":{\"290\":1}}],[\"shardingexecutetimeoutmillis\",{\"1\":{\"196\":1,\"246\":1}}],[\"shardingextratablekey\",{\"0\":{\"230\":1}}],[\"shardingextradatasourcekey\",{\"0\":{\"228\":1}}],[\"schoolteachervo\",{\"1\":{\"382\":1}}],[\"schoolteacher\",{\"1\":{\"374\":1,\"378\":3}}],[\"schoolteachers=\",{\"1\":{\"378\":3}}],[\"schoolteachers=null\",{\"1\":{\"376\":3,\"377\":3}}],[\"schoolteachers\",{\"1\":{\"374\":1,\"382\":1}}],[\"schoolclassvo\",{\"1\":{\"382\":7}}],[\"schoolclass=schoolclass\",{\"1\":{\"377\":3}}],[\"schoolclass=null\",{\"1\":{\"375\":3,\"376\":3}}],[\"schoolclasses=null\",{\"1\":{\"378\":3}}],[\"schoolclasses\",{\"1\":{\"374\":1}}],[\"schoolclassteacher\",{\"1\":{\"374\":4}}],[\"schoolclass\",{\"1\":{\"374\":3,\"376\":5,\"378\":5,\"379\":3,\"382\":7}}],[\"school\",{\"1\":{\"374\":5}}],[\"schoolstudentvo\",{\"1\":{\"382\":8}}],[\"schoolstudent=null\",{\"1\":{\"375\":3}}],[\"schoolstudentaddressvo\",{\"1\":{\"382\":2}}],[\"schoolstudentaddress=null\",{\"1\":{\"376\":3,\"377\":3}}],[\"schoolstudentaddress=schoolstudentaddress\",{\"1\":{\"375\":3}}],[\"schoolstudentaddress\",{\"1\":{\"374\":3,\"382\":1}}],[\"schoolstudents=null\",{\"1\":{\"377\":3,\"378\":3}}],[\"schoolstudents=\",{\"1\":{\"376\":3}}],[\"schoolstudents\",{\"1\":{\"374\":1,\"382\":1}}],[\"schoolstudent\",{\"1\":{\"372\":4,\"374\":3,\"375\":5,\"376\":3,\"377\":5,\"382\":12}}],[\"schemalocation=\",{\"1\":{\"286\":1}}],[\"schema\",{\"1\":{\"212\":1}}],[\"scheme\",{\"1\":{\"33\":1}}],[\"score=null\",{\"1\":{\"398\":1}}],[\"score=2\",{\"1\":{\"398\":1}}],[\"score=1\",{\"1\":{\"398\":3,\"399\":2}}],[\"score\",{\"1\":{\"321\":1,\"323\":1,\"324\":1,\"385\":1,\"397\":1,\"398\":1,\"399\":1}}],[\"scope>\",{\"1\":{\"192\":3,\"255\":1,\"272\":1,\"286\":2}}],[\"system\",{\"1\":{\"196\":1,\"246\":1,\"260\":1,\"288\":16,\"299\":1,\"301\":1,\"432\":1,\"438\":1}}],[\"sysuser\",{\"1\":{\"152\":3,\"154\":8,\"275\":1,\"277\":1,\"423\":5,\"424\":5,\"425\":5}}],[\"sysuserversionlonglogicdel\",{\"1\":{\"143\":13,\"144\":14}}],[\"sysuserversionlong1\",{\"1\":{\"139\":2,\"140\":1}}],[\"sysuserversionlong\",{\"1\":{\"139\":13,\"141\":8}}],[\"sysusertrack2\",{\"1\":{\"107\":3,\"109\":3}}],[\"sysusertrack1\",{\"1\":{\"107\":4,\"108\":3,\"109\":3}}],[\"sysusertrack\",{\"1\":{\"106\":10,\"107\":4,\"108\":2,\"109\":4}}],[\"sysusersqlencryption1\",{\"1\":{\"96\":1}}],[\"sysusersqlencryption\",{\"1\":{\"92\":1,\"93\":2,\"94\":4,\"95\":5,\"96\":7}}],[\"sysuserencryption8\",{\"1\":{\"84\":2}}],[\"sysuserencryption7\",{\"1\":{\"84\":4}}],[\"sysuserencryption6\",{\"1\":{\"84\":2}}],[\"sysuserencryption5\",{\"1\":{\"84\":2}}],[\"sysuserencryption4\",{\"1\":{\"84\":2}}],[\"sysuserencryption3\",{\"1\":{\"78\":2,\"84\":2}}],[\"sysuserencryption2\",{\"1\":{\"78\":3,\"84\":3}}],[\"sysuserencryption1\",{\"1\":{\"78\":6,\"84\":6}}],[\"sysuserencryption\",{\"1\":{\"78\":19,\"83\":1,\"84\":37}}],[\"sys\",{\"1\":{\"78\":4,\"83\":1,\"84\":11,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":2,\"106\":1,\"107\":2,\"108\":1,\"109\":3,\"139\":2,\"140\":1,\"141\":3,\"143\":2,\"144\":3,\"274\":3,\"275\":1,\"423\":1,\"425\":1}}],[\"syntax\",{\"1\":{\"21\":1,\"22\":1,\"23\":1}}],[\"sample\",{\"1\":{\"428\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"sayhello\",{\"1\":{\"206\":2}}],[\"sa版权协议\",{\"1\":{\"73\":1}}],[\"safely\",{\"1\":{\"24\":1}}],[\"segment\",{\"1\":{\"357\":2}}],[\"selfmappingproperty表示中间表的哪个字段和当前表对应\",{\"1\":{\"374\":1}}],[\"selfmappingproperty\",{\"1\":{\"373\":1,\"374\":3}}],[\"selfproperty\",{\"1\":{\"337\":3,\"373\":1,\"374\":5}}],[\"selectexpression\",{\"1\":{\"396\":2}}],[\"select语句出现在where\",{\"1\":{\"395\":1}}],[\"select后置风格\",{\"0\":{\"395\":1}}],[\"select等会让当前表达式的内容是追加上去的而不是重新生成一个新的\",{\"1\":{\"383\":1}}],[\"select第二个参数表示需要映射的关系\",{\"1\":{\"338\":1}}],[\"select将表示需要讲表达式进行对应结果映射到topicgrouptestdto对象上\",{\"1\":{\"338\":1}}],[\"select将会过滤\",{\"1\":{\"217\":1}}],[\"selector说明\",{\"0\":{\"397\":1}}],[\"selector\",{\"1\":{\"273\":6,\"316\":2,\"317\":3}}],[\"selectone\",{\"1\":{\"184\":1}}],[\"selectonebyquery\",{\"1\":{\"184\":1}}],[\"selectpage\",{\"1\":{\"187\":1}}],[\"selectlist\",{\"1\":{\"185\":1,\"186\":1}}],[\"selectlistbyquery\",{\"1\":{\"185\":1,\"186\":1}}],[\"select查询\",{\"1\":{\"91\":1}}],[\"select\",{\"0\":{\"158\":1,\"391\":1,\"394\":1},\"1\":{\"65\":1,\"78\":3,\"84\":8,\"85\":1,\"88\":2,\"94\":1,\"96\":2,\"107\":1,\"108\":1,\"109\":2,\"117\":1,\"122\":1,\"127\":2,\"129\":1,\"133\":2,\"139\":1,\"150\":3,\"154\":2,\"156\":1,\"158\":2,\"194\":5,\"207\":1,\"259\":1,\"273\":2,\"284\":2,\"288\":1,\"299\":1,\"300\":2,\"301\":1,\"309\":3,\"317\":6,\"318\":2,\"322\":2,\"323\":2,\"325\":2,\"329\":2,\"330\":2,\"331\":2,\"332\":1,\"335\":4,\"337\":1,\"338\":4,\"340\":1,\"341\":1,\"342\":2,\"343\":2,\"344\":3,\"347\":2,\"348\":2,\"350\":2,\"351\":2,\"357\":10,\"359\":5,\"361\":2,\"362\":3,\"363\":4,\"375\":2,\"376\":2,\"377\":2,\"378\":3,\"379\":4,\"381\":6,\"382\":16,\"383\":8,\"386\":2,\"387\":2,\"388\":2,\"389\":2,\"390\":2,\"391\":2,\"392\":4,\"393\":4,\"396\":3,\"398\":10,\"399\":4,\"400\":1,\"402\":1,\"404\":3,\"405\":3,\"406\":4,\"407\":4,\"410\":2,\"411\":2,\"413\":2,\"414\":2,\"416\":3,\"417\":4,\"418\":4,\"419\":7,\"420\":5,\"423\":1,\"425\":1,\"434\":4,\"440\":2,\"445\":2,\"446\":1}}],[\"sequencecountline\",{\"1\":{\"310\":1,\"365\":2,\"366\":10}}],[\"see\",{\"1\":{\"284\":1}}],[\"sexname\",{\"1\":{\"275\":2,\"277\":2}}],[\"sex\",{\"1\":{\"274\":1,\"275\":1,\"277\":2}}],[\"serialversionuid\",{\"1\":{\"397\":1,\"447\":1}}],[\"serialize\",{\"1\":{\"295\":1,\"299\":1}}],[\"serializable>\",{\"1\":{\"273\":2}}],[\"serializable\",{\"1\":{\"199\":1,\"273\":2,\"397\":1,\"447\":1}}],[\"server\",{\"1\":{\"431\":1,\"437\":1,\"443\":1}}],[\"servertimezone=gmt\",{\"1\":{\"71\":1,\"194\":1,\"258\":1,\"260\":1,\"284\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"services\",{\"1\":{\"292\":2}}],[\"servicecollection\",{\"1\":{\"292\":1}}],[\"service<\",{\"1\":{\"272\":2}}],[\"seczi8lamkjgiksftziv9a==1elkqpkhc0+z7sjdqatspq==3v3uw7zfjo0tpx49wsmsmq==lthsv2kacrlroxap4dzfua==8ea6uue6hnyz5k+vzdqzva==si5j530hvuevzzzfaqnzna==vlcq13+om8wbony682wilq==\",{\"1\":{\"107\":1,\"109\":1}}],[\"secret\",{\"1\":{\"92\":2}}],[\"secret=\",{\"1\":{\"92\":1}}],[\"setfirstcityname\",{\"1\":{\"337\":1}}],[\"set<string>\",{\"1\":{\"273\":2}}],[\"set<class<\",{\"1\":{\"132\":2,\"262\":2,\"447\":2}}],[\"setrelationgroupsize\",{\"1\":{\"267\":1,\"269\":1}}],[\"setwarningbusy\",{\"1\":{\"267\":1,\"269\":1}}],[\"setmulticonnwaittimeoutmillis\",{\"1\":{\"267\":1,\"269\":1}}],[\"setmaxshardingroutecount\",{\"1\":{\"267\":1,\"269\":1}}],[\"setmaxshardingquerylimit\",{\"1\":{\"267\":1,\"269\":1}}],[\"setmaximumpoolsize\",{\"1\":{\"194\":1}}],[\"setquerylargecolumn\",{\"1\":{\"267\":1,\"269\":1}}],[\"setexecutorqueuesize\",{\"1\":{\"267\":1,\"269\":1}}],[\"setexecutorcorepoolsize\",{\"1\":{\"267\":1,\"269\":1}}],[\"setexecutormaximumpoolsize\",{\"1\":{\"267\":1,\"269\":1}}],[\"setdatasource\",{\"1\":{\"237\":1,\"243\":1}}],[\"setdefaulttrack\",{\"1\":{\"267\":1,\"269\":1}}],[\"setdefaultdatasourcemergepoolsize\",{\"1\":{\"267\":1,\"269\":1}}],[\"setdefaultdatasourcename\",{\"1\":{\"267\":1,\"269\":1}}],[\"setdefaultdatasource\",{\"1\":{\"194\":1,\"248\":1,\"267\":1,\"269\":1,\"284\":1,\"293\":1}}],[\"setdecrement\",{\"1\":{\"205\":2}}],[\"setdeletethrowerror\",{\"1\":{\"194\":1,\"248\":1,\"267\":1,\"269\":1,\"293\":1}}],[\"setdeleted\",{\"1\":{\"143\":1,\"144\":1,\"173\":1,\"174\":1,\"447\":1}}],[\"setdriverclassname\",{\"1\":{\"194\":1}}],[\"setprovince\",{\"1\":{\"337\":1}}],[\"setproperty\",{\"1\":{\"330\":2,\"331\":2,\"432\":7,\"438\":7}}],[\"setprintsql\",{\"1\":{\"194\":1,\"248\":1,\"267\":1,\"269\":1,\"293\":1}}],[\"setpublishtimeend\",{\"1\":{\"322\":2,\"325\":2}}],[\"setpublishtimebegin\",{\"1\":{\"322\":2,\"325\":1}}],[\"setpassword\",{\"1\":{\"194\":1}}],[\"setphone\",{\"1\":{\"93\":1,\"95\":1,\"106\":1,\"107\":1,\"109\":1,\"139\":1,\"143\":1,\"144\":1}}],[\"setphonesupportlike\",{\"1\":{\"84\":2}}],[\"setphonenotsupportlike\",{\"1\":{\"78\":1}}],[\"setjdbcurl\",{\"1\":{\"194\":1}}],[\"setnoversionerror\",{\"1\":{\"267\":1,\"269\":1}}],[\"setnickname\",{\"1\":{\"188\":2}}],[\"setname\",{\"1\":{\"78\":1,\"84\":1,\"111\":1,\"160\":3,\"200\":2,\"301\":1}}],[\"setinsertbatchthreshold\",{\"1\":{\"267\":1,\"269\":1}}],[\"setinsertstrategy\",{\"1\":{\"267\":1,\"269\":1}}],[\"setincrement\",{\"1\":{\"205\":2}}],[\"setistop\",{\"1\":{\"173\":1,\"174\":1}}],[\"setidcard\",{\"1\":{\"93\":1,\"106\":1,\"139\":1,\"143\":1,\"144\":1}}],[\"setid\",{\"1\":{\"78\":1,\"84\":1,\"93\":1,\"106\":1,\"111\":1,\"117\":1,\"133\":1,\"139\":1,\"143\":1,\"144\":1,\"159\":3,\"160\":5,\"161\":2,\"164\":1,\"166\":1,\"171\":3,\"173\":1,\"174\":1,\"200\":2,\"299\":1,\"301\":1,\"433\":1,\"439\":1,\"444\":1,\"447\":1}}],[\"setorderno\",{\"1\":{\"433\":1,\"439\":1,\"444\":1}}],[\"setorder\",{\"1\":{\"173\":1,\"174\":1,\"322\":1,\"325\":1}}],[\"setcities\",{\"1\":{\"337\":1}}],[\"setcolumns\",{\"1\":{\"207\":1}}],[\"setcontent\",{\"1\":{\"160\":1,\"173\":1,\"174\":2,\"322\":2,\"325\":2}}],[\"setcreateby\",{\"1\":{\"117\":1,\"119\":1,\"173\":1,\"174\":1,\"447\":1}}],[\"setcreatetime\",{\"1\":{\"93\":1,\"106\":1,\"117\":1,\"119\":1,\"139\":1,\"143\":1,\"144\":1,\"166\":1,\"170\":1,\"173\":1,\"174\":1,\"176\":1,\"177\":1,\"299\":1,\"301\":1,\"433\":1,\"434\":2,\"439\":1,\"440\":2,\"444\":1,\"445\":2,\"446\":1,\"447\":1}}],[\"setsort\",{\"1\":{\"329\":1}}],[\"setshardingexecutetimeoutmillis\",{\"1\":{\"267\":1,\"269\":1}}],[\"setstatuslist\",{\"1\":{\"322\":2,\"325\":2}}],[\"setstatus\",{\"1\":{\"173\":1,\"174\":1,\"433\":1,\"434\":1,\"439\":1,\"440\":1,\"444\":1,\"445\":1}}],[\"setstarttimejob\",{\"1\":{\"267\":1,\"269\":1}}],[\"setstar\",{\"1\":{\"173\":1,\"174\":1}}],[\"setstars\",{\"1\":{\"69\":1,\"117\":1,\"166\":1,\"170\":1,\"176\":1,\"177\":1,\"299\":1,\"301\":1}}],[\"setscore\",{\"1\":{\"173\":1,\"174\":1}}],[\"setsqlstrategy\",{\"1\":{\"159\":2,\"160\":4,\"171\":2,\"208\":2}}],[\"setversion\",{\"1\":{\"139\":1,\"143\":1,\"144\":1}}],[\"setuid\",{\"1\":{\"433\":1,\"439\":1,\"444\":1}}],[\"seturl\",{\"1\":{\"173\":1,\"174\":1}}],[\"setupdatebatchthreshold\",{\"1\":{\"267\":1,\"269\":1}}],[\"setupdateby\",{\"1\":{\"117\":2,\"119\":2,\"173\":1,\"174\":1,\"447\":2}}],[\"setupdatestrategy\",{\"1\":{\"267\":1,\"269\":1}}],[\"setupdatetime\",{\"1\":{\"117\":2,\"119\":2,\"173\":1,\"174\":1,\"447\":2}}],[\"setuserid\",{\"1\":{\"117\":3,\"122\":1,\"132\":1,\"133\":1}}],[\"setusername\",{\"1\":{\"93\":1,\"106\":1,\"139\":1,\"143\":1,\"144\":1,\"188\":2,\"194\":1}}],[\"setthrowifroutenotmatch\",{\"1\":{\"267\":1,\"269\":1}}],[\"settopictype\",{\"1\":{\"299\":1,\"301\":1}}],[\"settop\",{\"1\":{\"173\":1,\"174\":1}}],[\"settitle\",{\"1\":{\"117\":1,\"166\":1,\"170\":1,\"173\":1,\"174\":1,\"176\":1,\"177\":1,\"206\":3,\"299\":1,\"301\":1}}],[\"setting\",{\"1\":{\"16\":1,\"33\":1}}],[\"settenantid\",{\"1\":{\"117\":3,\"122\":1}}],[\"setasc\",{\"1\":{\"329\":1,\"330\":2,\"331\":2}}],[\"setage\",{\"1\":{\"200\":2,\"301\":1}}],[\"setalias\",{\"1\":{\"92\":1,\"356\":1}}],[\"setaddress\",{\"1\":{\"93\":1,\"106\":1,\"111\":1,\"139\":1,\"143\":1,\"144\":1}}],[\"setaddresssupportlike\",{\"1\":{\"84\":1}}],[\"setaddressnotsupportlike\",{\"1\":{\"78\":1}}],[\"set值\",{\"1\":{\"91\":1}}],[\"set\",{\"1\":{\"46\":1,\"66\":1,\"68\":4,\"69\":2,\"84\":3,\"91\":1,\"95\":1,\"96\":2,\"107\":1,\"109\":1,\"117\":3,\"119\":4,\"122\":3,\"127\":2,\"129\":2,\"132\":3,\"133\":2,\"140\":1,\"141\":6,\"143\":1,\"144\":2,\"160\":3,\"165\":1,\"177\":1,\"188\":2,\"192\":1,\"203\":3,\"204\":2,\"205\":4,\"206\":3,\"207\":1,\"208\":2,\"220\":1,\"221\":1,\"222\":1,\"245\":1,\"262\":2,\"274\":1,\"353\":2,\"354\":2,\"434\":2,\"440\":2,\"445\":2,\"447\":5}}],[\"s\",{\"1\":{\"46\":1,\"88\":5,\"194\":2,\"288\":10,\"332\":3,\"382\":1}}],[\"subqueryable\",{\"1\":{\"404\":2,\"405\":2}}],[\"subscript\",{\"0\":{\"27\":1}}],[\"surefire\",{\"1\":{\"286\":1}}],[\"sum连表统计\",{\"0\":{\"393\":1}}],[\"sumordefault\",{\"1\":{\"310\":1}}],[\"sumbigdecimalordefault\",{\"1\":{\"310\":1}}],[\"sum\",{\"1\":{\"85\":1,\"363\":2,\"383\":3,\"393\":1}}],[\"success\",{\"1\":{\"73\":1}}],[\"superscript\",{\"0\":{\"27\":1}}],[\"supportquerylike\",{\"0\":{\"225\":1},\"1\":{\"76\":1,\"83\":2}}],[\"supports\",{\"1\":{\"21\":1}}],[\"support\",{\"1\":{\"7\":1,\"33\":1,\"78\":18,\"84\":48,\"146\":1,\"303\":1}}],[\"stus\",{\"1\":{\"375\":1,\"377\":1}}],[\"student`\",{\"1\":{\"375\":1,\"376\":1,\"377\":1,\"379\":1,\"382\":4}}],[\"studentid=3\",{\"1\":{\"375\":1}}],[\"studentid=2\",{\"1\":{\"375\":1}}],[\"studentid=1\",{\"1\":{\"375\":1}}],[\"studentid\",{\"1\":{\"374\":3,\"382\":1}}],[\"student\",{\"1\":{\"299\":2,\"374\":2,\"375\":1,\"382\":1}}],[\"store\",{\"1\":{\"357\":8}}],[\"storeid\",{\"1\":{\"357\":1}}],[\"stdlib\",{\"1\":{\"286\":1}}],[\"stdoutimpl\",{\"1\":{\"284\":1}}],[\"stdout\",{\"1\":{\"284\":1}}],[\"style>\",{\"1\":{\"286\":1}}],[\"style>official<\",{\"1\":{\"286\":1}}],[\"stylize\",{\"0\":{\"41\":1}}],[\"status=1\",{\"1\":{\"399\":2}}],[\"statusnotlist没有对应的属性名称所以需要改写为映射到status\",{\"1\":{\"324\":1}}],[\"statusnotlist=new\",{\"1\":{\"321\":1,\"324\":1}}],[\"statuslist没有对应的属性名称所以需要改写为映射到status\",{\"1\":{\"324\":1}}],[\"statuslist=new\",{\"1\":{\"321\":1,\"324\":1}}],[\"status\",{\"1\":{\"321\":1,\"323\":1,\"324\":3,\"385\":1,\"397\":1,\"398\":1,\"399\":1}}],[\"statement\",{\"1\":{\"161\":1}}],[\"staticloggerbinder\",{\"1\":{\"284\":2}}],[\"static\",{\"1\":{\"88\":2,\"92\":1,\"117\":6,\"132\":3,\"194\":1,\"258\":1,\"299\":1,\"323\":2,\"330\":1,\"331\":1,\"397\":1,\"447\":2}}],[\"star=2\",{\"1\":{\"399\":2}}],[\"star\",{\"1\":{\"321\":1,\"324\":1,\"330\":1,\"385\":1,\"397\":1,\"399\":1}}],[\"stars=123\",{\"1\":{\"299\":1,\"300\":1,\"301\":1}}],[\"stars=99\",{\"1\":{\"69\":1}}],[\"stars6\",{\"1\":{\"282\":1}}],[\"stars4\",{\"1\":{\"282\":1}}],[\"stars3\",{\"1\":{\"282\":1,\"284\":1}}],[\"stars2\",{\"1\":{\"282\":1,\"284\":1}}],[\"stars\",{\"1\":{\"69\":1,\"132\":1,\"162\":2,\"166\":2,\"170\":1,\"176\":1,\"177\":3,\"201\":2,\"213\":1,\"216\":1,\"217\":1,\"259\":1,\"282\":1,\"299\":1,\"300\":2,\"301\":1,\"392\":1,\"397\":1,\"416\":2,\"419\":1}}],[\"stargazers\",{\"1\":{\"57\":1}}],[\"start\",{\"1\":{\"258\":1,\"260\":1}}],[\"starttimejob\",{\"1\":{\"246\":1}}],[\"starting\",{\"1\":{\"47\":2}}],[\"starterconfigurer\",{\"1\":{\"292\":3}}],[\"starter框架实现了一个空的starterconfigurer\",{\"1\":{\"292\":1}}],[\"starter<\",{\"1\":{\"240\":1,\"242\":1,\"266\":1,\"272\":5}}],[\"starter\",{\"1\":{\"10\":1,\"245\":1,\"268\":1,\"272\":3}}],[\"streamresult\",{\"1\":{\"402\":2}}],[\"stream\",{\"1\":{\"276\":1}}],[\"strict\",{\"1\":{\"324\":1,\"327\":1}}],[\"strictly\",{\"1\":{\"260\":2}}],[\"strictly连接数限制\",{\"1\":{\"246\":1}}],[\"strictly内存严格模式\",{\"1\":{\"246\":1}}],[\"stringutils\",{\"1\":{\"447\":4}}],[\"stringdatasourcehashmap\",{\"1\":{\"432\":3,\"438\":3}}],[\"stringdatasourceentry\",{\"1\":{\"432\":3,\"438\":3}}],[\"string那么就需要select\",{\"1\":{\"406\":1}}],[\"string>\",{\"1\":{\"276\":1,\"334\":4,\"424\":1,\"425\":1}}],[\"string\",{\"0\":{\"311\":1,\"312\":1},\"1\":{\"69\":2,\"72\":18,\"78\":7,\"83\":9,\"84\":18,\"88\":13,\"92\":6,\"93\":6,\"94\":2,\"95\":6,\"96\":6,\"106\":5,\"107\":3,\"108\":1,\"109\":7,\"111\":3,\"117\":19,\"119\":7,\"122\":15,\"127\":3,\"129\":3,\"132\":9,\"133\":5,\"139\":6,\"140\":5,\"141\":6,\"143\":6,\"144\":7,\"154\":3,\"158\":5,\"159\":2,\"160\":4,\"161\":1,\"162\":2,\"163\":2,\"164\":1,\"165\":2,\"166\":3,\"167\":2,\"168\":20,\"169\":4,\"170\":2,\"171\":2,\"173\":7,\"174\":19,\"193\":2,\"194\":5,\"201\":2,\"203\":1,\"204\":1,\"205\":4,\"206\":9,\"207\":1,\"208\":2,\"213\":2,\"216\":2,\"217\":2,\"257\":1,\"258\":1,\"259\":3,\"262\":3,\"273\":6,\"275\":8,\"282\":1,\"284\":1,\"288\":7,\"292\":2,\"293\":2,\"299\":5,\"300\":5,\"301\":5,\"309\":2,\"310\":1,\"315\":1,\"317\":18,\"318\":6,\"321\":2,\"322\":2,\"323\":10,\"324\":2,\"325\":3,\"329\":2,\"330\":2,\"331\":2,\"332\":2,\"334\":3,\"335\":3,\"338\":2,\"341\":1,\"342\":1,\"343\":2,\"344\":2,\"348\":1,\"351\":1,\"353\":1,\"354\":3,\"357\":10,\"359\":13,\"362\":2,\"374\":12,\"375\":3,\"376\":3,\"377\":2,\"378\":5,\"379\":8,\"381\":40,\"382\":25,\"383\":3,\"385\":3,\"392\":2,\"397\":8,\"398\":5,\"399\":6,\"402\":2,\"404\":1,\"405\":1,\"406\":3,\"407\":2,\"411\":1,\"414\":1,\"416\":2,\"417\":1,\"418\":2,\"419\":4,\"420\":2,\"423\":1,\"425\":1,\"432\":4,\"433\":22,\"434\":6,\"438\":4,\"439\":22,\"440\":4,\"444\":22,\"445\":4,\"446\":2,\"447\":14}}],[\"strategyname\",{\"1\":{\"132\":1,\"217\":1,\"447\":1}}],[\"strategy\",{\"0\":{\"128\":1},\"1\":{\"76\":1,\"83\":4,\"132\":1,\"216\":1,\"217\":1,\"260\":2,\"397\":1,\"447\":1}}],[\"structure\",{\"0\":{\"48\":1},\"1\":{\"18\":1}}],[\"singletonlist\",{\"1\":{\"348\":1,\"351\":1,\"411\":1,\"414\":1}}],[\"simpletransdiver\",{\"1\":{\"273\":1}}],[\"simpletransservice\",{\"1\":{\"273\":1}}],[\"size大\",{\"1\":{\"246\":1}}],[\"size\",{\"1\":{\"33\":1,\"260\":5,\"431\":1,\"437\":1,\"443\":1}}],[\"sites\",{\"1\":{\"18\":1}}],[\"sidebar\",{\"1\":{\"16\":1,\"48\":1}}],[\"sortconfig1\",{\"1\":{\"330\":4,\"331\":4}}],[\"sortconfig\",{\"1\":{\"330\":10,\"331\":10}}],[\"sort\",{\"1\":{\"329\":3,\"332\":5}}],[\"socket\",{\"1\":{\"284\":1}}],[\"sourcedirectory>\",{\"1\":{\"286\":1}}],[\"sourceencoding>\",{\"1\":{\"286\":1}}],[\"sourceencoding>utf\",{\"1\":{\"286\":1}}],[\"source\",{\"1\":{\"260\":2}}],[\"sources下生成topicproxy\",{\"1\":{\"193\":1}}],[\"sonatype\",{\"1\":{\"234\":1,\"239\":1,\"241\":1,\"252\":1,\"265\":1}}],[\"solon所有配置\",{\"0\":{\"263\":1}}],[\"solon启动\",{\"0\":{\"258\":1}}],[\"solonjava\",{\"1\":{\"251\":1}}],[\"solon\",{\"1\":{\"233\":1,\"255\":1,\"258\":2,\"260\":1}}],[\"solon配置easy\",{\"0\":{\"260\":1}}],[\"solon配置\",{\"1\":{\"8\":1}}],[\"so\",{\"1\":{\"18\":2}}],[\"sometitle\",{\"1\":{\"317\":6,\"318\":2}}],[\"some\",{\"1\":{\"16\":1}}],[\"springconnectionmanager\",{\"1\":{\"267\":1,\"269\":1}}],[\"springdatasourceunitfactory\",{\"1\":{\"267\":1,\"269\":1}}],[\"spring\",{\"0\":{\"99\":1,\"240\":1,\"242\":1,\"247\":1,\"266\":1},\"1\":{\"10\":6,\"109\":3,\"233\":1,\"245\":1,\"268\":6,\"272\":3,\"431\":1,\"437\":1,\"443\":1}}],[\"springframework\",{\"1\":{\"10\":7,\"268\":7,\"272\":4}}],[\"springboot启动后我们可以通过数据库或者其他方式来获取链接字符串来手动构建datasource\",{\"1\":{\"432\":1,\"438\":1}}],[\"springboot环境\",{\"0\":{\"292\":1}}],[\"springboot环境starter已经包含了\",{\"1\":{\"237\":1,\"243\":1}}],[\"springboot下必须用来支持事务\",{\"1\":{\"267\":2}}],[\"springboot多数据源\",{\"0\":{\"267\":1}}],[\"springboot如果当前方法没有添加\",{\"1\":{\"200\":1}}],[\"springboot\",{\"0\":{\"10\":1,\"268\":1,\"288\":1,\"296\":1},\"1\":{\"69\":1,\"240\":1,\"242\":1,\"266\":1,\"272\":1}}],[\"springboot配置\",{\"0\":{\"264\":1},\"1\":{\"8\":1}}],[\"sql1\",{\"1\":{\"383\":2}}],[\"sqlquerymap\",{\"1\":{\"350\":1,\"351\":1,\"413\":1,\"414\":1}}],[\"sqlquery\",{\"1\":{\"347\":1,\"348\":1,\"410\":1,\"411\":1}}],[\"sql4ktfunc\",{\"1\":{\"316\":2}}],[\"sql4jfunc\",{\"1\":{\"316\":2,\"317\":1,\"318\":1}}],[\"sqlclientfunc\",{\"1\":{\"316\":2,\"317\":1}}],[\"sqlclientapifactory\",{\"1\":{\"290\":1}}],[\"sqlconversion\",{\"1\":{\"92\":1}}],[\"sqlsugar\",{\"1\":{\"306\":1}}],[\"sqlsegmentas\",{\"0\":{\"355\":1},\"1\":{\"317\":3,\"318\":1}}],[\"sqlsegmentfactory\",{\"1\":{\"290\":1}}],[\"sqlserver\",{\"1\":{\"8\":2}}],[\"sqlsyntaxerrorexception\",{\"1\":{\"284\":1}}],[\"sql没有配置对应的log也不会打印\",{\"1\":{\"260\":1}}],[\"sqlexecute\",{\"1\":{\"353\":1,\"354\":1}}],[\"sqlexecutestrategyenum\",{\"1\":{\"156\":2,\"159\":2,\"160\":4,\"171\":2,\"245\":2}}],[\"sqlexpression\",{\"1\":{\"396\":2}}],[\"sqlexpressioninvokefactory\",{\"1\":{\"290\":1}}],[\"sqlexpression1<columnsetter<object>>\",{\"1\":{\"132\":1,\"262\":1,\"447\":1}}],[\"sqlexpression1<wherepredicate<object>>\",{\"1\":{\"132\":1,\"262\":1,\"447\":1}}],[\"sqlexception\",{\"1\":{\"73\":1,\"402\":1}}],[\"sqlwherepredicate\",{\"1\":{\"122\":2}}],[\"sqlnativesegment的o表就是第一张表\",{\"1\":{\"357\":1}}],[\"sqlnativesegment一次个参数为原生数据库片段\",{\"1\":{\"356\":1}}],[\"sqlnativesegment\",{\"0\":{\"356\":1},\"1\":{\"92\":2,\"111\":1,\"355\":1,\"357\":7}}],[\"sqlproxyfunc\",{\"1\":{\"316\":2,\"317\":1}}],[\"sqlpropertyconverter\",{\"1\":{\"91\":6,\"92\":6,\"111\":3}}],[\"sqlparameter\",{\"1\":{\"91\":3,\"92\":3}}],[\"sqlfuncexpression1<sqlfillselector\",{\"1\":{\"337\":2}}],[\"sqlfunc\",{\"1\":{\"88\":2}}],[\"sqlite\",{\"1\":{\"8\":4}}],[\"sql\",{\"1\":{\"8\":9,\"88\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":2,\"158\":2,\"242\":1,\"245\":1,\"260\":1,\"266\":1,\"284\":1,\"309\":2,\"315\":1,\"323\":1,\"329\":1,\"330\":1,\"331\":1,\"332\":3,\"343\":2,\"344\":2,\"357\":5,\"383\":4,\"422\":1}}],[\"029025\",{\"1\":{\"445\":1}}],[\"02`\",{\"1\":{\"444\":2}}],[\"02\",{\"1\":{\"439\":10}}],[\"02t15\",{\"1\":{\"444\":10,\"445\":2}}],[\"02t23\",{\"1\":{\"133\":1}}],[\"02t01\",{\"1\":{\"72\":6,\"173\":2,\"174\":6}}],[\"00\",{\"1\":{\"442\":1}}],[\"00`\",{\"1\":{\"433\":7,\"434\":3,\"444\":2,\"445\":2}}],[\"0000000000\",{\"1\":{\"139\":2,\"140\":1,\"143\":2,\"144\":2}}],[\"0d93119a\",{\"1\":{\"354\":1}}],[\"079\",{\"1\":{\"359\":1}}],[\"07\",{\"1\":{\"322\":4,\"325\":3,\"359\":7}}],[\"07t23\",{\"1\":{\"106\":1}}],[\"0请修改项目jdk和pom的一致\",{\"1\":{\"285\":1}}],[\"0<\",{\"1\":{\"255\":1,\"286\":5}}],[\"05t08\",{\"1\":{\"440\":2}}],[\"05t06\",{\"1\":{\"359\":5}}],[\"05\",{\"1\":{\"206\":1,\"207\":1,\"299\":2,\"300\":1,\"301\":2,\"322\":4}}],[\"059\",{\"1\":{\"106\":1}}],[\"06t08\",{\"1\":{\"433\":10,\"434\":2}}],[\"06\",{\"1\":{\"170\":1,\"207\":1,\"208\":1}}],[\"03`\",{\"1\":{\"444\":2}}],[\"037\",{\"1\":{\"139\":1}}],[\"03\",{\"1\":{\"133\":1,\"167\":1,\"168\":10,\"169\":2,\"206\":1,\"208\":1}}],[\"03t22\",{\"1\":{\"122\":2}}],[\"03t21\",{\"1\":{\"117\":3,\"119\":1}}],[\"0表示未被删除\",{\"1\":{\"128\":1,\"217\":1}}],[\"04`\",{\"1\":{\"444\":2,\"445\":2}}],[\"04t22\",{\"1\":{\"439\":10}}],[\"04\",{\"1\":{\"106\":1,\"109\":1,\"117\":3,\"119\":1,\"122\":2,\"133\":2,\"139\":1,\"140\":1,\"143\":1,\"144\":2,\"442\":1}}],[\"090\",{\"1\":{\"359\":1}}],[\"09\",{\"1\":{\"93\":1,\"133\":1,\"433\":10,\"434\":2,\"439\":10,\"440\":2,\"444\":10,\"445\":2}}],[\"08t10\",{\"1\":{\"207\":1}}],[\"08t14\",{\"1\":{\"143\":1,\"144\":1}}],[\"08t13\",{\"1\":{\"139\":1,\"140\":1}}],[\"08t09\",{\"1\":{\"109\":1}}],[\"08\",{\"1\":{\"93\":1,\"94\":1,\"95\":1,\"106\":1,\"109\":1,\"170\":1}}],[\"0g==siabg+vnznx\",{\"1\":{\"84\":2}}],[\"01`\",{\"1\":{\"433\":3,\"434\":3,\"444\":2,\"446\":2}}],[\"01t01\",{\"1\":{\"418\":1,\"419\":1,\"420\":1}}],[\"01t23\",{\"1\":{\"133\":1}}],[\"01\",{\"1\":{\"72\":18,\"143\":1,\"173\":6,\"174\":18,\"418\":2,\"419\":2,\"420\":2,\"442\":1}}],[\"0\",{\"0\":{\"202\":1},\"1\":{\"3\":1,\"13\":2,\"52\":1,\"71\":2,\"73\":1,\"78\":1,\"84\":1,\"92\":2,\"108\":1,\"122\":1,\"129\":2,\"133\":1,\"156\":1,\"165\":2,\"166\":1,\"167\":2,\"168\":1,\"169\":2,\"173\":1,\"192\":1,\"194\":4,\"196\":3,\"246\":2,\"255\":1,\"258\":2,\"260\":2,\"272\":1,\"280\":1,\"284\":4,\"285\":1,\"286\":10,\"288\":1,\"299\":1,\"301\":1,\"317\":3,\"318\":1,\"322\":2,\"324\":1,\"325\":2,\"328\":1,\"331\":1,\"335\":3,\"357\":7,\"371\":1,\"402\":7,\"406\":1,\"417\":1,\"418\":1,\"419\":1,\"420\":1,\"423\":1,\"425\":1,\"431\":2,\"432\":2,\"433\":7,\"437\":2,\"438\":2,\"439\":7,\"443\":2,\"444\":7}}],[\"2^以上版本支持conditionaccepter\",{\"1\":{\"323\":1}}],[\"2<\",{\"1\":{\"286\":3}}],[\"2就是help\",{\"1\":{\"275\":1}}],[\"2～\",{\"1\":{\"251\":1}}],[\"2条\",{\"1\":{\"206\":1}}],[\"23t22\",{\"1\":{\"299\":2,\"300\":1,\"301\":2}}],[\"23t21\",{\"1\":{\"168\":1}}],[\"23\",{\"1\":{\"188\":2,\"206\":1,\"445\":1}}],[\"232\",{\"1\":{\"187\":2}}],[\"233\",{\"1\":{\"187\":1}}],[\"235\",{\"1\":{\"187\":1}}],[\"234\",{\"1\":{\"187\":1}}],[\"236\",{\"1\":{\"187\":1}}],[\"239\",{\"1\":{\"185\":1,\"187\":1}}],[\"237\",{\"1\":{\"185\":1}}],[\"238\",{\"1\":{\"185\":2,\"187\":1}}],[\"24<\",{\"1\":{\"192\":1,\"280\":3,\"281\":1,\"286\":4}}],[\"24\",{\"1\":{\"188\":3,\"322\":4,\"359\":1,\"381\":1}}],[\"246\",{\"1\":{\"187\":1}}],[\"244\",{\"1\":{\"185\":2}}],[\"247\",{\"1\":{\"185\":2}}],[\"243\",{\"1\":{\"185\":2,\"187\":1}}],[\"248\",{\"1\":{\"185\":2}}],[\"249\",{\"1\":{\"185\":2}}],[\"245\",{\"1\":{\"185\":4}}],[\"24t21\",{\"1\":{\"168\":1}}],[\"26\",{\"1\":{\"440\":1}}],[\"26<\",{\"1\":{\"301\":1}}],[\"266\",{\"1\":{\"184\":1}}],[\"268\",{\"1\":{\"184\":1}}],[\"25提供了自定义pageresult<tresult>结果\",{\"1\":{\"367\":1}}],[\"259\",{\"1\":{\"185\":1}}],[\"257\",{\"1\":{\"184\":1}}],[\"255\",{\"1\":{\"184\":1}}],[\"256\",{\"1\":{\"184\":1,\"185\":1}}],[\"25\",{\"1\":{\"184\":1,\"185\":1,\"188\":1,\"359\":1}}],[\"25t21\",{\"1\":{\"168\":1}}],[\"2w\",{\"1\":{\"183\":1}}],[\"2223\",{\"1\":{\"316\":4}}],[\"222\",{\"1\":{\"316\":4,\"317\":12,\"318\":4}}],[\"22t21\",{\"1\":{\"168\":1}}],[\"22\",{\"1\":{\"168\":10,\"188\":1,\"286\":2}}],[\"27<\",{\"1\":{\"272\":1}}],[\"27t22\",{\"1\":{\"206\":1}}],[\"270\",{\"1\":{\"184\":1}}],[\"272\",{\"1\":{\"184\":1}}],[\"278\",{\"1\":{\"184\":1}}],[\"275\",{\"1\":{\"144\":1}}],[\"27\",{\"1\":{\"122\":2,\"184\":1,\"185\":1,\"188\":3}}],[\"28<\",{\"1\":{\"280\":1,\"286\":1}}],[\"281\",{\"1\":{\"184\":1}}],[\"288\",{\"1\":{\"184\":1}}],[\"287\",{\"1\":{\"167\":1}}],[\"28\",{\"1\":{\"117\":3,\"184\":2}}],[\"21t21\",{\"1\":{\"168\":1}}],[\"21\",{\"1\":{\"117\":1,\"119\":1,\"187\":1,\"188\":3}}],[\"2001\",{\"1\":{\"286\":1}}],[\"200\",{\"1\":{\"173\":5,\"174\":13,\"318\":2}}],[\"20000\",{\"1\":{\"187\":3}}],[\"2000\",{\"1\":{\"72\":6,\"173\":2,\"174\":6}}],[\"20t21\",{\"1\":{\"168\":1}}],[\"20\",{\"1\":{\"122\":2,\"187\":2,\"188\":3,\"194\":1,\"284\":1,\"361\":3,\"362\":1,\"363\":3,\"372\":1,\"398\":3,\"399\":2,\"445\":2}}],[\"2023\",{\"1\":{\"93\":1,\"95\":1,\"106\":1,\"109\":1,\"117\":4,\"119\":2,\"122\":2,\"133\":2,\"139\":1,\"140\":1,\"143\":1,\"144\":1,\"167\":1,\"168\":10,\"169\":2,\"170\":1,\"206\":1,\"207\":1,\"208\":1,\"299\":1,\"301\":1,\"322\":4,\"325\":3,\"359\":5,\"433\":10,\"434\":2,\"439\":10,\"440\":2,\"444\":10,\"445\":2}}],[\"2020\",{\"1\":{\"46\":1,\"402\":1,\"418\":2,\"419\":2,\"420\":2,\"479\":1}}],[\"2b8\",{\"1\":{\"71\":1,\"194\":1,\"258\":1,\"260\":1,\"284\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1,\"443\":1}}],[\"294\",{\"1\":{\"184\":1}}],[\"298\",{\"1\":{\"184\":1}}],[\"291\",{\"1\":{\"184\":1}}],[\"29\",{\"1\":{\"10\":12,\"184\":2,\"185\":3,\"188\":1,\"268\":12,\"444\":10}}],[\"2\",{\"0\":{\"164\":1,\"168\":1,\"204\":1},\"1\":{\"3\":1,\"17\":14,\"52\":1,\"72\":6,\"73\":1,\"83\":1,\"84\":9,\"109\":2,\"133\":1,\"140\":1,\"141\":4,\"143\":1,\"144\":2,\"168\":1,\"169\":1,\"173\":4,\"174\":9,\"202\":1,\"203\":3,\"204\":2,\"205\":12,\"246\":1,\"250\":1,\"251\":2,\"259\":2,\"272\":5,\"274\":5,\"275\":1,\"277\":2,\"301\":1,\"310\":1,\"317\":1,\"322\":4,\"323\":2,\"325\":5,\"357\":2,\"359\":1,\"362\":1,\"363\":1,\"371\":1,\"372\":1,\"375\":3,\"376\":1,\"377\":3,\"378\":2,\"379\":4,\"381\":4,\"382\":7,\"383\":4,\"398\":15,\"399\":8,\"400\":1,\"402\":4,\"406\":1,\"425\":1,\"433\":14,\"434\":12,\"439\":11,\"440\":5,\"444\":5,\"445\":5,\"451\":14,\"465\":1}}],[\"许可证\",{\"0\":{\"3\":1}}],[\"项目主页\",{\"0\":{\"0\":1,\"49\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
